
TIMER_BASE_US.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080016f4  080016f4  000116f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001718  08001718  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001718  08001718  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001718  08001718  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001718  08001718  00011718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800171c  0800171c  0001171c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  0800172c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  0800172c  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076af  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001301  00000000  00000000  000276e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  000289e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000808  00000000  00000000  00029298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012f15  00000000  00000000  00029aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f09  00000000  00000000  0003c9b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ada4  00000000  00000000  000428be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002380  00000000  00000000  000ad6e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080016dc 	.word	0x080016dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080016dc 	.word	0x080016dc

0800014c <main>:

/* TIMER3 can be used for basic timer
 * See STM32 cross-series timer overview document for more details */
TIM_HandleTypeDef htimer3;

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000150:	f000 f98a 	bl	8000468 <HAL_Init>
	SystemClock_Config(SYS_CLOCK_FREQ_48_MHZ);
 8000154:	2030      	movs	r0, #48	; 0x30
 8000156:	f000 f80d 	bl	8000174 <SystemClock_Config>
	GPIO_Init();
 800015a:	f000 f88f 	bl	800027c <GPIO_Init>
	TIMER3_Init();
 800015e:	f000 f8b7 	bl	80002d0 <TIMER3_Init>

	HAL_TIM_Base_Start(&htimer3);
 8000162:	4803      	ldr	r0, [pc, #12]	; (8000170 <main+0x24>)
 8000164:	f001 f8b9 	bl	80012da <HAL_TIM_Base_Start>

	//Lets start timer in IT mode
	HAL_TIM_Base_Start_IT(&htimer3);
 8000168:	4801      	ldr	r0, [pc, #4]	; (8000170 <main+0x24>)
 800016a:	f001 f8d9 	bl	8001320 <HAL_TIM_Base_Start_IT>

  	while(1);
 800016e:	e7fe      	b.n	800016e <main+0x22>
 8000170:	20000028 	.word	0x20000028

08000174 <SystemClock_Config>:

  	return 0;
}

/* For Cortex-M3 (STM32F1xx)*/
void SystemClock_Config(uint8_t clock_freq){
 8000174:	b580      	push	{r7, lr}
 8000176:	b092      	sub	sp, #72	; 0x48
 8000178:	af00      	add	r7, sp, #0
 800017a:	4603      	mov	r3, r0
 800017c:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency = 0;
 800017e:	2300      	movs	r3, #0
 8000180:	647b      	str	r3, [r7, #68]	; 0x44

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000182:	2302      	movs	r3, #2
 8000184:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 8000186:	2301      	movs	r3, #1
 8000188:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800018a:	2310      	movs	r3, #16
 800018c:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800018e:	2302      	movs	r3, #2
 8000190:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000192:	2300      	movs	r3, #0
 8000194:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq){
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	2b30      	cmp	r3, #48	; 0x30
 800019a:	d016      	beq.n	80001ca <SystemClock_Config+0x56>
 800019c:	2b40      	cmp	r3, #64	; 0x40
 800019e:	d026      	beq.n	80001ee <SystemClock_Config+0x7a>
 80001a0:	2b14      	cmp	r3, #20
 80001a2:	d000      	beq.n	80001a6 <SystemClock_Config+0x32>

			break;

		default:

			return;
 80001a4:	e057      	b.n	8000256 <SystemClock_Config+0xe2>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL5;
 80001a6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80001aa:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80001ac:	230f      	movs	r3, #15
 80001ae:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001b0:	2302      	movs	r3, #2
 80001b2:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80001b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001bc:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80001be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001c2:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80001c8:	e023      	b.n	8000212 <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL12;
 80001ca:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80001ce:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80001d0:	230f      	movs	r3, #15
 80001d2:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	2302      	movs	r3, #2
 80001d6:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80001e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e6:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_1;
 80001e8:	2301      	movs	r3, #1
 80001ea:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80001ec:	e011      	b.n	8000212 <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL16;
 80001ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001f2:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80001f4:	230f      	movs	r3, #15
 80001f6:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f8:	2302      	movs	r3, #2
 80001fa:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000204:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020a:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_2;
 800020c:	2302      	movs	r3, #2
 800020e:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000210:	bf00      	nop

	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 8000212:	f107 031c 	add.w	r3, r7, #28
 8000216:	4618      	mov	r0, r3
 8000218:	f000 fc40 	bl	8000a9c <HAL_RCC_OscConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0xb2>
		Error_Handler();
 8000222:	f000 f86f 	bl	8000304 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 8000226:	f107 0308 	add.w	r3, r7, #8
 800022a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800022c:	4618      	mov	r0, r3
 800022e:	f000 feb5 	bl	8000f9c <HAL_RCC_ClockConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0xc8>
		Error_Handler();
 8000238:	f000 f864 	bl	8000304 <Error_Handler>
	}

	//Systick configuration
  	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800023c:	f000 fffa 	bl	8001234 <HAL_RCC_GetHCLKFreq>
 8000240:	4602      	mov	r2, r0
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <SystemClock_Config+0xe8>)
 8000244:	fba3 2302 	umull	r2, r3, r3, r2
 8000248:	099b      	lsrs	r3, r3, #6
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fa6f 	bl	800072e <HAL_SYSTICK_Config>
  	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000250:	2004      	movs	r0, #4
 8000252:	f000 fa79 	bl	8000748 <HAL_SYSTICK_CLKSourceConfig>

}
 8000256:	3748      	adds	r7, #72	; 0x48
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	10624dd3 	.word	0x10624dd3

08000260 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000268:	2104      	movs	r1, #4
 800026a:	4803      	ldr	r0, [pc, #12]	; (8000278 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800026c:	f000 fbfe 	bl	8000a6c <HAL_GPIO_TogglePin>

}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40010800 	.word	0x40010800

0800027c <GPIO_Init>:

void GPIO_Init(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef ledgpio;

	/* GPIOA clock enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <GPIO_Init+0x4c>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <GPIO_Init+0x4c>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	6193      	str	r3, [r2, #24]
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <GPIO_Init+0x4c>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	f003 0304 	and.w	r3, r3, #4
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]

    /* High Level GPIO Initialization */
	ledgpio.Pin = GPIO_PIN_2;
 800029a:	2304      	movs	r3, #4
 800029c:	60bb      	str	r3, [r7, #8]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800029e:	2301      	movs	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
	ledgpio.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
	ledgpio.Speed = GPIO_SPEED_FREQ_LOW;
 80002a6:	2302      	movs	r3, #2
 80002a8:	617b      	str	r3, [r7, #20]

	/* Init GPIO */
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	4619      	mov	r1, r3
 80002b0:	4806      	ldr	r0, [pc, #24]	; (80002cc <GPIO_Init+0x50>)
 80002b2:	f000 fa71 	bl	8000798 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2104      	movs	r1, #4
 80002ba:	4804      	ldr	r0, [pc, #16]	; (80002cc <GPIO_Init+0x50>)
 80002bc:	f000 fbbe 	bl	8000a3c <HAL_GPIO_WritePin>
}
 80002c0:	bf00      	nop
 80002c2:	3718      	adds	r7, #24
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40010800 	.word	0x40010800

080002d0 <TIMER3_Init>:

void TIMER3_Init(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
 	 * This math results in 1600000 and should be placed in TIMx_ARR register, but this value is greater than 65535;
 	 * That's why you should increase or decrease the prescaler value.
 	 * */

	/* Create a time base for 10us with SYSCLK = 48MHz */
	htimer3.Instance = TIM3;
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <TIMER3_Init+0x2c>)
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <TIMER3_Init+0x30>)
 80002d8:	601a      	str	r2, [r3, #0]
	htimer3.Init.Prescaler = 9;
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <TIMER3_Init+0x2c>)
 80002dc:	2209      	movs	r2, #9
 80002de:	605a      	str	r2, [r3, #4]
	htimer3.Init.Period = 48-1;	// The update event happens after one time gap or one time period
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <TIMER3_Init+0x2c>)
 80002e2:	222f      	movs	r2, #47	; 0x2f
 80002e4:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer3) != HAL_OK){
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <TIMER3_Init+0x2c>)
 80002e8:	f000 ffcc 	bl	8001284 <HAL_TIM_Base_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <TIMER3_Init+0x26>
		Error_Handler();
 80002f2:	f000 f807 	bl	8000304 <Error_Handler>
	}

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000028 	.word	0x20000028
 8000300:	40000400 	.word	0x40000400

08000304 <Error_Handler>:

void Error_Handler(void){
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0

}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <HAL_MspInit>:
#include "stm32f1xx_hal_tim.h"

//Uncomment the #define HAL_TIM_MODULE_ENABLED in stm32f1xx_hal_conf.h
#include "stm32f1xx_hal_conf.h"

void HAL_MspInit(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000314:	2003      	movs	r0, #3
 8000316:	f000 f9d5 	bl	80006c4 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <HAL_MspInit+0x40>)
 800031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031e:	4a0c      	ldr	r2, [pc, #48]	; (8000350 <HAL_MspInit+0x40>)
 8000320:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000324:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2100      	movs	r1, #0
 800032a:	f06f 000b 	mvn.w	r0, #11
 800032e:	f000 f9d4 	bl	80006da <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	2100      	movs	r1, #0
 8000336:	f06f 000a 	mvn.w	r0, #10
 800033a:	f000 f9ce 	bl	80006da <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800033e:	2200      	movs	r2, #0
 8000340:	2100      	movs	r1, #0
 8000342:	f06f 0009 	mvn.w	r0, #9
 8000346:	f000 f9c8 	bl	80006da <HAL_NVIC_SetPriority>

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer){
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM3_CLK_ENABLE();
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <HAL_TIM_Base_MspInit+0x38>)
 800035e:	69db      	ldr	r3, [r3, #28]
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <HAL_TIM_Base_MspInit+0x38>)
 8000362:	f043 0302 	orr.w	r3, r3, #2
 8000366:	61d3      	str	r3, [r2, #28]
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <HAL_TIM_Base_MspInit+0x38>)
 800036a:	69db      	ldr	r3, [r3, #28]
 800036c:	f003 0302 	and.w	r3, r3, #2
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000374:	201d      	movs	r0, #29
 8000376:	f000 f9cc 	bl	8000712 <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	210f      	movs	r1, #15
 800037e:	201d      	movs	r0, #29
 8000380:	f000 f9ab 	bl	80006da <HAL_NVIC_SetPriority>

}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40021000 	.word	0x40021000

08000390 <SysTick_Handler>:
#include "main.h"
#include "stm32f1xx_it.h"

extern TIM_HandleTypeDef htimer3;

void SysTick_Handler(void){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000394:	f000 f8ae 	bl	80004f4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000398:	f000 f9f2 	bl	8000780 <HAL_SYSTICK_IRQHandler>

}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&htimer3);
 80003a4:	4802      	ldr	r0, [pc, #8]	; (80003b0 <TIM3_IRQHandler+0x10>)
 80003a6:	f000 ffde 	bl	8001366 <HAL_TIM_IRQHandler>

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000028 	.word	0x20000028

080003b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <SystemInit+0x5c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a14      	ldr	r2, [pc, #80]	; (8000410 <SystemInit+0x5c>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <SystemInit+0x5c>)
 80003c6:	685a      	ldr	r2, [r3, #4]
 80003c8:	4911      	ldr	r1, [pc, #68]	; (8000410 <SystemInit+0x5c>)
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <SystemInit+0x60>)
 80003cc:	4013      	ands	r3, r2
 80003ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <SystemInit+0x5c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <SystemInit+0x5c>)
 80003d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003e0:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <SystemInit+0x5c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <SystemInit+0x5c>)
 80003e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <SystemInit+0x5c>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <SystemInit+0x5c>)
 80003f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <SystemInit+0x5c>)
 80003fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <SystemInit+0x64>)
 8000402:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000406:	609a      	str	r2, [r3, #8]
#endif 
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000
 8000414:	f8ff0000 	.word	0xf8ff0000
 8000418:	e000ed00 	.word	0xe000ed00

0800041c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800041c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800041e:	e003      	b.n	8000428 <LoopCopyDataInit>

08000420 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000422:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000424:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000426:	3104      	adds	r1, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000428:	480a      	ldr	r0, [pc, #40]	; (8000454 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800042c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800042e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000430:	d3f6      	bcc.n	8000420 <CopyDataInit>
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000434:	e002      	b.n	800043c <LoopFillZerobss>

08000436 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000438:	f842 3b04 	str.w	r3, [r2], #4

0800043c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800043e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000440:	d3f9      	bcc.n	8000436 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000442:	f7ff ffb7 	bl	80003b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000446:	f001 f925 	bl	8001694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044a:	f7ff fe7f 	bl	800014c <main>
  bx lr
 800044e:	4770      	bx	lr
  ldr r3, =_sidata
 8000450:	08001720 	.word	0x08001720
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000458:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800045c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000460:	2000006c 	.word	0x2000006c

08000464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC1_2_IRQHandler>
	...

08000468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <HAL_Init+0x28>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a07      	ldr	r2, [pc, #28]	; (8000490 <HAL_Init+0x28>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000478:	2003      	movs	r0, #3
 800047a:	f000 f923 	bl	80006c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800047e:	2000      	movs	r0, #0
 8000480:	f000 f808 	bl	8000494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000484:	f7ff ff44 	bl	8000310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40022000 	.word	0x40022000

08000494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <HAL_InitTick+0x54>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <HAL_InitTick+0x58>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4619      	mov	r1, r3
 80004a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f93b 	bl	800072e <HAL_SYSTICK_Config>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004be:	2301      	movs	r3, #1
 80004c0:	e00e      	b.n	80004e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b0f      	cmp	r3, #15
 80004c6:	d80a      	bhi.n	80004de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004c8:	2200      	movs	r2, #0
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	f04f 30ff 	mov.w	r0, #4294967295
 80004d0:	f000 f903 	bl	80006da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004d4:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <HAL_InitTick+0x5c>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004da:	2300      	movs	r3, #0
 80004dc:	e000      	b.n	80004e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000000 	.word	0x20000000
 80004ec:	20000008 	.word	0x20000008
 80004f0:	20000004 	.word	0x20000004

080004f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_IncTick+0x1c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_IncTick+0x20>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4413      	add	r3, r2
 8000504:	4a03      	ldr	r2, [pc, #12]	; (8000514 <HAL_IncTick+0x20>)
 8000506:	6013      	str	r3, [r2, #0]
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	20000008 	.word	0x20000008
 8000514:	20000068 	.word	0x20000068

08000518 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return uwTick;
 800051c:	4b02      	ldr	r3, [pc, #8]	; (8000528 <HAL_GetTick+0x10>)
 800051e:	681b      	ldr	r3, [r3, #0]
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	20000068 	.word	0x20000068

0800052c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f003 0307 	and.w	r3, r3, #7
 800053a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <__NVIC_SetPriorityGrouping+0x44>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000548:	4013      	ands	r3, r2
 800054a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <__NVIC_SetPriorityGrouping+0x44>)
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	60d3      	str	r3, [r2, #12]
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <__NVIC_GetPriorityGrouping+0x18>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	f003 0307 	and.w	r3, r3, #7
}
 8000582:	4618      	mov	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	db0b      	blt.n	80005ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f003 021f 	and.w	r2, r3, #31
 80005a8:	4906      	ldr	r1, [pc, #24]	; (80005c4 <__NVIC_EnableIRQ+0x34>)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	095b      	lsrs	r3, r3, #5
 80005b0:	2001      	movs	r0, #1
 80005b2:	fa00 f202 	lsl.w	r2, r0, r2
 80005b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	; (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061c:	b480      	push	{r7}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2b04      	cmp	r3, #4
 8000638:	bf28      	it	cs
 800063a:	2304      	movcs	r3, #4
 800063c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3304      	adds	r3, #4
 8000642:	2b06      	cmp	r3, #6
 8000644:	d902      	bls.n	800064c <NVIC_EncodePriority+0x30>
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b03      	subs	r3, #3
 800064a:	e000      	b.n	800064e <NVIC_EncodePriority+0x32>
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43da      	mvns	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000664:	f04f 31ff 	mov.w	r1, #4294967295
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43d9      	mvns	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	4313      	orrs	r3, r2
         );
}
 8000676:	4618      	mov	r0, r3
 8000678:	3724      	adds	r7, #36	; 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000690:	d301      	bcc.n	8000696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000692:	2301      	movs	r3, #1
 8000694:	e00f      	b.n	80006b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <SysTick_Config+0x40>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3b01      	subs	r3, #1
 800069c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800069e:	210f      	movs	r1, #15
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f7ff ff90 	bl	80005c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <SysTick_Config+0x40>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <SysTick_Config+0x40>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	e000e010 	.word	0xe000e010

080006c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff2d 	bl	800052c <__NVIC_SetPriorityGrouping>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	4603      	mov	r3, r0
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006ec:	f7ff ff42 	bl	8000574 <__NVIC_GetPriorityGrouping>
 80006f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	68b9      	ldr	r1, [r7, #8]
 80006f6:	6978      	ldr	r0, [r7, #20]
 80006f8:	f7ff ff90 	bl	800061c <NVIC_EncodePriority>
 80006fc:	4602      	mov	r2, r0
 80006fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff5f 	bl	80005c8 <__NVIC_SetPriority>
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff35 	bl	8000590 <__NVIC_EnableIRQ>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ffa2 	bl	8000680 <SysTick_Config>
 800073c:	4603      	mov	r3, r0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b04      	cmp	r3, #4
 8000754:	d106      	bne.n	8000764 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000762:	e005      	b.n	8000770 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800076a:	f023 0304 	bic.w	r3, r3, #4
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000784:	f000 f802 	bl	800078c <HAL_SYSTICK_Callback>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000798:	b480      	push	{r7}
 800079a:	b08b      	sub	sp, #44	; 0x2c
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007aa:	e121      	b.n	80009f0 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007ac:	2201      	movs	r2, #1
 80007ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	69fa      	ldr	r2, [r7, #28]
 80007bc:	4013      	ands	r3, r2
 80007be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	f040 8110 	bne.w	80009ea <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2b12      	cmp	r3, #18
 80007d0:	d034      	beq.n	800083c <HAL_GPIO_Init+0xa4>
 80007d2:	2b12      	cmp	r3, #18
 80007d4:	d80d      	bhi.n	80007f2 <HAL_GPIO_Init+0x5a>
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d02b      	beq.n	8000832 <HAL_GPIO_Init+0x9a>
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d804      	bhi.n	80007e8 <HAL_GPIO_Init+0x50>
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d031      	beq.n	8000846 <HAL_GPIO_Init+0xae>
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d01c      	beq.n	8000820 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007e6:	e048      	b.n	800087a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d043      	beq.n	8000874 <HAL_GPIO_Init+0xdc>
 80007ec:	2b11      	cmp	r3, #17
 80007ee:	d01b      	beq.n	8000828 <HAL_GPIO_Init+0x90>
          break;
 80007f0:	e043      	b.n	800087a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007f2:	4a86      	ldr	r2, [pc, #536]	; (8000a0c <HAL_GPIO_Init+0x274>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d026      	beq.n	8000846 <HAL_GPIO_Init+0xae>
 80007f8:	4a84      	ldr	r2, [pc, #528]	; (8000a0c <HAL_GPIO_Init+0x274>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d806      	bhi.n	800080c <HAL_GPIO_Init+0x74>
 80007fe:	4a84      	ldr	r2, [pc, #528]	; (8000a10 <HAL_GPIO_Init+0x278>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d020      	beq.n	8000846 <HAL_GPIO_Init+0xae>
 8000804:	4a83      	ldr	r2, [pc, #524]	; (8000a14 <HAL_GPIO_Init+0x27c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d01d      	beq.n	8000846 <HAL_GPIO_Init+0xae>
          break;
 800080a:	e036      	b.n	800087a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800080c:	4a82      	ldr	r2, [pc, #520]	; (8000a18 <HAL_GPIO_Init+0x280>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d019      	beq.n	8000846 <HAL_GPIO_Init+0xae>
 8000812:	4a82      	ldr	r2, [pc, #520]	; (8000a1c <HAL_GPIO_Init+0x284>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d016      	beq.n	8000846 <HAL_GPIO_Init+0xae>
 8000818:	4a81      	ldr	r2, [pc, #516]	; (8000a20 <HAL_GPIO_Init+0x288>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d013      	beq.n	8000846 <HAL_GPIO_Init+0xae>
          break;
 800081e:	e02c      	b.n	800087a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	623b      	str	r3, [r7, #32]
          break;
 8000826:	e028      	b.n	800087a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	3304      	adds	r3, #4
 800082e:	623b      	str	r3, [r7, #32]
          break;
 8000830:	e023      	b.n	800087a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	3308      	adds	r3, #8
 8000838:	623b      	str	r3, [r7, #32]
          break;
 800083a:	e01e      	b.n	800087a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	330c      	adds	r3, #12
 8000842:	623b      	str	r3, [r7, #32]
          break;
 8000844:	e019      	b.n	800087a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800084e:	2304      	movs	r3, #4
 8000850:	623b      	str	r3, [r7, #32]
          break;
 8000852:	e012      	b.n	800087a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d105      	bne.n	8000868 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800085c:	2308      	movs	r3, #8
 800085e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	69fa      	ldr	r2, [r7, #28]
 8000864:	611a      	str	r2, [r3, #16]
          break;
 8000866:	e008      	b.n	800087a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000868:	2308      	movs	r3, #8
 800086a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	615a      	str	r2, [r3, #20]
          break;
 8000872:	e002      	b.n	800087a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
          break;
 8000878:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	2bff      	cmp	r3, #255	; 0xff
 800087e:	d801      	bhi.n	8000884 <HAL_GPIO_Init+0xec>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	e001      	b.n	8000888 <HAL_GPIO_Init+0xf0>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3304      	adds	r3, #4
 8000888:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	2bff      	cmp	r3, #255	; 0xff
 800088e:	d802      	bhi.n	8000896 <HAL_GPIO_Init+0xfe>
 8000890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	e002      	b.n	800089c <HAL_GPIO_Init+0x104>
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	3b08      	subs	r3, #8
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	210f      	movs	r1, #15
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	401a      	ands	r2, r3
 80008ae:	6a39      	ldr	r1, [r7, #32]
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	431a      	orrs	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f000 8090 	beq.w	80009ea <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008ca:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <HAL_GPIO_Init+0x28c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a55      	ldr	r2, [pc, #340]	; (8000a24 <HAL_GPIO_Init+0x28c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b53      	ldr	r3, [pc, #332]	; (8000a24 <HAL_GPIO_Init+0x28c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008e2:	4a51      	ldr	r2, [pc, #324]	; (8000a28 <HAL_GPIO_Init+0x290>)
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	3302      	adds	r3, #2
 80008ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	f003 0303 	and.w	r3, r3, #3
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	220f      	movs	r2, #15
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4013      	ands	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a48      	ldr	r2, [pc, #288]	; (8000a2c <HAL_GPIO_Init+0x294>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d00d      	beq.n	800092a <HAL_GPIO_Init+0x192>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a47      	ldr	r2, [pc, #284]	; (8000a30 <HAL_GPIO_Init+0x298>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d007      	beq.n	8000926 <HAL_GPIO_Init+0x18e>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a46      	ldr	r2, [pc, #280]	; (8000a34 <HAL_GPIO_Init+0x29c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_GPIO_Init+0x18a>
 800091e:	2302      	movs	r3, #2
 8000920:	e004      	b.n	800092c <HAL_GPIO_Init+0x194>
 8000922:	2303      	movs	r3, #3
 8000924:	e002      	b.n	800092c <HAL_GPIO_Init+0x194>
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <HAL_GPIO_Init+0x194>
 800092a:	2300      	movs	r3, #0
 800092c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800092e:	f002 0203 	and.w	r2, r2, #3
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	4093      	lsls	r3, r2
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	4313      	orrs	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800093c:	493a      	ldr	r1, [pc, #232]	; (8000a28 <HAL_GPIO_Init+0x290>)
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d006      	beq.n	8000964 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000956:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4937      	ldr	r1, [pc, #220]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	4313      	orrs	r3, r2
 8000960:	600b      	str	r3, [r1, #0]
 8000962:	e006      	b.n	8000972 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000964:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	43db      	mvns	r3, r3
 800096c:	4932      	ldr	r1, [pc, #200]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 800096e:	4013      	ands	r3, r2
 8000970:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d006      	beq.n	800098c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	492d      	ldr	r1, [pc, #180]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	604b      	str	r3, [r1, #4]
 800098a:	e006      	b.n	800099a <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	43db      	mvns	r3, r3
 8000994:	4928      	ldr	r1, [pc, #160]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 8000996:	4013      	ands	r3, r2
 8000998:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d006      	beq.n	80009b4 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	4923      	ldr	r1, [pc, #140]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	608b      	str	r3, [r1, #8]
 80009b2:	e006      	b.n	80009c2 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	43db      	mvns	r3, r3
 80009bc:	491e      	ldr	r1, [pc, #120]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 80009be:	4013      	ands	r3, r2
 80009c0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d006      	beq.n	80009dc <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 80009d0:	68da      	ldr	r2, [r3, #12]
 80009d2:	4919      	ldr	r1, [pc, #100]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	60cb      	str	r3, [r1, #12]
 80009da:	e006      	b.n	80009ea <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 80009de:	68da      	ldr	r2, [r3, #12]
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	4914      	ldr	r1, [pc, #80]	; (8000a38 <HAL_GPIO_Init+0x2a0>)
 80009e6:	4013      	ands	r3, r2
 80009e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	3301      	adds	r3, #1
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	fa22 f303 	lsr.w	r3, r2, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f47f aed6 	bne.w	80007ac <HAL_GPIO_Init+0x14>
  }
}
 8000a00:	bf00      	nop
 8000a02:	372c      	adds	r7, #44	; 0x2c
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	10210000 	.word	0x10210000
 8000a10:	10110000 	.word	0x10110000
 8000a14:	10120000 	.word	0x10120000
 8000a18:	10310000 	.word	0x10310000
 8000a1c:	10320000 	.word	0x10320000
 8000a20:	10220000 	.word	0x10220000
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010000 	.word	0x40010000
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40011000 	.word	0x40011000
 8000a38:	40010400 	.word	0x40010400

08000a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a4c:	787b      	ldrb	r3, [r7, #1]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a52:	887a      	ldrh	r2, [r7, #2]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a58:	e003      	b.n	8000a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a5a:	887b      	ldrh	r3, [r7, #2]
 8000a5c:	041a      	lsls	r2, r3, #16
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	611a      	str	r2, [r3, #16]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a84:	887a      	ldrh	r2, [r7, #2]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000a8a:	e002      	b.n	8000a92 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a8c:	887a      	ldrh	r2, [r7, #2]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	611a      	str	r2, [r3, #16]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e26c      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 8087 	beq.w	8000bca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000abc:	4b92      	ldr	r3, [pc, #584]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 030c 	and.w	r3, r3, #12
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d00c      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ac8:	4b8f      	ldr	r3, [pc, #572]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 030c 	and.w	r3, r3, #12
 8000ad0:	2b08      	cmp	r3, #8
 8000ad2:	d112      	bne.n	8000afa <HAL_RCC_OscConfig+0x5e>
 8000ad4:	4b8c      	ldr	r3, [pc, #560]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae0:	d10b      	bne.n	8000afa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae2:	4b89      	ldr	r3, [pc, #548]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d06c      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x12c>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d168      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e246      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b02:	d106      	bne.n	8000b12 <HAL_RCC_OscConfig+0x76>
 8000b04:	4b80      	ldr	r3, [pc, #512]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a7f      	ldr	r2, [pc, #508]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	e02e      	b.n	8000b70 <HAL_RCC_OscConfig+0xd4>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10c      	bne.n	8000b34 <HAL_RCC_OscConfig+0x98>
 8000b1a:	4b7b      	ldr	r3, [pc, #492]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a7a      	ldr	r2, [pc, #488]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	4b78      	ldr	r3, [pc, #480]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a77      	ldr	r2, [pc, #476]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e01d      	b.n	8000b70 <HAL_RCC_OscConfig+0xd4>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b3c:	d10c      	bne.n	8000b58 <HAL_RCC_OscConfig+0xbc>
 8000b3e:	4b72      	ldr	r3, [pc, #456]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a71      	ldr	r2, [pc, #452]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b6f      	ldr	r3, [pc, #444]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a6e      	ldr	r2, [pc, #440]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e00b      	b.n	8000b70 <HAL_RCC_OscConfig+0xd4>
 8000b58:	4b6b      	ldr	r3, [pc, #428]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a6a      	ldr	r2, [pc, #424]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b68      	ldr	r3, [pc, #416]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a67      	ldr	r2, [pc, #412]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d013      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b78:	f7ff fcce 	bl	8000518 <HAL_GetTick>
 8000b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b7e:	e008      	b.n	8000b92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b80:	f7ff fcca 	bl	8000518 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b64      	cmp	r3, #100	; 0x64
 8000b8c:	d901      	bls.n	8000b92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e1fa      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b92:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f0      	beq.n	8000b80 <HAL_RCC_OscConfig+0xe4>
 8000b9e:	e014      	b.n	8000bca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba0:	f7ff fcba 	bl	8000518 <HAL_GetTick>
 8000ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba6:	e008      	b.n	8000bba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ba8:	f7ff fcb6 	bl	8000518 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b64      	cmp	r3, #100	; 0x64
 8000bb4:	d901      	bls.n	8000bba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e1e6      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bba:	4b53      	ldr	r3, [pc, #332]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1f0      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x10c>
 8000bc6:	e000      	b.n	8000bca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d063      	beq.n	8000c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00b      	beq.n	8000bfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000be2:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d11c      	bne.n	8000c28 <HAL_RCC_OscConfig+0x18c>
 8000bee:	4b46      	ldr	r3, [pc, #280]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d116      	bne.n	8000c28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bfa:	4b43      	ldr	r3, [pc, #268]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d005      	beq.n	8000c12 <HAL_RCC_OscConfig+0x176>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d001      	beq.n	8000c12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e1ba      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	4939      	ldr	r1, [pc, #228]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	4313      	orrs	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c26:	e03a      	b.n	8000c9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d020      	beq.n	8000c72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c30:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <HAL_RCC_OscConfig+0x270>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c36:	f7ff fc6f 	bl	8000518 <HAL_GetTick>
 8000c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c3c:	e008      	b.n	8000c50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c3e:	f7ff fc6b 	bl	8000518 <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d901      	bls.n	8000c50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e19b      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c50:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0302 	and.w	r3, r3, #2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f0      	beq.n	8000c3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	4927      	ldr	r1, [pc, #156]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	600b      	str	r3, [r1, #0]
 8000c70:	e015      	b.n	8000c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <HAL_RCC_OscConfig+0x270>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c78:	f7ff fc4e 	bl	8000518 <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c80:	f7ff fc4a 	bl	8000518 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e17a      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f0      	bne.n	8000c80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d03a      	beq.n	8000d20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d019      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_RCC_OscConfig+0x274>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cb8:	f7ff fc2e 	bl	8000518 <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cc0:	f7ff fc2a 	bl	8000518 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e15a      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f0      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 fab2 	bl	8001248 <RCC_Delay>
 8000ce4:	e01c      	b.n	8000d20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_RCC_OscConfig+0x274>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cec:	f7ff fc14 	bl	8000518 <HAL_GetTick>
 8000cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf2:	e00f      	b.n	8000d14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cf4:	f7ff fc10 	bl	8000518 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d908      	bls.n	8000d14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e140      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	42420000 	.word	0x42420000
 8000d10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d14:	4b9e      	ldr	r3, [pc, #632]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1e9      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80a6 	beq.w	8000e7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d32:	4b97      	ldr	r3, [pc, #604]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10d      	bne.n	8000d5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b94      	ldr	r3, [pc, #592]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a93      	ldr	r2, [pc, #588]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b91      	ldr	r3, [pc, #580]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d56:	2301      	movs	r3, #1
 8000d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5a:	4b8e      	ldr	r3, [pc, #568]	; (8000f94 <HAL_RCC_OscConfig+0x4f8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d118      	bne.n	8000d98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d66:	4b8b      	ldr	r3, [pc, #556]	; (8000f94 <HAL_RCC_OscConfig+0x4f8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a8a      	ldr	r2, [pc, #552]	; (8000f94 <HAL_RCC_OscConfig+0x4f8>)
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d72:	f7ff fbd1 	bl	8000518 <HAL_GetTick>
 8000d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d78:	e008      	b.n	8000d8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d7a:	f7ff fbcd 	bl	8000518 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b64      	cmp	r3, #100	; 0x64
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e0fd      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d8c:	4b81      	ldr	r3, [pc, #516]	; (8000f94 <HAL_RCC_OscConfig+0x4f8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f0      	beq.n	8000d7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d106      	bne.n	8000dae <HAL_RCC_OscConfig+0x312>
 8000da0:	4b7b      	ldr	r3, [pc, #492]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	4a7a      	ldr	r2, [pc, #488]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6213      	str	r3, [r2, #32]
 8000dac:	e02d      	b.n	8000e0a <HAL_RCC_OscConfig+0x36e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x334>
 8000db6:	4b76      	ldr	r3, [pc, #472]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	4a75      	ldr	r2, [pc, #468]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000dbc:	f023 0301 	bic.w	r3, r3, #1
 8000dc0:	6213      	str	r3, [r2, #32]
 8000dc2:	4b73      	ldr	r3, [pc, #460]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	4a72      	ldr	r2, [pc, #456]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000dc8:	f023 0304 	bic.w	r3, r3, #4
 8000dcc:	6213      	str	r3, [r2, #32]
 8000dce:	e01c      	b.n	8000e0a <HAL_RCC_OscConfig+0x36e>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d10c      	bne.n	8000df2 <HAL_RCC_OscConfig+0x356>
 8000dd8:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	4a6c      	ldr	r2, [pc, #432]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6213      	str	r3, [r2, #32]
 8000de4:	4b6a      	ldr	r3, [pc, #424]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	4a69      	ldr	r2, [pc, #420]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6213      	str	r3, [r2, #32]
 8000df0:	e00b      	b.n	8000e0a <HAL_RCC_OscConfig+0x36e>
 8000df2:	4b67      	ldr	r3, [pc, #412]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	6a1b      	ldr	r3, [r3, #32]
 8000df6:	4a66      	ldr	r2, [pc, #408]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6213      	str	r3, [r2, #32]
 8000dfe:	4b64      	ldr	r3, [pc, #400]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	4a63      	ldr	r2, [pc, #396]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000e04:	f023 0304 	bic.w	r3, r3, #4
 8000e08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d015      	beq.n	8000e3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e12:	f7ff fb81 	bl	8000518 <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e18:	e00a      	b.n	8000e30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e1a:	f7ff fb7d 	bl	8000518 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e0ab      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e30:	4b57      	ldr	r3, [pc, #348]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0ee      	beq.n	8000e1a <HAL_RCC_OscConfig+0x37e>
 8000e3c:	e014      	b.n	8000e68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fb6b 	bl	8000518 <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e44:	e00a      	b.n	8000e5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e46:	f7ff fb67 	bl	8000518 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e095      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e5c:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1ee      	bne.n	8000e46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d105      	bne.n	8000e7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6e:	4b48      	ldr	r3, [pc, #288]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	4a47      	ldr	r2, [pc, #284]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 8081 	beq.w	8000f86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e84:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 030c 	and.w	r3, r3, #12
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d061      	beq.n	8000f54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d146      	bne.n	8000f26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e98:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <HAL_RCC_OscConfig+0x4fc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fb3b 	bl	8000518 <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ea6:	f7ff fb37 	bl	8000518 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e067      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb8:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f0      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	d108      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ece:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	492d      	ldr	r1, [pc, #180]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	4313      	orrs	r3, r2
 8000ede:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a19      	ldr	r1, [r3, #32]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	430b      	orrs	r3, r1
 8000ef2:	4927      	ldr	r1, [pc, #156]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <HAL_RCC_OscConfig+0x4fc>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efe:	f7ff fb0b 	bl	8000518 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f06:	f7ff fb07 	bl	8000518 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e037      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f0      	beq.n	8000f06 <HAL_RCC_OscConfig+0x46a>
 8000f24:	e02f      	b.n	8000f86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_RCC_OscConfig+0x4fc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff faf4 	bl	8000518 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f34:	f7ff faf0 	bl	8000518 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e020      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x498>
 8000f52:	e018      	b.n	8000f86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e013      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d106      	bne.n	8000f82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d001      	beq.n	8000f86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40007000 	.word	0x40007000
 8000f98:	42420060 	.word	0x42420060

08000f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0d0      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fb0:	4b6a      	ldr	r3, [pc, #424]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d910      	bls.n	8000fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fbe:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 0207 	bic.w	r2, r3, #7
 8000fc6:	4965      	ldr	r1, [pc, #404]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0b8      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d020      	beq.n	800102e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ff8:	4b59      	ldr	r3, [pc, #356]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a58      	ldr	r2, [pc, #352]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800101a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800101c:	4b50      	ldr	r3, [pc, #320]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	494d      	ldr	r1, [pc, #308]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	4313      	orrs	r3, r2
 800102c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d040      	beq.n	80010bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d115      	bne.n	800107a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e07f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d107      	bne.n	800106a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e073      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e06b      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f023 0203 	bic.w	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	4936      	ldr	r1, [pc, #216]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800108c:	f7ff fa44 	bl	8000518 <HAL_GetTick>
 8001090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001092:	e00a      	b.n	80010aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001094:	f7ff fa40 	bl	8000518 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e053      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 020c 	and.w	r2, r3, #12
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d1eb      	bne.n	8001094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d210      	bcs.n	80010ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 0207 	bic.w	r2, r3, #7
 80010d2:	4922      	ldr	r1, [pc, #136]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e032      	b.n	8001152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4916      	ldr	r1, [pc, #88]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800112a:	f000 f821 	bl	8001170 <HAL_RCC_GetSysClockFreq>
 800112e:	4601      	mov	r1, r0
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_RCC_ClockConfig+0x1c8>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	fa21 f303 	lsr.w	r3, r1, r3
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_RCC_ClockConfig+0x1cc>)
 8001144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_RCC_ClockConfig+0x1d0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9a2 	bl	8000494 <HAL_InitTick>

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40022000 	.word	0x40022000
 8001160:	40021000 	.word	0x40021000
 8001164:	08001708 	.word	0x08001708
 8001168:	20000000 	.word	0x20000000
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001170:	b490      	push	{r4, r7}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001178:	1d3c      	adds	r4, r7, #4
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001180:	4b28      	ldr	r3, [pc, #160]	; (8001224 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d002      	beq.n	80011b0 <HAL_RCC_GetSysClockFreq+0x40>
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d003      	beq.n	80011b6 <HAL_RCC_GetSysClockFreq+0x46>
 80011ae:	e02d      	b.n	800120c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_RCC_GetSysClockFreq+0xbc>)
 80011b2:	623b      	str	r3, [r7, #32]
      break;
 80011b4:	e02d      	b.n	8001212 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	0c9b      	lsrs	r3, r3, #18
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011c2:	4413      	add	r3, r2
 80011c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d013      	beq.n	80011fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	0c5b      	lsrs	r3, r3, #17
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011e2:	4413      	add	r3, r2
 80011e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	4a0f      	ldr	r2, [pc, #60]	; (800122c <HAL_RCC_GetSysClockFreq+0xbc>)
 80011ee:	fb02 f203 	mul.w	r2, r2, r3
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
 80011fa:	e004      	b.n	8001206 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	623b      	str	r3, [r7, #32]
      break;
 800120a:	e002      	b.n	8001212 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_RCC_GetSysClockFreq+0xbc>)
 800120e:	623b      	str	r3, [r7, #32]
      break;
 8001210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001212:	6a3b      	ldr	r3, [r7, #32]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bc90      	pop	{r4, r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	080016f4 	.word	0x080016f4
 8001224:	08001704 	.word	0x08001704
 8001228:	40021000 	.word	0x40021000
 800122c:	007a1200 	.word	0x007a1200
 8001230:	003d0900 	.word	0x003d0900

08001234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <HAL_RCC_GetHCLKFreq+0x10>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20000000 	.word	0x20000000

08001248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <RCC_Delay+0x34>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <RCC_Delay+0x38>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0a5b      	lsrs	r3, r3, #9
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001264:	bf00      	nop
  }
  while (Delay --);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1e5a      	subs	r2, r3, #1
 800126a:	60fa      	str	r2, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f9      	bne.n	8001264 <RCC_Delay+0x1c>
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000
 8001280:	10624dd3 	.word	0x10624dd3

08001284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e01d      	b.n	80012d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff f852 	bl	8000354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2202      	movs	r2, #2
 80012b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3304      	adds	r3, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f000 f97c 	bl	80015c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2202      	movs	r2, #2
 80012e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b06      	cmp	r3, #6
 80012fa:	d007      	beq.n	800130c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b06      	cmp	r3, #6
 8001348:	d007      	beq.n	800135a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0201 	orr.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b02      	cmp	r3, #2
 800137a:	d122      	bne.n	80013c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b02      	cmp	r3, #2
 8001388:	d11b      	bne.n	80013c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f06f 0202 	mvn.w	r2, #2
 8001392:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f8ed 	bl	8001588 <HAL_TIM_IC_CaptureCallback>
 80013ae:	e005      	b.n	80013bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f8e0 	bl	8001576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f8ef 	bl	800159a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d122      	bne.n	8001416 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d11b      	bne.n	8001416 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f06f 0204 	mvn.w	r2, #4
 80013e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f8c3 	bl	8001588 <HAL_TIM_IC_CaptureCallback>
 8001402:	e005      	b.n	8001410 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f8b6 	bl	8001576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f8c5 	bl	800159a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b08      	cmp	r3, #8
 8001422:	d122      	bne.n	800146a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11b      	bne.n	800146a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f06f 0208 	mvn.w	r2, #8
 800143a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2204      	movs	r2, #4
 8001440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f899 	bl	8001588 <HAL_TIM_IC_CaptureCallback>
 8001456:	e005      	b.n	8001464 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f88c 	bl	8001576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f89b 	bl	800159a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2b10      	cmp	r3, #16
 8001476:	d122      	bne.n	80014be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b10      	cmp	r3, #16
 8001484:	d11b      	bne.n	80014be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f06f 0210 	mvn.w	r2, #16
 800148e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2208      	movs	r2, #8
 8001494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f86f 	bl	8001588 <HAL_TIM_IC_CaptureCallback>
 80014aa:	e005      	b.n	80014b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f862 	bl	8001576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f871 	bl	800159a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10e      	bne.n	80014ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d107      	bne.n	80014ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f06f 0201 	mvn.w	r2, #1
 80014e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7fe febb 	bl	8000260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f4:	2b80      	cmp	r3, #128	; 0x80
 80014f6:	d10e      	bne.n	8001516 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	2b80      	cmp	r3, #128	; 0x80
 8001504:	d107      	bne.n	8001516 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800150e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f8b6 	bl	8001682 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001520:	2b40      	cmp	r3, #64	; 0x40
 8001522:	d10e      	bne.n	8001542 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152e:	2b40      	cmp	r3, #64	; 0x40
 8001530:	d107      	bne.n	8001542 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800153a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f835 	bl	80015ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	2b20      	cmp	r3, #32
 800154e:	d10e      	bne.n	800156e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	2b20      	cmp	r3, #32
 800155c:	d107      	bne.n	800156e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f06f 0220 	mvn.w	r2, #32
 8001566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f881 	bl	8001670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
	...

080015c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a25      	ldr	r2, [pc, #148]	; (8001668 <TIM_Base_SetConfig+0xa8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d007      	beq.n	80015e8 <TIM_Base_SetConfig+0x28>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015de:	d003      	beq.n	80015e8 <TIM_Base_SetConfig+0x28>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a22      	ldr	r2, [pc, #136]	; (800166c <TIM_Base_SetConfig+0xac>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d108      	bne.n	80015fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <TIM_Base_SetConfig+0xa8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <TIM_Base_SetConfig+0x52>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001608:	d003      	beq.n	8001612 <TIM_Base_SetConfig+0x52>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <TIM_Base_SetConfig+0xac>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d108      	bne.n	8001624 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a07      	ldr	r2, [pc, #28]	; (8001668 <TIM_Base_SetConfig+0xa8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d103      	bne.n	8001658 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	615a      	str	r2, [r3, #20]
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40000400 	.word	0x40000400

08001670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <__libc_init_array>:
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	2500      	movs	r5, #0
 8001698:	4e0c      	ldr	r6, [pc, #48]	; (80016cc <__libc_init_array+0x38>)
 800169a:	4c0d      	ldr	r4, [pc, #52]	; (80016d0 <__libc_init_array+0x3c>)
 800169c:	1ba4      	subs	r4, r4, r6
 800169e:	10a4      	asrs	r4, r4, #2
 80016a0:	42a5      	cmp	r5, r4
 80016a2:	d109      	bne.n	80016b8 <__libc_init_array+0x24>
 80016a4:	f000 f81a 	bl	80016dc <_init>
 80016a8:	2500      	movs	r5, #0
 80016aa:	4e0a      	ldr	r6, [pc, #40]	; (80016d4 <__libc_init_array+0x40>)
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <__libc_init_array+0x44>)
 80016ae:	1ba4      	subs	r4, r4, r6
 80016b0:	10a4      	asrs	r4, r4, #2
 80016b2:	42a5      	cmp	r5, r4
 80016b4:	d105      	bne.n	80016c2 <__libc_init_array+0x2e>
 80016b6:	bd70      	pop	{r4, r5, r6, pc}
 80016b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016bc:	4798      	blx	r3
 80016be:	3501      	adds	r5, #1
 80016c0:	e7ee      	b.n	80016a0 <__libc_init_array+0xc>
 80016c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016c6:	4798      	blx	r3
 80016c8:	3501      	adds	r5, #1
 80016ca:	e7f2      	b.n	80016b2 <__libc_init_array+0x1e>
 80016cc:	08001718 	.word	0x08001718
 80016d0:	08001718 	.word	0x08001718
 80016d4:	08001718 	.word	0x08001718
 80016d8:	0800171c 	.word	0x0800171c

080016dc <_init>:
 80016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016de:	bf00      	nop
 80016e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e2:	bc08      	pop	{r3}
 80016e4:	469e      	mov	lr, r3
 80016e6:	4770      	bx	lr

080016e8 <_fini>:
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ea:	bf00      	nop
 80016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ee:	bc08      	pop	{r3}
 80016f0:	469e      	mov	lr, r3
 80016f2:	4770      	bx	lr
