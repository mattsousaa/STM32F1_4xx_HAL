
ADC_Sensor_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08004cf8  08004cf8  00014cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f80  08004f80  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f88  08004f88  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200001dc  0800516c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  0800516c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000872a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016bd  00000000  00000000  00028936  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  00029ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  0002a738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016122  00000000  00000000  0002adb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c76  00000000  00000000  00040ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088f21  00000000  00000000  00047b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a8  00000000  00000000  000d0ae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ce0 	.word	0x08004ce0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08004ce0 	.word	0x08004ce0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
void Error_Handler(void);

UART_HandleTypeDef huart2;
ADC_HandleTypeDef hadc1;

int main(void){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

	HAL_Init();
 8000ebc:	f000 fa30 	bl	8001320 <HAL_Init>
	SystemClockConfig();
 8000ec0:	f000 f80a 	bl	8000ed8 <SystemClockConfig>

	UART2_Init();
 8000ec4:	f000 f8d6 	bl	8001074 <UART2_Init>

	ADC1_Init();
 8000ec8:	f000 f80e 	bl	8000ee8 <ADC1_Init>

	HAL_ADC_Start_IT(&hadc1);
 8000ecc:	4801      	ldr	r0, [pc, #4]	; (8000ed4 <main+0x1c>)
 8000ece:	f000 fadd 	bl	800148c <HAL_ADC_Start_IT>

	while(1);
 8000ed2:	e7fe      	b.n	8000ed2 <main+0x1a>
 8000ed4:	20000204 	.word	0x20000204

08000ed8 <SystemClockConfig>:

	return 0;

}

void SystemClockConfig(void){
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <ADC1_Init>:

/* ADC1 init function */
void ADC1_Init(void){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]

	/* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
	hadc1.Instance = ADC1;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <ADC1_Init+0x8c>)
 8000efc:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <ADC1_Init+0x90>)
 8000efe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;	/* The clock of the analog part of the ADC is the half of the PCLK frequency*/
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <ADC1_Init+0x8c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;	/* MAX Resolution of ADC Channel */
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <ADC1_Init+0x8c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <ADC1_Init+0x8c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;	/* We can repeatedly poll for a conversion without stopping and then restarting the ADC */
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <ADC1_Init+0x8c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <ADC1_Init+0x8c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;	/* Specifies the data align of the converted result. ADC data register is implemented as half-word register. */
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <ADC1_Init+0x8c>)
 8000f22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f26:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;	/* Meaningless. Single conversion mode automatically assumes that the number of sampled channels is equal to 1. */
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <ADC1_Init+0x8c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;	/* No DMA for now */
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <ADC1_Init+0x8c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;	/* End Of Conversion (EOC) for continuous conversion */
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <ADC1_Init+0x8c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]

	if(HAL_ADC_Init(&hadc1) != HAL_OK){
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <ADC1_Init+0x8c>)
 8000f3e:	f000 fa61 	bl	8001404 <HAL_ADC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <ADC1_Init+0x64>
		Error_Handler();
 8000f48:	f000 f8ba 	bl	80010c0 <Error_Handler>
	}

	/* Configure for the selected ADC regular channel its corresponding rank in the sequence and its sample time */
	sConfig.Channel = ADC_CHANNEL_1;	/* PA1 pin */
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
	/* FCLK = 16MHz
	 * ADCCLK = 8MHz
	 * T_ADCCLK = 12.5us
	 * ADC_SAMPLETIME_3CYCLES
	 * We have that an A/D conversion is performed every 37.5μs*/
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]

	/* Put reference to ADC Channel with VREF+ or VREF- */
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <ADC1_Init+0x8c>)
 8000f5e:	f000 fca7 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <ADC1_Init+0x84>
		Error_Handler();
 8000f68:	f000 f8aa 	bl	80010c0 <Error_Handler>
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000204 	.word	0x20000204
 8000f78:	40012000 	.word	0x40012000

08000f7c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b08d      	sub	sp, #52	; 0x34
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	char msg[20];
	uint16_t rawValue;
	double temp;

	rawValue = HAL_ADC_GetValue(&hadc1);	// Get ADC raw value after conversion
 8000f84:	4832      	ldr	r0, [pc, #200]	; (8001050 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000f86:	f000 fc72 	bl	800186e <HAL_ADC_GetValue>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	temp = ((float) rawValue) / 4095 * 3300;	// Just simulating a temperature sensor with a formula
 8000f8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f98:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001054 <HAL_ADC_ConvCpltCallback+0xd8>
 8000f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001058 <HAL_ADC_ConvCpltCallback+0xdc>
 8000fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa8:	ee17 0a90 	vmov	r0, s15
 8000fac:	f7ff fad4 	bl	8000558 <__aeabi_f2d>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	temp = ((temp - 760.0) / 2.5) + 25;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fc2:	f7ff f969 	bl	8000298 <__aeabi_dsub>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	4621      	mov	r1, r4
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fd4:	f7ff fc42 	bl	800085c <__aeabi_ddiv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	460c      	mov	r4, r1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	4621      	mov	r1, r4
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000fe6:	f7ff f959 	bl	800029c <__adddf3>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	e9c7 3408 	strd	r3, r4, [r7, #32]

	sprintf(msg, "rawValue: %hu\r\n", rawValue);	// Print raw value in UART
 8000ff2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	491b      	ldr	r1, [pc, #108]	; (8001068 <HAL_ADC_ConvCpltCallback+0xec>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fa8e 	bl	800351c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f8eb 	bl	80001e0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	f107 010c 	add.w	r1, r7, #12
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	4815      	ldr	r0, [pc, #84]	; (800106c <HAL_ADC_ConvCpltCallback+0xf0>)
 8001018:	f001 f993 	bl	8002342 <HAL_UART_Transmit>

	// Put the command "-u _printf_float" in MCU GCC Linker (Miscellaneous)
	sprintf(msg, "Temperature: %.2f\r\n", temp);// Print temperature value in UART
 800101c:	f107 000c 	add.w	r0, r7, #12
 8001020:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001024:	4912      	ldr	r1, [pc, #72]	; (8001070 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001026:	f002 fa79 	bl	800351c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f8d6 	bl	80001e0 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	b29a      	uxth	r2, r3
 8001038:	f107 010c 	add.w	r1, r7, #12
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <HAL_ADC_ConvCpltCallback+0xf0>)
 8001042:	f001 f97e 	bl	8002342 <HAL_UART_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3734      	adds	r7, #52	; 0x34
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}
 800104e:	bf00      	nop
 8001050:	20000204 	.word	0x20000204
 8001054:	457ff000 	.word	0x457ff000
 8001058:	454e4000 	.word	0x454e4000
 800105c:	4087c000 	.word	0x4087c000
 8001060:	40040000 	.word	0x40040000
 8001064:	40390000 	.word	0x40390000
 8001068:	08004cf8 	.word	0x08004cf8
 800106c:	2000024c 	.word	0x2000024c
 8001070:	08004d08 	.word	0x08004d08

08001074 <UART2_Init>:

/* High level initialization */
void UART2_Init(void){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <UART2_Init+0x44>)
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <UART2_Init+0x48>)
 800107c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <UART2_Init+0x44>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <UART2_Init+0x44>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <UART2_Init+0x44>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <UART2_Init+0x44>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <UART2_Init+0x44>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <UART2_Init+0x44>)
 80010a0:	2208      	movs	r2, #8
 80010a2:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <UART2_Init+0x44>)
 80010a6:	f001 f8ff 	bl	80022a8 <HAL_UART_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <UART2_Init+0x40>
		//There is a problem
		Error_Handler();
 80010b0:	f000 f806 	bl	80010c0 <Error_Handler>
	}
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000024c 	.word	0x2000024c
 80010bc:	40004400 	.word	0x40004400

080010c0 <Error_Handler>:

void Error_Handler(void){
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	while(1);
 80010c4:	e7fe      	b.n	80010c4 <Error_Handler+0x4>
	...

080010c8 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

    //Here will do low level processor specific inits.

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 fee7 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_MspInit+0x40>)
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <HAL_MspInit+0x40>)
 80010d8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80010dc:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	f06f 000b 	mvn.w	r0, #11
 80010e6:	f000 fee6 	bl	8001eb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	f06f 000a 	mvn.w	r0, #10
 80010f2:	f000 fee0 	bl	8001eb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	f06f 0009 	mvn.w	r0, #9
 80010fe:	f000 feda 	bl	8001eb6 <HAL_NVIC_SetPriority>

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc){
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	__HAL_RCC_ADC1_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_ADC_MspInit+0x80>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	4a17      	ldr	r2, [pc, #92]	; (800118c <HAL_ADC_MspInit+0x80>)
 800112e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001132:	6453      	str	r3, [r2, #68]	; 0x44
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_ADC_MspInit+0x80>)
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_ADC_MspInit+0x80>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_ADC_MspInit+0x80>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6313      	str	r3, [r2, #48]	; 0x30
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_ADC_MspInit+0x80>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
	/**ADC1 GPIO Configuration
	 PA1     ------> ADC1_IN1
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001160:	2303      	movs	r3, #3
 8001162:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <HAL_ADC_MspInit+0x84>)
 8001170:	f000 fee4 	bl	8001f3c <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001174:	2012      	movs	r0, #18
 8001176:	f000 feba 	bl	8001eee <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2012      	movs	r0, #18
 8001180:	f000 fe99 	bl	8001eb6 <HAL_NVIC_SetPriority>

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000

08001194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <HAL_UART_MspInit+0x88>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_UART_MspInit+0x88>)
 80011a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_UART_MspInit+0x88>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_UART_MspInit+0x88>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a16      	ldr	r2, [pc, #88]	; (800121c <HAL_UART_MspInit+0x88>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_UART_MspInit+0x88>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 80011d4:	2304      	movs	r3, #4
 80011d6:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80011e4:	2307      	movs	r3, #7
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <HAL_UART_MspInit+0x8c>)
 80011f0:	f000 fea4 	bl	8001f3c <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80011f4:	2308      	movs	r3, #8
 80011f6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <HAL_UART_MspInit+0x8c>)
 8001200:	f000 fe9c 	bl	8001f3c <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001204:	2026      	movs	r0, #38	; 0x26
 8001206:	f000 fe72 	bl	8001eee <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	210f      	movs	r1, #15
 800120e:	2026      	movs	r0, #38	; 0x26
 8001210:	f000 fe51 	bl	8001eb6 <HAL_NVIC_SetPriority>
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000

08001224 <SysTick_Handler>:

#include "main.h"

extern ADC_HandleTypeDef hadc1;

void SysTick_Handler(void){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8001228:	f000 f8cc 	bl	80013c4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800122c:	f000 fe79 	bl	8001f22 <HAL_SYSTICK_IRQHandler>

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <ADC_IRQHandler>:

void ADC_IRQHandler(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_ADC_IRQHandler(&hadc1);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <ADC_IRQHandler+0x10>)
 800123a:	f000 f9d7 	bl	80015ec <HAL_ADC_IRQHandler>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000204 	.word	0x20000204

08001248 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x50>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x16>
		heap_end = &end;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <_sbrk+0x50>)
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <_sbrk+0x54>)
 800125c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <_sbrk+0x50>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <_sbrk+0x50>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	466a      	mov	r2, sp
 800126e:	4293      	cmp	r3, r2
 8001270:	d907      	bls.n	8001282 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001272:	f001 fcc5 	bl	8002c00 <__errno>
 8001276:	4602      	mov	r2, r0
 8001278:	230c      	movs	r3, #12
 800127a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	e006      	b.n	8001290 <_sbrk+0x48>
	}

	heap_end += incr;
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <_sbrk+0x50>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <_sbrk+0x50>)
 800128c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200001f8 	.word	0x200001f8
 800129c:	20000298 	.word	0x20000298

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <SystemInit+0x28>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <SystemInit+0x28>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SystemInit+0x28>)
 80012b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ba:	609a      	str	r2, [r3, #8]
#endif
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012d2:	e003      	b.n	80012dc <LoopCopyDataInit>

080012d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012da:	3104      	adds	r1, #4

080012dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012e4:	d3f6      	bcc.n	80012d4 <CopyDataInit>
  ldr  r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012e8:	e002      	b.n	80012f0 <LoopFillZerobss>

080012ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012ec:	f842 3b04 	str.w	r3, [r2], #4

080012f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012f4:	d3f9      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012f6:	f7ff ffd3 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f001 fc87 	bl	8002c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff fddb 	bl	8000eb8 <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001304:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001308:	08004f90 	.word	0x08004f90
  ldr  r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001310:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001314:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001318:	20000294 	.word	0x20000294

0800131c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <BusFault_Handler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_Init+0x40>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_Init+0x40>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x40>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 fda9 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff feb8 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fdc1 	bl	8001f0a <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 fd89 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	2000028c 	.word	0x2000028c

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2000028c 	.word	0x2000028c

08001404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e033      	b.n	8001482 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fe72 	bl	800110c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800144a:	f023 0302 	bic.w	r3, r3, #2
 800144e:	f043 0202 	orr.w	r2, r3, #2
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fb4c 	bl	8001af4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
 8001472:	e001      	b.n	8001478 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Start_IT+0x1a>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e094      	b.n	80015d0 <HAL_ADC_Start_IT+0x144>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d018      	beq.n	80014ee <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014cc:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_ADC_Start_IT+0x150>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a43      	ldr	r2, [pc, #268]	; (80015e0 <HAL_ADC_Start_IT+0x154>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0c9a      	lsrs	r2, r3, #18
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014e0:	e002      	b.n	80014e8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f9      	bne.n	80014e2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d168      	bne.n	80015ce <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d007      	beq.n	800152e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001526:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800153a:	d106      	bne.n	800154a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	f023 0206 	bic.w	r2, r3, #6
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	645a      	str	r2, [r3, #68]	; 0x44
 8001548:	e002      	b.n	8001550 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_ADC_Start_IT+0x158>)
 800155a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001564:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 031f 	and.w	r3, r3, #31
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10f      	bne.n	80015a6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11c      	bne.n	80015ce <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	e013      	b.n	80015ce <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <HAL_ADC_Start_IT+0x15c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d10e      	bne.n	80015ce <HAL_ADC_Start_IT+0x142>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d107      	bne.n	80015ce <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015cc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	20000000 	.word	0x20000000
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	40012300 	.word	0x40012300
 80015e8:	40012000 	.word	0x40012000

080015ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b02      	cmp	r3, #2
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b20      	cmp	r3, #32
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d049      	beq.n	80016c2 <HAL_ADC_IRQHandler+0xd6>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d046      	beq.n	80016c2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d12b      	bne.n	80016b2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800165e:	2b00      	cmp	r3, #0
 8001660:	d127      	bne.n	80016b2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001668:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800167a:	2b00      	cmp	r3, #0
 800167c:	d119      	bne.n	80016b2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0220 	bic.w	r2, r2, #32
 800168c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fc62 	bl	8000f7c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0212 	mvn.w	r2, #18
 80016c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	bf0c      	ite	eq
 80016d0:	2301      	moveq	r3, #1
 80016d2:	2300      	movne	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e2:	2b80      	cmp	r3, #128	; 0x80
 80016e4:	bf0c      	ite	eq
 80016e6:	2301      	moveq	r3, #1
 80016e8:	2300      	movne	r3, #0
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d057      	beq.n	80017a4 <HAL_ADC_IRQHandler+0x1b8>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d054      	beq.n	80017a4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d139      	bne.n	8001794 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001738:	2b00      	cmp	r3, #0
 800173a:	d12b      	bne.n	8001794 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d124      	bne.n	8001794 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11d      	bne.n	8001794 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800175c:	2b00      	cmp	r3, #0
 800175e:	d119      	bne.n	8001794 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800176e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f043 0201 	orr.w	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 faa9 	bl	8001cec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f06f 020c 	mvn.w	r2, #12
 80017a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	bf0c      	ite	eq
 80017b2:	2301      	moveq	r3, #1
 80017b4:	2300      	movne	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c4:	2b40      	cmp	r3, #64	; 0x40
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d017      	beq.n	8001806 <HAL_ADC_IRQHandler+0x21a>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d014      	beq.n	8001806 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d10d      	bne.n	8001806 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f846 	bl	8001888 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0201 	mvn.w	r2, #1
 8001804:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	2b20      	cmp	r3, #32
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d015      	beq.n	8001866 <HAL_ADC_IRQHandler+0x27a>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d012      	beq.n	8001866 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	f043 0202 	orr.w	r2, r3, #2
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f06f 0220 	mvn.w	r2, #32
 8001854:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f820 	bl	800189c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f06f 0220 	mvn.w	r2, #32
 8001864:	601a      	str	r2, [r3, #0]
  }
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1c>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e105      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x228>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b09      	cmp	r3, #9
 80018da:	d925      	bls.n	8001928 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68d9      	ldr	r1, [r3, #12]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3b1e      	subs	r3, #30
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43da      	mvns	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	400a      	ands	r2, r1
 8001900:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	4603      	mov	r3, r0
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4403      	add	r3, r0
 800191a:	3b1e      	subs	r3, #30
 800191c:	409a      	lsls	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	e022      	b.n	800196e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	2207      	movs	r2, #7
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	400a      	ands	r2, r1
 800194a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6919      	ldr	r1, [r3, #16]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	4603      	mov	r3, r0
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4403      	add	r3, r0
 8001964:	409a      	lsls	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b06      	cmp	r3, #6
 8001974:	d824      	bhi.n	80019c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b05      	subs	r3, #5
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	400a      	ands	r2, r1
 8001996:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b05      	subs	r3, #5
 80019b2:	fa00 f203 	lsl.w	r2, r0, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
 80019be:	e04c      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d824      	bhi.n	8001a12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	3b23      	subs	r3, #35	; 0x23
 80019da:	221f      	movs	r2, #31
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b23      	subs	r3, #35	; 0x23
 8001a04:	fa00 f203 	lsl.w	r2, r0, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a10:	e023      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	3b41      	subs	r3, #65	; 0x41
 8001a24:	221f      	movs	r2, #31
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b41      	subs	r3, #65	; 0x41
 8001a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_ADC_ConfigChannel+0x234>)
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <HAL_ADC_ConfigChannel+0x238>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1cc>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b12      	cmp	r3, #18
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_ADC_ConfigChannel+0x238>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d123      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x21e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d003      	beq.n	8001a96 <HAL_ADC_ConfigChannel+0x1e6>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b11      	cmp	r3, #17
 8001a94:	d11b      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d111      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_ADC_ConfigChannel+0x23c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_ADC_ConfigChannel+0x240>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	0c9a      	lsrs	r2, r3, #18
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40012300 	.word	0x40012300
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	20000000 	.word	0x20000000
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afc:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <ADC_Init+0x1f0>)
 8001afe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	021a      	lsls	r2, r3, #8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6899      	ldr	r1, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <ADC_Init+0x1f4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d022      	beq.n	8001bd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6899      	ldr	r1, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6899      	ldr	r1, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	e00f      	b.n	8001bf2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0202 	bic.w	r2, r2, #2
 8001c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6899      	ldr	r1, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7e1b      	ldrb	r3, [r3, #24]
 8001c0c:	005a      	lsls	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01b      	beq.n	8001c58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	035a      	lsls	r2, r3, #13
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	e007      	b.n	8001c68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	051a      	lsls	r2, r3, #20
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001caa:	025a      	lsls	r2, r3, #9
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	029a      	lsls	r2, r3, #10
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40012300 	.word	0x40012300
 8001ce8:	0f000001 	.word	0x0f000001

08001cec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	; (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff29 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff3e 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff31 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f26:	f000 f802 	bl	8001f2e <HAL_SYSTICK_Callback>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e159      	b.n	800220c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8148 	bne.w	8002206 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d00b      	beq.n	8001f96 <HAL_GPIO_Init+0x5a>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f8a:	2b11      	cmp	r3, #17
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d130      	bne.n	8001ff8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 0201 	and.w	r2, r3, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0xfc>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b12      	cmp	r3, #18
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a2 	beq.w	8002206 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b56      	ldr	r3, [pc, #344]	; (8002220 <HAL_GPIO_Init+0x2e4>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a55      	ldr	r2, [pc, #340]	; (8002220 <HAL_GPIO_Init+0x2e4>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_GPIO_Init+0x2e4>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_GPIO_Init+0x2e8>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a48      	ldr	r2, [pc, #288]	; (8002228 <HAL_GPIO_Init+0x2ec>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x202>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a47      	ldr	r2, [pc, #284]	; (800222c <HAL_GPIO_Init+0x2f0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x1fe>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a46      	ldr	r2, [pc, #280]	; (8002230 <HAL_GPIO_Init+0x2f4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x1fa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a45      	ldr	r2, [pc, #276]	; (8002234 <HAL_GPIO_Init+0x2f8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x1f6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a44      	ldr	r2, [pc, #272]	; (8002238 <HAL_GPIO_Init+0x2fc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x1f2>
 800212a:	2304      	movs	r3, #4
 800212c:	e008      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800212e:	2307      	movs	r3, #7
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x204>
 8002132:	2303      	movs	r3, #3
 8002134:	e004      	b.n	8002140 <HAL_GPIO_Init+0x204>
 8002136:	2302      	movs	r3, #2
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800213e:	2300      	movs	r3, #0
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	f002 0203 	and.w	r2, r2, #3
 8002146:	0092      	lsls	r2, r2, #2
 8002148:	4093      	lsls	r3, r2
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002150:	4934      	ldr	r1, [pc, #208]	; (8002224 <HAL_GPIO_Init+0x2e8>)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215e:	4b37      	ldr	r3, [pc, #220]	; (800223c <HAL_GPIO_Init+0x300>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002182:	4a2e      	ldr	r2, [pc, #184]	; (800223c <HAL_GPIO_Init+0x300>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002188:	4b2c      	ldr	r3, [pc, #176]	; (800223c <HAL_GPIO_Init+0x300>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <HAL_GPIO_Init+0x300>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <HAL_GPIO_Init+0x300>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_GPIO_Init+0x300>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_GPIO_Init+0x300>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_GPIO_Init+0x300>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3301      	adds	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b0f      	cmp	r3, #15
 8002210:	f67f aea2 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002214:	bf00      	nop
 8002216:	3724      	adds	r7, #36	; 0x24
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40023800 	.word	0x40023800
 8002224:	40013800 	.word	0x40013800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400
 8002230:	40020800 	.word	0x40020800
 8002234:	40020c00 	.word	0x40020c00
 8002238:	40021000 	.word	0x40021000
 800223c:	40013c00 	.word	0x40013c00

08002240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCC_GetHCLKFreq+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800225c:	f7ff fff0 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002260:	4601      	mov	r1, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0a9b      	lsrs	r3, r3, #10
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4a03      	ldr	r2, [pc, #12]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	08004d1c 	.word	0x08004d1c

08002280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002284:	f7ff ffdc 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002288:	4601      	mov	r1, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0b5b      	lsrs	r3, r3, #13
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4a03      	ldr	r2, [pc, #12]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	08004d1c 	.word	0x08004d1c

080022a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e03f      	b.n	800233a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe ff60 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f90b 	bl	8002508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b088      	sub	sp, #32
 8002346:	af02      	add	r7, sp, #8
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b20      	cmp	r3, #32
 8002360:	f040 8083 	bne.w	800246a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_UART_Transmit+0x2e>
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e07b      	b.n	800246c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_UART_Transmit+0x40>
 800237e:	2302      	movs	r3, #2
 8002380:	e074      	b.n	800246c <HAL_UART_Transmit+0x12a>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2221      	movs	r2, #33	; 0x21
 8002394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002398:	f7ff f828 	bl	80013ec <HAL_GetTick>
 800239c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	88fa      	ldrh	r2, [r7, #6]
 80023a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80023b2:	e042      	b.n	800243a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ca:	d122      	bne.n	8002412 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2200      	movs	r2, #0
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f84c 	bl	8002474 <UART_WaitOnFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e042      	b.n	800246c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	3302      	adds	r3, #2
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	e017      	b.n	800243a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3301      	adds	r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	e013      	b.n	800243a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2200      	movs	r2, #0
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f829 	bl	8002474 <UART_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e01f      	b.n	800246c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	60ba      	str	r2, [r7, #8]
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1b7      	bne.n	80023b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2200      	movs	r2, #0
 800244c:	2140      	movs	r1, #64	; 0x40
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f810 	bl	8002474 <UART_WaitOnFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e006      	b.n	800246c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e000      	b.n	800246c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800246a:	2302      	movs	r3, #2
  }
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002484:	e02c      	b.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d028      	beq.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002494:	f7fe ffaa 	bl	80013ec <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d21d      	bcs.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e00f      	b.n	8002500 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4013      	ands	r3, r2
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d0c3      	beq.n	8002486 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800254a:	f023 030c 	bic.w	r3, r3, #12
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	430b      	orrs	r3, r1
 8002556:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002576:	f040 818b 	bne.w	8002890 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4ac1      	ldr	r2, [pc, #772]	; (8002884 <UART_SetConfig+0x37c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d005      	beq.n	8002590 <UART_SetConfig+0x88>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4abf      	ldr	r2, [pc, #764]	; (8002888 <UART_SetConfig+0x380>)
 800258a:	4293      	cmp	r3, r2
 800258c:	f040 80bd 	bne.w	800270a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002590:	f7ff fe76 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 8002594:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	461d      	mov	r5, r3
 800259a:	f04f 0600 	mov.w	r6, #0
 800259e:	46a8      	mov	r8, r5
 80025a0:	46b1      	mov	r9, r6
 80025a2:	eb18 0308 	adds.w	r3, r8, r8
 80025a6:	eb49 0409 	adc.w	r4, r9, r9
 80025aa:	4698      	mov	r8, r3
 80025ac:	46a1      	mov	r9, r4
 80025ae:	eb18 0805 	adds.w	r8, r8, r5
 80025b2:	eb49 0906 	adc.w	r9, r9, r6
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025ca:	4688      	mov	r8, r1
 80025cc:	4691      	mov	r9, r2
 80025ce:	eb18 0005 	adds.w	r0, r8, r5
 80025d2:	eb49 0106 	adc.w	r1, r9, r6
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	461d      	mov	r5, r3
 80025dc:	f04f 0600 	mov.w	r6, #0
 80025e0:	196b      	adds	r3, r5, r5
 80025e2:	eb46 0406 	adc.w	r4, r6, r6
 80025e6:	461a      	mov	r2, r3
 80025e8:	4623      	mov	r3, r4
 80025ea:	f7fe fae5 	bl	8000bb8 <__aeabi_uldivmod>
 80025ee:	4603      	mov	r3, r0
 80025f0:	460c      	mov	r4, r1
 80025f2:	461a      	mov	r2, r3
 80025f4:	4ba5      	ldr	r3, [pc, #660]	; (800288c <UART_SetConfig+0x384>)
 80025f6:	fba3 2302 	umull	r2, r3, r3, r2
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	461d      	mov	r5, r3
 8002604:	f04f 0600 	mov.w	r6, #0
 8002608:	46a9      	mov	r9, r5
 800260a:	46b2      	mov	sl, r6
 800260c:	eb19 0309 	adds.w	r3, r9, r9
 8002610:	eb4a 040a 	adc.w	r4, sl, sl
 8002614:	4699      	mov	r9, r3
 8002616:	46a2      	mov	sl, r4
 8002618:	eb19 0905 	adds.w	r9, r9, r5
 800261c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002620:	f04f 0100 	mov.w	r1, #0
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800262c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002630:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002634:	4689      	mov	r9, r1
 8002636:	4692      	mov	sl, r2
 8002638:	eb19 0005 	adds.w	r0, r9, r5
 800263c:	eb4a 0106 	adc.w	r1, sl, r6
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	461d      	mov	r5, r3
 8002646:	f04f 0600 	mov.w	r6, #0
 800264a:	196b      	adds	r3, r5, r5
 800264c:	eb46 0406 	adc.w	r4, r6, r6
 8002650:	461a      	mov	r2, r3
 8002652:	4623      	mov	r3, r4
 8002654:	f7fe fab0 	bl	8000bb8 <__aeabi_uldivmod>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	461a      	mov	r2, r3
 800265e:	4b8b      	ldr	r3, [pc, #556]	; (800288c <UART_SetConfig+0x384>)
 8002660:	fba3 1302 	umull	r1, r3, r3, r2
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	2164      	movs	r1, #100	; 0x64
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	3332      	adds	r3, #50	; 0x32
 8002672:	4a86      	ldr	r2, [pc, #536]	; (800288c <UART_SetConfig+0x384>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002680:	4498      	add	r8, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	461d      	mov	r5, r3
 8002686:	f04f 0600 	mov.w	r6, #0
 800268a:	46a9      	mov	r9, r5
 800268c:	46b2      	mov	sl, r6
 800268e:	eb19 0309 	adds.w	r3, r9, r9
 8002692:	eb4a 040a 	adc.w	r4, sl, sl
 8002696:	4699      	mov	r9, r3
 8002698:	46a2      	mov	sl, r4
 800269a:	eb19 0905 	adds.w	r9, r9, r5
 800269e:	eb4a 0a06 	adc.w	sl, sl, r6
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026b6:	4689      	mov	r9, r1
 80026b8:	4692      	mov	sl, r2
 80026ba:	eb19 0005 	adds.w	r0, r9, r5
 80026be:	eb4a 0106 	adc.w	r1, sl, r6
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	461d      	mov	r5, r3
 80026c8:	f04f 0600 	mov.w	r6, #0
 80026cc:	196b      	adds	r3, r5, r5
 80026ce:	eb46 0406 	adc.w	r4, r6, r6
 80026d2:	461a      	mov	r2, r3
 80026d4:	4623      	mov	r3, r4
 80026d6:	f7fe fa6f 	bl	8000bb8 <__aeabi_uldivmod>
 80026da:	4603      	mov	r3, r0
 80026dc:	460c      	mov	r4, r1
 80026de:	461a      	mov	r2, r3
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <UART_SetConfig+0x384>)
 80026e2:	fba3 1302 	umull	r1, r3, r3, r2
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2164      	movs	r1, #100	; 0x64
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	3332      	adds	r3, #50	; 0x32
 80026f4:	4a65      	ldr	r2, [pc, #404]	; (800288c <UART_SetConfig+0x384>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	f003 0207 	and.w	r2, r3, #7
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4442      	add	r2, r8
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	e26f      	b.n	8002bea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800270a:	f7ff fda5 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 800270e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	461d      	mov	r5, r3
 8002714:	f04f 0600 	mov.w	r6, #0
 8002718:	46a8      	mov	r8, r5
 800271a:	46b1      	mov	r9, r6
 800271c:	eb18 0308 	adds.w	r3, r8, r8
 8002720:	eb49 0409 	adc.w	r4, r9, r9
 8002724:	4698      	mov	r8, r3
 8002726:	46a1      	mov	r9, r4
 8002728:	eb18 0805 	adds.w	r8, r8, r5
 800272c:	eb49 0906 	adc.w	r9, r9, r6
 8002730:	f04f 0100 	mov.w	r1, #0
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800273c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002740:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002744:	4688      	mov	r8, r1
 8002746:	4691      	mov	r9, r2
 8002748:	eb18 0005 	adds.w	r0, r8, r5
 800274c:	eb49 0106 	adc.w	r1, r9, r6
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	461d      	mov	r5, r3
 8002756:	f04f 0600 	mov.w	r6, #0
 800275a:	196b      	adds	r3, r5, r5
 800275c:	eb46 0406 	adc.w	r4, r6, r6
 8002760:	461a      	mov	r2, r3
 8002762:	4623      	mov	r3, r4
 8002764:	f7fe fa28 	bl	8000bb8 <__aeabi_uldivmod>
 8002768:	4603      	mov	r3, r0
 800276a:	460c      	mov	r4, r1
 800276c:	461a      	mov	r2, r3
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <UART_SetConfig+0x384>)
 8002770:	fba3 2302 	umull	r2, r3, r3, r2
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	461d      	mov	r5, r3
 800277e:	f04f 0600 	mov.w	r6, #0
 8002782:	46a9      	mov	r9, r5
 8002784:	46b2      	mov	sl, r6
 8002786:	eb19 0309 	adds.w	r3, r9, r9
 800278a:	eb4a 040a 	adc.w	r4, sl, sl
 800278e:	4699      	mov	r9, r3
 8002790:	46a2      	mov	sl, r4
 8002792:	eb19 0905 	adds.w	r9, r9, r5
 8002796:	eb4a 0a06 	adc.w	sl, sl, r6
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027ae:	4689      	mov	r9, r1
 80027b0:	4692      	mov	sl, r2
 80027b2:	eb19 0005 	adds.w	r0, r9, r5
 80027b6:	eb4a 0106 	adc.w	r1, sl, r6
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	461d      	mov	r5, r3
 80027c0:	f04f 0600 	mov.w	r6, #0
 80027c4:	196b      	adds	r3, r5, r5
 80027c6:	eb46 0406 	adc.w	r4, r6, r6
 80027ca:	461a      	mov	r2, r3
 80027cc:	4623      	mov	r3, r4
 80027ce:	f7fe f9f3 	bl	8000bb8 <__aeabi_uldivmod>
 80027d2:	4603      	mov	r3, r0
 80027d4:	460c      	mov	r4, r1
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b2c      	ldr	r3, [pc, #176]	; (800288c <UART_SetConfig+0x384>)
 80027da:	fba3 1302 	umull	r1, r3, r3, r2
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2164      	movs	r1, #100	; 0x64
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	3332      	adds	r3, #50	; 0x32
 80027ec:	4a27      	ldr	r2, [pc, #156]	; (800288c <UART_SetConfig+0x384>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027fa:	4498      	add	r8, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	461d      	mov	r5, r3
 8002800:	f04f 0600 	mov.w	r6, #0
 8002804:	46a9      	mov	r9, r5
 8002806:	46b2      	mov	sl, r6
 8002808:	eb19 0309 	adds.w	r3, r9, r9
 800280c:	eb4a 040a 	adc.w	r4, sl, sl
 8002810:	4699      	mov	r9, r3
 8002812:	46a2      	mov	sl, r4
 8002814:	eb19 0905 	adds.w	r9, r9, r5
 8002818:	eb4a 0a06 	adc.w	sl, sl, r6
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002828:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800282c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002830:	4689      	mov	r9, r1
 8002832:	4692      	mov	sl, r2
 8002834:	eb19 0005 	adds.w	r0, r9, r5
 8002838:	eb4a 0106 	adc.w	r1, sl, r6
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	461d      	mov	r5, r3
 8002842:	f04f 0600 	mov.w	r6, #0
 8002846:	196b      	adds	r3, r5, r5
 8002848:	eb46 0406 	adc.w	r4, r6, r6
 800284c:	461a      	mov	r2, r3
 800284e:	4623      	mov	r3, r4
 8002850:	f7fe f9b2 	bl	8000bb8 <__aeabi_uldivmod>
 8002854:	4603      	mov	r3, r0
 8002856:	460c      	mov	r4, r1
 8002858:	461a      	mov	r2, r3
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <UART_SetConfig+0x384>)
 800285c:	fba3 1302 	umull	r1, r3, r3, r2
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	2164      	movs	r1, #100	; 0x64
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	3332      	adds	r3, #50	; 0x32
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <UART_SetConfig+0x384>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	f003 0207 	and.w	r2, r3, #7
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4442      	add	r2, r8
 8002880:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002882:	e1b2      	b.n	8002bea <UART_SetConfig+0x6e2>
 8002884:	40011000 	.word	0x40011000
 8002888:	40011400 	.word	0x40011400
 800288c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4ad7      	ldr	r2, [pc, #860]	; (8002bf4 <UART_SetConfig+0x6ec>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d005      	beq.n	80028a6 <UART_SetConfig+0x39e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4ad6      	ldr	r2, [pc, #856]	; (8002bf8 <UART_SetConfig+0x6f0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	f040 80d1 	bne.w	8002a48 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80028a6:	f7ff fceb 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 80028aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	469a      	mov	sl, r3
 80028b0:	f04f 0b00 	mov.w	fp, #0
 80028b4:	46d0      	mov	r8, sl
 80028b6:	46d9      	mov	r9, fp
 80028b8:	eb18 0308 	adds.w	r3, r8, r8
 80028bc:	eb49 0409 	adc.w	r4, r9, r9
 80028c0:	4698      	mov	r8, r3
 80028c2:	46a1      	mov	r9, r4
 80028c4:	eb18 080a 	adds.w	r8, r8, sl
 80028c8:	eb49 090b 	adc.w	r9, r9, fp
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028e0:	4688      	mov	r8, r1
 80028e2:	4691      	mov	r9, r2
 80028e4:	eb1a 0508 	adds.w	r5, sl, r8
 80028e8:	eb4b 0609 	adc.w	r6, fp, r9
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4619      	mov	r1, r3
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	f04f 0400 	mov.w	r4, #0
 80028fe:	0094      	lsls	r4, r2, #2
 8002900:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002904:	008b      	lsls	r3, r1, #2
 8002906:	461a      	mov	r2, r3
 8002908:	4623      	mov	r3, r4
 800290a:	4628      	mov	r0, r5
 800290c:	4631      	mov	r1, r6
 800290e:	f7fe f953 	bl	8000bb8 <__aeabi_uldivmod>
 8002912:	4603      	mov	r3, r0
 8002914:	460c      	mov	r4, r1
 8002916:	461a      	mov	r2, r3
 8002918:	4bb8      	ldr	r3, [pc, #736]	; (8002bfc <UART_SetConfig+0x6f4>)
 800291a:	fba3 2302 	umull	r2, r3, r3, r2
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	469b      	mov	fp, r3
 8002928:	f04f 0c00 	mov.w	ip, #0
 800292c:	46d9      	mov	r9, fp
 800292e:	46e2      	mov	sl, ip
 8002930:	eb19 0309 	adds.w	r3, r9, r9
 8002934:	eb4a 040a 	adc.w	r4, sl, sl
 8002938:	4699      	mov	r9, r3
 800293a:	46a2      	mov	sl, r4
 800293c:	eb19 090b 	adds.w	r9, r9, fp
 8002940:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002944:	f04f 0100 	mov.w	r1, #0
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002950:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002954:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002958:	4689      	mov	r9, r1
 800295a:	4692      	mov	sl, r2
 800295c:	eb1b 0509 	adds.w	r5, fp, r9
 8002960:	eb4c 060a 	adc.w	r6, ip, sl
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4619      	mov	r1, r3
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	f04f 0400 	mov.w	r4, #0
 8002976:	0094      	lsls	r4, r2, #2
 8002978:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800297c:	008b      	lsls	r3, r1, #2
 800297e:	461a      	mov	r2, r3
 8002980:	4623      	mov	r3, r4
 8002982:	4628      	mov	r0, r5
 8002984:	4631      	mov	r1, r6
 8002986:	f7fe f917 	bl	8000bb8 <__aeabi_uldivmod>
 800298a:	4603      	mov	r3, r0
 800298c:	460c      	mov	r4, r1
 800298e:	461a      	mov	r2, r3
 8002990:	4b9a      	ldr	r3, [pc, #616]	; (8002bfc <UART_SetConfig+0x6f4>)
 8002992:	fba3 1302 	umull	r1, r3, r3, r2
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2164      	movs	r1, #100	; 0x64
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	3332      	adds	r3, #50	; 0x32
 80029a4:	4a95      	ldr	r2, [pc, #596]	; (8002bfc <UART_SetConfig+0x6f4>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b0:	4498      	add	r8, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	469b      	mov	fp, r3
 80029b6:	f04f 0c00 	mov.w	ip, #0
 80029ba:	46d9      	mov	r9, fp
 80029bc:	46e2      	mov	sl, ip
 80029be:	eb19 0309 	adds.w	r3, r9, r9
 80029c2:	eb4a 040a 	adc.w	r4, sl, sl
 80029c6:	4699      	mov	r9, r3
 80029c8:	46a2      	mov	sl, r4
 80029ca:	eb19 090b 	adds.w	r9, r9, fp
 80029ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029e6:	4689      	mov	r9, r1
 80029e8:	4692      	mov	sl, r2
 80029ea:	eb1b 0509 	adds.w	r5, fp, r9
 80029ee:	eb4c 060a 	adc.w	r6, ip, sl
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4619      	mov	r1, r3
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	f04f 0400 	mov.w	r4, #0
 8002a04:	0094      	lsls	r4, r2, #2
 8002a06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a0a:	008b      	lsls	r3, r1, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	4628      	mov	r0, r5
 8002a12:	4631      	mov	r1, r6
 8002a14:	f7fe f8d0 	bl	8000bb8 <__aeabi_uldivmod>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b77      	ldr	r3, [pc, #476]	; (8002bfc <UART_SetConfig+0x6f4>)
 8002a20:	fba3 1302 	umull	r1, r3, r3, r2
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	2164      	movs	r1, #100	; 0x64
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	3332      	adds	r3, #50	; 0x32
 8002a32:	4a72      	ldr	r2, [pc, #456]	; (8002bfc <UART_SetConfig+0x6f4>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	f003 020f 	and.w	r2, r3, #15
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4442      	add	r2, r8
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	e0d0      	b.n	8002bea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a48:	f7ff fc06 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8002a4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	469a      	mov	sl, r3
 8002a52:	f04f 0b00 	mov.w	fp, #0
 8002a56:	46d0      	mov	r8, sl
 8002a58:	46d9      	mov	r9, fp
 8002a5a:	eb18 0308 	adds.w	r3, r8, r8
 8002a5e:	eb49 0409 	adc.w	r4, r9, r9
 8002a62:	4698      	mov	r8, r3
 8002a64:	46a1      	mov	r9, r4
 8002a66:	eb18 080a 	adds.w	r8, r8, sl
 8002a6a:	eb49 090b 	adc.w	r9, r9, fp
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a82:	4688      	mov	r8, r1
 8002a84:	4691      	mov	r9, r2
 8002a86:	eb1a 0508 	adds.w	r5, sl, r8
 8002a8a:	eb4b 0609 	adc.w	r6, fp, r9
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4619      	mov	r1, r3
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	0094      	lsls	r4, r2, #2
 8002aa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002aa6:	008b      	lsls	r3, r1, #2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4623      	mov	r3, r4
 8002aac:	4628      	mov	r0, r5
 8002aae:	4631      	mov	r1, r6
 8002ab0:	f7fe f882 	bl	8000bb8 <__aeabi_uldivmod>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <UART_SetConfig+0x6f4>)
 8002abc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	469b      	mov	fp, r3
 8002aca:	f04f 0c00 	mov.w	ip, #0
 8002ace:	46d9      	mov	r9, fp
 8002ad0:	46e2      	mov	sl, ip
 8002ad2:	eb19 0309 	adds.w	r3, r9, r9
 8002ad6:	eb4a 040a 	adc.w	r4, sl, sl
 8002ada:	4699      	mov	r9, r3
 8002adc:	46a2      	mov	sl, r4
 8002ade:	eb19 090b 	adds.w	r9, r9, fp
 8002ae2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002af6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002afa:	4689      	mov	r9, r1
 8002afc:	4692      	mov	sl, r2
 8002afe:	eb1b 0509 	adds.w	r5, fp, r9
 8002b02:	eb4c 060a 	adc.w	r6, ip, sl
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f04f 0400 	mov.w	r4, #0
 8002b18:	0094      	lsls	r4, r2, #2
 8002b1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b1e:	008b      	lsls	r3, r1, #2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4623      	mov	r3, r4
 8002b24:	4628      	mov	r0, r5
 8002b26:	4631      	mov	r1, r6
 8002b28:	f7fe f846 	bl	8000bb8 <__aeabi_uldivmod>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	460c      	mov	r4, r1
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <UART_SetConfig+0x6f4>)
 8002b34:	fba3 1302 	umull	r1, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	2164      	movs	r1, #100	; 0x64
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	3332      	adds	r3, #50	; 0x32
 8002b46:	4a2d      	ldr	r2, [pc, #180]	; (8002bfc <UART_SetConfig+0x6f4>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b52:	4498      	add	r8, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	469b      	mov	fp, r3
 8002b58:	f04f 0c00 	mov.w	ip, #0
 8002b5c:	46d9      	mov	r9, fp
 8002b5e:	46e2      	mov	sl, ip
 8002b60:	eb19 0309 	adds.w	r3, r9, r9
 8002b64:	eb4a 040a 	adc.w	r4, sl, sl
 8002b68:	4699      	mov	r9, r3
 8002b6a:	46a2      	mov	sl, r4
 8002b6c:	eb19 090b 	adds.w	r9, r9, fp
 8002b70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b74:	f04f 0100 	mov.w	r1, #0
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b88:	4689      	mov	r9, r1
 8002b8a:	4692      	mov	sl, r2
 8002b8c:	eb1b 0509 	adds.w	r5, fp, r9
 8002b90:	eb4c 060a 	adc.w	r6, ip, sl
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	f04f 0400 	mov.w	r4, #0
 8002ba6:	0094      	lsls	r4, r2, #2
 8002ba8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bac:	008b      	lsls	r3, r1, #2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	4631      	mov	r1, r6
 8002bb6:	f7fd ffff 	bl	8000bb8 <__aeabi_uldivmod>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <UART_SetConfig+0x6f4>)
 8002bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2164      	movs	r1, #100	; 0x64
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	3332      	adds	r3, #50	; 0x32
 8002bd4:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <UART_SetConfig+0x6f4>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4442      	add	r2, r8
 8002be6:	609a      	str	r2, [r3, #8]
}
 8002be8:	e7ff      	b.n	8002bea <UART_SetConfig+0x6e2>
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	40011400 	.word	0x40011400
 8002bfc:	51eb851f 	.word	0x51eb851f

08002c00 <__errno>:
 8002c00:	4b01      	ldr	r3, [pc, #4]	; (8002c08 <__errno+0x8>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	2000000c 	.word	0x2000000c

08002c0c <__libc_init_array>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	4e0d      	ldr	r6, [pc, #52]	; (8002c44 <__libc_init_array+0x38>)
 8002c10:	4c0d      	ldr	r4, [pc, #52]	; (8002c48 <__libc_init_array+0x3c>)
 8002c12:	1ba4      	subs	r4, r4, r6
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	2500      	movs	r5, #0
 8002c18:	42a5      	cmp	r5, r4
 8002c1a:	d109      	bne.n	8002c30 <__libc_init_array+0x24>
 8002c1c:	4e0b      	ldr	r6, [pc, #44]	; (8002c4c <__libc_init_array+0x40>)
 8002c1e:	4c0c      	ldr	r4, [pc, #48]	; (8002c50 <__libc_init_array+0x44>)
 8002c20:	f002 f85e 	bl	8004ce0 <_init>
 8002c24:	1ba4      	subs	r4, r4, r6
 8002c26:	10a4      	asrs	r4, r4, #2
 8002c28:	2500      	movs	r5, #0
 8002c2a:	42a5      	cmp	r5, r4
 8002c2c:	d105      	bne.n	8002c3a <__libc_init_array+0x2e>
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c34:	4798      	blx	r3
 8002c36:	3501      	adds	r5, #1
 8002c38:	e7ee      	b.n	8002c18 <__libc_init_array+0xc>
 8002c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c3e:	4798      	blx	r3
 8002c40:	3501      	adds	r5, #1
 8002c42:	e7f2      	b.n	8002c2a <__libc_init_array+0x1e>
 8002c44:	08004f88 	.word	0x08004f88
 8002c48:	08004f88 	.word	0x08004f88
 8002c4c:	08004f88 	.word	0x08004f88
 8002c50:	08004f8c 	.word	0x08004f8c

08002c54 <memset>:
 8002c54:	4402      	add	r2, r0
 8002c56:	4603      	mov	r3, r0
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d100      	bne.n	8002c5e <memset+0xa>
 8002c5c:	4770      	bx	lr
 8002c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c62:	e7f9      	b.n	8002c58 <memset+0x4>

08002c64 <__cvt>:
 8002c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c68:	ec55 4b10 	vmov	r4, r5, d0
 8002c6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002c6e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002c72:	2d00      	cmp	r5, #0
 8002c74:	460e      	mov	r6, r1
 8002c76:	4691      	mov	r9, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	bfb8      	it	lt
 8002c7c:	4622      	movlt	r2, r4
 8002c7e:	462b      	mov	r3, r5
 8002c80:	f027 0720 	bic.w	r7, r7, #32
 8002c84:	bfbb      	ittet	lt
 8002c86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002c8a:	461d      	movlt	r5, r3
 8002c8c:	2300      	movge	r3, #0
 8002c8e:	232d      	movlt	r3, #45	; 0x2d
 8002c90:	bfb8      	it	lt
 8002c92:	4614      	movlt	r4, r2
 8002c94:	2f46      	cmp	r7, #70	; 0x46
 8002c96:	700b      	strb	r3, [r1, #0]
 8002c98:	d004      	beq.n	8002ca4 <__cvt+0x40>
 8002c9a:	2f45      	cmp	r7, #69	; 0x45
 8002c9c:	d100      	bne.n	8002ca0 <__cvt+0x3c>
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	e000      	b.n	8002ca6 <__cvt+0x42>
 8002ca4:	2103      	movs	r1, #3
 8002ca6:	ab03      	add	r3, sp, #12
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	ab02      	add	r3, sp, #8
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	4632      	mov	r2, r6
 8002cb0:	4653      	mov	r3, sl
 8002cb2:	ec45 4b10 	vmov	d0, r4, r5
 8002cb6:	f000 fcdf 	bl	8003678 <_dtoa_r>
 8002cba:	2f47      	cmp	r7, #71	; 0x47
 8002cbc:	4680      	mov	r8, r0
 8002cbe:	d102      	bne.n	8002cc6 <__cvt+0x62>
 8002cc0:	f019 0f01 	tst.w	r9, #1
 8002cc4:	d026      	beq.n	8002d14 <__cvt+0xb0>
 8002cc6:	2f46      	cmp	r7, #70	; 0x46
 8002cc8:	eb08 0906 	add.w	r9, r8, r6
 8002ccc:	d111      	bne.n	8002cf2 <__cvt+0x8e>
 8002cce:	f898 3000 	ldrb.w	r3, [r8]
 8002cd2:	2b30      	cmp	r3, #48	; 0x30
 8002cd4:	d10a      	bne.n	8002cec <__cvt+0x88>
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2300      	movs	r3, #0
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fefb 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ce2:	b918      	cbnz	r0, 8002cec <__cvt+0x88>
 8002ce4:	f1c6 0601 	rsb	r6, r6, #1
 8002ce8:	f8ca 6000 	str.w	r6, [sl]
 8002cec:	f8da 3000 	ldr.w	r3, [sl]
 8002cf0:	4499      	add	r9, r3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	f7fd feed 	bl	8000ad8 <__aeabi_dcmpeq>
 8002cfe:	b938      	cbnz	r0, 8002d10 <__cvt+0xac>
 8002d00:	2230      	movs	r2, #48	; 0x30
 8002d02:	9b03      	ldr	r3, [sp, #12]
 8002d04:	454b      	cmp	r3, r9
 8002d06:	d205      	bcs.n	8002d14 <__cvt+0xb0>
 8002d08:	1c59      	adds	r1, r3, #1
 8002d0a:	9103      	str	r1, [sp, #12]
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e7f8      	b.n	8002d02 <__cvt+0x9e>
 8002d10:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d14:	9b03      	ldr	r3, [sp, #12]
 8002d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d18:	eba3 0308 	sub.w	r3, r3, r8
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	b004      	add	sp, #16
 8002d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d26 <__exponent>:
 8002d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	bfba      	itte	lt
 8002d2e:	4249      	neglt	r1, r1
 8002d30:	232d      	movlt	r3, #45	; 0x2d
 8002d32:	232b      	movge	r3, #43	; 0x2b
 8002d34:	2909      	cmp	r1, #9
 8002d36:	f804 2b02 	strb.w	r2, [r4], #2
 8002d3a:	7043      	strb	r3, [r0, #1]
 8002d3c:	dd20      	ble.n	8002d80 <__exponent+0x5a>
 8002d3e:	f10d 0307 	add.w	r3, sp, #7
 8002d42:	461f      	mov	r7, r3
 8002d44:	260a      	movs	r6, #10
 8002d46:	fb91 f5f6 	sdiv	r5, r1, r6
 8002d4a:	fb06 1115 	mls	r1, r6, r5, r1
 8002d4e:	3130      	adds	r1, #48	; 0x30
 8002d50:	2d09      	cmp	r5, #9
 8002d52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002d56:	f103 32ff 	add.w	r2, r3, #4294967295
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	dc09      	bgt.n	8002d72 <__exponent+0x4c>
 8002d5e:	3130      	adds	r1, #48	; 0x30
 8002d60:	3b02      	subs	r3, #2
 8002d62:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002d66:	42bb      	cmp	r3, r7
 8002d68:	4622      	mov	r2, r4
 8002d6a:	d304      	bcc.n	8002d76 <__exponent+0x50>
 8002d6c:	1a10      	subs	r0, r2, r0
 8002d6e:	b003      	add	sp, #12
 8002d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d72:	4613      	mov	r3, r2
 8002d74:	e7e7      	b.n	8002d46 <__exponent+0x20>
 8002d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d7a:	f804 2b01 	strb.w	r2, [r4], #1
 8002d7e:	e7f2      	b.n	8002d66 <__exponent+0x40>
 8002d80:	2330      	movs	r3, #48	; 0x30
 8002d82:	4419      	add	r1, r3
 8002d84:	7083      	strb	r3, [r0, #2]
 8002d86:	1d02      	adds	r2, r0, #4
 8002d88:	70c1      	strb	r1, [r0, #3]
 8002d8a:	e7ef      	b.n	8002d6c <__exponent+0x46>

08002d8c <_printf_float>:
 8002d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d90:	b08d      	sub	sp, #52	; 0x34
 8002d92:	460c      	mov	r4, r1
 8002d94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002d98:	4616      	mov	r6, r2
 8002d9a:	461f      	mov	r7, r3
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	f001 fa23 	bl	80041e8 <_localeconv_r>
 8002da2:	6803      	ldr	r3, [r0, #0]
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fa1a 	bl	80001e0 <strlen>
 8002dac:	2300      	movs	r3, #0
 8002dae:	930a      	str	r3, [sp, #40]	; 0x28
 8002db0:	f8d8 3000 	ldr.w	r3, [r8]
 8002db4:	9005      	str	r0, [sp, #20]
 8002db6:	3307      	adds	r3, #7
 8002db8:	f023 0307 	bic.w	r3, r3, #7
 8002dbc:	f103 0208 	add.w	r2, r3, #8
 8002dc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002dc4:	f8d4 b000 	ldr.w	fp, [r4]
 8002dc8:	f8c8 2000 	str.w	r2, [r8]
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002dd4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002dd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002ddc:	9307      	str	r3, [sp, #28]
 8002dde:	f8cd 8018 	str.w	r8, [sp, #24]
 8002de2:	f04f 32ff 	mov.w	r2, #4294967295
 8002de6:	4ba7      	ldr	r3, [pc, #668]	; (8003084 <_printf_float+0x2f8>)
 8002de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002dec:	f7fd fea6 	bl	8000b3c <__aeabi_dcmpun>
 8002df0:	bb70      	cbnz	r0, 8002e50 <_printf_float+0xc4>
 8002df2:	f04f 32ff 	mov.w	r2, #4294967295
 8002df6:	4ba3      	ldr	r3, [pc, #652]	; (8003084 <_printf_float+0x2f8>)
 8002df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002dfc:	f7fd fe80 	bl	8000b00 <__aeabi_dcmple>
 8002e00:	bb30      	cbnz	r0, 8002e50 <_printf_float+0xc4>
 8002e02:	2200      	movs	r2, #0
 8002e04:	2300      	movs	r3, #0
 8002e06:	4640      	mov	r0, r8
 8002e08:	4649      	mov	r1, r9
 8002e0a:	f7fd fe6f 	bl	8000aec <__aeabi_dcmplt>
 8002e0e:	b110      	cbz	r0, 8002e16 <_printf_float+0x8a>
 8002e10:	232d      	movs	r3, #45	; 0x2d
 8002e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e16:	4a9c      	ldr	r2, [pc, #624]	; (8003088 <_printf_float+0x2fc>)
 8002e18:	4b9c      	ldr	r3, [pc, #624]	; (800308c <_printf_float+0x300>)
 8002e1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002e1e:	bf8c      	ite	hi
 8002e20:	4690      	movhi	r8, r2
 8002e22:	4698      	movls	r8, r3
 8002e24:	2303      	movs	r3, #3
 8002e26:	f02b 0204 	bic.w	r2, fp, #4
 8002e2a:	6123      	str	r3, [r4, #16]
 8002e2c:	6022      	str	r2, [r4, #0]
 8002e2e:	f04f 0900 	mov.w	r9, #0
 8002e32:	9700      	str	r7, [sp, #0]
 8002e34:	4633      	mov	r3, r6
 8002e36:	aa0b      	add	r2, sp, #44	; 0x2c
 8002e38:	4621      	mov	r1, r4
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f000 f9e6 	bl	800320c <_printf_common>
 8002e40:	3001      	adds	r0, #1
 8002e42:	f040 808d 	bne.w	8002f60 <_printf_float+0x1d4>
 8002e46:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4a:	b00d      	add	sp, #52	; 0x34
 8002e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	4640      	mov	r0, r8
 8002e56:	4649      	mov	r1, r9
 8002e58:	f7fd fe70 	bl	8000b3c <__aeabi_dcmpun>
 8002e5c:	b110      	cbz	r0, 8002e64 <_printf_float+0xd8>
 8002e5e:	4a8c      	ldr	r2, [pc, #560]	; (8003090 <_printf_float+0x304>)
 8002e60:	4b8c      	ldr	r3, [pc, #560]	; (8003094 <_printf_float+0x308>)
 8002e62:	e7da      	b.n	8002e1a <_printf_float+0x8e>
 8002e64:	6861      	ldr	r1, [r4, #4]
 8002e66:	1c4b      	adds	r3, r1, #1
 8002e68:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002e6c:	a80a      	add	r0, sp, #40	; 0x28
 8002e6e:	d13e      	bne.n	8002eee <_printf_float+0x162>
 8002e70:	2306      	movs	r3, #6
 8002e72:	6063      	str	r3, [r4, #4]
 8002e74:	2300      	movs	r3, #0
 8002e76:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002e7a:	ab09      	add	r3, sp, #36	; 0x24
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	ec49 8b10 	vmov	d0, r8, r9
 8002e82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002e86:	6022      	str	r2, [r4, #0]
 8002e88:	f8cd a004 	str.w	sl, [sp, #4]
 8002e8c:	6861      	ldr	r1, [r4, #4]
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f7ff fee8 	bl	8002c64 <__cvt>
 8002e94:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002e98:	2b47      	cmp	r3, #71	; 0x47
 8002e9a:	4680      	mov	r8, r0
 8002e9c:	d109      	bne.n	8002eb2 <_printf_float+0x126>
 8002e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea0:	1cd8      	adds	r0, r3, #3
 8002ea2:	db02      	blt.n	8002eaa <_printf_float+0x11e>
 8002ea4:	6862      	ldr	r2, [r4, #4]
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	dd47      	ble.n	8002f3a <_printf_float+0x1ae>
 8002eaa:	f1aa 0a02 	sub.w	sl, sl, #2
 8002eae:	fa5f fa8a 	uxtb.w	sl, sl
 8002eb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002eb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002eb8:	d824      	bhi.n	8002f04 <_printf_float+0x178>
 8002eba:	3901      	subs	r1, #1
 8002ebc:	4652      	mov	r2, sl
 8002ebe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002ec2:	9109      	str	r1, [sp, #36]	; 0x24
 8002ec4:	f7ff ff2f 	bl	8002d26 <__exponent>
 8002ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002eca:	1813      	adds	r3, r2, r0
 8002ecc:	2a01      	cmp	r2, #1
 8002ece:	4681      	mov	r9, r0
 8002ed0:	6123      	str	r3, [r4, #16]
 8002ed2:	dc02      	bgt.n	8002eda <_printf_float+0x14e>
 8002ed4:	6822      	ldr	r2, [r4, #0]
 8002ed6:	07d1      	lsls	r1, r2, #31
 8002ed8:	d501      	bpl.n	8002ede <_printf_float+0x152>
 8002eda:	3301      	adds	r3, #1
 8002edc:	6123      	str	r3, [r4, #16]
 8002ede:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0a5      	beq.n	8002e32 <_printf_float+0xa6>
 8002ee6:	232d      	movs	r3, #45	; 0x2d
 8002ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eec:	e7a1      	b.n	8002e32 <_printf_float+0xa6>
 8002eee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002ef2:	f000 8177 	beq.w	80031e4 <_printf_float+0x458>
 8002ef6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002efa:	d1bb      	bne.n	8002e74 <_printf_float+0xe8>
 8002efc:	2900      	cmp	r1, #0
 8002efe:	d1b9      	bne.n	8002e74 <_printf_float+0xe8>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e7b6      	b.n	8002e72 <_printf_float+0xe6>
 8002f04:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002f08:	d119      	bne.n	8002f3e <_printf_float+0x1b2>
 8002f0a:	2900      	cmp	r1, #0
 8002f0c:	6863      	ldr	r3, [r4, #4]
 8002f0e:	dd0c      	ble.n	8002f2a <_printf_float+0x19e>
 8002f10:	6121      	str	r1, [r4, #16]
 8002f12:	b913      	cbnz	r3, 8002f1a <_printf_float+0x18e>
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	07d2      	lsls	r2, r2, #31
 8002f18:	d502      	bpl.n	8002f20 <_printf_float+0x194>
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	440b      	add	r3, r1
 8002f1e:	6123      	str	r3, [r4, #16]
 8002f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f22:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f24:	f04f 0900 	mov.w	r9, #0
 8002f28:	e7d9      	b.n	8002ede <_printf_float+0x152>
 8002f2a:	b913      	cbnz	r3, 8002f32 <_printf_float+0x1a6>
 8002f2c:	6822      	ldr	r2, [r4, #0]
 8002f2e:	07d0      	lsls	r0, r2, #31
 8002f30:	d501      	bpl.n	8002f36 <_printf_float+0x1aa>
 8002f32:	3302      	adds	r3, #2
 8002f34:	e7f3      	b.n	8002f1e <_printf_float+0x192>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e7f1      	b.n	8002f1e <_printf_float+0x192>
 8002f3a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002f3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002f42:	4293      	cmp	r3, r2
 8002f44:	db05      	blt.n	8002f52 <_printf_float+0x1c6>
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	6123      	str	r3, [r4, #16]
 8002f4a:	07d1      	lsls	r1, r2, #31
 8002f4c:	d5e8      	bpl.n	8002f20 <_printf_float+0x194>
 8002f4e:	3301      	adds	r3, #1
 8002f50:	e7e5      	b.n	8002f1e <_printf_float+0x192>
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bfd4      	ite	le
 8002f56:	f1c3 0302 	rsble	r3, r3, #2
 8002f5a:	2301      	movgt	r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	e7de      	b.n	8002f1e <_printf_float+0x192>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	055a      	lsls	r2, r3, #21
 8002f64:	d407      	bmi.n	8002f76 <_printf_float+0x1ea>
 8002f66:	6923      	ldr	r3, [r4, #16]
 8002f68:	4642      	mov	r2, r8
 8002f6a:	4631      	mov	r1, r6
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	47b8      	blx	r7
 8002f70:	3001      	adds	r0, #1
 8002f72:	d12b      	bne.n	8002fcc <_printf_float+0x240>
 8002f74:	e767      	b.n	8002e46 <_printf_float+0xba>
 8002f76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002f7a:	f240 80dc 	bls.w	8003136 <_printf_float+0x3aa>
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2300      	movs	r3, #0
 8002f82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f86:	f7fd fda7 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d033      	beq.n	8002ff6 <_printf_float+0x26a>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4a41      	ldr	r2, [pc, #260]	; (8003098 <_printf_float+0x30c>)
 8002f92:	4631      	mov	r1, r6
 8002f94:	4628      	mov	r0, r5
 8002f96:	47b8      	blx	r7
 8002f98:	3001      	adds	r0, #1
 8002f9a:	f43f af54 	beq.w	8002e46 <_printf_float+0xba>
 8002f9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	db02      	blt.n	8002fac <_printf_float+0x220>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	07d8      	lsls	r0, r3, #31
 8002faa:	d50f      	bpl.n	8002fcc <_printf_float+0x240>
 8002fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fb0:	4631      	mov	r1, r6
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	47b8      	blx	r7
 8002fb6:	3001      	adds	r0, #1
 8002fb8:	f43f af45 	beq.w	8002e46 <_printf_float+0xba>
 8002fbc:	f04f 0800 	mov.w	r8, #0
 8002fc0:	f104 091a 	add.w	r9, r4, #26
 8002fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	4543      	cmp	r3, r8
 8002fca:	dc09      	bgt.n	8002fe0 <_printf_float+0x254>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	079b      	lsls	r3, r3, #30
 8002fd0:	f100 8103 	bmi.w	80031da <_printf_float+0x44e>
 8002fd4:	68e0      	ldr	r0, [r4, #12]
 8002fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fd8:	4298      	cmp	r0, r3
 8002fda:	bfb8      	it	lt
 8002fdc:	4618      	movlt	r0, r3
 8002fde:	e734      	b.n	8002e4a <_printf_float+0xbe>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	464a      	mov	r2, r9
 8002fe4:	4631      	mov	r1, r6
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	47b8      	blx	r7
 8002fea:	3001      	adds	r0, #1
 8002fec:	f43f af2b 	beq.w	8002e46 <_printf_float+0xba>
 8002ff0:	f108 0801 	add.w	r8, r8, #1
 8002ff4:	e7e6      	b.n	8002fc4 <_printf_float+0x238>
 8002ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	dc2b      	bgt.n	8003054 <_printf_float+0x2c8>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	4a26      	ldr	r2, [pc, #152]	; (8003098 <_printf_float+0x30c>)
 8003000:	4631      	mov	r1, r6
 8003002:	4628      	mov	r0, r5
 8003004:	47b8      	blx	r7
 8003006:	3001      	adds	r0, #1
 8003008:	f43f af1d 	beq.w	8002e46 <_printf_float+0xba>
 800300c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800300e:	b923      	cbnz	r3, 800301a <_printf_float+0x28e>
 8003010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003012:	b913      	cbnz	r3, 800301a <_printf_float+0x28e>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	07d9      	lsls	r1, r3, #31
 8003018:	d5d8      	bpl.n	8002fcc <_printf_float+0x240>
 800301a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800301e:	4631      	mov	r1, r6
 8003020:	4628      	mov	r0, r5
 8003022:	47b8      	blx	r7
 8003024:	3001      	adds	r0, #1
 8003026:	f43f af0e 	beq.w	8002e46 <_printf_float+0xba>
 800302a:	f04f 0900 	mov.w	r9, #0
 800302e:	f104 0a1a 	add.w	sl, r4, #26
 8003032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003034:	425b      	negs	r3, r3
 8003036:	454b      	cmp	r3, r9
 8003038:	dc01      	bgt.n	800303e <_printf_float+0x2b2>
 800303a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800303c:	e794      	b.n	8002f68 <_printf_float+0x1dc>
 800303e:	2301      	movs	r3, #1
 8003040:	4652      	mov	r2, sl
 8003042:	4631      	mov	r1, r6
 8003044:	4628      	mov	r0, r5
 8003046:	47b8      	blx	r7
 8003048:	3001      	adds	r0, #1
 800304a:	f43f aefc 	beq.w	8002e46 <_printf_float+0xba>
 800304e:	f109 0901 	add.w	r9, r9, #1
 8003052:	e7ee      	b.n	8003032 <_printf_float+0x2a6>
 8003054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003058:	429a      	cmp	r2, r3
 800305a:	bfa8      	it	ge
 800305c:	461a      	movge	r2, r3
 800305e:	2a00      	cmp	r2, #0
 8003060:	4691      	mov	r9, r2
 8003062:	dd07      	ble.n	8003074 <_printf_float+0x2e8>
 8003064:	4613      	mov	r3, r2
 8003066:	4631      	mov	r1, r6
 8003068:	4642      	mov	r2, r8
 800306a:	4628      	mov	r0, r5
 800306c:	47b8      	blx	r7
 800306e:	3001      	adds	r0, #1
 8003070:	f43f aee9 	beq.w	8002e46 <_printf_float+0xba>
 8003074:	f104 031a 	add.w	r3, r4, #26
 8003078:	f04f 0b00 	mov.w	fp, #0
 800307c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003080:	9306      	str	r3, [sp, #24]
 8003082:	e015      	b.n	80030b0 <_printf_float+0x324>
 8003084:	7fefffff 	.word	0x7fefffff
 8003088:	08004d28 	.word	0x08004d28
 800308c:	08004d24 	.word	0x08004d24
 8003090:	08004d30 	.word	0x08004d30
 8003094:	08004d2c 	.word	0x08004d2c
 8003098:	08004d34 	.word	0x08004d34
 800309c:	2301      	movs	r3, #1
 800309e:	9a06      	ldr	r2, [sp, #24]
 80030a0:	4631      	mov	r1, r6
 80030a2:	4628      	mov	r0, r5
 80030a4:	47b8      	blx	r7
 80030a6:	3001      	adds	r0, #1
 80030a8:	f43f aecd 	beq.w	8002e46 <_printf_float+0xba>
 80030ac:	f10b 0b01 	add.w	fp, fp, #1
 80030b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80030b4:	ebaa 0309 	sub.w	r3, sl, r9
 80030b8:	455b      	cmp	r3, fp
 80030ba:	dcef      	bgt.n	800309c <_printf_float+0x310>
 80030bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030c0:	429a      	cmp	r2, r3
 80030c2:	44d0      	add	r8, sl
 80030c4:	db15      	blt.n	80030f2 <_printf_float+0x366>
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	07da      	lsls	r2, r3, #31
 80030ca:	d412      	bmi.n	80030f2 <_printf_float+0x366>
 80030cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80030d0:	eba3 020a 	sub.w	r2, r3, sl
 80030d4:	eba3 0a01 	sub.w	sl, r3, r1
 80030d8:	4592      	cmp	sl, r2
 80030da:	bfa8      	it	ge
 80030dc:	4692      	movge	sl, r2
 80030de:	f1ba 0f00 	cmp.w	sl, #0
 80030e2:	dc0e      	bgt.n	8003102 <_printf_float+0x376>
 80030e4:	f04f 0800 	mov.w	r8, #0
 80030e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80030ec:	f104 091a 	add.w	r9, r4, #26
 80030f0:	e019      	b.n	8003126 <_printf_float+0x39a>
 80030f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030f6:	4631      	mov	r1, r6
 80030f8:	4628      	mov	r0, r5
 80030fa:	47b8      	blx	r7
 80030fc:	3001      	adds	r0, #1
 80030fe:	d1e5      	bne.n	80030cc <_printf_float+0x340>
 8003100:	e6a1      	b.n	8002e46 <_printf_float+0xba>
 8003102:	4653      	mov	r3, sl
 8003104:	4642      	mov	r2, r8
 8003106:	4631      	mov	r1, r6
 8003108:	4628      	mov	r0, r5
 800310a:	47b8      	blx	r7
 800310c:	3001      	adds	r0, #1
 800310e:	d1e9      	bne.n	80030e4 <_printf_float+0x358>
 8003110:	e699      	b.n	8002e46 <_printf_float+0xba>
 8003112:	2301      	movs	r3, #1
 8003114:	464a      	mov	r2, r9
 8003116:	4631      	mov	r1, r6
 8003118:	4628      	mov	r0, r5
 800311a:	47b8      	blx	r7
 800311c:	3001      	adds	r0, #1
 800311e:	f43f ae92 	beq.w	8002e46 <_printf_float+0xba>
 8003122:	f108 0801 	add.w	r8, r8, #1
 8003126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	eba3 030a 	sub.w	r3, r3, sl
 8003130:	4543      	cmp	r3, r8
 8003132:	dcee      	bgt.n	8003112 <_printf_float+0x386>
 8003134:	e74a      	b.n	8002fcc <_printf_float+0x240>
 8003136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003138:	2a01      	cmp	r2, #1
 800313a:	dc01      	bgt.n	8003140 <_printf_float+0x3b4>
 800313c:	07db      	lsls	r3, r3, #31
 800313e:	d53a      	bpl.n	80031b6 <_printf_float+0x42a>
 8003140:	2301      	movs	r3, #1
 8003142:	4642      	mov	r2, r8
 8003144:	4631      	mov	r1, r6
 8003146:	4628      	mov	r0, r5
 8003148:	47b8      	blx	r7
 800314a:	3001      	adds	r0, #1
 800314c:	f43f ae7b 	beq.w	8002e46 <_printf_float+0xba>
 8003150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003154:	4631      	mov	r1, r6
 8003156:	4628      	mov	r0, r5
 8003158:	47b8      	blx	r7
 800315a:	3001      	adds	r0, #1
 800315c:	f108 0801 	add.w	r8, r8, #1
 8003160:	f43f ae71 	beq.w	8002e46 <_printf_float+0xba>
 8003164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003166:	2200      	movs	r2, #0
 8003168:	f103 3aff 	add.w	sl, r3, #4294967295
 800316c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003170:	2300      	movs	r3, #0
 8003172:	f7fd fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003176:	b9c8      	cbnz	r0, 80031ac <_printf_float+0x420>
 8003178:	4653      	mov	r3, sl
 800317a:	4642      	mov	r2, r8
 800317c:	4631      	mov	r1, r6
 800317e:	4628      	mov	r0, r5
 8003180:	47b8      	blx	r7
 8003182:	3001      	adds	r0, #1
 8003184:	d10e      	bne.n	80031a4 <_printf_float+0x418>
 8003186:	e65e      	b.n	8002e46 <_printf_float+0xba>
 8003188:	2301      	movs	r3, #1
 800318a:	4652      	mov	r2, sl
 800318c:	4631      	mov	r1, r6
 800318e:	4628      	mov	r0, r5
 8003190:	47b8      	blx	r7
 8003192:	3001      	adds	r0, #1
 8003194:	f43f ae57 	beq.w	8002e46 <_printf_float+0xba>
 8003198:	f108 0801 	add.w	r8, r8, #1
 800319c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	4543      	cmp	r3, r8
 80031a2:	dcf1      	bgt.n	8003188 <_printf_float+0x3fc>
 80031a4:	464b      	mov	r3, r9
 80031a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80031aa:	e6de      	b.n	8002f6a <_printf_float+0x1de>
 80031ac:	f04f 0800 	mov.w	r8, #0
 80031b0:	f104 0a1a 	add.w	sl, r4, #26
 80031b4:	e7f2      	b.n	800319c <_printf_float+0x410>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e7df      	b.n	800317a <_printf_float+0x3ee>
 80031ba:	2301      	movs	r3, #1
 80031bc:	464a      	mov	r2, r9
 80031be:	4631      	mov	r1, r6
 80031c0:	4628      	mov	r0, r5
 80031c2:	47b8      	blx	r7
 80031c4:	3001      	adds	r0, #1
 80031c6:	f43f ae3e 	beq.w	8002e46 <_printf_float+0xba>
 80031ca:	f108 0801 	add.w	r8, r8, #1
 80031ce:	68e3      	ldr	r3, [r4, #12]
 80031d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	4543      	cmp	r3, r8
 80031d6:	dcf0      	bgt.n	80031ba <_printf_float+0x42e>
 80031d8:	e6fc      	b.n	8002fd4 <_printf_float+0x248>
 80031da:	f04f 0800 	mov.w	r8, #0
 80031de:	f104 0919 	add.w	r9, r4, #25
 80031e2:	e7f4      	b.n	80031ce <_printf_float+0x442>
 80031e4:	2900      	cmp	r1, #0
 80031e6:	f43f ae8b 	beq.w	8002f00 <_printf_float+0x174>
 80031ea:	2300      	movs	r3, #0
 80031ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80031f0:	ab09      	add	r3, sp, #36	; 0x24
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	ec49 8b10 	vmov	d0, r8, r9
 80031f8:	6022      	str	r2, [r4, #0]
 80031fa:	f8cd a004 	str.w	sl, [sp, #4]
 80031fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003202:	4628      	mov	r0, r5
 8003204:	f7ff fd2e 	bl	8002c64 <__cvt>
 8003208:	4680      	mov	r8, r0
 800320a:	e648      	b.n	8002e9e <_printf_float+0x112>

0800320c <_printf_common>:
 800320c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003210:	4691      	mov	r9, r2
 8003212:	461f      	mov	r7, r3
 8003214:	688a      	ldr	r2, [r1, #8]
 8003216:	690b      	ldr	r3, [r1, #16]
 8003218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800321c:	4293      	cmp	r3, r2
 800321e:	bfb8      	it	lt
 8003220:	4613      	movlt	r3, r2
 8003222:	f8c9 3000 	str.w	r3, [r9]
 8003226:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800322a:	4606      	mov	r6, r0
 800322c:	460c      	mov	r4, r1
 800322e:	b112      	cbz	r2, 8003236 <_printf_common+0x2a>
 8003230:	3301      	adds	r3, #1
 8003232:	f8c9 3000 	str.w	r3, [r9]
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	0699      	lsls	r1, r3, #26
 800323a:	bf42      	ittt	mi
 800323c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003240:	3302      	addmi	r3, #2
 8003242:	f8c9 3000 	strmi.w	r3, [r9]
 8003246:	6825      	ldr	r5, [r4, #0]
 8003248:	f015 0506 	ands.w	r5, r5, #6
 800324c:	d107      	bne.n	800325e <_printf_common+0x52>
 800324e:	f104 0a19 	add.w	sl, r4, #25
 8003252:	68e3      	ldr	r3, [r4, #12]
 8003254:	f8d9 2000 	ldr.w	r2, [r9]
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	42ab      	cmp	r3, r5
 800325c:	dc28      	bgt.n	80032b0 <_printf_common+0xa4>
 800325e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	3300      	adds	r3, #0
 8003266:	bf18      	it	ne
 8003268:	2301      	movne	r3, #1
 800326a:	0692      	lsls	r2, r2, #26
 800326c:	d42d      	bmi.n	80032ca <_printf_common+0xbe>
 800326e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003272:	4639      	mov	r1, r7
 8003274:	4630      	mov	r0, r6
 8003276:	47c0      	blx	r8
 8003278:	3001      	adds	r0, #1
 800327a:	d020      	beq.n	80032be <_printf_common+0xb2>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	68e5      	ldr	r5, [r4, #12]
 8003280:	f8d9 2000 	ldr.w	r2, [r9]
 8003284:	f003 0306 	and.w	r3, r3, #6
 8003288:	2b04      	cmp	r3, #4
 800328a:	bf08      	it	eq
 800328c:	1aad      	subeq	r5, r5, r2
 800328e:	68a3      	ldr	r3, [r4, #8]
 8003290:	6922      	ldr	r2, [r4, #16]
 8003292:	bf0c      	ite	eq
 8003294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003298:	2500      	movne	r5, #0
 800329a:	4293      	cmp	r3, r2
 800329c:	bfc4      	itt	gt
 800329e:	1a9b      	subgt	r3, r3, r2
 80032a0:	18ed      	addgt	r5, r5, r3
 80032a2:	f04f 0900 	mov.w	r9, #0
 80032a6:	341a      	adds	r4, #26
 80032a8:	454d      	cmp	r5, r9
 80032aa:	d11a      	bne.n	80032e2 <_printf_common+0xd6>
 80032ac:	2000      	movs	r0, #0
 80032ae:	e008      	b.n	80032c2 <_printf_common+0xb6>
 80032b0:	2301      	movs	r3, #1
 80032b2:	4652      	mov	r2, sl
 80032b4:	4639      	mov	r1, r7
 80032b6:	4630      	mov	r0, r6
 80032b8:	47c0      	blx	r8
 80032ba:	3001      	adds	r0, #1
 80032bc:	d103      	bne.n	80032c6 <_printf_common+0xba>
 80032be:	f04f 30ff 	mov.w	r0, #4294967295
 80032c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c6:	3501      	adds	r5, #1
 80032c8:	e7c3      	b.n	8003252 <_printf_common+0x46>
 80032ca:	18e1      	adds	r1, r4, r3
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	2030      	movs	r0, #48	; 0x30
 80032d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032d4:	4422      	add	r2, r4
 80032d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032de:	3302      	adds	r3, #2
 80032e0:	e7c5      	b.n	800326e <_printf_common+0x62>
 80032e2:	2301      	movs	r3, #1
 80032e4:	4622      	mov	r2, r4
 80032e6:	4639      	mov	r1, r7
 80032e8:	4630      	mov	r0, r6
 80032ea:	47c0      	blx	r8
 80032ec:	3001      	adds	r0, #1
 80032ee:	d0e6      	beq.n	80032be <_printf_common+0xb2>
 80032f0:	f109 0901 	add.w	r9, r9, #1
 80032f4:	e7d8      	b.n	80032a8 <_printf_common+0x9c>
	...

080032f8 <_printf_i>:
 80032f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003300:	460c      	mov	r4, r1
 8003302:	7e09      	ldrb	r1, [r1, #24]
 8003304:	b085      	sub	sp, #20
 8003306:	296e      	cmp	r1, #110	; 0x6e
 8003308:	4617      	mov	r7, r2
 800330a:	4606      	mov	r6, r0
 800330c:	4698      	mov	r8, r3
 800330e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003310:	f000 80b3 	beq.w	800347a <_printf_i+0x182>
 8003314:	d822      	bhi.n	800335c <_printf_i+0x64>
 8003316:	2963      	cmp	r1, #99	; 0x63
 8003318:	d036      	beq.n	8003388 <_printf_i+0x90>
 800331a:	d80a      	bhi.n	8003332 <_printf_i+0x3a>
 800331c:	2900      	cmp	r1, #0
 800331e:	f000 80b9 	beq.w	8003494 <_printf_i+0x19c>
 8003322:	2958      	cmp	r1, #88	; 0x58
 8003324:	f000 8083 	beq.w	800342e <_printf_i+0x136>
 8003328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800332c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003330:	e032      	b.n	8003398 <_printf_i+0xa0>
 8003332:	2964      	cmp	r1, #100	; 0x64
 8003334:	d001      	beq.n	800333a <_printf_i+0x42>
 8003336:	2969      	cmp	r1, #105	; 0x69
 8003338:	d1f6      	bne.n	8003328 <_printf_i+0x30>
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	6813      	ldr	r3, [r2, #0]
 800333e:	0605      	lsls	r5, r0, #24
 8003340:	f103 0104 	add.w	r1, r3, #4
 8003344:	d52a      	bpl.n	800339c <_printf_i+0xa4>
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6011      	str	r1, [r2, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	da03      	bge.n	8003356 <_printf_i+0x5e>
 800334e:	222d      	movs	r2, #45	; 0x2d
 8003350:	425b      	negs	r3, r3
 8003352:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003356:	486f      	ldr	r0, [pc, #444]	; (8003514 <_printf_i+0x21c>)
 8003358:	220a      	movs	r2, #10
 800335a:	e039      	b.n	80033d0 <_printf_i+0xd8>
 800335c:	2973      	cmp	r1, #115	; 0x73
 800335e:	f000 809d 	beq.w	800349c <_printf_i+0x1a4>
 8003362:	d808      	bhi.n	8003376 <_printf_i+0x7e>
 8003364:	296f      	cmp	r1, #111	; 0x6f
 8003366:	d020      	beq.n	80033aa <_printf_i+0xb2>
 8003368:	2970      	cmp	r1, #112	; 0x70
 800336a:	d1dd      	bne.n	8003328 <_printf_i+0x30>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	f043 0320 	orr.w	r3, r3, #32
 8003372:	6023      	str	r3, [r4, #0]
 8003374:	e003      	b.n	800337e <_printf_i+0x86>
 8003376:	2975      	cmp	r1, #117	; 0x75
 8003378:	d017      	beq.n	80033aa <_printf_i+0xb2>
 800337a:	2978      	cmp	r1, #120	; 0x78
 800337c:	d1d4      	bne.n	8003328 <_printf_i+0x30>
 800337e:	2378      	movs	r3, #120	; 0x78
 8003380:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003384:	4864      	ldr	r0, [pc, #400]	; (8003518 <_printf_i+0x220>)
 8003386:	e055      	b.n	8003434 <_printf_i+0x13c>
 8003388:	6813      	ldr	r3, [r2, #0]
 800338a:	1d19      	adds	r1, r3, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6011      	str	r1, [r2, #0]
 8003390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003398:	2301      	movs	r3, #1
 800339a:	e08c      	b.n	80034b6 <_printf_i+0x1be>
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6011      	str	r1, [r2, #0]
 80033a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033a4:	bf18      	it	ne
 80033a6:	b21b      	sxthne	r3, r3
 80033a8:	e7cf      	b.n	800334a <_printf_i+0x52>
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	6825      	ldr	r5, [r4, #0]
 80033ae:	1d18      	adds	r0, r3, #4
 80033b0:	6010      	str	r0, [r2, #0]
 80033b2:	0628      	lsls	r0, r5, #24
 80033b4:	d501      	bpl.n	80033ba <_printf_i+0xc2>
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e002      	b.n	80033c0 <_printf_i+0xc8>
 80033ba:	0668      	lsls	r0, r5, #25
 80033bc:	d5fb      	bpl.n	80033b6 <_printf_i+0xbe>
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	4854      	ldr	r0, [pc, #336]	; (8003514 <_printf_i+0x21c>)
 80033c2:	296f      	cmp	r1, #111	; 0x6f
 80033c4:	bf14      	ite	ne
 80033c6:	220a      	movne	r2, #10
 80033c8:	2208      	moveq	r2, #8
 80033ca:	2100      	movs	r1, #0
 80033cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033d0:	6865      	ldr	r5, [r4, #4]
 80033d2:	60a5      	str	r5, [r4, #8]
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	f2c0 8095 	blt.w	8003504 <_printf_i+0x20c>
 80033da:	6821      	ldr	r1, [r4, #0]
 80033dc:	f021 0104 	bic.w	r1, r1, #4
 80033e0:	6021      	str	r1, [r4, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d13d      	bne.n	8003462 <_printf_i+0x16a>
 80033e6:	2d00      	cmp	r5, #0
 80033e8:	f040 808e 	bne.w	8003508 <_printf_i+0x210>
 80033ec:	4665      	mov	r5, ip
 80033ee:	2a08      	cmp	r2, #8
 80033f0:	d10b      	bne.n	800340a <_printf_i+0x112>
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	07db      	lsls	r3, r3, #31
 80033f6:	d508      	bpl.n	800340a <_printf_i+0x112>
 80033f8:	6923      	ldr	r3, [r4, #16]
 80033fa:	6862      	ldr	r2, [r4, #4]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	bfde      	ittt	le
 8003400:	2330      	movle	r3, #48	; 0x30
 8003402:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003406:	f105 35ff 	addle.w	r5, r5, #4294967295
 800340a:	ebac 0305 	sub.w	r3, ip, r5
 800340e:	6123      	str	r3, [r4, #16]
 8003410:	f8cd 8000 	str.w	r8, [sp]
 8003414:	463b      	mov	r3, r7
 8003416:	aa03      	add	r2, sp, #12
 8003418:	4621      	mov	r1, r4
 800341a:	4630      	mov	r0, r6
 800341c:	f7ff fef6 	bl	800320c <_printf_common>
 8003420:	3001      	adds	r0, #1
 8003422:	d14d      	bne.n	80034c0 <_printf_i+0x1c8>
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	b005      	add	sp, #20
 800342a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800342e:	4839      	ldr	r0, [pc, #228]	; (8003514 <_printf_i+0x21c>)
 8003430:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003434:	6813      	ldr	r3, [r2, #0]
 8003436:	6821      	ldr	r1, [r4, #0]
 8003438:	1d1d      	adds	r5, r3, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6015      	str	r5, [r2, #0]
 800343e:	060a      	lsls	r2, r1, #24
 8003440:	d50b      	bpl.n	800345a <_printf_i+0x162>
 8003442:	07ca      	lsls	r2, r1, #31
 8003444:	bf44      	itt	mi
 8003446:	f041 0120 	orrmi.w	r1, r1, #32
 800344a:	6021      	strmi	r1, [r4, #0]
 800344c:	b91b      	cbnz	r3, 8003456 <_printf_i+0x15e>
 800344e:	6822      	ldr	r2, [r4, #0]
 8003450:	f022 0220 	bic.w	r2, r2, #32
 8003454:	6022      	str	r2, [r4, #0]
 8003456:	2210      	movs	r2, #16
 8003458:	e7b7      	b.n	80033ca <_printf_i+0xd2>
 800345a:	064d      	lsls	r5, r1, #25
 800345c:	bf48      	it	mi
 800345e:	b29b      	uxthmi	r3, r3
 8003460:	e7ef      	b.n	8003442 <_printf_i+0x14a>
 8003462:	4665      	mov	r5, ip
 8003464:	fbb3 f1f2 	udiv	r1, r3, r2
 8003468:	fb02 3311 	mls	r3, r2, r1, r3
 800346c:	5cc3      	ldrb	r3, [r0, r3]
 800346e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003472:	460b      	mov	r3, r1
 8003474:	2900      	cmp	r1, #0
 8003476:	d1f5      	bne.n	8003464 <_printf_i+0x16c>
 8003478:	e7b9      	b.n	80033ee <_printf_i+0xf6>
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	6825      	ldr	r5, [r4, #0]
 800347e:	6961      	ldr	r1, [r4, #20]
 8003480:	1d18      	adds	r0, r3, #4
 8003482:	6010      	str	r0, [r2, #0]
 8003484:	0628      	lsls	r0, r5, #24
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	d501      	bpl.n	800348e <_printf_i+0x196>
 800348a:	6019      	str	r1, [r3, #0]
 800348c:	e002      	b.n	8003494 <_printf_i+0x19c>
 800348e:	066a      	lsls	r2, r5, #25
 8003490:	d5fb      	bpl.n	800348a <_printf_i+0x192>
 8003492:	8019      	strh	r1, [r3, #0]
 8003494:	2300      	movs	r3, #0
 8003496:	6123      	str	r3, [r4, #16]
 8003498:	4665      	mov	r5, ip
 800349a:	e7b9      	b.n	8003410 <_printf_i+0x118>
 800349c:	6813      	ldr	r3, [r2, #0]
 800349e:	1d19      	adds	r1, r3, #4
 80034a0:	6011      	str	r1, [r2, #0]
 80034a2:	681d      	ldr	r5, [r3, #0]
 80034a4:	6862      	ldr	r2, [r4, #4]
 80034a6:	2100      	movs	r1, #0
 80034a8:	4628      	mov	r0, r5
 80034aa:	f7fc fea1 	bl	80001f0 <memchr>
 80034ae:	b108      	cbz	r0, 80034b4 <_printf_i+0x1bc>
 80034b0:	1b40      	subs	r0, r0, r5
 80034b2:	6060      	str	r0, [r4, #4]
 80034b4:	6863      	ldr	r3, [r4, #4]
 80034b6:	6123      	str	r3, [r4, #16]
 80034b8:	2300      	movs	r3, #0
 80034ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034be:	e7a7      	b.n	8003410 <_printf_i+0x118>
 80034c0:	6923      	ldr	r3, [r4, #16]
 80034c2:	462a      	mov	r2, r5
 80034c4:	4639      	mov	r1, r7
 80034c6:	4630      	mov	r0, r6
 80034c8:	47c0      	blx	r8
 80034ca:	3001      	adds	r0, #1
 80034cc:	d0aa      	beq.n	8003424 <_printf_i+0x12c>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	079b      	lsls	r3, r3, #30
 80034d2:	d413      	bmi.n	80034fc <_printf_i+0x204>
 80034d4:	68e0      	ldr	r0, [r4, #12]
 80034d6:	9b03      	ldr	r3, [sp, #12]
 80034d8:	4298      	cmp	r0, r3
 80034da:	bfb8      	it	lt
 80034dc:	4618      	movlt	r0, r3
 80034de:	e7a3      	b.n	8003428 <_printf_i+0x130>
 80034e0:	2301      	movs	r3, #1
 80034e2:	464a      	mov	r2, r9
 80034e4:	4639      	mov	r1, r7
 80034e6:	4630      	mov	r0, r6
 80034e8:	47c0      	blx	r8
 80034ea:	3001      	adds	r0, #1
 80034ec:	d09a      	beq.n	8003424 <_printf_i+0x12c>
 80034ee:	3501      	adds	r5, #1
 80034f0:	68e3      	ldr	r3, [r4, #12]
 80034f2:	9a03      	ldr	r2, [sp, #12]
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	42ab      	cmp	r3, r5
 80034f8:	dcf2      	bgt.n	80034e0 <_printf_i+0x1e8>
 80034fa:	e7eb      	b.n	80034d4 <_printf_i+0x1dc>
 80034fc:	2500      	movs	r5, #0
 80034fe:	f104 0919 	add.w	r9, r4, #25
 8003502:	e7f5      	b.n	80034f0 <_printf_i+0x1f8>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ac      	bne.n	8003462 <_printf_i+0x16a>
 8003508:	7803      	ldrb	r3, [r0, #0]
 800350a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800350e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003512:	e76c      	b.n	80033ee <_printf_i+0xf6>
 8003514:	08004d36 	.word	0x08004d36
 8003518:	08004d47 	.word	0x08004d47

0800351c <siprintf>:
 800351c:	b40e      	push	{r1, r2, r3}
 800351e:	b500      	push	{lr}
 8003520:	b09c      	sub	sp, #112	; 0x70
 8003522:	ab1d      	add	r3, sp, #116	; 0x74
 8003524:	9002      	str	r0, [sp, #8]
 8003526:	9006      	str	r0, [sp, #24]
 8003528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800352c:	4809      	ldr	r0, [pc, #36]	; (8003554 <siprintf+0x38>)
 800352e:	9107      	str	r1, [sp, #28]
 8003530:	9104      	str	r1, [sp, #16]
 8003532:	4909      	ldr	r1, [pc, #36]	; (8003558 <siprintf+0x3c>)
 8003534:	f853 2b04 	ldr.w	r2, [r3], #4
 8003538:	9105      	str	r1, [sp, #20]
 800353a:	6800      	ldr	r0, [r0, #0]
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	a902      	add	r1, sp, #8
 8003540:	f001 fa5e 	bl	8004a00 <_svfiprintf_r>
 8003544:	9b02      	ldr	r3, [sp, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	b01c      	add	sp, #112	; 0x70
 800354c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003550:	b003      	add	sp, #12
 8003552:	4770      	bx	lr
 8003554:	2000000c 	.word	0x2000000c
 8003558:	ffff0208 	.word	0xffff0208

0800355c <quorem>:
 800355c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003560:	6903      	ldr	r3, [r0, #16]
 8003562:	690c      	ldr	r4, [r1, #16]
 8003564:	42a3      	cmp	r3, r4
 8003566:	4680      	mov	r8, r0
 8003568:	f2c0 8082 	blt.w	8003670 <quorem+0x114>
 800356c:	3c01      	subs	r4, #1
 800356e:	f101 0714 	add.w	r7, r1, #20
 8003572:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003576:	f100 0614 	add.w	r6, r0, #20
 800357a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800357e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003582:	eb06 030c 	add.w	r3, r6, ip
 8003586:	3501      	adds	r5, #1
 8003588:	eb07 090c 	add.w	r9, r7, ip
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003592:	b395      	cbz	r5, 80035fa <quorem+0x9e>
 8003594:	f04f 0a00 	mov.w	sl, #0
 8003598:	4638      	mov	r0, r7
 800359a:	46b6      	mov	lr, r6
 800359c:	46d3      	mov	fp, sl
 800359e:	f850 2b04 	ldr.w	r2, [r0], #4
 80035a2:	b293      	uxth	r3, r2
 80035a4:	fb05 a303 	mla	r3, r5, r3, sl
 80035a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	ebab 0303 	sub.w	r3, fp, r3
 80035b2:	0c12      	lsrs	r2, r2, #16
 80035b4:	f8de b000 	ldr.w	fp, [lr]
 80035b8:	fb05 a202 	mla	r2, r5, r2, sl
 80035bc:	fa13 f38b 	uxtah	r3, r3, fp
 80035c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80035c4:	fa1f fb82 	uxth.w	fp, r2
 80035c8:	f8de 2000 	ldr.w	r2, [lr]
 80035cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80035d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035da:	4581      	cmp	r9, r0
 80035dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80035e0:	f84e 3b04 	str.w	r3, [lr], #4
 80035e4:	d2db      	bcs.n	800359e <quorem+0x42>
 80035e6:	f856 300c 	ldr.w	r3, [r6, ip]
 80035ea:	b933      	cbnz	r3, 80035fa <quorem+0x9e>
 80035ec:	9b01      	ldr	r3, [sp, #4]
 80035ee:	3b04      	subs	r3, #4
 80035f0:	429e      	cmp	r6, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	d330      	bcc.n	8003658 <quorem+0xfc>
 80035f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80035fa:	4640      	mov	r0, r8
 80035fc:	f001 f82a 	bl	8004654 <__mcmp>
 8003600:	2800      	cmp	r0, #0
 8003602:	db25      	blt.n	8003650 <quorem+0xf4>
 8003604:	3501      	adds	r5, #1
 8003606:	4630      	mov	r0, r6
 8003608:	f04f 0c00 	mov.w	ip, #0
 800360c:	f857 2b04 	ldr.w	r2, [r7], #4
 8003610:	f8d0 e000 	ldr.w	lr, [r0]
 8003614:	b293      	uxth	r3, r2
 8003616:	ebac 0303 	sub.w	r3, ip, r3
 800361a:	0c12      	lsrs	r2, r2, #16
 800361c:	fa13 f38e 	uxtah	r3, r3, lr
 8003620:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003628:	b29b      	uxth	r3, r3
 800362a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800362e:	45b9      	cmp	r9, r7
 8003630:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003634:	f840 3b04 	str.w	r3, [r0], #4
 8003638:	d2e8      	bcs.n	800360c <quorem+0xb0>
 800363a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800363e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003642:	b92a      	cbnz	r2, 8003650 <quorem+0xf4>
 8003644:	3b04      	subs	r3, #4
 8003646:	429e      	cmp	r6, r3
 8003648:	461a      	mov	r2, r3
 800364a:	d30b      	bcc.n	8003664 <quorem+0x108>
 800364c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003650:	4628      	mov	r0, r5
 8003652:	b003      	add	sp, #12
 8003654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	3b04      	subs	r3, #4
 800365c:	2a00      	cmp	r2, #0
 800365e:	d1ca      	bne.n	80035f6 <quorem+0x9a>
 8003660:	3c01      	subs	r4, #1
 8003662:	e7c5      	b.n	80035f0 <quorem+0x94>
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	3b04      	subs	r3, #4
 8003668:	2a00      	cmp	r2, #0
 800366a:	d1ef      	bne.n	800364c <quorem+0xf0>
 800366c:	3c01      	subs	r4, #1
 800366e:	e7ea      	b.n	8003646 <quorem+0xea>
 8003670:	2000      	movs	r0, #0
 8003672:	e7ee      	b.n	8003652 <quorem+0xf6>
 8003674:	0000      	movs	r0, r0
	...

08003678 <_dtoa_r>:
 8003678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367c:	ec57 6b10 	vmov	r6, r7, d0
 8003680:	b097      	sub	sp, #92	; 0x5c
 8003682:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003684:	9106      	str	r1, [sp, #24]
 8003686:	4604      	mov	r4, r0
 8003688:	920b      	str	r2, [sp, #44]	; 0x2c
 800368a:	9312      	str	r3, [sp, #72]	; 0x48
 800368c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003690:	e9cd 6700 	strd	r6, r7, [sp]
 8003694:	b93d      	cbnz	r5, 80036a6 <_dtoa_r+0x2e>
 8003696:	2010      	movs	r0, #16
 8003698:	f000 fdb4 	bl	8004204 <malloc>
 800369c:	6260      	str	r0, [r4, #36]	; 0x24
 800369e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80036a2:	6005      	str	r5, [r0, #0]
 80036a4:	60c5      	str	r5, [r0, #12]
 80036a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036a8:	6819      	ldr	r1, [r3, #0]
 80036aa:	b151      	cbz	r1, 80036c2 <_dtoa_r+0x4a>
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	604a      	str	r2, [r1, #4]
 80036b0:	2301      	movs	r3, #1
 80036b2:	4093      	lsls	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
 80036b6:	4620      	mov	r0, r4
 80036b8:	f000 fdeb 	bl	8004292 <_Bfree>
 80036bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	1e3b      	subs	r3, r7, #0
 80036c4:	bfbb      	ittet	lt
 80036c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80036ca:	9301      	strlt	r3, [sp, #4]
 80036cc:	2300      	movge	r3, #0
 80036ce:	2201      	movlt	r2, #1
 80036d0:	bfac      	ite	ge
 80036d2:	f8c8 3000 	strge.w	r3, [r8]
 80036d6:	f8c8 2000 	strlt.w	r2, [r8]
 80036da:	4baf      	ldr	r3, [pc, #700]	; (8003998 <_dtoa_r+0x320>)
 80036dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80036e0:	ea33 0308 	bics.w	r3, r3, r8
 80036e4:	d114      	bne.n	8003710 <_dtoa_r+0x98>
 80036e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80036e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	9b00      	ldr	r3, [sp, #0]
 80036f0:	b923      	cbnz	r3, 80036fc <_dtoa_r+0x84>
 80036f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80036f6:	2800      	cmp	r0, #0
 80036f8:	f000 8542 	beq.w	8004180 <_dtoa_r+0xb08>
 80036fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80039ac <_dtoa_r+0x334>
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8544 	beq.w	8004190 <_dtoa_r+0xb18>
 8003708:	f10b 0303 	add.w	r3, fp, #3
 800370c:	f000 bd3e 	b.w	800418c <_dtoa_r+0xb14>
 8003710:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003714:	2200      	movs	r2, #0
 8003716:	2300      	movs	r3, #0
 8003718:	4630      	mov	r0, r6
 800371a:	4639      	mov	r1, r7
 800371c:	f7fd f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8003720:	4681      	mov	r9, r0
 8003722:	b168      	cbz	r0, 8003740 <_dtoa_r+0xc8>
 8003724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003726:	2301      	movs	r3, #1
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8524 	beq.w	800417a <_dtoa_r+0xb02>
 8003732:	4b9a      	ldr	r3, [pc, #616]	; (800399c <_dtoa_r+0x324>)
 8003734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003736:	f103 3bff 	add.w	fp, r3, #4294967295
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	f000 bd28 	b.w	8004190 <_dtoa_r+0xb18>
 8003740:	aa14      	add	r2, sp, #80	; 0x50
 8003742:	a915      	add	r1, sp, #84	; 0x54
 8003744:	ec47 6b10 	vmov	d0, r6, r7
 8003748:	4620      	mov	r0, r4
 800374a:	f000 fffa 	bl	8004742 <__d2b>
 800374e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003752:	9004      	str	r0, [sp, #16]
 8003754:	2d00      	cmp	r5, #0
 8003756:	d07c      	beq.n	8003852 <_dtoa_r+0x1da>
 8003758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800375c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003760:	46b2      	mov	sl, r6
 8003762:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800376a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800376e:	2200      	movs	r2, #0
 8003770:	4b8b      	ldr	r3, [pc, #556]	; (80039a0 <_dtoa_r+0x328>)
 8003772:	4650      	mov	r0, sl
 8003774:	4659      	mov	r1, fp
 8003776:	f7fc fd8f 	bl	8000298 <__aeabi_dsub>
 800377a:	a381      	add	r3, pc, #516	; (adr r3, 8003980 <_dtoa_r+0x308>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f7fc ff42 	bl	8000608 <__aeabi_dmul>
 8003784:	a380      	add	r3, pc, #512	; (adr r3, 8003988 <_dtoa_r+0x310>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f7fc fd87 	bl	800029c <__adddf3>
 800378e:	4606      	mov	r6, r0
 8003790:	4628      	mov	r0, r5
 8003792:	460f      	mov	r7, r1
 8003794:	f7fc fece 	bl	8000534 <__aeabi_i2d>
 8003798:	a37d      	add	r3, pc, #500	; (adr r3, 8003990 <_dtoa_r+0x318>)
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f7fc ff33 	bl	8000608 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4630      	mov	r0, r6
 80037a8:	4639      	mov	r1, r7
 80037aa:	f7fc fd77 	bl	800029c <__adddf3>
 80037ae:	4606      	mov	r6, r0
 80037b0:	460f      	mov	r7, r1
 80037b2:	f7fd f9d9 	bl	8000b68 <__aeabi_d2iz>
 80037b6:	2200      	movs	r2, #0
 80037b8:	4682      	mov	sl, r0
 80037ba:	2300      	movs	r3, #0
 80037bc:	4630      	mov	r0, r6
 80037be:	4639      	mov	r1, r7
 80037c0:	f7fd f994 	bl	8000aec <__aeabi_dcmplt>
 80037c4:	b148      	cbz	r0, 80037da <_dtoa_r+0x162>
 80037c6:	4650      	mov	r0, sl
 80037c8:	f7fc feb4 	bl	8000534 <__aeabi_i2d>
 80037cc:	4632      	mov	r2, r6
 80037ce:	463b      	mov	r3, r7
 80037d0:	f7fd f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80037d4:	b908      	cbnz	r0, 80037da <_dtoa_r+0x162>
 80037d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037da:	f1ba 0f16 	cmp.w	sl, #22
 80037de:	d859      	bhi.n	8003894 <_dtoa_r+0x21c>
 80037e0:	4970      	ldr	r1, [pc, #448]	; (80039a4 <_dtoa_r+0x32c>)
 80037e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80037e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037ee:	f7fd f99b 	bl	8000b28 <__aeabi_dcmpgt>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d050      	beq.n	8003898 <_dtoa_r+0x220>
 80037f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037fa:	2300      	movs	r3, #0
 80037fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80037fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003800:	1b5d      	subs	r5, r3, r5
 8003802:	f1b5 0801 	subs.w	r8, r5, #1
 8003806:	bf49      	itett	mi
 8003808:	f1c5 0301 	rsbmi	r3, r5, #1
 800380c:	2300      	movpl	r3, #0
 800380e:	9305      	strmi	r3, [sp, #20]
 8003810:	f04f 0800 	movmi.w	r8, #0
 8003814:	bf58      	it	pl
 8003816:	9305      	strpl	r3, [sp, #20]
 8003818:	f1ba 0f00 	cmp.w	sl, #0
 800381c:	db3e      	blt.n	800389c <_dtoa_r+0x224>
 800381e:	2300      	movs	r3, #0
 8003820:	44d0      	add	r8, sl
 8003822:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003826:	9307      	str	r3, [sp, #28]
 8003828:	9b06      	ldr	r3, [sp, #24]
 800382a:	2b09      	cmp	r3, #9
 800382c:	f200 8090 	bhi.w	8003950 <_dtoa_r+0x2d8>
 8003830:	2b05      	cmp	r3, #5
 8003832:	bfc4      	itt	gt
 8003834:	3b04      	subgt	r3, #4
 8003836:	9306      	strgt	r3, [sp, #24]
 8003838:	9b06      	ldr	r3, [sp, #24]
 800383a:	f1a3 0302 	sub.w	r3, r3, #2
 800383e:	bfcc      	ite	gt
 8003840:	2500      	movgt	r5, #0
 8003842:	2501      	movle	r5, #1
 8003844:	2b03      	cmp	r3, #3
 8003846:	f200 808f 	bhi.w	8003968 <_dtoa_r+0x2f0>
 800384a:	e8df f003 	tbb	[pc, r3]
 800384e:	7f7d      	.short	0x7f7d
 8003850:	7131      	.short	0x7131
 8003852:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003856:	441d      	add	r5, r3
 8003858:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800385c:	2820      	cmp	r0, #32
 800385e:	dd13      	ble.n	8003888 <_dtoa_r+0x210>
 8003860:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003864:	9b00      	ldr	r3, [sp, #0]
 8003866:	fa08 f800 	lsl.w	r8, r8, r0
 800386a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800386e:	fa23 f000 	lsr.w	r0, r3, r0
 8003872:	ea48 0000 	orr.w	r0, r8, r0
 8003876:	f7fc fe4d 	bl	8000514 <__aeabi_ui2d>
 800387a:	2301      	movs	r3, #1
 800387c:	4682      	mov	sl, r0
 800387e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003882:	3d01      	subs	r5, #1
 8003884:	9313      	str	r3, [sp, #76]	; 0x4c
 8003886:	e772      	b.n	800376e <_dtoa_r+0xf6>
 8003888:	9b00      	ldr	r3, [sp, #0]
 800388a:	f1c0 0020 	rsb	r0, r0, #32
 800388e:	fa03 f000 	lsl.w	r0, r3, r0
 8003892:	e7f0      	b.n	8003876 <_dtoa_r+0x1fe>
 8003894:	2301      	movs	r3, #1
 8003896:	e7b1      	b.n	80037fc <_dtoa_r+0x184>
 8003898:	900f      	str	r0, [sp, #60]	; 0x3c
 800389a:	e7b0      	b.n	80037fe <_dtoa_r+0x186>
 800389c:	9b05      	ldr	r3, [sp, #20]
 800389e:	eba3 030a 	sub.w	r3, r3, sl
 80038a2:	9305      	str	r3, [sp, #20]
 80038a4:	f1ca 0300 	rsb	r3, sl, #0
 80038a8:	9307      	str	r3, [sp, #28]
 80038aa:	2300      	movs	r3, #0
 80038ac:	930e      	str	r3, [sp, #56]	; 0x38
 80038ae:	e7bb      	b.n	8003828 <_dtoa_r+0x1b0>
 80038b0:	2301      	movs	r3, #1
 80038b2:	930a      	str	r3, [sp, #40]	; 0x28
 80038b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	dd59      	ble.n	800396e <_dtoa_r+0x2f6>
 80038ba:	9302      	str	r3, [sp, #8]
 80038bc:	4699      	mov	r9, r3
 80038be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80038c0:	2200      	movs	r2, #0
 80038c2:	6072      	str	r2, [r6, #4]
 80038c4:	2204      	movs	r2, #4
 80038c6:	f102 0014 	add.w	r0, r2, #20
 80038ca:	4298      	cmp	r0, r3
 80038cc:	6871      	ldr	r1, [r6, #4]
 80038ce:	d953      	bls.n	8003978 <_dtoa_r+0x300>
 80038d0:	4620      	mov	r0, r4
 80038d2:	f000 fcaa 	bl	800422a <_Balloc>
 80038d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038d8:	6030      	str	r0, [r6, #0]
 80038da:	f1b9 0f0e 	cmp.w	r9, #14
 80038de:	f8d3 b000 	ldr.w	fp, [r3]
 80038e2:	f200 80e6 	bhi.w	8003ab2 <_dtoa_r+0x43a>
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	f000 80e3 	beq.w	8003ab2 <_dtoa_r+0x43a>
 80038ec:	ed9d 7b00 	vldr	d7, [sp]
 80038f0:	f1ba 0f00 	cmp.w	sl, #0
 80038f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80038f8:	dd74      	ble.n	80039e4 <_dtoa_r+0x36c>
 80038fa:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <_dtoa_r+0x32c>)
 80038fc:	f00a 030f 	and.w	r3, sl, #15
 8003900:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003904:	ed93 7b00 	vldr	d7, [r3]
 8003908:	ea4f 162a 	mov.w	r6, sl, asr #4
 800390c:	06f0      	lsls	r0, r6, #27
 800390e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003912:	d565      	bpl.n	80039e0 <_dtoa_r+0x368>
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <_dtoa_r+0x330>)
 8003916:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800391a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800391e:	f7fc ff9d 	bl	800085c <__aeabi_ddiv>
 8003922:	e9cd 0100 	strd	r0, r1, [sp]
 8003926:	f006 060f 	and.w	r6, r6, #15
 800392a:	2503      	movs	r5, #3
 800392c:	4f1e      	ldr	r7, [pc, #120]	; (80039a8 <_dtoa_r+0x330>)
 800392e:	e04c      	b.n	80039ca <_dtoa_r+0x352>
 8003930:	2301      	movs	r3, #1
 8003932:	930a      	str	r3, [sp, #40]	; 0x28
 8003934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003936:	4453      	add	r3, sl
 8003938:	f103 0901 	add.w	r9, r3, #1
 800393c:	9302      	str	r3, [sp, #8]
 800393e:	464b      	mov	r3, r9
 8003940:	2b01      	cmp	r3, #1
 8003942:	bfb8      	it	lt
 8003944:	2301      	movlt	r3, #1
 8003946:	e7ba      	b.n	80038be <_dtoa_r+0x246>
 8003948:	2300      	movs	r3, #0
 800394a:	e7b2      	b.n	80038b2 <_dtoa_r+0x23a>
 800394c:	2300      	movs	r3, #0
 800394e:	e7f0      	b.n	8003932 <_dtoa_r+0x2ba>
 8003950:	2501      	movs	r5, #1
 8003952:	2300      	movs	r3, #0
 8003954:	9306      	str	r3, [sp, #24]
 8003956:	950a      	str	r5, [sp, #40]	; 0x28
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	9302      	str	r3, [sp, #8]
 800395e:	4699      	mov	r9, r3
 8003960:	2200      	movs	r2, #0
 8003962:	2312      	movs	r3, #18
 8003964:	920b      	str	r2, [sp, #44]	; 0x2c
 8003966:	e7aa      	b.n	80038be <_dtoa_r+0x246>
 8003968:	2301      	movs	r3, #1
 800396a:	930a      	str	r3, [sp, #40]	; 0x28
 800396c:	e7f4      	b.n	8003958 <_dtoa_r+0x2e0>
 800396e:	2301      	movs	r3, #1
 8003970:	9302      	str	r3, [sp, #8]
 8003972:	4699      	mov	r9, r3
 8003974:	461a      	mov	r2, r3
 8003976:	e7f5      	b.n	8003964 <_dtoa_r+0x2ec>
 8003978:	3101      	adds	r1, #1
 800397a:	6071      	str	r1, [r6, #4]
 800397c:	0052      	lsls	r2, r2, #1
 800397e:	e7a2      	b.n	80038c6 <_dtoa_r+0x24e>
 8003980:	636f4361 	.word	0x636f4361
 8003984:	3fd287a7 	.word	0x3fd287a7
 8003988:	8b60c8b3 	.word	0x8b60c8b3
 800398c:	3fc68a28 	.word	0x3fc68a28
 8003990:	509f79fb 	.word	0x509f79fb
 8003994:	3fd34413 	.word	0x3fd34413
 8003998:	7ff00000 	.word	0x7ff00000
 800399c:	08004d35 	.word	0x08004d35
 80039a0:	3ff80000 	.word	0x3ff80000
 80039a4:	08004d90 	.word	0x08004d90
 80039a8:	08004d68 	.word	0x08004d68
 80039ac:	08004d61 	.word	0x08004d61
 80039b0:	07f1      	lsls	r1, r6, #31
 80039b2:	d508      	bpl.n	80039c6 <_dtoa_r+0x34e>
 80039b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80039b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039bc:	f7fc fe24 	bl	8000608 <__aeabi_dmul>
 80039c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80039c4:	3501      	adds	r5, #1
 80039c6:	1076      	asrs	r6, r6, #1
 80039c8:	3708      	adds	r7, #8
 80039ca:	2e00      	cmp	r6, #0
 80039cc:	d1f0      	bne.n	80039b0 <_dtoa_r+0x338>
 80039ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039d6:	f7fc ff41 	bl	800085c <__aeabi_ddiv>
 80039da:	e9cd 0100 	strd	r0, r1, [sp]
 80039de:	e01a      	b.n	8003a16 <_dtoa_r+0x39e>
 80039e0:	2502      	movs	r5, #2
 80039e2:	e7a3      	b.n	800392c <_dtoa_r+0x2b4>
 80039e4:	f000 80a0 	beq.w	8003b28 <_dtoa_r+0x4b0>
 80039e8:	f1ca 0600 	rsb	r6, sl, #0
 80039ec:	4b9f      	ldr	r3, [pc, #636]	; (8003c6c <_dtoa_r+0x5f4>)
 80039ee:	4fa0      	ldr	r7, [pc, #640]	; (8003c70 <_dtoa_r+0x5f8>)
 80039f0:	f006 020f 	and.w	r2, r6, #15
 80039f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003a00:	f7fc fe02 	bl	8000608 <__aeabi_dmul>
 8003a04:	e9cd 0100 	strd	r0, r1, [sp]
 8003a08:	1136      	asrs	r6, r6, #4
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2502      	movs	r5, #2
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	d17f      	bne.n	8003b12 <_dtoa_r+0x49a>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e1      	bne.n	80039da <_dtoa_r+0x362>
 8003a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8087 	beq.w	8003b2c <_dtoa_r+0x4b4>
 8003a1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a22:	2200      	movs	r2, #0
 8003a24:	4b93      	ldr	r3, [pc, #588]	; (8003c74 <_dtoa_r+0x5fc>)
 8003a26:	4630      	mov	r0, r6
 8003a28:	4639      	mov	r1, r7
 8003a2a:	f7fd f85f 	bl	8000aec <__aeabi_dcmplt>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d07c      	beq.n	8003b2c <_dtoa_r+0x4b4>
 8003a32:	f1b9 0f00 	cmp.w	r9, #0
 8003a36:	d079      	beq.n	8003b2c <_dtoa_r+0x4b4>
 8003a38:	9b02      	ldr	r3, [sp, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dd35      	ble.n	8003aaa <_dtoa_r+0x432>
 8003a3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003a42:	9308      	str	r3, [sp, #32]
 8003a44:	4639      	mov	r1, r7
 8003a46:	2200      	movs	r2, #0
 8003a48:	4b8b      	ldr	r3, [pc, #556]	; (8003c78 <_dtoa_r+0x600>)
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f7fc fddc 	bl	8000608 <__aeabi_dmul>
 8003a50:	e9cd 0100 	strd	r0, r1, [sp]
 8003a54:	9f02      	ldr	r7, [sp, #8]
 8003a56:	3501      	adds	r5, #1
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f7fc fd6b 	bl	8000534 <__aeabi_i2d>
 8003a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a62:	f7fc fdd1 	bl	8000608 <__aeabi_dmul>
 8003a66:	2200      	movs	r2, #0
 8003a68:	4b84      	ldr	r3, [pc, #528]	; (8003c7c <_dtoa_r+0x604>)
 8003a6a:	f7fc fc17 	bl	800029c <__adddf3>
 8003a6e:	4605      	mov	r5, r0
 8003a70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	d15d      	bne.n	8003b34 <_dtoa_r+0x4bc>
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4b81      	ldr	r3, [pc, #516]	; (8003c80 <_dtoa_r+0x608>)
 8003a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a80:	f7fc fc0a 	bl	8000298 <__aeabi_dsub>
 8003a84:	462a      	mov	r2, r5
 8003a86:	4633      	mov	r3, r6
 8003a88:	e9cd 0100 	strd	r0, r1, [sp]
 8003a8c:	f7fd f84c 	bl	8000b28 <__aeabi_dcmpgt>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	f040 8288 	bne.w	8003fa6 <_dtoa_r+0x92e>
 8003a96:	462a      	mov	r2, r5
 8003a98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003aa0:	f7fd f824 	bl	8000aec <__aeabi_dcmplt>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	f040 827c 	bne.w	8003fa2 <_dtoa_r+0x92a>
 8003aaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003aae:	e9cd 2300 	strd	r2, r3, [sp]
 8003ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f2c0 8150 	blt.w	8003d5a <_dtoa_r+0x6e2>
 8003aba:	f1ba 0f0e 	cmp.w	sl, #14
 8003abe:	f300 814c 	bgt.w	8003d5a <_dtoa_r+0x6e2>
 8003ac2:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <_dtoa_r+0x5f4>)
 8003ac4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003ac8:	ed93 7b00 	vldr	d7, [r3]
 8003acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ad4:	f280 80d8 	bge.w	8003c88 <_dtoa_r+0x610>
 8003ad8:	f1b9 0f00 	cmp.w	r9, #0
 8003adc:	f300 80d4 	bgt.w	8003c88 <_dtoa_r+0x610>
 8003ae0:	f040 825e 	bne.w	8003fa0 <_dtoa_r+0x928>
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	4b66      	ldr	r3, [pc, #408]	; (8003c80 <_dtoa_r+0x608>)
 8003ae8:	ec51 0b17 	vmov	r0, r1, d7
 8003aec:	f7fc fd8c 	bl	8000608 <__aeabi_dmul>
 8003af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003af4:	f7fd f80e 	bl	8000b14 <__aeabi_dcmpge>
 8003af8:	464f      	mov	r7, r9
 8003afa:	464e      	mov	r6, r9
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f040 8234 	bne.w	8003f6a <_dtoa_r+0x8f2>
 8003b02:	2331      	movs	r3, #49	; 0x31
 8003b04:	f10b 0501 	add.w	r5, fp, #1
 8003b08:	f88b 3000 	strb.w	r3, [fp]
 8003b0c:	f10a 0a01 	add.w	sl, sl, #1
 8003b10:	e22f      	b.n	8003f72 <_dtoa_r+0x8fa>
 8003b12:	07f2      	lsls	r2, r6, #31
 8003b14:	d505      	bpl.n	8003b22 <_dtoa_r+0x4aa>
 8003b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b1a:	f7fc fd75 	bl	8000608 <__aeabi_dmul>
 8003b1e:	3501      	adds	r5, #1
 8003b20:	2301      	movs	r3, #1
 8003b22:	1076      	asrs	r6, r6, #1
 8003b24:	3708      	adds	r7, #8
 8003b26:	e772      	b.n	8003a0e <_dtoa_r+0x396>
 8003b28:	2502      	movs	r5, #2
 8003b2a:	e774      	b.n	8003a16 <_dtoa_r+0x39e>
 8003b2c:	f8cd a020 	str.w	sl, [sp, #32]
 8003b30:	464f      	mov	r7, r9
 8003b32:	e791      	b.n	8003a58 <_dtoa_r+0x3e0>
 8003b34:	4b4d      	ldr	r3, [pc, #308]	; (8003c6c <_dtoa_r+0x5f4>)
 8003b36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003b3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d047      	beq.n	8003bd4 <_dtoa_r+0x55c>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	2000      	movs	r0, #0
 8003b4a:	494e      	ldr	r1, [pc, #312]	; (8003c84 <_dtoa_r+0x60c>)
 8003b4c:	f7fc fe86 	bl	800085c <__aeabi_ddiv>
 8003b50:	462a      	mov	r2, r5
 8003b52:	4633      	mov	r3, r6
 8003b54:	f7fc fba0 	bl	8000298 <__aeabi_dsub>
 8003b58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003b5c:	465d      	mov	r5, fp
 8003b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b62:	f7fd f801 	bl	8000b68 <__aeabi_d2iz>
 8003b66:	4606      	mov	r6, r0
 8003b68:	f7fc fce4 	bl	8000534 <__aeabi_i2d>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b74:	f7fc fb90 	bl	8000298 <__aeabi_dsub>
 8003b78:	3630      	adds	r6, #48	; 0x30
 8003b7a:	f805 6b01 	strb.w	r6, [r5], #1
 8003b7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003b82:	e9cd 0100 	strd	r0, r1, [sp]
 8003b86:	f7fc ffb1 	bl	8000aec <__aeabi_dcmplt>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d163      	bne.n	8003c56 <_dtoa_r+0x5de>
 8003b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b92:	2000      	movs	r0, #0
 8003b94:	4937      	ldr	r1, [pc, #220]	; (8003c74 <_dtoa_r+0x5fc>)
 8003b96:	f7fc fb7f 	bl	8000298 <__aeabi_dsub>
 8003b9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003b9e:	f7fc ffa5 	bl	8000aec <__aeabi_dcmplt>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	f040 80b7 	bne.w	8003d16 <_dtoa_r+0x69e>
 8003ba8:	eba5 030b 	sub.w	r3, r5, fp
 8003bac:	429f      	cmp	r7, r3
 8003bae:	f77f af7c 	ble.w	8003aaa <_dtoa_r+0x432>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <_dtoa_r+0x600>)
 8003bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003bba:	f7fc fd25 	bl	8000608 <__aeabi_dmul>
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003bc4:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <_dtoa_r+0x600>)
 8003bc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bca:	f7fc fd1d 	bl	8000608 <__aeabi_dmul>
 8003bce:	e9cd 0100 	strd	r0, r1, [sp]
 8003bd2:	e7c4      	b.n	8003b5e <_dtoa_r+0x4e6>
 8003bd4:	462a      	mov	r2, r5
 8003bd6:	4633      	mov	r3, r6
 8003bd8:	f7fc fd16 	bl	8000608 <__aeabi_dmul>
 8003bdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003be0:	eb0b 0507 	add.w	r5, fp, r7
 8003be4:	465e      	mov	r6, fp
 8003be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bea:	f7fc ffbd 	bl	8000b68 <__aeabi_d2iz>
 8003bee:	4607      	mov	r7, r0
 8003bf0:	f7fc fca0 	bl	8000534 <__aeabi_i2d>
 8003bf4:	3730      	adds	r7, #48	; 0x30
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bfe:	f7fc fb4b 	bl	8000298 <__aeabi_dsub>
 8003c02:	f806 7b01 	strb.w	r7, [r6], #1
 8003c06:	42ae      	cmp	r6, r5
 8003c08:	e9cd 0100 	strd	r0, r1, [sp]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	d126      	bne.n	8003c60 <_dtoa_r+0x5e8>
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <_dtoa_r+0x60c>)
 8003c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c18:	f7fc fb40 	bl	800029c <__adddf3>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c24:	f7fc ff80 	bl	8000b28 <__aeabi_dcmpgt>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d174      	bne.n	8003d16 <_dtoa_r+0x69e>
 8003c2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003c30:	2000      	movs	r0, #0
 8003c32:	4914      	ldr	r1, [pc, #80]	; (8003c84 <_dtoa_r+0x60c>)
 8003c34:	f7fc fb30 	bl	8000298 <__aeabi_dsub>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c40:	f7fc ff54 	bl	8000aec <__aeabi_dcmplt>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	f43f af30 	beq.w	8003aaa <_dtoa_r+0x432>
 8003c4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003c4e:	2b30      	cmp	r3, #48	; 0x30
 8003c50:	f105 32ff 	add.w	r2, r5, #4294967295
 8003c54:	d002      	beq.n	8003c5c <_dtoa_r+0x5e4>
 8003c56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003c5a:	e04a      	b.n	8003cf2 <_dtoa_r+0x67a>
 8003c5c:	4615      	mov	r5, r2
 8003c5e:	e7f4      	b.n	8003c4a <_dtoa_r+0x5d2>
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <_dtoa_r+0x600>)
 8003c62:	f7fc fcd1 	bl	8000608 <__aeabi_dmul>
 8003c66:	e9cd 0100 	strd	r0, r1, [sp]
 8003c6a:	e7bc      	b.n	8003be6 <_dtoa_r+0x56e>
 8003c6c:	08004d90 	.word	0x08004d90
 8003c70:	08004d68 	.word	0x08004d68
 8003c74:	3ff00000 	.word	0x3ff00000
 8003c78:	40240000 	.word	0x40240000
 8003c7c:	401c0000 	.word	0x401c0000
 8003c80:	40140000 	.word	0x40140000
 8003c84:	3fe00000 	.word	0x3fe00000
 8003c88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003c8c:	465d      	mov	r5, fp
 8003c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c92:	4630      	mov	r0, r6
 8003c94:	4639      	mov	r1, r7
 8003c96:	f7fc fde1 	bl	800085c <__aeabi_ddiv>
 8003c9a:	f7fc ff65 	bl	8000b68 <__aeabi_d2iz>
 8003c9e:	4680      	mov	r8, r0
 8003ca0:	f7fc fc48 	bl	8000534 <__aeabi_i2d>
 8003ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ca8:	f7fc fcae 	bl	8000608 <__aeabi_dmul>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	4639      	mov	r1, r7
 8003cb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003cb8:	f7fc faee 	bl	8000298 <__aeabi_dsub>
 8003cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8003cc0:	eba5 060b 	sub.w	r6, r5, fp
 8003cc4:	45b1      	cmp	r9, r6
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	d139      	bne.n	8003d40 <_dtoa_r+0x6c8>
 8003ccc:	f7fc fae6 	bl	800029c <__adddf3>
 8003cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	460f      	mov	r7, r1
 8003cd8:	f7fc ff26 	bl	8000b28 <__aeabi_dcmpgt>
 8003cdc:	b9c8      	cbnz	r0, 8003d12 <_dtoa_r+0x69a>
 8003cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	4639      	mov	r1, r7
 8003ce6:	f7fc fef7 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cea:	b110      	cbz	r0, 8003cf2 <_dtoa_r+0x67a>
 8003cec:	f018 0f01 	tst.w	r8, #1
 8003cf0:	d10f      	bne.n	8003d12 <_dtoa_r+0x69a>
 8003cf2:	9904      	ldr	r1, [sp, #16]
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f000 facc 	bl	8004292 <_Bfree>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003cfe:	702b      	strb	r3, [r5, #0]
 8003d00:	f10a 0301 	add.w	r3, sl, #1
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8241 	beq.w	8004190 <_dtoa_r+0xb18>
 8003d0e:	601d      	str	r5, [r3, #0]
 8003d10:	e23e      	b.n	8004190 <_dtoa_r+0xb18>
 8003d12:	f8cd a020 	str.w	sl, [sp, #32]
 8003d16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003d1a:	2a39      	cmp	r2, #57	; 0x39
 8003d1c:	f105 33ff 	add.w	r3, r5, #4294967295
 8003d20:	d108      	bne.n	8003d34 <_dtoa_r+0x6bc>
 8003d22:	459b      	cmp	fp, r3
 8003d24:	d10a      	bne.n	8003d3c <_dtoa_r+0x6c4>
 8003d26:	9b08      	ldr	r3, [sp, #32]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	9308      	str	r3, [sp, #32]
 8003d2c:	2330      	movs	r3, #48	; 0x30
 8003d2e:	f88b 3000 	strb.w	r3, [fp]
 8003d32:	465b      	mov	r3, fp
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	3201      	adds	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e78c      	b.n	8003c56 <_dtoa_r+0x5de>
 8003d3c:	461d      	mov	r5, r3
 8003d3e:	e7ea      	b.n	8003d16 <_dtoa_r+0x69e>
 8003d40:	2200      	movs	r2, #0
 8003d42:	4b9b      	ldr	r3, [pc, #620]	; (8003fb0 <_dtoa_r+0x938>)
 8003d44:	f7fc fc60 	bl	8000608 <__aeabi_dmul>
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	4606      	mov	r6, r0
 8003d4e:	460f      	mov	r7, r1
 8003d50:	f7fc fec2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d09a      	beq.n	8003c8e <_dtoa_r+0x616>
 8003d58:	e7cb      	b.n	8003cf2 <_dtoa_r+0x67a>
 8003d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d5c:	2a00      	cmp	r2, #0
 8003d5e:	f000 808b 	beq.w	8003e78 <_dtoa_r+0x800>
 8003d62:	9a06      	ldr	r2, [sp, #24]
 8003d64:	2a01      	cmp	r2, #1
 8003d66:	dc6e      	bgt.n	8003e46 <_dtoa_r+0x7ce>
 8003d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	d067      	beq.n	8003e3e <_dtoa_r+0x7c6>
 8003d6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003d72:	9f07      	ldr	r7, [sp, #28]
 8003d74:	9d05      	ldr	r5, [sp, #20]
 8003d76:	9a05      	ldr	r2, [sp, #20]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	441a      	add	r2, r3
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	9205      	str	r2, [sp, #20]
 8003d80:	4498      	add	r8, r3
 8003d82:	f000 fb26 	bl	80043d2 <__i2b>
 8003d86:	4606      	mov	r6, r0
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	dd0c      	ble.n	8003da6 <_dtoa_r+0x72e>
 8003d8c:	f1b8 0f00 	cmp.w	r8, #0
 8003d90:	dd09      	ble.n	8003da6 <_dtoa_r+0x72e>
 8003d92:	4545      	cmp	r5, r8
 8003d94:	9a05      	ldr	r2, [sp, #20]
 8003d96:	462b      	mov	r3, r5
 8003d98:	bfa8      	it	ge
 8003d9a:	4643      	movge	r3, r8
 8003d9c:	1ad2      	subs	r2, r2, r3
 8003d9e:	9205      	str	r2, [sp, #20]
 8003da0:	1aed      	subs	r5, r5, r3
 8003da2:	eba8 0803 	sub.w	r8, r8, r3
 8003da6:	9b07      	ldr	r3, [sp, #28]
 8003da8:	b1eb      	cbz	r3, 8003de6 <_dtoa_r+0x76e>
 8003daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d067      	beq.n	8003e80 <_dtoa_r+0x808>
 8003db0:	b18f      	cbz	r7, 8003dd6 <_dtoa_r+0x75e>
 8003db2:	4631      	mov	r1, r6
 8003db4:	463a      	mov	r2, r7
 8003db6:	4620      	mov	r0, r4
 8003db8:	f000 fbaa 	bl	8004510 <__pow5mult>
 8003dbc:	9a04      	ldr	r2, [sp, #16]
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f000 fb0e 	bl	80043e4 <__multiply>
 8003dc8:	9904      	ldr	r1, [sp, #16]
 8003dca:	9008      	str	r0, [sp, #32]
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f000 fa60 	bl	8004292 <_Bfree>
 8003dd2:	9b08      	ldr	r3, [sp, #32]
 8003dd4:	9304      	str	r3, [sp, #16]
 8003dd6:	9b07      	ldr	r3, [sp, #28]
 8003dd8:	1bda      	subs	r2, r3, r7
 8003dda:	d004      	beq.n	8003de6 <_dtoa_r+0x76e>
 8003ddc:	9904      	ldr	r1, [sp, #16]
 8003dde:	4620      	mov	r0, r4
 8003de0:	f000 fb96 	bl	8004510 <__pow5mult>
 8003de4:	9004      	str	r0, [sp, #16]
 8003de6:	2101      	movs	r1, #1
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 faf2 	bl	80043d2 <__i2b>
 8003dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003df0:	4607      	mov	r7, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 81d0 	beq.w	8004198 <_dtoa_r+0xb20>
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4601      	mov	r1, r0
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f000 fb87 	bl	8004510 <__pow5mult>
 8003e02:	9b06      	ldr	r3, [sp, #24]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	4607      	mov	r7, r0
 8003e08:	dc40      	bgt.n	8003e8c <_dtoa_r+0x814>
 8003e0a:	9b00      	ldr	r3, [sp, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d139      	bne.n	8003e84 <_dtoa_r+0x80c>
 8003e10:	9b01      	ldr	r3, [sp, #4]
 8003e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d136      	bne.n	8003e88 <_dtoa_r+0x810>
 8003e1a:	9b01      	ldr	r3, [sp, #4]
 8003e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e20:	0d1b      	lsrs	r3, r3, #20
 8003e22:	051b      	lsls	r3, r3, #20
 8003e24:	b12b      	cbz	r3, 8003e32 <_dtoa_r+0x7ba>
 8003e26:	9b05      	ldr	r3, [sp, #20]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	9305      	str	r3, [sp, #20]
 8003e2c:	f108 0801 	add.w	r8, r8, #1
 8003e30:	2301      	movs	r3, #1
 8003e32:	9307      	str	r3, [sp, #28]
 8003e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d12a      	bne.n	8003e90 <_dtoa_r+0x818>
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	e030      	b.n	8003ea0 <_dtoa_r+0x828>
 8003e3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003e44:	e795      	b.n	8003d72 <_dtoa_r+0x6fa>
 8003e46:	9b07      	ldr	r3, [sp, #28]
 8003e48:	f109 37ff 	add.w	r7, r9, #4294967295
 8003e4c:	42bb      	cmp	r3, r7
 8003e4e:	bfbf      	itttt	lt
 8003e50:	9b07      	ldrlt	r3, [sp, #28]
 8003e52:	9707      	strlt	r7, [sp, #28]
 8003e54:	1afa      	sublt	r2, r7, r3
 8003e56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003e58:	bfbb      	ittet	lt
 8003e5a:	189b      	addlt	r3, r3, r2
 8003e5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003e5e:	1bdf      	subge	r7, r3, r7
 8003e60:	2700      	movlt	r7, #0
 8003e62:	f1b9 0f00 	cmp.w	r9, #0
 8003e66:	bfb5      	itete	lt
 8003e68:	9b05      	ldrlt	r3, [sp, #20]
 8003e6a:	9d05      	ldrge	r5, [sp, #20]
 8003e6c:	eba3 0509 	sublt.w	r5, r3, r9
 8003e70:	464b      	movge	r3, r9
 8003e72:	bfb8      	it	lt
 8003e74:	2300      	movlt	r3, #0
 8003e76:	e77e      	b.n	8003d76 <_dtoa_r+0x6fe>
 8003e78:	9f07      	ldr	r7, [sp, #28]
 8003e7a:	9d05      	ldr	r5, [sp, #20]
 8003e7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003e7e:	e783      	b.n	8003d88 <_dtoa_r+0x710>
 8003e80:	9a07      	ldr	r2, [sp, #28]
 8003e82:	e7ab      	b.n	8003ddc <_dtoa_r+0x764>
 8003e84:	2300      	movs	r3, #0
 8003e86:	e7d4      	b.n	8003e32 <_dtoa_r+0x7ba>
 8003e88:	9b00      	ldr	r3, [sp, #0]
 8003e8a:	e7d2      	b.n	8003e32 <_dtoa_r+0x7ba>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9307      	str	r3, [sp, #28]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003e96:	6918      	ldr	r0, [r3, #16]
 8003e98:	f000 fa4d 	bl	8004336 <__hi0bits>
 8003e9c:	f1c0 0020 	rsb	r0, r0, #32
 8003ea0:	4440      	add	r0, r8
 8003ea2:	f010 001f 	ands.w	r0, r0, #31
 8003ea6:	d047      	beq.n	8003f38 <_dtoa_r+0x8c0>
 8003ea8:	f1c0 0320 	rsb	r3, r0, #32
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	dd3b      	ble.n	8003f28 <_dtoa_r+0x8b0>
 8003eb0:	9b05      	ldr	r3, [sp, #20]
 8003eb2:	f1c0 001c 	rsb	r0, r0, #28
 8003eb6:	4403      	add	r3, r0
 8003eb8:	9305      	str	r3, [sp, #20]
 8003eba:	4405      	add	r5, r0
 8003ebc:	4480      	add	r8, r0
 8003ebe:	9b05      	ldr	r3, [sp, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	dd05      	ble.n	8003ed0 <_dtoa_r+0x858>
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	9904      	ldr	r1, [sp, #16]
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 fb6f 	bl	80045ac <__lshift>
 8003ece:	9004      	str	r0, [sp, #16]
 8003ed0:	f1b8 0f00 	cmp.w	r8, #0
 8003ed4:	dd05      	ble.n	8003ee2 <_dtoa_r+0x86a>
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	4642      	mov	r2, r8
 8003eda:	4620      	mov	r0, r4
 8003edc:	f000 fb66 	bl	80045ac <__lshift>
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ee4:	b353      	cbz	r3, 8003f3c <_dtoa_r+0x8c4>
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	9804      	ldr	r0, [sp, #16]
 8003eea:	f000 fbb3 	bl	8004654 <__mcmp>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	da24      	bge.n	8003f3c <_dtoa_r+0x8c4>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	220a      	movs	r2, #10
 8003ef6:	9904      	ldr	r1, [sp, #16]
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f000 f9e1 	bl	80042c0 <__multadd>
 8003efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f00:	9004      	str	r0, [sp, #16]
 8003f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 814d 	beq.w	80041a6 <_dtoa_r+0xb2e>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	4631      	mov	r1, r6
 8003f10:	220a      	movs	r2, #10
 8003f12:	4620      	mov	r0, r4
 8003f14:	f000 f9d4 	bl	80042c0 <__multadd>
 8003f18:	9b02      	ldr	r3, [sp, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	4606      	mov	r6, r0
 8003f1e:	dc4f      	bgt.n	8003fc0 <_dtoa_r+0x948>
 8003f20:	9b06      	ldr	r3, [sp, #24]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	dd4c      	ble.n	8003fc0 <_dtoa_r+0x948>
 8003f26:	e011      	b.n	8003f4c <_dtoa_r+0x8d4>
 8003f28:	d0c9      	beq.n	8003ebe <_dtoa_r+0x846>
 8003f2a:	9a05      	ldr	r2, [sp, #20]
 8003f2c:	331c      	adds	r3, #28
 8003f2e:	441a      	add	r2, r3
 8003f30:	9205      	str	r2, [sp, #20]
 8003f32:	441d      	add	r5, r3
 8003f34:	4498      	add	r8, r3
 8003f36:	e7c2      	b.n	8003ebe <_dtoa_r+0x846>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	e7f6      	b.n	8003f2a <_dtoa_r+0x8b2>
 8003f3c:	f1b9 0f00 	cmp.w	r9, #0
 8003f40:	dc38      	bgt.n	8003fb4 <_dtoa_r+0x93c>
 8003f42:	9b06      	ldr	r3, [sp, #24]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	dd35      	ble.n	8003fb4 <_dtoa_r+0x93c>
 8003f48:	f8cd 9008 	str.w	r9, [sp, #8]
 8003f4c:	9b02      	ldr	r3, [sp, #8]
 8003f4e:	b963      	cbnz	r3, 8003f6a <_dtoa_r+0x8f2>
 8003f50:	4639      	mov	r1, r7
 8003f52:	2205      	movs	r2, #5
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 f9b3 	bl	80042c0 <__multadd>
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	9804      	ldr	r0, [sp, #16]
 8003f60:	f000 fb78 	bl	8004654 <__mcmp>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	f73f adcc 	bgt.w	8003b02 <_dtoa_r+0x48a>
 8003f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f6c:	465d      	mov	r5, fp
 8003f6e:	ea6f 0a03 	mvn.w	sl, r3
 8003f72:	f04f 0900 	mov.w	r9, #0
 8003f76:	4639      	mov	r1, r7
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f000 f98a 	bl	8004292 <_Bfree>
 8003f7e:	2e00      	cmp	r6, #0
 8003f80:	f43f aeb7 	beq.w	8003cf2 <_dtoa_r+0x67a>
 8003f84:	f1b9 0f00 	cmp.w	r9, #0
 8003f88:	d005      	beq.n	8003f96 <_dtoa_r+0x91e>
 8003f8a:	45b1      	cmp	r9, r6
 8003f8c:	d003      	beq.n	8003f96 <_dtoa_r+0x91e>
 8003f8e:	4649      	mov	r1, r9
 8003f90:	4620      	mov	r0, r4
 8003f92:	f000 f97e 	bl	8004292 <_Bfree>
 8003f96:	4631      	mov	r1, r6
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f000 f97a 	bl	8004292 <_Bfree>
 8003f9e:	e6a8      	b.n	8003cf2 <_dtoa_r+0x67a>
 8003fa0:	2700      	movs	r7, #0
 8003fa2:	463e      	mov	r6, r7
 8003fa4:	e7e1      	b.n	8003f6a <_dtoa_r+0x8f2>
 8003fa6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003faa:	463e      	mov	r6, r7
 8003fac:	e5a9      	b.n	8003b02 <_dtoa_r+0x48a>
 8003fae:	bf00      	nop
 8003fb0:	40240000 	.word	0x40240000
 8003fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80fa 	beq.w	80041b4 <_dtoa_r+0xb3c>
 8003fc0:	2d00      	cmp	r5, #0
 8003fc2:	dd05      	ble.n	8003fd0 <_dtoa_r+0x958>
 8003fc4:	4631      	mov	r1, r6
 8003fc6:	462a      	mov	r2, r5
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f000 faef 	bl	80045ac <__lshift>
 8003fce:	4606      	mov	r6, r0
 8003fd0:	9b07      	ldr	r3, [sp, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04c      	beq.n	8004070 <_dtoa_r+0x9f8>
 8003fd6:	6871      	ldr	r1, [r6, #4]
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f000 f926 	bl	800422a <_Balloc>
 8003fde:	6932      	ldr	r2, [r6, #16]
 8003fe0:	3202      	adds	r2, #2
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	0092      	lsls	r2, r2, #2
 8003fe6:	f106 010c 	add.w	r1, r6, #12
 8003fea:	300c      	adds	r0, #12
 8003fec:	f000 f912 	bl	8004214 <memcpy>
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 fad9 	bl	80045ac <__lshift>
 8003ffa:	9b00      	ldr	r3, [sp, #0]
 8003ffc:	f8cd b014 	str.w	fp, [sp, #20]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	46b1      	mov	r9, r6
 8004006:	9307      	str	r3, [sp, #28]
 8004008:	4606      	mov	r6, r0
 800400a:	4639      	mov	r1, r7
 800400c:	9804      	ldr	r0, [sp, #16]
 800400e:	f7ff faa5 	bl	800355c <quorem>
 8004012:	4649      	mov	r1, r9
 8004014:	4605      	mov	r5, r0
 8004016:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800401a:	9804      	ldr	r0, [sp, #16]
 800401c:	f000 fb1a 	bl	8004654 <__mcmp>
 8004020:	4632      	mov	r2, r6
 8004022:	9000      	str	r0, [sp, #0]
 8004024:	4639      	mov	r1, r7
 8004026:	4620      	mov	r0, r4
 8004028:	f000 fb2e 	bl	8004688 <__mdiff>
 800402c:	68c3      	ldr	r3, [r0, #12]
 800402e:	4602      	mov	r2, r0
 8004030:	bb03      	cbnz	r3, 8004074 <_dtoa_r+0x9fc>
 8004032:	4601      	mov	r1, r0
 8004034:	9008      	str	r0, [sp, #32]
 8004036:	9804      	ldr	r0, [sp, #16]
 8004038:	f000 fb0c 	bl	8004654 <__mcmp>
 800403c:	9a08      	ldr	r2, [sp, #32]
 800403e:	4603      	mov	r3, r0
 8004040:	4611      	mov	r1, r2
 8004042:	4620      	mov	r0, r4
 8004044:	9308      	str	r3, [sp, #32]
 8004046:	f000 f924 	bl	8004292 <_Bfree>
 800404a:	9b08      	ldr	r3, [sp, #32]
 800404c:	b9a3      	cbnz	r3, 8004078 <_dtoa_r+0xa00>
 800404e:	9a06      	ldr	r2, [sp, #24]
 8004050:	b992      	cbnz	r2, 8004078 <_dtoa_r+0xa00>
 8004052:	9a07      	ldr	r2, [sp, #28]
 8004054:	b982      	cbnz	r2, 8004078 <_dtoa_r+0xa00>
 8004056:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800405a:	d029      	beq.n	80040b0 <_dtoa_r+0xa38>
 800405c:	9b00      	ldr	r3, [sp, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	dd01      	ble.n	8004066 <_dtoa_r+0x9ee>
 8004062:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004066:	9b05      	ldr	r3, [sp, #20]
 8004068:	1c5d      	adds	r5, r3, #1
 800406a:	f883 8000 	strb.w	r8, [r3]
 800406e:	e782      	b.n	8003f76 <_dtoa_r+0x8fe>
 8004070:	4630      	mov	r0, r6
 8004072:	e7c2      	b.n	8003ffa <_dtoa_r+0x982>
 8004074:	2301      	movs	r3, #1
 8004076:	e7e3      	b.n	8004040 <_dtoa_r+0x9c8>
 8004078:	9a00      	ldr	r2, [sp, #0]
 800407a:	2a00      	cmp	r2, #0
 800407c:	db04      	blt.n	8004088 <_dtoa_r+0xa10>
 800407e:	d125      	bne.n	80040cc <_dtoa_r+0xa54>
 8004080:	9a06      	ldr	r2, [sp, #24]
 8004082:	bb1a      	cbnz	r2, 80040cc <_dtoa_r+0xa54>
 8004084:	9a07      	ldr	r2, [sp, #28]
 8004086:	bb0a      	cbnz	r2, 80040cc <_dtoa_r+0xa54>
 8004088:	2b00      	cmp	r3, #0
 800408a:	ddec      	ble.n	8004066 <_dtoa_r+0x9ee>
 800408c:	2201      	movs	r2, #1
 800408e:	9904      	ldr	r1, [sp, #16]
 8004090:	4620      	mov	r0, r4
 8004092:	f000 fa8b 	bl	80045ac <__lshift>
 8004096:	4639      	mov	r1, r7
 8004098:	9004      	str	r0, [sp, #16]
 800409a:	f000 fadb 	bl	8004654 <__mcmp>
 800409e:	2800      	cmp	r0, #0
 80040a0:	dc03      	bgt.n	80040aa <_dtoa_r+0xa32>
 80040a2:	d1e0      	bne.n	8004066 <_dtoa_r+0x9ee>
 80040a4:	f018 0f01 	tst.w	r8, #1
 80040a8:	d0dd      	beq.n	8004066 <_dtoa_r+0x9ee>
 80040aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80040ae:	d1d8      	bne.n	8004062 <_dtoa_r+0x9ea>
 80040b0:	9b05      	ldr	r3, [sp, #20]
 80040b2:	9a05      	ldr	r2, [sp, #20]
 80040b4:	1c5d      	adds	r5, r3, #1
 80040b6:	2339      	movs	r3, #57	; 0x39
 80040b8:	7013      	strb	r3, [r2, #0]
 80040ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80040be:	2b39      	cmp	r3, #57	; 0x39
 80040c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80040c4:	d04f      	beq.n	8004166 <_dtoa_r+0xaee>
 80040c6:	3301      	adds	r3, #1
 80040c8:	7013      	strb	r3, [r2, #0]
 80040ca:	e754      	b.n	8003f76 <_dtoa_r+0x8fe>
 80040cc:	9a05      	ldr	r2, [sp, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f102 0501 	add.w	r5, r2, #1
 80040d4:	dd06      	ble.n	80040e4 <_dtoa_r+0xa6c>
 80040d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80040da:	d0e9      	beq.n	80040b0 <_dtoa_r+0xa38>
 80040dc:	f108 0801 	add.w	r8, r8, #1
 80040e0:	9b05      	ldr	r3, [sp, #20]
 80040e2:	e7c2      	b.n	800406a <_dtoa_r+0x9f2>
 80040e4:	9a02      	ldr	r2, [sp, #8]
 80040e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80040ea:	eba5 030b 	sub.w	r3, r5, fp
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d021      	beq.n	8004136 <_dtoa_r+0xabe>
 80040f2:	2300      	movs	r3, #0
 80040f4:	220a      	movs	r2, #10
 80040f6:	9904      	ldr	r1, [sp, #16]
 80040f8:	4620      	mov	r0, r4
 80040fa:	f000 f8e1 	bl	80042c0 <__multadd>
 80040fe:	45b1      	cmp	r9, r6
 8004100:	9004      	str	r0, [sp, #16]
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	f04f 020a 	mov.w	r2, #10
 800410a:	4649      	mov	r1, r9
 800410c:	4620      	mov	r0, r4
 800410e:	d105      	bne.n	800411c <_dtoa_r+0xaa4>
 8004110:	f000 f8d6 	bl	80042c0 <__multadd>
 8004114:	4681      	mov	r9, r0
 8004116:	4606      	mov	r6, r0
 8004118:	9505      	str	r5, [sp, #20]
 800411a:	e776      	b.n	800400a <_dtoa_r+0x992>
 800411c:	f000 f8d0 	bl	80042c0 <__multadd>
 8004120:	4631      	mov	r1, r6
 8004122:	4681      	mov	r9, r0
 8004124:	2300      	movs	r3, #0
 8004126:	220a      	movs	r2, #10
 8004128:	4620      	mov	r0, r4
 800412a:	f000 f8c9 	bl	80042c0 <__multadd>
 800412e:	4606      	mov	r6, r0
 8004130:	e7f2      	b.n	8004118 <_dtoa_r+0xaa0>
 8004132:	f04f 0900 	mov.w	r9, #0
 8004136:	2201      	movs	r2, #1
 8004138:	9904      	ldr	r1, [sp, #16]
 800413a:	4620      	mov	r0, r4
 800413c:	f000 fa36 	bl	80045ac <__lshift>
 8004140:	4639      	mov	r1, r7
 8004142:	9004      	str	r0, [sp, #16]
 8004144:	f000 fa86 	bl	8004654 <__mcmp>
 8004148:	2800      	cmp	r0, #0
 800414a:	dcb6      	bgt.n	80040ba <_dtoa_r+0xa42>
 800414c:	d102      	bne.n	8004154 <_dtoa_r+0xadc>
 800414e:	f018 0f01 	tst.w	r8, #1
 8004152:	d1b2      	bne.n	80040ba <_dtoa_r+0xa42>
 8004154:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	f105 32ff 	add.w	r2, r5, #4294967295
 800415e:	f47f af0a 	bne.w	8003f76 <_dtoa_r+0x8fe>
 8004162:	4615      	mov	r5, r2
 8004164:	e7f6      	b.n	8004154 <_dtoa_r+0xadc>
 8004166:	4593      	cmp	fp, r2
 8004168:	d105      	bne.n	8004176 <_dtoa_r+0xafe>
 800416a:	2331      	movs	r3, #49	; 0x31
 800416c:	f10a 0a01 	add.w	sl, sl, #1
 8004170:	f88b 3000 	strb.w	r3, [fp]
 8004174:	e6ff      	b.n	8003f76 <_dtoa_r+0x8fe>
 8004176:	4615      	mov	r5, r2
 8004178:	e79f      	b.n	80040ba <_dtoa_r+0xa42>
 800417a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80041e0 <_dtoa_r+0xb68>
 800417e:	e007      	b.n	8004190 <_dtoa_r+0xb18>
 8004180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004182:	f8df b060 	ldr.w	fp, [pc, #96]	; 80041e4 <_dtoa_r+0xb6c>
 8004186:	b11b      	cbz	r3, 8004190 <_dtoa_r+0xb18>
 8004188:	f10b 0308 	add.w	r3, fp, #8
 800418c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4658      	mov	r0, fp
 8004192:	b017      	add	sp, #92	; 0x5c
 8004194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004198:	9b06      	ldr	r3, [sp, #24]
 800419a:	2b01      	cmp	r3, #1
 800419c:	f77f ae35 	ble.w	8003e0a <_dtoa_r+0x792>
 80041a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041a2:	9307      	str	r3, [sp, #28]
 80041a4:	e649      	b.n	8003e3a <_dtoa_r+0x7c2>
 80041a6:	9b02      	ldr	r3, [sp, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	dc03      	bgt.n	80041b4 <_dtoa_r+0xb3c>
 80041ac:	9b06      	ldr	r3, [sp, #24]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	f73f aecc 	bgt.w	8003f4c <_dtoa_r+0x8d4>
 80041b4:	465d      	mov	r5, fp
 80041b6:	4639      	mov	r1, r7
 80041b8:	9804      	ldr	r0, [sp, #16]
 80041ba:	f7ff f9cf 	bl	800355c <quorem>
 80041be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80041c2:	f805 8b01 	strb.w	r8, [r5], #1
 80041c6:	9a02      	ldr	r2, [sp, #8]
 80041c8:	eba5 030b 	sub.w	r3, r5, fp
 80041cc:	429a      	cmp	r2, r3
 80041ce:	ddb0      	ble.n	8004132 <_dtoa_r+0xaba>
 80041d0:	2300      	movs	r3, #0
 80041d2:	220a      	movs	r2, #10
 80041d4:	9904      	ldr	r1, [sp, #16]
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 f872 	bl	80042c0 <__multadd>
 80041dc:	9004      	str	r0, [sp, #16]
 80041de:	e7ea      	b.n	80041b6 <_dtoa_r+0xb3e>
 80041e0:	08004d34 	.word	0x08004d34
 80041e4:	08004d58 	.word	0x08004d58

080041e8 <_localeconv_r>:
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <_localeconv_r+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a18      	ldr	r0, [r3, #32]
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <_localeconv_r+0x18>)
 80041f0:	2800      	cmp	r0, #0
 80041f2:	bf08      	it	eq
 80041f4:	4618      	moveq	r0, r3
 80041f6:	30f0      	adds	r0, #240	; 0xf0
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	2000000c 	.word	0x2000000c
 8004200:	20000070 	.word	0x20000070

08004204 <malloc>:
 8004204:	4b02      	ldr	r3, [pc, #8]	; (8004210 <malloc+0xc>)
 8004206:	4601      	mov	r1, r0
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	f000 bb45 	b.w	8004898 <_malloc_r>
 800420e:	bf00      	nop
 8004210:	2000000c 	.word	0x2000000c

08004214 <memcpy>:
 8004214:	b510      	push	{r4, lr}
 8004216:	1e43      	subs	r3, r0, #1
 8004218:	440a      	add	r2, r1
 800421a:	4291      	cmp	r1, r2
 800421c:	d100      	bne.n	8004220 <memcpy+0xc>
 800421e:	bd10      	pop	{r4, pc}
 8004220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004228:	e7f7      	b.n	800421a <memcpy+0x6>

0800422a <_Balloc>:
 800422a:	b570      	push	{r4, r5, r6, lr}
 800422c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800422e:	4604      	mov	r4, r0
 8004230:	460e      	mov	r6, r1
 8004232:	b93d      	cbnz	r5, 8004244 <_Balloc+0x1a>
 8004234:	2010      	movs	r0, #16
 8004236:	f7ff ffe5 	bl	8004204 <malloc>
 800423a:	6260      	str	r0, [r4, #36]	; 0x24
 800423c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004240:	6005      	str	r5, [r0, #0]
 8004242:	60c5      	str	r5, [r0, #12]
 8004244:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004246:	68eb      	ldr	r3, [r5, #12]
 8004248:	b183      	cbz	r3, 800426c <_Balloc+0x42>
 800424a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004252:	b9b8      	cbnz	r0, 8004284 <_Balloc+0x5a>
 8004254:	2101      	movs	r1, #1
 8004256:	fa01 f506 	lsl.w	r5, r1, r6
 800425a:	1d6a      	adds	r2, r5, #5
 800425c:	0092      	lsls	r2, r2, #2
 800425e:	4620      	mov	r0, r4
 8004260:	f000 fabe 	bl	80047e0 <_calloc_r>
 8004264:	b160      	cbz	r0, 8004280 <_Balloc+0x56>
 8004266:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800426a:	e00e      	b.n	800428a <_Balloc+0x60>
 800426c:	2221      	movs	r2, #33	; 0x21
 800426e:	2104      	movs	r1, #4
 8004270:	4620      	mov	r0, r4
 8004272:	f000 fab5 	bl	80047e0 <_calloc_r>
 8004276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004278:	60e8      	str	r0, [r5, #12]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e4      	bne.n	800424a <_Balloc+0x20>
 8004280:	2000      	movs	r0, #0
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	6802      	ldr	r2, [r0, #0]
 8004286:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800428a:	2300      	movs	r3, #0
 800428c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004290:	e7f7      	b.n	8004282 <_Balloc+0x58>

08004292 <_Bfree>:
 8004292:	b570      	push	{r4, r5, r6, lr}
 8004294:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004296:	4606      	mov	r6, r0
 8004298:	460d      	mov	r5, r1
 800429a:	b93c      	cbnz	r4, 80042ac <_Bfree+0x1a>
 800429c:	2010      	movs	r0, #16
 800429e:	f7ff ffb1 	bl	8004204 <malloc>
 80042a2:	6270      	str	r0, [r6, #36]	; 0x24
 80042a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80042a8:	6004      	str	r4, [r0, #0]
 80042aa:	60c4      	str	r4, [r0, #12]
 80042ac:	b13d      	cbz	r5, 80042be <_Bfree+0x2c>
 80042ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80042b0:	686a      	ldr	r2, [r5, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042b8:	6029      	str	r1, [r5, #0]
 80042ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80042be:	bd70      	pop	{r4, r5, r6, pc}

080042c0 <__multadd>:
 80042c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c4:	690d      	ldr	r5, [r1, #16]
 80042c6:	461f      	mov	r7, r3
 80042c8:	4606      	mov	r6, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	f101 0c14 	add.w	ip, r1, #20
 80042d0:	2300      	movs	r3, #0
 80042d2:	f8dc 0000 	ldr.w	r0, [ip]
 80042d6:	b281      	uxth	r1, r0
 80042d8:	fb02 7101 	mla	r1, r2, r1, r7
 80042dc:	0c0f      	lsrs	r7, r1, #16
 80042de:	0c00      	lsrs	r0, r0, #16
 80042e0:	fb02 7000 	mla	r0, r2, r0, r7
 80042e4:	b289      	uxth	r1, r1
 80042e6:	3301      	adds	r3, #1
 80042e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80042ec:	429d      	cmp	r5, r3
 80042ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80042f2:	f84c 1b04 	str.w	r1, [ip], #4
 80042f6:	dcec      	bgt.n	80042d2 <__multadd+0x12>
 80042f8:	b1d7      	cbz	r7, 8004330 <__multadd+0x70>
 80042fa:	68a3      	ldr	r3, [r4, #8]
 80042fc:	42ab      	cmp	r3, r5
 80042fe:	dc12      	bgt.n	8004326 <__multadd+0x66>
 8004300:	6861      	ldr	r1, [r4, #4]
 8004302:	4630      	mov	r0, r6
 8004304:	3101      	adds	r1, #1
 8004306:	f7ff ff90 	bl	800422a <_Balloc>
 800430a:	6922      	ldr	r2, [r4, #16]
 800430c:	3202      	adds	r2, #2
 800430e:	f104 010c 	add.w	r1, r4, #12
 8004312:	4680      	mov	r8, r0
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	300c      	adds	r0, #12
 8004318:	f7ff ff7c 	bl	8004214 <memcpy>
 800431c:	4621      	mov	r1, r4
 800431e:	4630      	mov	r0, r6
 8004320:	f7ff ffb7 	bl	8004292 <_Bfree>
 8004324:	4644      	mov	r4, r8
 8004326:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800432a:	3501      	adds	r5, #1
 800432c:	615f      	str	r7, [r3, #20]
 800432e:	6125      	str	r5, [r4, #16]
 8004330:	4620      	mov	r0, r4
 8004332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004336 <__hi0bits>:
 8004336:	0c02      	lsrs	r2, r0, #16
 8004338:	0412      	lsls	r2, r2, #16
 800433a:	4603      	mov	r3, r0
 800433c:	b9b2      	cbnz	r2, 800436c <__hi0bits+0x36>
 800433e:	0403      	lsls	r3, r0, #16
 8004340:	2010      	movs	r0, #16
 8004342:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004346:	bf04      	itt	eq
 8004348:	021b      	lsleq	r3, r3, #8
 800434a:	3008      	addeq	r0, #8
 800434c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004350:	bf04      	itt	eq
 8004352:	011b      	lsleq	r3, r3, #4
 8004354:	3004      	addeq	r0, #4
 8004356:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800435a:	bf04      	itt	eq
 800435c:	009b      	lsleq	r3, r3, #2
 800435e:	3002      	addeq	r0, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	db06      	blt.n	8004372 <__hi0bits+0x3c>
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	d503      	bpl.n	8004370 <__hi0bits+0x3a>
 8004368:	3001      	adds	r0, #1
 800436a:	4770      	bx	lr
 800436c:	2000      	movs	r0, #0
 800436e:	e7e8      	b.n	8004342 <__hi0bits+0xc>
 8004370:	2020      	movs	r0, #32
 8004372:	4770      	bx	lr

08004374 <__lo0bits>:
 8004374:	6803      	ldr	r3, [r0, #0]
 8004376:	f013 0207 	ands.w	r2, r3, #7
 800437a:	4601      	mov	r1, r0
 800437c:	d00b      	beq.n	8004396 <__lo0bits+0x22>
 800437e:	07da      	lsls	r2, r3, #31
 8004380:	d423      	bmi.n	80043ca <__lo0bits+0x56>
 8004382:	0798      	lsls	r0, r3, #30
 8004384:	bf49      	itett	mi
 8004386:	085b      	lsrmi	r3, r3, #1
 8004388:	089b      	lsrpl	r3, r3, #2
 800438a:	2001      	movmi	r0, #1
 800438c:	600b      	strmi	r3, [r1, #0]
 800438e:	bf5c      	itt	pl
 8004390:	600b      	strpl	r3, [r1, #0]
 8004392:	2002      	movpl	r0, #2
 8004394:	4770      	bx	lr
 8004396:	b298      	uxth	r0, r3
 8004398:	b9a8      	cbnz	r0, 80043c6 <__lo0bits+0x52>
 800439a:	0c1b      	lsrs	r3, r3, #16
 800439c:	2010      	movs	r0, #16
 800439e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80043a2:	bf04      	itt	eq
 80043a4:	0a1b      	lsreq	r3, r3, #8
 80043a6:	3008      	addeq	r0, #8
 80043a8:	071a      	lsls	r2, r3, #28
 80043aa:	bf04      	itt	eq
 80043ac:	091b      	lsreq	r3, r3, #4
 80043ae:	3004      	addeq	r0, #4
 80043b0:	079a      	lsls	r2, r3, #30
 80043b2:	bf04      	itt	eq
 80043b4:	089b      	lsreq	r3, r3, #2
 80043b6:	3002      	addeq	r0, #2
 80043b8:	07da      	lsls	r2, r3, #31
 80043ba:	d402      	bmi.n	80043c2 <__lo0bits+0x4e>
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	d006      	beq.n	80043ce <__lo0bits+0x5a>
 80043c0:	3001      	adds	r0, #1
 80043c2:	600b      	str	r3, [r1, #0]
 80043c4:	4770      	bx	lr
 80043c6:	4610      	mov	r0, r2
 80043c8:	e7e9      	b.n	800439e <__lo0bits+0x2a>
 80043ca:	2000      	movs	r0, #0
 80043cc:	4770      	bx	lr
 80043ce:	2020      	movs	r0, #32
 80043d0:	4770      	bx	lr

080043d2 <__i2b>:
 80043d2:	b510      	push	{r4, lr}
 80043d4:	460c      	mov	r4, r1
 80043d6:	2101      	movs	r1, #1
 80043d8:	f7ff ff27 	bl	800422a <_Balloc>
 80043dc:	2201      	movs	r2, #1
 80043de:	6144      	str	r4, [r0, #20]
 80043e0:	6102      	str	r2, [r0, #16]
 80043e2:	bd10      	pop	{r4, pc}

080043e4 <__multiply>:
 80043e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e8:	4614      	mov	r4, r2
 80043ea:	690a      	ldr	r2, [r1, #16]
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	bfb8      	it	lt
 80043f2:	460b      	movlt	r3, r1
 80043f4:	4688      	mov	r8, r1
 80043f6:	bfbc      	itt	lt
 80043f8:	46a0      	movlt	r8, r4
 80043fa:	461c      	movlt	r4, r3
 80043fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004400:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004404:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004408:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800440c:	eb07 0609 	add.w	r6, r7, r9
 8004410:	42b3      	cmp	r3, r6
 8004412:	bfb8      	it	lt
 8004414:	3101      	addlt	r1, #1
 8004416:	f7ff ff08 	bl	800422a <_Balloc>
 800441a:	f100 0514 	add.w	r5, r0, #20
 800441e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004422:	462b      	mov	r3, r5
 8004424:	2200      	movs	r2, #0
 8004426:	4573      	cmp	r3, lr
 8004428:	d316      	bcc.n	8004458 <__multiply+0x74>
 800442a:	f104 0214 	add.w	r2, r4, #20
 800442e:	f108 0114 	add.w	r1, r8, #20
 8004432:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004436:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	9b00      	ldr	r3, [sp, #0]
 800443e:	9201      	str	r2, [sp, #4]
 8004440:	4293      	cmp	r3, r2
 8004442:	d80c      	bhi.n	800445e <__multiply+0x7a>
 8004444:	2e00      	cmp	r6, #0
 8004446:	dd03      	ble.n	8004450 <__multiply+0x6c>
 8004448:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800444c:	2b00      	cmp	r3, #0
 800444e:	d05d      	beq.n	800450c <__multiply+0x128>
 8004450:	6106      	str	r6, [r0, #16]
 8004452:	b003      	add	sp, #12
 8004454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004458:	f843 2b04 	str.w	r2, [r3], #4
 800445c:	e7e3      	b.n	8004426 <__multiply+0x42>
 800445e:	f8b2 b000 	ldrh.w	fp, [r2]
 8004462:	f1bb 0f00 	cmp.w	fp, #0
 8004466:	d023      	beq.n	80044b0 <__multiply+0xcc>
 8004468:	4689      	mov	r9, r1
 800446a:	46ac      	mov	ip, r5
 800446c:	f04f 0800 	mov.w	r8, #0
 8004470:	f859 4b04 	ldr.w	r4, [r9], #4
 8004474:	f8dc a000 	ldr.w	sl, [ip]
 8004478:	b2a3      	uxth	r3, r4
 800447a:	fa1f fa8a 	uxth.w	sl, sl
 800447e:	fb0b a303 	mla	r3, fp, r3, sl
 8004482:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004486:	f8dc 4000 	ldr.w	r4, [ip]
 800448a:	4443      	add	r3, r8
 800448c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004490:	fb0b 840a 	mla	r4, fp, sl, r8
 8004494:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004498:	46e2      	mov	sl, ip
 800449a:	b29b      	uxth	r3, r3
 800449c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80044a0:	454f      	cmp	r7, r9
 80044a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80044a6:	f84a 3b04 	str.w	r3, [sl], #4
 80044aa:	d82b      	bhi.n	8004504 <__multiply+0x120>
 80044ac:	f8cc 8004 	str.w	r8, [ip, #4]
 80044b0:	9b01      	ldr	r3, [sp, #4]
 80044b2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80044b6:	3204      	adds	r2, #4
 80044b8:	f1ba 0f00 	cmp.w	sl, #0
 80044bc:	d020      	beq.n	8004500 <__multiply+0x11c>
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	4689      	mov	r9, r1
 80044c2:	46a8      	mov	r8, r5
 80044c4:	f04f 0b00 	mov.w	fp, #0
 80044c8:	f8b9 c000 	ldrh.w	ip, [r9]
 80044cc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80044d0:	fb0a 440c 	mla	r4, sl, ip, r4
 80044d4:	445c      	add	r4, fp
 80044d6:	46c4      	mov	ip, r8
 80044d8:	b29b      	uxth	r3, r3
 80044da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80044de:	f84c 3b04 	str.w	r3, [ip], #4
 80044e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80044e6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	fb0a b303 	mla	r3, sl, r3, fp
 80044f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80044f4:	454f      	cmp	r7, r9
 80044f6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80044fa:	d805      	bhi.n	8004508 <__multiply+0x124>
 80044fc:	f8c8 3004 	str.w	r3, [r8, #4]
 8004500:	3504      	adds	r5, #4
 8004502:	e79b      	b.n	800443c <__multiply+0x58>
 8004504:	46d4      	mov	ip, sl
 8004506:	e7b3      	b.n	8004470 <__multiply+0x8c>
 8004508:	46e0      	mov	r8, ip
 800450a:	e7dd      	b.n	80044c8 <__multiply+0xe4>
 800450c:	3e01      	subs	r6, #1
 800450e:	e799      	b.n	8004444 <__multiply+0x60>

08004510 <__pow5mult>:
 8004510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004514:	4615      	mov	r5, r2
 8004516:	f012 0203 	ands.w	r2, r2, #3
 800451a:	4606      	mov	r6, r0
 800451c:	460f      	mov	r7, r1
 800451e:	d007      	beq.n	8004530 <__pow5mult+0x20>
 8004520:	3a01      	subs	r2, #1
 8004522:	4c21      	ldr	r4, [pc, #132]	; (80045a8 <__pow5mult+0x98>)
 8004524:	2300      	movs	r3, #0
 8004526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800452a:	f7ff fec9 	bl	80042c0 <__multadd>
 800452e:	4607      	mov	r7, r0
 8004530:	10ad      	asrs	r5, r5, #2
 8004532:	d035      	beq.n	80045a0 <__pow5mult+0x90>
 8004534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004536:	b93c      	cbnz	r4, 8004548 <__pow5mult+0x38>
 8004538:	2010      	movs	r0, #16
 800453a:	f7ff fe63 	bl	8004204 <malloc>
 800453e:	6270      	str	r0, [r6, #36]	; 0x24
 8004540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004544:	6004      	str	r4, [r0, #0]
 8004546:	60c4      	str	r4, [r0, #12]
 8004548:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800454c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004550:	b94c      	cbnz	r4, 8004566 <__pow5mult+0x56>
 8004552:	f240 2171 	movw	r1, #625	; 0x271
 8004556:	4630      	mov	r0, r6
 8004558:	f7ff ff3b 	bl	80043d2 <__i2b>
 800455c:	2300      	movs	r3, #0
 800455e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004562:	4604      	mov	r4, r0
 8004564:	6003      	str	r3, [r0, #0]
 8004566:	f04f 0800 	mov.w	r8, #0
 800456a:	07eb      	lsls	r3, r5, #31
 800456c:	d50a      	bpl.n	8004584 <__pow5mult+0x74>
 800456e:	4639      	mov	r1, r7
 8004570:	4622      	mov	r2, r4
 8004572:	4630      	mov	r0, r6
 8004574:	f7ff ff36 	bl	80043e4 <__multiply>
 8004578:	4639      	mov	r1, r7
 800457a:	4681      	mov	r9, r0
 800457c:	4630      	mov	r0, r6
 800457e:	f7ff fe88 	bl	8004292 <_Bfree>
 8004582:	464f      	mov	r7, r9
 8004584:	106d      	asrs	r5, r5, #1
 8004586:	d00b      	beq.n	80045a0 <__pow5mult+0x90>
 8004588:	6820      	ldr	r0, [r4, #0]
 800458a:	b938      	cbnz	r0, 800459c <__pow5mult+0x8c>
 800458c:	4622      	mov	r2, r4
 800458e:	4621      	mov	r1, r4
 8004590:	4630      	mov	r0, r6
 8004592:	f7ff ff27 	bl	80043e4 <__multiply>
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	f8c0 8000 	str.w	r8, [r0]
 800459c:	4604      	mov	r4, r0
 800459e:	e7e4      	b.n	800456a <__pow5mult+0x5a>
 80045a0:	4638      	mov	r0, r7
 80045a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a6:	bf00      	nop
 80045a8:	08004e58 	.word	0x08004e58

080045ac <__lshift>:
 80045ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	460c      	mov	r4, r1
 80045b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80045b6:	6923      	ldr	r3, [r4, #16]
 80045b8:	6849      	ldr	r1, [r1, #4]
 80045ba:	eb0a 0903 	add.w	r9, sl, r3
 80045be:	68a3      	ldr	r3, [r4, #8]
 80045c0:	4607      	mov	r7, r0
 80045c2:	4616      	mov	r6, r2
 80045c4:	f109 0501 	add.w	r5, r9, #1
 80045c8:	42ab      	cmp	r3, r5
 80045ca:	db32      	blt.n	8004632 <__lshift+0x86>
 80045cc:	4638      	mov	r0, r7
 80045ce:	f7ff fe2c 	bl	800422a <_Balloc>
 80045d2:	2300      	movs	r3, #0
 80045d4:	4680      	mov	r8, r0
 80045d6:	f100 0114 	add.w	r1, r0, #20
 80045da:	461a      	mov	r2, r3
 80045dc:	4553      	cmp	r3, sl
 80045de:	db2b      	blt.n	8004638 <__lshift+0x8c>
 80045e0:	6920      	ldr	r0, [r4, #16]
 80045e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045e6:	f104 0314 	add.w	r3, r4, #20
 80045ea:	f016 021f 	ands.w	r2, r6, #31
 80045ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80045f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80045f6:	d025      	beq.n	8004644 <__lshift+0x98>
 80045f8:	f1c2 0e20 	rsb	lr, r2, #32
 80045fc:	2000      	movs	r0, #0
 80045fe:	681e      	ldr	r6, [r3, #0]
 8004600:	468a      	mov	sl, r1
 8004602:	4096      	lsls	r6, r2
 8004604:	4330      	orrs	r0, r6
 8004606:	f84a 0b04 	str.w	r0, [sl], #4
 800460a:	f853 0b04 	ldr.w	r0, [r3], #4
 800460e:	459c      	cmp	ip, r3
 8004610:	fa20 f00e 	lsr.w	r0, r0, lr
 8004614:	d814      	bhi.n	8004640 <__lshift+0x94>
 8004616:	6048      	str	r0, [r1, #4]
 8004618:	b108      	cbz	r0, 800461e <__lshift+0x72>
 800461a:	f109 0502 	add.w	r5, r9, #2
 800461e:	3d01      	subs	r5, #1
 8004620:	4638      	mov	r0, r7
 8004622:	f8c8 5010 	str.w	r5, [r8, #16]
 8004626:	4621      	mov	r1, r4
 8004628:	f7ff fe33 	bl	8004292 <_Bfree>
 800462c:	4640      	mov	r0, r8
 800462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004632:	3101      	adds	r1, #1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	e7c7      	b.n	80045c8 <__lshift+0x1c>
 8004638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800463c:	3301      	adds	r3, #1
 800463e:	e7cd      	b.n	80045dc <__lshift+0x30>
 8004640:	4651      	mov	r1, sl
 8004642:	e7dc      	b.n	80045fe <__lshift+0x52>
 8004644:	3904      	subs	r1, #4
 8004646:	f853 2b04 	ldr.w	r2, [r3], #4
 800464a:	f841 2f04 	str.w	r2, [r1, #4]!
 800464e:	459c      	cmp	ip, r3
 8004650:	d8f9      	bhi.n	8004646 <__lshift+0x9a>
 8004652:	e7e4      	b.n	800461e <__lshift+0x72>

08004654 <__mcmp>:
 8004654:	6903      	ldr	r3, [r0, #16]
 8004656:	690a      	ldr	r2, [r1, #16]
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	b530      	push	{r4, r5, lr}
 800465c:	d10c      	bne.n	8004678 <__mcmp+0x24>
 800465e:	0092      	lsls	r2, r2, #2
 8004660:	3014      	adds	r0, #20
 8004662:	3114      	adds	r1, #20
 8004664:	1884      	adds	r4, r0, r2
 8004666:	4411      	add	r1, r2
 8004668:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800466c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004670:	4295      	cmp	r5, r2
 8004672:	d003      	beq.n	800467c <__mcmp+0x28>
 8004674:	d305      	bcc.n	8004682 <__mcmp+0x2e>
 8004676:	2301      	movs	r3, #1
 8004678:	4618      	mov	r0, r3
 800467a:	bd30      	pop	{r4, r5, pc}
 800467c:	42a0      	cmp	r0, r4
 800467e:	d3f3      	bcc.n	8004668 <__mcmp+0x14>
 8004680:	e7fa      	b.n	8004678 <__mcmp+0x24>
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	e7f7      	b.n	8004678 <__mcmp+0x24>

08004688 <__mdiff>:
 8004688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800468c:	460d      	mov	r5, r1
 800468e:	4607      	mov	r7, r0
 8004690:	4611      	mov	r1, r2
 8004692:	4628      	mov	r0, r5
 8004694:	4614      	mov	r4, r2
 8004696:	f7ff ffdd 	bl	8004654 <__mcmp>
 800469a:	1e06      	subs	r6, r0, #0
 800469c:	d108      	bne.n	80046b0 <__mdiff+0x28>
 800469e:	4631      	mov	r1, r6
 80046a0:	4638      	mov	r0, r7
 80046a2:	f7ff fdc2 	bl	800422a <_Balloc>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	bfa4      	itt	ge
 80046b2:	4623      	movge	r3, r4
 80046b4:	462c      	movge	r4, r5
 80046b6:	4638      	mov	r0, r7
 80046b8:	6861      	ldr	r1, [r4, #4]
 80046ba:	bfa6      	itte	ge
 80046bc:	461d      	movge	r5, r3
 80046be:	2600      	movge	r6, #0
 80046c0:	2601      	movlt	r6, #1
 80046c2:	f7ff fdb2 	bl	800422a <_Balloc>
 80046c6:	692b      	ldr	r3, [r5, #16]
 80046c8:	60c6      	str	r6, [r0, #12]
 80046ca:	6926      	ldr	r6, [r4, #16]
 80046cc:	f105 0914 	add.w	r9, r5, #20
 80046d0:	f104 0214 	add.w	r2, r4, #20
 80046d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80046d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80046dc:	f100 0514 	add.w	r5, r0, #20
 80046e0:	f04f 0e00 	mov.w	lr, #0
 80046e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80046e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80046ec:	fa1e f18a 	uxtah	r1, lr, sl
 80046f0:	b2a3      	uxth	r3, r4
 80046f2:	1ac9      	subs	r1, r1, r3
 80046f4:	0c23      	lsrs	r3, r4, #16
 80046f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80046fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80046fe:	b289      	uxth	r1, r1
 8004700:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004704:	45c8      	cmp	r8, r9
 8004706:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800470a:	4694      	mov	ip, r2
 800470c:	f845 3b04 	str.w	r3, [r5], #4
 8004710:	d8e8      	bhi.n	80046e4 <__mdiff+0x5c>
 8004712:	45bc      	cmp	ip, r7
 8004714:	d304      	bcc.n	8004720 <__mdiff+0x98>
 8004716:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800471a:	b183      	cbz	r3, 800473e <__mdiff+0xb6>
 800471c:	6106      	str	r6, [r0, #16]
 800471e:	e7c5      	b.n	80046ac <__mdiff+0x24>
 8004720:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004724:	fa1e f381 	uxtah	r3, lr, r1
 8004728:	141a      	asrs	r2, r3, #16
 800472a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800472e:	b29b      	uxth	r3, r3
 8004730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004734:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004738:	f845 3b04 	str.w	r3, [r5], #4
 800473c:	e7e9      	b.n	8004712 <__mdiff+0x8a>
 800473e:	3e01      	subs	r6, #1
 8004740:	e7e9      	b.n	8004716 <__mdiff+0x8e>

08004742 <__d2b>:
 8004742:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004746:	460e      	mov	r6, r1
 8004748:	2101      	movs	r1, #1
 800474a:	ec59 8b10 	vmov	r8, r9, d0
 800474e:	4615      	mov	r5, r2
 8004750:	f7ff fd6b 	bl	800422a <_Balloc>
 8004754:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004758:	4607      	mov	r7, r0
 800475a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800475e:	bb34      	cbnz	r4, 80047ae <__d2b+0x6c>
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	f1b8 0300 	subs.w	r3, r8, #0
 8004766:	d027      	beq.n	80047b8 <__d2b+0x76>
 8004768:	a802      	add	r0, sp, #8
 800476a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800476e:	f7ff fe01 	bl	8004374 <__lo0bits>
 8004772:	9900      	ldr	r1, [sp, #0]
 8004774:	b1f0      	cbz	r0, 80047b4 <__d2b+0x72>
 8004776:	9a01      	ldr	r2, [sp, #4]
 8004778:	f1c0 0320 	rsb	r3, r0, #32
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	430b      	orrs	r3, r1
 8004782:	40c2      	lsrs	r2, r0
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	9201      	str	r2, [sp, #4]
 8004788:	9b01      	ldr	r3, [sp, #4]
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2102      	movne	r1, #2
 8004792:	2101      	moveq	r1, #1
 8004794:	6139      	str	r1, [r7, #16]
 8004796:	b1c4      	cbz	r4, 80047ca <__d2b+0x88>
 8004798:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800479c:	4404      	add	r4, r0
 800479e:	6034      	str	r4, [r6, #0]
 80047a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80047a4:	6028      	str	r0, [r5, #0]
 80047a6:	4638      	mov	r0, r7
 80047a8:	b003      	add	sp, #12
 80047aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b2:	e7d5      	b.n	8004760 <__d2b+0x1e>
 80047b4:	6179      	str	r1, [r7, #20]
 80047b6:	e7e7      	b.n	8004788 <__d2b+0x46>
 80047b8:	a801      	add	r0, sp, #4
 80047ba:	f7ff fddb 	bl	8004374 <__lo0bits>
 80047be:	9b01      	ldr	r3, [sp, #4]
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	2101      	movs	r1, #1
 80047c4:	6139      	str	r1, [r7, #16]
 80047c6:	3020      	adds	r0, #32
 80047c8:	e7e5      	b.n	8004796 <__d2b+0x54>
 80047ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80047ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80047d2:	6030      	str	r0, [r6, #0]
 80047d4:	6918      	ldr	r0, [r3, #16]
 80047d6:	f7ff fdae 	bl	8004336 <__hi0bits>
 80047da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80047de:	e7e1      	b.n	80047a4 <__d2b+0x62>

080047e0 <_calloc_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	fb02 f401 	mul.w	r4, r2, r1
 80047e6:	4621      	mov	r1, r4
 80047e8:	f000 f856 	bl	8004898 <_malloc_r>
 80047ec:	4605      	mov	r5, r0
 80047ee:	b118      	cbz	r0, 80047f8 <_calloc_r+0x18>
 80047f0:	4622      	mov	r2, r4
 80047f2:	2100      	movs	r1, #0
 80047f4:	f7fe fa2e 	bl	8002c54 <memset>
 80047f8:	4628      	mov	r0, r5
 80047fa:	bd38      	pop	{r3, r4, r5, pc}

080047fc <_free_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4605      	mov	r5, r0
 8004800:	2900      	cmp	r1, #0
 8004802:	d045      	beq.n	8004890 <_free_r+0x94>
 8004804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004808:	1f0c      	subs	r4, r1, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	bfb8      	it	lt
 800480e:	18e4      	addlt	r4, r4, r3
 8004810:	f000 fa29 	bl	8004c66 <__malloc_lock>
 8004814:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <_free_r+0x98>)
 8004816:	6813      	ldr	r3, [r2, #0]
 8004818:	4610      	mov	r0, r2
 800481a:	b933      	cbnz	r3, 800482a <_free_r+0x2e>
 800481c:	6063      	str	r3, [r4, #4]
 800481e:	6014      	str	r4, [r2, #0]
 8004820:	4628      	mov	r0, r5
 8004822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004826:	f000 ba1f 	b.w	8004c68 <__malloc_unlock>
 800482a:	42a3      	cmp	r3, r4
 800482c:	d90c      	bls.n	8004848 <_free_r+0x4c>
 800482e:	6821      	ldr	r1, [r4, #0]
 8004830:	1862      	adds	r2, r4, r1
 8004832:	4293      	cmp	r3, r2
 8004834:	bf04      	itt	eq
 8004836:	681a      	ldreq	r2, [r3, #0]
 8004838:	685b      	ldreq	r3, [r3, #4]
 800483a:	6063      	str	r3, [r4, #4]
 800483c:	bf04      	itt	eq
 800483e:	1852      	addeq	r2, r2, r1
 8004840:	6022      	streq	r2, [r4, #0]
 8004842:	6004      	str	r4, [r0, #0]
 8004844:	e7ec      	b.n	8004820 <_free_r+0x24>
 8004846:	4613      	mov	r3, r2
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	b10a      	cbz	r2, 8004850 <_free_r+0x54>
 800484c:	42a2      	cmp	r2, r4
 800484e:	d9fa      	bls.n	8004846 <_free_r+0x4a>
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	1858      	adds	r0, r3, r1
 8004854:	42a0      	cmp	r0, r4
 8004856:	d10b      	bne.n	8004870 <_free_r+0x74>
 8004858:	6820      	ldr	r0, [r4, #0]
 800485a:	4401      	add	r1, r0
 800485c:	1858      	adds	r0, r3, r1
 800485e:	4282      	cmp	r2, r0
 8004860:	6019      	str	r1, [r3, #0]
 8004862:	d1dd      	bne.n	8004820 <_free_r+0x24>
 8004864:	6810      	ldr	r0, [r2, #0]
 8004866:	6852      	ldr	r2, [r2, #4]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	4401      	add	r1, r0
 800486c:	6019      	str	r1, [r3, #0]
 800486e:	e7d7      	b.n	8004820 <_free_r+0x24>
 8004870:	d902      	bls.n	8004878 <_free_r+0x7c>
 8004872:	230c      	movs	r3, #12
 8004874:	602b      	str	r3, [r5, #0]
 8004876:	e7d3      	b.n	8004820 <_free_r+0x24>
 8004878:	6820      	ldr	r0, [r4, #0]
 800487a:	1821      	adds	r1, r4, r0
 800487c:	428a      	cmp	r2, r1
 800487e:	bf04      	itt	eq
 8004880:	6811      	ldreq	r1, [r2, #0]
 8004882:	6852      	ldreq	r2, [r2, #4]
 8004884:	6062      	str	r2, [r4, #4]
 8004886:	bf04      	itt	eq
 8004888:	1809      	addeq	r1, r1, r0
 800488a:	6021      	streq	r1, [r4, #0]
 800488c:	605c      	str	r4, [r3, #4]
 800488e:	e7c7      	b.n	8004820 <_free_r+0x24>
 8004890:	bd38      	pop	{r3, r4, r5, pc}
 8004892:	bf00      	nop
 8004894:	200001fc 	.word	0x200001fc

08004898 <_malloc_r>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	1ccd      	adds	r5, r1, #3
 800489c:	f025 0503 	bic.w	r5, r5, #3
 80048a0:	3508      	adds	r5, #8
 80048a2:	2d0c      	cmp	r5, #12
 80048a4:	bf38      	it	cc
 80048a6:	250c      	movcc	r5, #12
 80048a8:	2d00      	cmp	r5, #0
 80048aa:	4606      	mov	r6, r0
 80048ac:	db01      	blt.n	80048b2 <_malloc_r+0x1a>
 80048ae:	42a9      	cmp	r1, r5
 80048b0:	d903      	bls.n	80048ba <_malloc_r+0x22>
 80048b2:	230c      	movs	r3, #12
 80048b4:	6033      	str	r3, [r6, #0]
 80048b6:	2000      	movs	r0, #0
 80048b8:	bd70      	pop	{r4, r5, r6, pc}
 80048ba:	f000 f9d4 	bl	8004c66 <__malloc_lock>
 80048be:	4a21      	ldr	r2, [pc, #132]	; (8004944 <_malloc_r+0xac>)
 80048c0:	6814      	ldr	r4, [r2, #0]
 80048c2:	4621      	mov	r1, r4
 80048c4:	b991      	cbnz	r1, 80048ec <_malloc_r+0x54>
 80048c6:	4c20      	ldr	r4, [pc, #128]	; (8004948 <_malloc_r+0xb0>)
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	b91b      	cbnz	r3, 80048d4 <_malloc_r+0x3c>
 80048cc:	4630      	mov	r0, r6
 80048ce:	f000 f98f 	bl	8004bf0 <_sbrk_r>
 80048d2:	6020      	str	r0, [r4, #0]
 80048d4:	4629      	mov	r1, r5
 80048d6:	4630      	mov	r0, r6
 80048d8:	f000 f98a 	bl	8004bf0 <_sbrk_r>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d124      	bne.n	800492a <_malloc_r+0x92>
 80048e0:	230c      	movs	r3, #12
 80048e2:	6033      	str	r3, [r6, #0]
 80048e4:	4630      	mov	r0, r6
 80048e6:	f000 f9bf 	bl	8004c68 <__malloc_unlock>
 80048ea:	e7e4      	b.n	80048b6 <_malloc_r+0x1e>
 80048ec:	680b      	ldr	r3, [r1, #0]
 80048ee:	1b5b      	subs	r3, r3, r5
 80048f0:	d418      	bmi.n	8004924 <_malloc_r+0x8c>
 80048f2:	2b0b      	cmp	r3, #11
 80048f4:	d90f      	bls.n	8004916 <_malloc_r+0x7e>
 80048f6:	600b      	str	r3, [r1, #0]
 80048f8:	50cd      	str	r5, [r1, r3]
 80048fa:	18cc      	adds	r4, r1, r3
 80048fc:	4630      	mov	r0, r6
 80048fe:	f000 f9b3 	bl	8004c68 <__malloc_unlock>
 8004902:	f104 000b 	add.w	r0, r4, #11
 8004906:	1d23      	adds	r3, r4, #4
 8004908:	f020 0007 	bic.w	r0, r0, #7
 800490c:	1ac3      	subs	r3, r0, r3
 800490e:	d0d3      	beq.n	80048b8 <_malloc_r+0x20>
 8004910:	425a      	negs	r2, r3
 8004912:	50e2      	str	r2, [r4, r3]
 8004914:	e7d0      	b.n	80048b8 <_malloc_r+0x20>
 8004916:	428c      	cmp	r4, r1
 8004918:	684b      	ldr	r3, [r1, #4]
 800491a:	bf16      	itet	ne
 800491c:	6063      	strne	r3, [r4, #4]
 800491e:	6013      	streq	r3, [r2, #0]
 8004920:	460c      	movne	r4, r1
 8004922:	e7eb      	b.n	80048fc <_malloc_r+0x64>
 8004924:	460c      	mov	r4, r1
 8004926:	6849      	ldr	r1, [r1, #4]
 8004928:	e7cc      	b.n	80048c4 <_malloc_r+0x2c>
 800492a:	1cc4      	adds	r4, r0, #3
 800492c:	f024 0403 	bic.w	r4, r4, #3
 8004930:	42a0      	cmp	r0, r4
 8004932:	d005      	beq.n	8004940 <_malloc_r+0xa8>
 8004934:	1a21      	subs	r1, r4, r0
 8004936:	4630      	mov	r0, r6
 8004938:	f000 f95a 	bl	8004bf0 <_sbrk_r>
 800493c:	3001      	adds	r0, #1
 800493e:	d0cf      	beq.n	80048e0 <_malloc_r+0x48>
 8004940:	6025      	str	r5, [r4, #0]
 8004942:	e7db      	b.n	80048fc <_malloc_r+0x64>
 8004944:	200001fc 	.word	0x200001fc
 8004948:	20000200 	.word	0x20000200

0800494c <__ssputs_r>:
 800494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	688e      	ldr	r6, [r1, #8]
 8004952:	429e      	cmp	r6, r3
 8004954:	4682      	mov	sl, r0
 8004956:	460c      	mov	r4, r1
 8004958:	4690      	mov	r8, r2
 800495a:	4699      	mov	r9, r3
 800495c:	d837      	bhi.n	80049ce <__ssputs_r+0x82>
 800495e:	898a      	ldrh	r2, [r1, #12]
 8004960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004964:	d031      	beq.n	80049ca <__ssputs_r+0x7e>
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	6909      	ldr	r1, [r1, #16]
 800496a:	1a6f      	subs	r7, r5, r1
 800496c:	6965      	ldr	r5, [r4, #20]
 800496e:	2302      	movs	r3, #2
 8004970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004974:	fb95 f5f3 	sdiv	r5, r5, r3
 8004978:	f109 0301 	add.w	r3, r9, #1
 800497c:	443b      	add	r3, r7
 800497e:	429d      	cmp	r5, r3
 8004980:	bf38      	it	cc
 8004982:	461d      	movcc	r5, r3
 8004984:	0553      	lsls	r3, r2, #21
 8004986:	d530      	bpl.n	80049ea <__ssputs_r+0x9e>
 8004988:	4629      	mov	r1, r5
 800498a:	f7ff ff85 	bl	8004898 <_malloc_r>
 800498e:	4606      	mov	r6, r0
 8004990:	b950      	cbnz	r0, 80049a8 <__ssputs_r+0x5c>
 8004992:	230c      	movs	r3, #12
 8004994:	f8ca 3000 	str.w	r3, [sl]
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a8:	463a      	mov	r2, r7
 80049aa:	6921      	ldr	r1, [r4, #16]
 80049ac:	f7ff fc32 	bl	8004214 <memcpy>
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	6126      	str	r6, [r4, #16]
 80049be:	6165      	str	r5, [r4, #20]
 80049c0:	443e      	add	r6, r7
 80049c2:	1bed      	subs	r5, r5, r7
 80049c4:	6026      	str	r6, [r4, #0]
 80049c6:	60a5      	str	r5, [r4, #8]
 80049c8:	464e      	mov	r6, r9
 80049ca:	454e      	cmp	r6, r9
 80049cc:	d900      	bls.n	80049d0 <__ssputs_r+0x84>
 80049ce:	464e      	mov	r6, r9
 80049d0:	4632      	mov	r2, r6
 80049d2:	4641      	mov	r1, r8
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	f000 f92d 	bl	8004c34 <memmove>
 80049da:	68a3      	ldr	r3, [r4, #8]
 80049dc:	1b9b      	subs	r3, r3, r6
 80049de:	60a3      	str	r3, [r4, #8]
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	441e      	add	r6, r3
 80049e4:	6026      	str	r6, [r4, #0]
 80049e6:	2000      	movs	r0, #0
 80049e8:	e7dc      	b.n	80049a4 <__ssputs_r+0x58>
 80049ea:	462a      	mov	r2, r5
 80049ec:	f000 f93d 	bl	8004c6a <_realloc_r>
 80049f0:	4606      	mov	r6, r0
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d1e2      	bne.n	80049bc <__ssputs_r+0x70>
 80049f6:	6921      	ldr	r1, [r4, #16]
 80049f8:	4650      	mov	r0, sl
 80049fa:	f7ff feff 	bl	80047fc <_free_r>
 80049fe:	e7c8      	b.n	8004992 <__ssputs_r+0x46>

08004a00 <_svfiprintf_r>:
 8004a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a04:	461d      	mov	r5, r3
 8004a06:	898b      	ldrh	r3, [r1, #12]
 8004a08:	061f      	lsls	r7, r3, #24
 8004a0a:	b09d      	sub	sp, #116	; 0x74
 8004a0c:	4680      	mov	r8, r0
 8004a0e:	460c      	mov	r4, r1
 8004a10:	4616      	mov	r6, r2
 8004a12:	d50f      	bpl.n	8004a34 <_svfiprintf_r+0x34>
 8004a14:	690b      	ldr	r3, [r1, #16]
 8004a16:	b96b      	cbnz	r3, 8004a34 <_svfiprintf_r+0x34>
 8004a18:	2140      	movs	r1, #64	; 0x40
 8004a1a:	f7ff ff3d 	bl	8004898 <_malloc_r>
 8004a1e:	6020      	str	r0, [r4, #0]
 8004a20:	6120      	str	r0, [r4, #16]
 8004a22:	b928      	cbnz	r0, 8004a30 <_svfiprintf_r+0x30>
 8004a24:	230c      	movs	r3, #12
 8004a26:	f8c8 3000 	str.w	r3, [r8]
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2e:	e0c8      	b.n	8004bc2 <_svfiprintf_r+0x1c2>
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	6163      	str	r3, [r4, #20]
 8004a34:	2300      	movs	r3, #0
 8004a36:	9309      	str	r3, [sp, #36]	; 0x24
 8004a38:	2320      	movs	r3, #32
 8004a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a3e:	2330      	movs	r3, #48	; 0x30
 8004a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a44:	9503      	str	r5, [sp, #12]
 8004a46:	f04f 0b01 	mov.w	fp, #1
 8004a4a:	4637      	mov	r7, r6
 8004a4c:	463d      	mov	r5, r7
 8004a4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a52:	b10b      	cbz	r3, 8004a58 <_svfiprintf_r+0x58>
 8004a54:	2b25      	cmp	r3, #37	; 0x25
 8004a56:	d13e      	bne.n	8004ad6 <_svfiprintf_r+0xd6>
 8004a58:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a5c:	d00b      	beq.n	8004a76 <_svfiprintf_r+0x76>
 8004a5e:	4653      	mov	r3, sl
 8004a60:	4632      	mov	r2, r6
 8004a62:	4621      	mov	r1, r4
 8004a64:	4640      	mov	r0, r8
 8004a66:	f7ff ff71 	bl	800494c <__ssputs_r>
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	f000 80a4 	beq.w	8004bb8 <_svfiprintf_r+0x1b8>
 8004a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a72:	4453      	add	r3, sl
 8004a74:	9309      	str	r3, [sp, #36]	; 0x24
 8004a76:	783b      	ldrb	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 809d 	beq.w	8004bb8 <_svfiprintf_r+0x1b8>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	9307      	str	r3, [sp, #28]
 8004a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a90:	931a      	str	r3, [sp, #104]	; 0x68
 8004a92:	462f      	mov	r7, r5
 8004a94:	2205      	movs	r2, #5
 8004a96:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004a9a:	4850      	ldr	r0, [pc, #320]	; (8004bdc <_svfiprintf_r+0x1dc>)
 8004a9c:	f7fb fba8 	bl	80001f0 <memchr>
 8004aa0:	9b04      	ldr	r3, [sp, #16]
 8004aa2:	b9d0      	cbnz	r0, 8004ada <_svfiprintf_r+0xda>
 8004aa4:	06d9      	lsls	r1, r3, #27
 8004aa6:	bf44      	itt	mi
 8004aa8:	2220      	movmi	r2, #32
 8004aaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004aae:	071a      	lsls	r2, r3, #28
 8004ab0:	bf44      	itt	mi
 8004ab2:	222b      	movmi	r2, #43	; 0x2b
 8004ab4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ab8:	782a      	ldrb	r2, [r5, #0]
 8004aba:	2a2a      	cmp	r2, #42	; 0x2a
 8004abc:	d015      	beq.n	8004aea <_svfiprintf_r+0xea>
 8004abe:	9a07      	ldr	r2, [sp, #28]
 8004ac0:	462f      	mov	r7, r5
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	250a      	movs	r5, #10
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004acc:	3b30      	subs	r3, #48	; 0x30
 8004ace:	2b09      	cmp	r3, #9
 8004ad0:	d94d      	bls.n	8004b6e <_svfiprintf_r+0x16e>
 8004ad2:	b1b8      	cbz	r0, 8004b04 <_svfiprintf_r+0x104>
 8004ad4:	e00f      	b.n	8004af6 <_svfiprintf_r+0xf6>
 8004ad6:	462f      	mov	r7, r5
 8004ad8:	e7b8      	b.n	8004a4c <_svfiprintf_r+0x4c>
 8004ada:	4a40      	ldr	r2, [pc, #256]	; (8004bdc <_svfiprintf_r+0x1dc>)
 8004adc:	1a80      	subs	r0, r0, r2
 8004ade:	fa0b f000 	lsl.w	r0, fp, r0
 8004ae2:	4318      	orrs	r0, r3
 8004ae4:	9004      	str	r0, [sp, #16]
 8004ae6:	463d      	mov	r5, r7
 8004ae8:	e7d3      	b.n	8004a92 <_svfiprintf_r+0x92>
 8004aea:	9a03      	ldr	r2, [sp, #12]
 8004aec:	1d11      	adds	r1, r2, #4
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	9103      	str	r1, [sp, #12]
 8004af2:	2a00      	cmp	r2, #0
 8004af4:	db01      	blt.n	8004afa <_svfiprintf_r+0xfa>
 8004af6:	9207      	str	r2, [sp, #28]
 8004af8:	e004      	b.n	8004b04 <_svfiprintf_r+0x104>
 8004afa:	4252      	negs	r2, r2
 8004afc:	f043 0302 	orr.w	r3, r3, #2
 8004b00:	9207      	str	r2, [sp, #28]
 8004b02:	9304      	str	r3, [sp, #16]
 8004b04:	783b      	ldrb	r3, [r7, #0]
 8004b06:	2b2e      	cmp	r3, #46	; 0x2e
 8004b08:	d10c      	bne.n	8004b24 <_svfiprintf_r+0x124>
 8004b0a:	787b      	ldrb	r3, [r7, #1]
 8004b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b0e:	d133      	bne.n	8004b78 <_svfiprintf_r+0x178>
 8004b10:	9b03      	ldr	r3, [sp, #12]
 8004b12:	1d1a      	adds	r2, r3, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	9203      	str	r2, [sp, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bfb8      	it	lt
 8004b1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b20:	3702      	adds	r7, #2
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	4d2e      	ldr	r5, [pc, #184]	; (8004be0 <_svfiprintf_r+0x1e0>)
 8004b26:	7839      	ldrb	r1, [r7, #0]
 8004b28:	2203      	movs	r2, #3
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f7fb fb60 	bl	80001f0 <memchr>
 8004b30:	b138      	cbz	r0, 8004b42 <_svfiprintf_r+0x142>
 8004b32:	2340      	movs	r3, #64	; 0x40
 8004b34:	1b40      	subs	r0, r0, r5
 8004b36:	fa03 f000 	lsl.w	r0, r3, r0
 8004b3a:	9b04      	ldr	r3, [sp, #16]
 8004b3c:	4303      	orrs	r3, r0
 8004b3e:	3701      	adds	r7, #1
 8004b40:	9304      	str	r3, [sp, #16]
 8004b42:	7839      	ldrb	r1, [r7, #0]
 8004b44:	4827      	ldr	r0, [pc, #156]	; (8004be4 <_svfiprintf_r+0x1e4>)
 8004b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b4a:	2206      	movs	r2, #6
 8004b4c:	1c7e      	adds	r6, r7, #1
 8004b4e:	f7fb fb4f 	bl	80001f0 <memchr>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d038      	beq.n	8004bc8 <_svfiprintf_r+0x1c8>
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <_svfiprintf_r+0x1e8>)
 8004b58:	bb13      	cbnz	r3, 8004ba0 <_svfiprintf_r+0x1a0>
 8004b5a:	9b03      	ldr	r3, [sp, #12]
 8004b5c:	3307      	adds	r3, #7
 8004b5e:	f023 0307 	bic.w	r3, r3, #7
 8004b62:	3308      	adds	r3, #8
 8004b64:	9303      	str	r3, [sp, #12]
 8004b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b68:	444b      	add	r3, r9
 8004b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6c:	e76d      	b.n	8004a4a <_svfiprintf_r+0x4a>
 8004b6e:	fb05 3202 	mla	r2, r5, r2, r3
 8004b72:	2001      	movs	r0, #1
 8004b74:	460f      	mov	r7, r1
 8004b76:	e7a6      	b.n	8004ac6 <_svfiprintf_r+0xc6>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	3701      	adds	r7, #1
 8004b7c:	9305      	str	r3, [sp, #20]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	250a      	movs	r5, #10
 8004b82:	4638      	mov	r0, r7
 8004b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b88:	3a30      	subs	r2, #48	; 0x30
 8004b8a:	2a09      	cmp	r2, #9
 8004b8c:	d903      	bls.n	8004b96 <_svfiprintf_r+0x196>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0c8      	beq.n	8004b24 <_svfiprintf_r+0x124>
 8004b92:	9105      	str	r1, [sp, #20]
 8004b94:	e7c6      	b.n	8004b24 <_svfiprintf_r+0x124>
 8004b96:	fb05 2101 	mla	r1, r5, r1, r2
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	e7f0      	b.n	8004b82 <_svfiprintf_r+0x182>
 8004ba0:	ab03      	add	r3, sp, #12
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <_svfiprintf_r+0x1ec>)
 8004ba8:	a904      	add	r1, sp, #16
 8004baa:	4640      	mov	r0, r8
 8004bac:	f7fe f8ee 	bl	8002d8c <_printf_float>
 8004bb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bb4:	4681      	mov	r9, r0
 8004bb6:	d1d6      	bne.n	8004b66 <_svfiprintf_r+0x166>
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	065b      	lsls	r3, r3, #25
 8004bbc:	f53f af35 	bmi.w	8004a2a <_svfiprintf_r+0x2a>
 8004bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bc2:	b01d      	add	sp, #116	; 0x74
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc8:	ab03      	add	r3, sp, #12
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4622      	mov	r2, r4
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <_svfiprintf_r+0x1ec>)
 8004bd0:	a904      	add	r1, sp, #16
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	f7fe fb90 	bl	80032f8 <_printf_i>
 8004bd8:	e7ea      	b.n	8004bb0 <_svfiprintf_r+0x1b0>
 8004bda:	bf00      	nop
 8004bdc:	08004e64 	.word	0x08004e64
 8004be0:	08004e6a 	.word	0x08004e6a
 8004be4:	08004e6e 	.word	0x08004e6e
 8004be8:	08002d8d 	.word	0x08002d8d
 8004bec:	0800494d 	.word	0x0800494d

08004bf0 <_sbrk_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4c06      	ldr	r4, [pc, #24]	; (8004c0c <_sbrk_r+0x1c>)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	6023      	str	r3, [r4, #0]
 8004bfc:	f7fc fb24 	bl	8001248 <_sbrk>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_sbrk_r+0x1a>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_sbrk_r+0x1a>
 8004c08:	602b      	str	r3, [r5, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	20000290 	.word	0x20000290

08004c10 <__ascii_mbtowc>:
 8004c10:	b082      	sub	sp, #8
 8004c12:	b901      	cbnz	r1, 8004c16 <__ascii_mbtowc+0x6>
 8004c14:	a901      	add	r1, sp, #4
 8004c16:	b142      	cbz	r2, 8004c2a <__ascii_mbtowc+0x1a>
 8004c18:	b14b      	cbz	r3, 8004c2e <__ascii_mbtowc+0x1e>
 8004c1a:	7813      	ldrb	r3, [r2, #0]
 8004c1c:	600b      	str	r3, [r1, #0]
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	1c10      	adds	r0, r2, #0
 8004c22:	bf18      	it	ne
 8004c24:	2001      	movne	r0, #1
 8004c26:	b002      	add	sp, #8
 8004c28:	4770      	bx	lr
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	e7fb      	b.n	8004c26 <__ascii_mbtowc+0x16>
 8004c2e:	f06f 0001 	mvn.w	r0, #1
 8004c32:	e7f8      	b.n	8004c26 <__ascii_mbtowc+0x16>

08004c34 <memmove>:
 8004c34:	4288      	cmp	r0, r1
 8004c36:	b510      	push	{r4, lr}
 8004c38:	eb01 0302 	add.w	r3, r1, r2
 8004c3c:	d807      	bhi.n	8004c4e <memmove+0x1a>
 8004c3e:	1e42      	subs	r2, r0, #1
 8004c40:	4299      	cmp	r1, r3
 8004c42:	d00a      	beq.n	8004c5a <memmove+0x26>
 8004c44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c48:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c4c:	e7f8      	b.n	8004c40 <memmove+0xc>
 8004c4e:	4283      	cmp	r3, r0
 8004c50:	d9f5      	bls.n	8004c3e <memmove+0xa>
 8004c52:	1881      	adds	r1, r0, r2
 8004c54:	1ad2      	subs	r2, r2, r3
 8004c56:	42d3      	cmn	r3, r2
 8004c58:	d100      	bne.n	8004c5c <memmove+0x28>
 8004c5a:	bd10      	pop	{r4, pc}
 8004c5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c60:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004c64:	e7f7      	b.n	8004c56 <memmove+0x22>

08004c66 <__malloc_lock>:
 8004c66:	4770      	bx	lr

08004c68 <__malloc_unlock>:
 8004c68:	4770      	bx	lr

08004c6a <_realloc_r>:
 8004c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	4614      	mov	r4, r2
 8004c70:	460e      	mov	r6, r1
 8004c72:	b921      	cbnz	r1, 8004c7e <_realloc_r+0x14>
 8004c74:	4611      	mov	r1, r2
 8004c76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c7a:	f7ff be0d 	b.w	8004898 <_malloc_r>
 8004c7e:	b922      	cbnz	r2, 8004c8a <_realloc_r+0x20>
 8004c80:	f7ff fdbc 	bl	80047fc <_free_r>
 8004c84:	4625      	mov	r5, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8a:	f000 f821 	bl	8004cd0 <_malloc_usable_size_r>
 8004c8e:	42a0      	cmp	r0, r4
 8004c90:	d20f      	bcs.n	8004cb2 <_realloc_r+0x48>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff fdff 	bl	8004898 <_malloc_r>
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d0f2      	beq.n	8004c86 <_realloc_r+0x1c>
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	f7ff fab6 	bl	8004214 <memcpy>
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4638      	mov	r0, r7
 8004cac:	f7ff fda6 	bl	80047fc <_free_r>
 8004cb0:	e7e9      	b.n	8004c86 <_realloc_r+0x1c>
 8004cb2:	4635      	mov	r5, r6
 8004cb4:	e7e7      	b.n	8004c86 <_realloc_r+0x1c>

08004cb6 <__ascii_wctomb>:
 8004cb6:	b149      	cbz	r1, 8004ccc <__ascii_wctomb+0x16>
 8004cb8:	2aff      	cmp	r2, #255	; 0xff
 8004cba:	bf85      	ittet	hi
 8004cbc:	238a      	movhi	r3, #138	; 0x8a
 8004cbe:	6003      	strhi	r3, [r0, #0]
 8004cc0:	700a      	strbls	r2, [r1, #0]
 8004cc2:	f04f 30ff 	movhi.w	r0, #4294967295
 8004cc6:	bf98      	it	ls
 8004cc8:	2001      	movls	r0, #1
 8004cca:	4770      	bx	lr
 8004ccc:	4608      	mov	r0, r1
 8004cce:	4770      	bx	lr

08004cd0 <_malloc_usable_size_r>:
 8004cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd4:	1f18      	subs	r0, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bfbc      	itt	lt
 8004cda:	580b      	ldrlt	r3, [r1, r0]
 8004cdc:	18c0      	addlt	r0, r0, r3
 8004cde:	4770      	bx	lr

08004ce0 <_init>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	bf00      	nop
 8004ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce6:	bc08      	pop	{r3}
 8004ce8:	469e      	mov	lr, r3
 8004cea:	4770      	bx	lr

08004cec <_fini>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	bf00      	nop
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr
