
CAN_LoopBack_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ccc  08003ccc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cd4  08003cd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08003d4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003d4c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000961d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017a4  00000000  00000000  000296bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  0002ae68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002b630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002177e  00000000  00000000  0002bd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006dfa  00000000  00000000  0004d4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca2d1  00000000  00000000  000542a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002248  00000000  00000000  0011e5f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003bdc 	.word	0x08003bdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003bdc 	.word	0x08003bdc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
void CAN_Filter_Config(void);

UART_HandleTypeDef huart2;
CAN_HandleTypeDef hcan1;

int main(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

	HAL_Init();
 80005c4:	f000 fba6 	bl	8000d14 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f000 f81f 	bl	800060c <SystemClock_Config_HSE>

	GPIO_Init();
 80005ce:	f000 f8b3 	bl	8000738 <GPIO_Init>

	UART2_Init();
 80005d2:	f000 f923 	bl	800081c <UART2_Init>

	CAN1_Init();
 80005d6:	f000 f94b 	bl	8000870 <CAN1_Init>

	/* In order to config the CAN filter configuration, you need to do the initialization of this function before CAN Start;
	 * That's why because CAN Start actually leaves the initialization mode.  */
	CAN_Filter_Config();
 80005da:	f000 f8f9 	bl	80007d0 <CAN_Filter_Config>

	/* Enabling CAN_IER control bits */
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK){
 80005de:	f240 4103 	movw	r1, #1027	; 0x403
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <main+0x48>)
 80005e4:	f001 f815 	bl	8001612 <HAL_CAN_ActivateNotification>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <main+0x32>
		Error_handler();
 80005ee:	f000 f93b 	bl	8000868 <Error_handler>
	}

	/* In order to do the normal operation of Tx and Rx, CAN has to be in normal mode;
	 * This is according to the controller state machine in the reference manual;
	 * This function moves the CAN controller from initialization mode to the normal mode. */
	if(HAL_CAN_Start(&hcan1) != HAL_OK){
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <main+0x48>)
 80005f4:	f000 fddc 	bl	80011b0 <HAL_CAN_Start>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <main+0x42>
		Error_handler();
 80005fe:	f000 f933 	bl	8000868 <Error_handler>
	}

	CAN1_Tx();
 8000602:	f000 f8bd 	bl	8000780 <CAN1_Tx>

	while(1);
 8000606:	e7fe      	b.n	8000606 <main+0x46>
 8000608:	200000d8 	.word	0x200000d8

0800060c <SystemClock_Config_HSE>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq){
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 8000616:	2300      	movs	r3, #0
 8000618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	623b      	str	r3, [r7, #32]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq){
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b54      	cmp	r3, #84	; 0x54
 8000634:	d01d      	beq.n	8000672 <SystemClock_Config_HSE+0x66>
 8000636:	2b78      	cmp	r3, #120	; 0x78
 8000638:	d034      	beq.n	80006a4 <SystemClock_Config_HSE+0x98>
 800063a:	2b32      	cmp	r3, #50	; 0x32
 800063c:	d000      	beq.n	8000640 <SystemClock_Config_HSE+0x34>
          flash_latency = 3;
          break;

	  default:

		  return ;
 800063e:	e076      	b.n	800072e <SystemClock_Config_HSE+0x122>
		  Osc_Init.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 8000644:	2332      	movs	r3, #50	; 0x32
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000664:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 800066a:	2301      	movs	r3, #1
 800066c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 8000670:	e032      	b.n	80006d8 <SystemClock_Config_HSE+0xcc>
		  Osc_Init.PLL.PLLM = 4;
 8000672:	2304      	movs	r3, #4
 8000674:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 8000676:	2354      	movs	r3, #84	; 0x54
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 80006a2:	e019      	b.n	80006d8 <SystemClock_Config_HSE+0xcc>
		  Osc_Init.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 80006a8:	2378      	movs	r3, #120	; 0x78
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c8:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 80006d0:	2303      	movs	r3, #3
 80006d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 80006d6:	bf00      	nop
	 }

	if(HAL_RCC_OscConfig(&Osc_Init) != HAL_OK){
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 ff47 	bl	8002570 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config_HSE+0xe0>
		Error_handler();
 80006e8:	f000 f8be 	bl	8000868 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK){
 80006ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4611      	mov	r1, r2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fc80 	bl	8001ffc <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config_HSE+0xfa>
		Error_handler();
 8000702:	f000 f8b1 	bl	8000868 <Error_handler>
	}

	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000706:	f001 fd5f 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 800070a:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 800070c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800070e:	4a09      	ldr	r2, [pc, #36]	; (8000734 <SystemClock_Config_HSE+0x128>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	099b      	lsrs	r3, r3, #6
 8000716:	4618      	mov	r0, r3
 8000718:	f001 faa7 	bl	8001c6a <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800071c:	2004      	movs	r0, #4
 800071e:	f001 fab1 	bl	8001c84 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	f001 fa74 	bl	8001c16 <HAL_NVIC_SetPriority>

}
 800072e:	3758      	adds	r7, #88	; 0x58
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	10624dd3 	.word	0x10624dd3

08000738 <GPIO_Init>:

void GPIO_Init(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <GPIO_Init+0x40>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <GPIO_Init+0x40>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <GPIO_Init+0x40>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 800075a:	2320      	movs	r3, #32
 800075c:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <GPIO_Init+0x44>)
 800076c:	f001 fab4 	bl	8001cd8 <HAL_GPIO_Init>
}
 8000770:	bf00      	nop
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000

08000780 <CAN1_Tx>:

void CAN1_Tx(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	uint8_t our_message[5] = {'H','E','L','L','O'};
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <CAN1_Tx+0x48>)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078e:	6018      	str	r0, [r3, #0]
 8000790:	3304      	adds	r3, #4
 8000792:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;				/* Specifies the length of the frame that will be transmitted */
 8000794:	2305      	movs	r3, #5
 8000796:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;			/* Specifies the standard identifier */
 8000798:	f240 635d 	movw	r3, #1629	; 0x65d
 800079c:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;		/* Specifies the type of identifier for the message that will be transmitted - 11 bits */
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;	/* Specifies the type of frame for the message that will be transmitted - Data frame*/
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, our_message, &TxMailbox) != HAL_OK){
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	1d3a      	adds	r2, r7, #4
 80007ac:	f107 0110 	add.w	r1, r7, #16
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <CAN1_Tx+0x4c>)
 80007b2:	f000 fd41 	bl	8001238 <HAL_CAN_AddTxMessage>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <CAN1_Tx+0x40>
		Error_handler();
 80007bc:	f000 f854 	bl	8000868 <Error_handler>
	}
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	08003bf4 	.word	0x08003bf4
 80007cc:	200000d8 	.word	0x200000d8

080007d0 <CAN_Filter_Config>:

void CAN_Filter_Config(void){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
	 * You need not to do the configuration filter at all;
	 * Just make sure to which FIFO the message should go;
	 * Make all as 0, so none of the bits will be compared with the packet frame received.
	 **/

	can1_filter_init.FilterActivation = ENABLE;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK){
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <CAN_Filter_Config+0x48>)
 8000800:	f000 fbf6 	bl	8000ff0 <HAL_CAN_ConfigFilter>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <CAN_Filter_Config+0x3e>
		Error_handler();
 800080a:	f000 f82d 	bl	8000868 <Error_handler>
	}
}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000d8 	.word	0x200000d8

0800081c <UART2_Init>:

void UART2_Init(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <UART2_Init+0x44>)
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <UART2_Init+0x48>)
 8000824:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <UART2_Init+0x44>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <UART2_Init+0x44>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <UART2_Init+0x44>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <UART2_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <UART2_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <UART2_Init+0x44>)
 8000848:	220c      	movs	r2, #12
 800084a:	615a      	str	r2, [r3, #20]

	if (HAL_UART_Init(&huart2) != HAL_OK){
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <UART2_Init+0x44>)
 800084e:	f002 f8e9 	bl	8002a24 <HAL_UART_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <UART2_Init+0x40>
		//There is a problem
		Error_handler();
 8000858:	f000 f806 	bl	8000868 <Error_handler>
	}
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000098 	.word	0x20000098
 8000864:	40004400 	.word	0x40004400

08000868 <Error_handler>:

void Error_handler(void){
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	while(1);
 800086c:	e7fe      	b.n	800086c <Error_handler+0x4>
	...

08000870 <CAN1_Init>:
}

void CAN1_Init(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <CAN1_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <CAN1_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <CAN1_Init+0x64>)
 800087c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000880:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = DISABLE;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <CAN1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;		// No need for CAN loopback
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <CAN1_Init+0x64>)
 800088a:	2201      	movs	r2, #1
 800088c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <CAN1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;		// See CAN master control register (CAN_MCR) - bit 3
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <CAN1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <CAN1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;	// See CAN master control register (CAN_MCR) - bit 2
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <CAN1_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	775a      	strb	r2, [r3, #29]
	// Visit http://www.bittiming.can-wiki.info/
	// Bit Rate (Bits/s) = 500kbps (2us) and number of time quanta = 10;
	// One bit = Sync + (Prop_Seg + Phase_Seg1) + Seg2 = 10;
	// (Prop_Seg + Phase_Seg1) = Seg1;

	hcan1.Init.Prescaler = 5;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <CAN1_Init+0x64>)
 80008a8:	2205      	movs	r2, #5
 80008aa:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;		// 1 time quantum as default (to complete 10 time quanta)
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <CAN1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;			// 8 time quantum
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <CAN1_Init+0x64>)
 80008b4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80008b8:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;			// 1 time quantum
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <CAN1_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&hcan1) != HAL_OK){
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <CAN1_Init+0x64>)
 80008c2:	f000 fa99 	bl	8000df8 <HAL_CAN_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <CAN1_Init+0x60>
		Error_handler();
 80008cc:	f7ff ffcc 	bl	8000868 <Error_handler>
	}
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000d8 	.word	0x200000d8
 80008d8:	40006400 	.word	0x40006400

080008dc <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80008dc:	b5b0      	push	{r4, r5, r7, lr}
 80008de:	b090      	sub	sp, #64	; 0x40
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted:M0\r\n");
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 80008ea:	461c      	mov	r4, r3
 80008ec:	4615      	mov	r5, r2
 80008ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008f6:	c403      	stmia	r4!, {r0, r1}
 80008f8:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fc86 	bl	8000210 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	f107 010c 	add.w	r1, r7, #12
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 8000912:	f002 f8d4 	bl	8002abe <HAL_UART_Transmit>

}
 8000916:	bf00      	nop
 8000918:	3740      	adds	r7, #64	; 0x40
 800091a:	46bd      	mov	sp, r7
 800091c:	bdb0      	pop	{r4, r5, r7, pc}
 800091e:	bf00      	nop
 8000920:	08003bfc 	.word	0x08003bfc
 8000924:	20000098 	.word	0x20000098

08000928 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b090      	sub	sp, #64	; 0x40
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted:M1\r\n");
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_CAN_TxMailbox1CompleteCallback+0x44>)
 8000936:	461c      	mov	r4, r3
 8000938:	4615      	mov	r5, r2
 800093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000942:	c403      	stmia	r4!, {r0, r1}
 8000944:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fc60 	bl	8000210 <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	b29a      	uxth	r2, r3
 8000954:	f107 010c 	add.w	r1, r7, #12
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 800095e:	f002 f8ae 	bl	8002abe <HAL_UART_Transmit>
}
 8000962:	bf00      	nop
 8000964:	3740      	adds	r7, #64	; 0x40
 8000966:	46bd      	mov	sp, r7
 8000968:	bdb0      	pop	{r4, r5, r7, pc}
 800096a:	bf00      	nop
 800096c:	08003c18 	.word	0x08003c18
 8000970:	20000098 	.word	0x20000098

08000974 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8000974:	b5b0      	push	{r4, r5, r7, lr}
 8000976:	b090      	sub	sp, #64	; 0x40
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message Transmitted:M2\r\n");
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <HAL_CAN_TxMailbox2CompleteCallback+0x44>)
 8000982:	461c      	mov	r4, r3
 8000984:	4615      	mov	r5, r2
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098e:	c403      	stmia	r4!, {r0, r1}
 8000990:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc3a 	bl	8000210 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f107 010c 	add.w	r1, r7, #12
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 80009aa:	f002 f888 	bl	8002abe <HAL_UART_Transmit>
}
 80009ae:	bf00      	nop
 80009b0:	3740      	adds	r7, #64	; 0x40
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bdb0      	pop	{r4, r5, r7, pc}
 80009b6:	bf00      	nop
 80009b8:	08003c34 	.word	0x08003c34
 80009bc:	20000098 	.word	0x20000098

080009c0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b098      	sub	sp, #96	; 0x60
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;

	uint8_t rcvd_msg[5];
	char msg[50];

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK){
 80009c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009cc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80009d0:	2100      	movs	r1, #0
 80009d2:	4811      	ldr	r0, [pc, #68]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80009d4:	f000 fd0b 	bl	80013ee <HAL_CAN_GetRxMessage>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Error_handler();
 80009de:	f7ff ff43 	bl	8000868 <Error_handler>
	}

	sprintf(msg, "Message Received : %s\r\n", rcvd_msg);
 80009e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	490c      	ldr	r1, [pc, #48]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 fcef 	bl	80033d0 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fc0a 	bl	8000210 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	f107 0108 	add.w	r1, r7, #8
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000a0a:	f002 f858 	bl	8002abe <HAL_UART_Transmit>
}
 8000a0e:	bf00      	nop
 8000a10:	3760      	adds	r7, #96	; 0x60
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000d8 	.word	0x200000d8
 8000a1c:	08003c50 	.word	0x08003c50
 8000a20:	20000098 	.word	0x20000098

08000a24 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8000a24:	b5b0      	push	{r4, r5, r7, lr}
 8000a26:	b090      	sub	sp, #64	; 0x40
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "CAN Error Detected\r\n");
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <HAL_CAN_ErrorCallback+0x44>)
 8000a32:	461c      	mov	r4, r3
 8000a34:	4615      	mov	r5, r2
 8000a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a3e:	6020      	str	r0, [r4, #0]
 8000a40:	3404      	adds	r4, #4
 8000a42:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbe1 	bl	8000210 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f107 010c 	add.w	r1, r7, #12
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <HAL_CAN_ErrorCallback+0x48>)
 8000a5c:	f002 f82f 	bl	8002abe <HAL_UART_Transmit>
}
 8000a60:	bf00      	nop
 8000a62:	3740      	adds	r7, #64	; 0x40
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bdb0      	pop	{r4, r5, r7, pc}
 8000a68:	08003c68 	.word	0x08003c68
 8000a6c:	20000098 	.word	0x20000098

08000a70 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void HAL_MspInit(void){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

	//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f001 f8c3 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x40>)
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7e:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <HAL_MspInit+0x40>)
 8000a80:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000a84:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	f06f 000b 	mvn.w	r0, #11
 8000a8e:	f001 f8c2 	bl	8001c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	f06f 000a 	mvn.w	r0, #10
 8000a9a:	f001 f8bc 	bl	8001c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f06f 0009 	mvn.w	r0, #9
 8000aa6:	f001 f8b6 	bl	8001c16 <HAL_NVIC_SetPriority>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_CAN1_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_CAN_MspInit+0x90>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <HAL_CAN_MspInit+0x90>)
 8000ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_CAN_MspInit+0x90>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
	PA11     ------> CAN1_RX
	PA12     ------> CAN1_TX
	*/

	// CAN transceiver SN65HVD230
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ad8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000adc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000aea:	2309      	movs	r3, #9
 8000aec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4814      	ldr	r0, [pc, #80]	; (8000b48 <HAL_CAN_MspInit+0x94>)
 8000af6:	f001 f8ef 	bl	8001cd8 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	210f      	movs	r1, #15
 8000afe:	2013      	movs	r0, #19
 8000b00:	f001 f889 	bl	8001c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	210f      	movs	r1, #15
 8000b08:	2014      	movs	r0, #20
 8000b0a:	f001 f884 	bl	8001c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	210f      	movs	r1, #15
 8000b12:	2015      	movs	r0, #21
 8000b14:	f001 f87f 	bl	8001c16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	2016      	movs	r0, #22
 8000b1e:	f001 f87a 	bl	8001c16 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b22:	2013      	movs	r0, #19
 8000b24:	f001 f893 	bl	8001c4e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b28:	2014      	movs	r0, #20
 8000b2a:	f001 f890 	bl	8001c4e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b2e:	2015      	movs	r0, #21
 8000b30:	f001 f88d 	bl	8001c4e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000b34:	2016      	movs	r0, #22
 8000b36:	f001 f88a 	bl	8001c4e <HAL_NVIC_EnableIRQ>

}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate = GPIO_AF7_USART2; //UART2_TX
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <HAL_UART_MspInit+0x8c>)
 8000ba8:	f001 f896 	bl	8001cd8 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000bac:	2308      	movs	r3, #8
 8000bae:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <HAL_UART_MspInit+0x8c>)
 8000bb8:	f001 f88e 	bl	8001cd8 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bbc:	2026      	movs	r0, #38	; 0x26
 8000bbe:	f001 f846 	bl	8001c4e <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	2026      	movs	r0, #38	; 0x26
 8000bc8:	f001 f825 	bl	8001c16 <HAL_NVIC_SetPriority>

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <SysTick_Handler>:

#include "main.h"

extern CAN_HandleTypeDef hcan1;

void SysTick_Handler (void){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000be0:	f000 f8ea 	bl	8000db8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000be4:	f001 f86a 	bl	8001cbc <HAL_SYSTICK_IRQHandler>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <CAN1_TX_IRQHandler+0x10>)
 8000bf2:	f000 fd34 	bl	800165e <HAL_CAN_IRQHandler>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000d8 	.word	0x200000d8

08000c00 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <CAN1_RX0_IRQHandler+0x10>)
 8000c06:	f000 fd2a 	bl	800165e <HAL_CAN_IRQHandler>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000d8 	.word	0x200000d8

08000c14 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <CAN1_RX1_IRQHandler+0x10>)
 8000c1a:	f000 fd20 	bl	800165e <HAL_CAN_IRQHandler>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000d8 	.word	0x200000d8

08000c28 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <CAN1_SCE_IRQHandler+0x10>)
 8000c2e:	f000 fd16 	bl	800165e <HAL_CAN_IRQHandler>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000d8 	.word	0x200000d8

08000c3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x50>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x16>
		heap_end = &end;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <_sbrk+0x50>)
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <_sbrk+0x54>)
 8000c50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_sbrk+0x50>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <_sbrk+0x50>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	466a      	mov	r2, sp
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d907      	bls.n	8000c76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c66:	f002 fb89 	bl	800337c <__errno>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	e006      	b.n	8000c84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <_sbrk+0x50>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <_sbrk+0x50>)
 8000c80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000008c 	.word	0x2000008c
 8000c90:	20000108 	.word	0x20000108

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SystemInit+0x28>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <SystemInit+0x28>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SystemInit+0x28>)
 8000caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cae:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cc6:	e003      	b.n	8000cd0 <LoopCopyDataInit>

08000cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cce:	3104      	adds	r1, #4

08000cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cd8:	d3f6      	bcc.n	8000cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cdc:	e002      	b.n	8000ce4 <LoopFillZerobss>

08000cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ce0:	f842 3b04 	str.w	r3, [r2], #4

08000ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ce8:	d3f9      	bcc.n	8000cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ffd3 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 fb4b 	bl	8003388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc65 	bl	80005c0 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cfc:	08003cdc 	.word	0x08003cdc
  ldr  r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d04:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000d08:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000d0c:	20000108 	.word	0x20000108

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 ff5f 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe92 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 ff77 	bl	8001c6a <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 ff3f 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000100 	.word	0x20000100

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000100 	.word	0x20000100

08000df8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e0ed      	b.n	8000fe6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fe4c 	bl	8000ab4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0202 	bic.w	r2, r2, #2
 8000e2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e2c:	f7ff ffd8 	bl	8000de0 <HAL_GetTick>
 8000e30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e32:	e012      	b.n	8000e5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e34:	f7ff ffd4 	bl	8000de0 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b0a      	cmp	r3, #10
 8000e40:	d90b      	bls.n	8000e5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2205      	movs	r2, #5
 8000e52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e0c5      	b.n	8000fe6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e5      	bne.n	8000e34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0201 	orr.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e78:	f7ff ffb2 	bl	8000de0 <HAL_GetTick>
 8000e7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e7e:	e012      	b.n	8000ea6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e80:	f7ff ffae 	bl	8000de0 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b0a      	cmp	r3, #10
 8000e8c:	d90b      	bls.n	8000ea6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2205      	movs	r2, #5
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e09f      	b.n	8000fe6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0e5      	beq.n	8000e80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7e1b      	ldrb	r3, [r3, #24]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d108      	bne.n	8000ece <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	e007      	b.n	8000ede <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7e5b      	ldrb	r3, [r3, #25]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d108      	bne.n	8000ef8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e007      	b.n	8000f08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7e9b      	ldrb	r3, [r3, #26]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d108      	bne.n	8000f22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0220 	orr.w	r2, r2, #32
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	e007      	b.n	8000f32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0220 	bic.w	r2, r2, #32
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7edb      	ldrb	r3, [r3, #27]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d108      	bne.n	8000f4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 0210 	bic.w	r2, r2, #16
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	e007      	b.n	8000f5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0210 	orr.w	r2, r2, #16
 8000f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7f1b      	ldrb	r3, [r3, #28]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d108      	bne.n	8000f76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0208 	orr.w	r2, r2, #8
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e007      	b.n	8000f86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0208 	bic.w	r2, r2, #8
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7f5b      	ldrb	r3, [r3, #29]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d108      	bne.n	8000fa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f042 0204 	orr.w	r2, r2, #4
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e007      	b.n	8000fb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0204 	bic.w	r2, r2, #4
 8000fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	ea42 0103 	orr.w	r1, r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001006:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d003      	beq.n	8001016 <HAL_CAN_ConfigFilter+0x26>
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	2b02      	cmp	r3, #2
 8001012:	f040 80be 	bne.w	8001192 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001016:	4b65      	ldr	r3, [pc, #404]	; (80011ac <HAL_CAN_ConfigFilter+0x1bc>)
 8001018:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001030:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	431a      	orrs	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	2201      	movs	r2, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43db      	mvns	r3, r3
 8001068:	401a      	ands	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d123      	bne.n	80010c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800109a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3248      	adds	r2, #72	; 0x48
 80010a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010b6:	6979      	ldr	r1, [r7, #20]
 80010b8:	3348      	adds	r3, #72	; 0x48
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d122      	bne.n	800110e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3248      	adds	r2, #72	; 0x48
 80010ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001102:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001104:	6979      	ldr	r1, [r7, #20]
 8001106:	3348      	adds	r3, #72	; 0x48
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001128:	e007      	b.n	800113a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	431a      	orrs	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d109      	bne.n	8001156 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	401a      	ands	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001154:	e007      	b.n	8001166 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	431a      	orrs	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d107      	bne.n	800117e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	431a      	orrs	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001184:	f023 0201 	bic.w	r2, r3, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e006      	b.n	80011a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
  }
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40006400 	.word	0x40006400

080011b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d12e      	bne.n	8001222 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011dc:	f7ff fe00 	bl	8000de0 <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011e2:	e012      	b.n	800120a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011e4:	f7ff fdfc 	bl	8000de0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d90b      	bls.n	800120a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2205      	movs	r2, #5
 8001202:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e012      	b.n	8001230 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e5      	bne.n	80011e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e006      	b.n	8001230 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
  }
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001256:	7ffb      	ldrb	r3, [r7, #31]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d003      	beq.n	8001264 <HAL_CAN_AddTxMessage+0x2c>
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	2b02      	cmp	r3, #2
 8001260:	f040 80b8 	bne.w	80013d4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10a      	bne.n	8001284 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80a0 	beq.w	80013c4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	0e1b      	lsrs	r3, r3, #24
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d907      	bls.n	80012a4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e09e      	b.n	80013e2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012a4:	2201      	movs	r2, #1
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	409a      	lsls	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012c0:	68f9      	ldr	r1, [r7, #12]
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3318      	adds	r3, #24
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	440b      	add	r3, r1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e00f      	b.n	80012f2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e2:	68f9      	ldr	r1, [r7, #12]
 80012e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3318      	adds	r3, #24
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	440b      	add	r3, r1
 80012f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3318      	adds	r3, #24
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	7d1b      	ldrb	r3, [r3, #20]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d111      	bne.n	8001332 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3318      	adds	r3, #24
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	3304      	adds	r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	6811      	ldr	r1, [r2, #0]
 8001322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3318      	adds	r3, #24
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3307      	adds	r3, #7
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	061a      	lsls	r2, r3, #24
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3306      	adds	r3, #6
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3305      	adds	r3, #5
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	4313      	orrs	r3, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	3204      	adds	r2, #4
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	4610      	mov	r0, r2
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	6811      	ldr	r1, [r2, #0]
 800135a:	ea43 0200 	orr.w	r2, r3, r0
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	440b      	add	r3, r1
 8001364:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001368:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3303      	adds	r3, #3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	061a      	lsls	r2, r3, #24
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3302      	adds	r3, #2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4313      	orrs	r3, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	4610      	mov	r0, r2
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	6811      	ldr	r1, [r2, #0]
 8001390:	ea43 0200 	orr.w	r2, r3, r0
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	440b      	add	r3, r1
 800139a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800139e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3318      	adds	r3, #24
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	4413      	add	r3, r2
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	6811      	ldr	r1, [r2, #0]
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3318      	adds	r3, #24
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	440b      	add	r3, r1
 80013be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e00e      	b.n	80013e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e006      	b.n	80013e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013ee:	b480      	push	{r7}
 80013f0:	b087      	sub	sp, #28
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001402:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d003      	beq.n	8001412 <HAL_CAN_GetRxMessage+0x24>
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b02      	cmp	r3, #2
 800140e:	f040 80f3 	bne.w	80015f8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10e      	bne.n	8001436 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0e7      	b.n	8001606 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0d8      	b.n	8001606 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	331b      	adds	r3, #27
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0204 	and.w	r2, r3, #4
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10c      	bne.n	800148c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	331b      	adds	r3, #27
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0d5b      	lsrs	r3, r3, #21
 8001482:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	331b      	adds	r3, #27
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	331b      	adds	r3, #27
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0202 	and.w	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	331b      	adds	r3, #27
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	4413      	add	r3, r2
 80014c6:	3304      	adds	r3, #4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 020f 	and.w	r2, r3, #15
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	331b      	adds	r3, #27
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4413      	add	r3, r2
 80014de:	3304      	adds	r3, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	331b      	adds	r3, #27
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	3304      	adds	r3, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0a1a      	lsrs	r2, r3, #8
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0c1a      	lsrs	r2, r3, #16
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	3302      	adds	r3, #2
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0e1a      	lsrs	r2, r3, #24
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3303      	adds	r3, #3
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3304      	adds	r3, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0a1a      	lsrs	r2, r3, #8
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3305      	adds	r3, #5
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0c1a      	lsrs	r2, r3, #16
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	3306      	adds	r3, #6
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0e1a      	lsrs	r2, r3, #24
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3307      	adds	r3, #7
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0220 	orr.w	r2, r2, #32
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	e007      	b.n	80015f4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0220 	orr.w	r2, r2, #32
 80015f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e006      	b.n	8001606 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
  }
}
 8001606:	4618      	mov	r0, r3
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001622:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d002      	beq.n	8001630 <HAL_CAN_ActivateNotification+0x1e>
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d109      	bne.n	8001644 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6959      	ldr	r1, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e006      	b.n	8001652 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
  }
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b08a      	sub	sp, #40	; 0x28
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d07c      	beq.n	800179e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d023      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff f90b 	bl	80008dc <HAL_CAN_TxMailbox0CompleteCallback>
 80016c6:	e016      	b.n	80016f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	e00c      	b.n	80016f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d004      	beq.n	80016f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
 80016ee:	e002      	b.n	80016f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f965 	bl	80019c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d024      	beq.n	800174a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001708:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff f907 	bl	8000928 <HAL_CAN_TxMailbox1CompleteCallback>
 800171a:	e016      	b.n	800174a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
 800172e:	e00c      	b.n	800174a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
 8001742:	e002      	b.n	800174a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f945 	bl	80019d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d024      	beq.n	800179e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800175c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff f903 	bl	8000974 <HAL_CAN_TxMailbox2CompleteCallback>
 800176e:	e016      	b.n	800179e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
 8001782:	e00c      	b.n	800179e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
 8001796:	e002      	b.n	800179e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f925 	bl	80019e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00c      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2210      	movs	r2, #16
 80017c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00b      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2208      	movs	r2, #8
 80017dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f90c 	bl	80019fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff f8df 	bl	80009c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00c      	beq.n	8001826 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2210      	movs	r2, #16
 8001824:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2208      	movs	r2, #8
 8001840:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f8ee 	bl	8001a24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f8d5 	bl	8001a10 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00b      	beq.n	8001888 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2210      	movs	r2, #16
 8001880:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f8d8 	bl	8001a38 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2208      	movs	r2, #8
 80018a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f8d1 	bl	8001a4c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d075      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d06c      	beq.n	8001998 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03d      	beq.n	8001998 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d038      	beq.n	8001998 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800192c:	2b30      	cmp	r3, #48	; 0x30
 800192e:	d017      	beq.n	8001960 <HAL_CAN_IRQHandler+0x302>
 8001930:	2b30      	cmp	r3, #48	; 0x30
 8001932:	d804      	bhi.n	800193e <HAL_CAN_IRQHandler+0x2e0>
 8001934:	2b10      	cmp	r3, #16
 8001936:	d009      	beq.n	800194c <HAL_CAN_IRQHandler+0x2ee>
 8001938:	2b20      	cmp	r3, #32
 800193a:	d00c      	beq.n	8001956 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800193c:	e024      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800193e:	2b50      	cmp	r3, #80	; 0x50
 8001940:	d018      	beq.n	8001974 <HAL_CAN_IRQHandler+0x316>
 8001942:	2b60      	cmp	r3, #96	; 0x60
 8001944:	d01b      	beq.n	800197e <HAL_CAN_IRQHandler+0x320>
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d00f      	beq.n	800196a <HAL_CAN_IRQHandler+0x30c>
            break;
 800194a:	e01d      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001954:	e018      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800195e:	e013      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f043 0320 	orr.w	r3, r3, #32
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001968:	e00e      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001972:	e009      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800197c:	e004      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001986:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001996:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2204      	movs	r2, #4
 800199e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d008      	beq.n	80019b8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff f836 	bl	8000a24 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff29 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff3e 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff31 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffa2 	bl	8001bbc <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d106      	bne.n	8001ca0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001c9e:	e005      	b.n	8001cac <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001cc0:	f000 f802 	bl	8001cc8 <HAL_SYSTICK_Callback>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e165      	b.n	8001fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8154 	bne.w	8001fba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d00b      	beq.n	8001d32 <HAL_GPIO_Init+0x5a>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d26:	2b11      	cmp	r3, #17
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d130      	bne.n	8001d94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0xfc>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b12      	cmp	r3, #18
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80ae 	beq.w	8001fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <HAL_GPIO_Init+0x2fc>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a5b      	ldr	r2, [pc, #364]	; (8001fd4 <HAL_GPIO_Init+0x2fc>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_GPIO_Init+0x2fc>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4e      	ldr	r2, [pc, #312]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d025      	beq.n	8001ef2 <HAL_GPIO_Init+0x21a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4d      	ldr	r2, [pc, #308]	; (8001fe0 <HAL_GPIO_Init+0x308>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x216>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4c      	ldr	r2, [pc, #304]	; (8001fe4 <HAL_GPIO_Init+0x30c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x212>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4b      	ldr	r2, [pc, #300]	; (8001fe8 <HAL_GPIO_Init+0x310>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x20e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4a      	ldr	r2, [pc, #296]	; (8001fec <HAL_GPIO_Init+0x314>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x20a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a49      	ldr	r2, [pc, #292]	; (8001ff0 <HAL_GPIO_Init+0x318>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x206>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a48      	ldr	r2, [pc, #288]	; (8001ff4 <HAL_GPIO_Init+0x31c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x202>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x21c>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4934      	ldr	r1, [pc, #208]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f12:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f36:	4a30      	ldr	r2, [pc, #192]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f60:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	f67f ae96 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3724      	adds	r7, #36	; 0x24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40021400 	.word	0x40021400
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	40013c00 	.word	0x40013c00

08001ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0cc      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002010:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d90c      	bls.n	8002038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800205a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	494d      	ldr	r1, [pc, #308]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d044      	beq.n	800211c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d119      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ba:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e06f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ca:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e067      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f023 0203 	bic.w	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4934      	ldr	r1, [pc, #208]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fe78 	bl	8000de0 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	e00a      	b.n	800210a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f4:	f7fe fe74 	bl	8000de0 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e04f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 020c 	and.w	r2, r3, #12
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	429a      	cmp	r2, r3
 800211a:	d1eb      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d20c      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e032      	b.n	80021aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4916      	ldr	r1, [pc, #88]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002182:	f000 f855 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 8002186:	4601      	mov	r1, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	fa21 f303 	lsr.w	r3, r1, r3
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fdd8 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00
 80021b8:	40023800 	.word	0x40023800
 80021bc:	08003c80 	.word	0x08003c80
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021e4:	f7ff fff0 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e8:	4601      	mov	r1, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0a9b      	lsrs	r3, r3, #10
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4a03      	ldr	r2, [pc, #12]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08003c90 	.word	0x08003c90

08002208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800220c:	f7ff ffdc 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 8002210:	4601      	mov	r1, r0
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0b5b      	lsrs	r3, r3, #13
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4a03      	ldr	r2, [pc, #12]	; (800222c <HAL_RCC_GetPCLK2Freq+0x24>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	08003c90 	.word	0x08003c90

08002230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800224a:	4bc6      	ldr	r3, [pc, #792]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b0c      	cmp	r3, #12
 8002254:	f200 817e 	bhi.w	8002554 <HAL_RCC_GetSysClockFreq+0x324>
 8002258:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <HAL_RCC_GetSysClockFreq+0x30>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002295 	.word	0x08002295
 8002264:	08002555 	.word	0x08002555
 8002268:	08002555 	.word	0x08002555
 800226c:	08002555 	.word	0x08002555
 8002270:	0800229b 	.word	0x0800229b
 8002274:	08002555 	.word	0x08002555
 8002278:	08002555 	.word	0x08002555
 800227c:	08002555 	.word	0x08002555
 8002280:	080022a1 	.word	0x080022a1
 8002284:	08002555 	.word	0x08002555
 8002288:	08002555 	.word	0x08002555
 800228c:	08002555 	.word	0x08002555
 8002290:	080023fd 	.word	0x080023fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002294:	4bb4      	ldr	r3, [pc, #720]	; (8002568 <HAL_RCC_GetSysClockFreq+0x338>)
 8002296:	613b      	str	r3, [r7, #16]
       break;
 8002298:	e15f      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800229a:	4bb4      	ldr	r3, [pc, #720]	; (800256c <HAL_RCC_GetSysClockFreq+0x33c>)
 800229c:	613b      	str	r3, [r7, #16]
      break;
 800229e:	e15c      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a0:	4bb0      	ldr	r3, [pc, #704]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022aa:	4bae      	ldr	r3, [pc, #696]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d04a      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b6:	4bab      	ldr	r3, [pc, #684]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	099b      	lsrs	r3, r3, #6
 80022bc:	f04f 0400 	mov.w	r4, #0
 80022c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	ea03 0501 	and.w	r5, r3, r1
 80022cc:	ea04 0602 	and.w	r6, r4, r2
 80022d0:	4629      	mov	r1, r5
 80022d2:	4632      	mov	r2, r6
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	f04f 0400 	mov.w	r4, #0
 80022dc:	0154      	lsls	r4, r2, #5
 80022de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022e2:	014b      	lsls	r3, r1, #5
 80022e4:	4619      	mov	r1, r3
 80022e6:	4622      	mov	r2, r4
 80022e8:	1b49      	subs	r1, r1, r5
 80022ea:	eb62 0206 	sbc.w	r2, r2, r6
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	f04f 0400 	mov.w	r4, #0
 80022f6:	0194      	lsls	r4, r2, #6
 80022f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022fc:	018b      	lsls	r3, r1, #6
 80022fe:	1a5b      	subs	r3, r3, r1
 8002300:	eb64 0402 	sbc.w	r4, r4, r2
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	00e2      	lsls	r2, r4, #3
 800230e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002312:	00d9      	lsls	r1, r3, #3
 8002314:	460b      	mov	r3, r1
 8002316:	4614      	mov	r4, r2
 8002318:	195b      	adds	r3, r3, r5
 800231a:	eb44 0406 	adc.w	r4, r4, r6
 800231e:	f04f 0100 	mov.w	r1, #0
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	0262      	lsls	r2, r4, #9
 8002328:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800232c:	0259      	lsls	r1, r3, #9
 800232e:	460b      	mov	r3, r1
 8002330:	4614      	mov	r4, r2
 8002332:	4618      	mov	r0, r3
 8002334:	4621      	mov	r1, r4
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f04f 0400 	mov.w	r4, #0
 800233c:	461a      	mov	r2, r3
 800233e:	4623      	mov	r3, r4
 8002340:	f7fd ffbe 	bl	80002c0 <__aeabi_uldivmod>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e049      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234c:	4b85      	ldr	r3, [pc, #532]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	f04f 0400 	mov.w	r4, #0
 8002356:	f240 11ff 	movw	r1, #511	; 0x1ff
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	ea03 0501 	and.w	r5, r3, r1
 8002362:	ea04 0602 	and.w	r6, r4, r2
 8002366:	4629      	mov	r1, r5
 8002368:	4632      	mov	r2, r6
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	f04f 0400 	mov.w	r4, #0
 8002372:	0154      	lsls	r4, r2, #5
 8002374:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002378:	014b      	lsls	r3, r1, #5
 800237a:	4619      	mov	r1, r3
 800237c:	4622      	mov	r2, r4
 800237e:	1b49      	subs	r1, r1, r5
 8002380:	eb62 0206 	sbc.w	r2, r2, r6
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f04f 0400 	mov.w	r4, #0
 800238c:	0194      	lsls	r4, r2, #6
 800238e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002392:	018b      	lsls	r3, r1, #6
 8002394:	1a5b      	subs	r3, r3, r1
 8002396:	eb64 0402 	sbc.w	r4, r4, r2
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	00e2      	lsls	r2, r4, #3
 80023a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023a8:	00d9      	lsls	r1, r3, #3
 80023aa:	460b      	mov	r3, r1
 80023ac:	4614      	mov	r4, r2
 80023ae:	195b      	adds	r3, r3, r5
 80023b0:	eb44 0406 	adc.w	r4, r4, r6
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	02a2      	lsls	r2, r4, #10
 80023be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023c2:	0299      	lsls	r1, r3, #10
 80023c4:	460b      	mov	r3, r1
 80023c6:	4614      	mov	r4, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	4621      	mov	r1, r4
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f04f 0400 	mov.w	r4, #0
 80023d2:	461a      	mov	r2, r3
 80023d4:	4623      	mov	r3, r4
 80023d6:	f7fd ff73 	bl	80002c0 <__aeabi_uldivmod>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e0:	4b60      	ldr	r3, [pc, #384]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	613b      	str	r3, [r7, #16]
      break;
 80023fa:	e0ae      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002404:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002406:	4b57      	ldr	r3, [pc, #348]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04a      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002412:	4b54      	ldr	r3, [pc, #336]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	f04f 0400 	mov.w	r4, #0
 800241c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	ea03 0501 	and.w	r5, r3, r1
 8002428:	ea04 0602 	and.w	r6, r4, r2
 800242c:	4629      	mov	r1, r5
 800242e:	4632      	mov	r2, r6
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	f04f 0400 	mov.w	r4, #0
 8002438:	0154      	lsls	r4, r2, #5
 800243a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800243e:	014b      	lsls	r3, r1, #5
 8002440:	4619      	mov	r1, r3
 8002442:	4622      	mov	r2, r4
 8002444:	1b49      	subs	r1, r1, r5
 8002446:	eb62 0206 	sbc.w	r2, r2, r6
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	f04f 0400 	mov.w	r4, #0
 8002452:	0194      	lsls	r4, r2, #6
 8002454:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002458:	018b      	lsls	r3, r1, #6
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	eb64 0402 	sbc.w	r4, r4, r2
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	00e2      	lsls	r2, r4, #3
 800246a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800246e:	00d9      	lsls	r1, r3, #3
 8002470:	460b      	mov	r3, r1
 8002472:	4614      	mov	r4, r2
 8002474:	195b      	adds	r3, r3, r5
 8002476:	eb44 0406 	adc.w	r4, r4, r6
 800247a:	f04f 0100 	mov.w	r1, #0
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	0262      	lsls	r2, r4, #9
 8002484:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002488:	0259      	lsls	r1, r3, #9
 800248a:	460b      	mov	r3, r1
 800248c:	4614      	mov	r4, r2
 800248e:	4618      	mov	r0, r3
 8002490:	4621      	mov	r1, r4
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f04f 0400 	mov.w	r4, #0
 8002498:	461a      	mov	r2, r3
 800249a:	4623      	mov	r3, r4
 800249c:	f7fd ff10 	bl	80002c0 <__aeabi_uldivmod>
 80024a0:	4603      	mov	r3, r0
 80024a2:	460c      	mov	r4, r1
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e049      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	f04f 0400 	mov.w	r4, #0
 80024b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	ea03 0501 	and.w	r5, r3, r1
 80024be:	ea04 0602 	and.w	r6, r4, r2
 80024c2:	4629      	mov	r1, r5
 80024c4:	4632      	mov	r2, r6
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	f04f 0400 	mov.w	r4, #0
 80024ce:	0154      	lsls	r4, r2, #5
 80024d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024d4:	014b      	lsls	r3, r1, #5
 80024d6:	4619      	mov	r1, r3
 80024d8:	4622      	mov	r2, r4
 80024da:	1b49      	subs	r1, r1, r5
 80024dc:	eb62 0206 	sbc.w	r2, r2, r6
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	f04f 0400 	mov.w	r4, #0
 80024e8:	0194      	lsls	r4, r2, #6
 80024ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024ee:	018b      	lsls	r3, r1, #6
 80024f0:	1a5b      	subs	r3, r3, r1
 80024f2:	eb64 0402 	sbc.w	r4, r4, r2
 80024f6:	f04f 0100 	mov.w	r1, #0
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	00e2      	lsls	r2, r4, #3
 8002500:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002504:	00d9      	lsls	r1, r3, #3
 8002506:	460b      	mov	r3, r1
 8002508:	4614      	mov	r4, r2
 800250a:	195b      	adds	r3, r3, r5
 800250c:	eb44 0406 	adc.w	r4, r4, r6
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	02a2      	lsls	r2, r4, #10
 800251a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800251e:	0299      	lsls	r1, r3, #10
 8002520:	460b      	mov	r3, r1
 8002522:	4614      	mov	r4, r2
 8002524:	4618      	mov	r0, r3
 8002526:	4621      	mov	r1, r4
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f04f 0400 	mov.w	r4, #0
 800252e:	461a      	mov	r2, r3
 8002530:	4623      	mov	r3, r4
 8002532:	f7fd fec5 	bl	80002c0 <__aeabi_uldivmod>
 8002536:	4603      	mov	r3, r0
 8002538:	460c      	mov	r4, r1
 800253a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_RCC_GetSysClockFreq+0x334>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	0f1b      	lsrs	r3, r3, #28
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	613b      	str	r3, [r7, #16]
      break;
 8002552:	e002      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <HAL_RCC_GetSysClockFreq+0x338>)
 8002556:	613b      	str	r3, [r7, #16]
      break;
 8002558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800255a:	693b      	ldr	r3, [r7, #16]
}
 800255c:	4618      	mov	r0, r3
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	00f42400 	.word	0x00f42400
 800256c:	007a1200 	.word	0x007a1200

08002570 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8083 	beq.w	8002690 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800258a:	4b95      	ldr	r3, [pc, #596]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b04      	cmp	r3, #4
 8002594:	d019      	beq.n	80025ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002596:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025a2:	4b8f      	ldr	r3, [pc, #572]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ae:	d00c      	beq.n	80025ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b0:	4b8b      	ldr	r3, [pc, #556]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d112      	bne.n	80025e2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025bc:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c8:	d10b      	bne.n	80025e2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ca:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d05b      	beq.n	800268e <HAL_RCC_OscConfig+0x11e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d157      	bne.n	800268e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e216      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x8a>
 80025ec:	4b7c      	ldr	r3, [pc, #496]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7b      	ldr	r2, [pc, #492]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e01d      	b.n	8002636 <HAL_RCC_OscConfig+0xc6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0xae>
 8002604:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a75      	ldr	r2, [pc, #468]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 800260a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a72      	ldr	r2, [pc, #456]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e00b      	b.n	8002636 <HAL_RCC_OscConfig+0xc6>
 800261e:	4b70      	ldr	r3, [pc, #448]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6f      	ldr	r2, [pc, #444]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b6d      	ldr	r3, [pc, #436]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6c      	ldr	r2, [pc, #432]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d013      	beq.n	8002666 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fbcf 	bl	8000de0 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002646:	f7fe fbcb 	bl	8000de0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	; 0x64
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1db      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002658:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0xd6>
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fbbb 	bl	8000de0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266e:	f7fe fbb7 	bl	8000de0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b64      	cmp	r3, #100	; 0x64
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1c7      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002680:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0xfe>
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d06f      	beq.n	800277c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d017      	beq.n	80026d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026a8:	4b4d      	ldr	r3, [pc, #308]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d105      	bne.n	80026c0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026b4:	4b4a      	ldr	r3, [pc, #296]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c0:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026c8:	2b0c      	cmp	r3, #12
 80026ca:	d11c      	bne.n	8002706 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026cc:	4b44      	ldr	r3, [pc, #272]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x180>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e18f      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4938      	ldr	r1, [pc, #224]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002704:	e03a      	b.n	800277c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d020      	beq.n	8002750 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270e:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <HAL_RCC_OscConfig+0x274>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fb64 	bl	8000de0 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271c:	f7fe fb60 	bl	8000de0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e170      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4925      	ldr	r1, [pc, #148]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
 800274e:	e015      	b.n	800277c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_OscConfig+0x274>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fb43 	bl	8000de0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7fe fb3f 	bl	8000de0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e14f      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d037      	beq.n	80027f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d016      	beq.n	80027be <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCC_OscConfig+0x278>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7fe fb23 	bl	8000de0 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279e:	f7fe fb1f 	bl	8000de0 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e12f      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_OscConfig+0x270>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x22e>
 80027bc:	e01c      	b.n	80027f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_RCC_OscConfig+0x278>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fb0c 	bl	8000de0 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ca:	e00f      	b.n	80027ec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fe fb08 	bl	8000de0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d908      	bls.n	80027ec <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e118      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	42470000 	.word	0x42470000
 80027e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b8a      	ldr	r3, [pc, #552]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e9      	bne.n	80027cc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8097 	beq.w	8002934 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b83      	ldr	r3, [pc, #524]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b7f      	ldr	r3, [pc, #508]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a7e      	ldr	r2, [pc, #504]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b7c      	ldr	r3, [pc, #496]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <HAL_RCC_OscConfig+0x4ac>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d118      	bne.n	8002874 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x4ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <HAL_RCC_OscConfig+0x4ac>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284e:	f7fe fac7 	bl	8000de0 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002856:	f7fe fac3 	bl	8000de0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0d3      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <HAL_RCC_OscConfig+0x4ac>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x31a>
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a65      	ldr	r2, [pc, #404]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
 8002888:	e01c      	b.n	80028c4 <HAL_RCC_OscConfig+0x354>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b05      	cmp	r3, #5
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x33c>
 8002892:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	4a60      	ldr	r2, [pc, #384]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6713      	str	r3, [r2, #112]	; 0x70
 800289e:	4b5e      	ldr	r3, [pc, #376]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	4a5d      	ldr	r2, [pc, #372]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0x354>
 80028ac:	4b5a      	ldr	r3, [pc, #360]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a59      	ldr	r2, [pc, #356]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
 80028b8:	4b57      	ldr	r3, [pc, #348]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a56      	ldr	r2, [pc, #344]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80028be:	f023 0304 	bic.w	r3, r3, #4
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe fa88 	bl	8000de0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe fa84 	bl	8000de0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e092      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0ee      	beq.n	80028d4 <HAL_RCC_OscConfig+0x364>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fa72 	bl	8000de0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe fa6e 	bl	8000de0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e07c      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002916:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ee      	bne.n	8002900 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002928:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	4a3a      	ldr	r2, [pc, #232]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 800292e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d068      	beq.n	8002a0e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293c:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d060      	beq.n	8002a0a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d145      	bne.n	80029dc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002950:	4b33      	ldr	r3, [pc, #204]	; (8002a20 <HAL_RCC_OscConfig+0x4b0>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7fe fa43 	bl	8000de0 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295e:	f7fe fa3f 	bl	8000de0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e04f      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	019b      	lsls	r3, r3, #6
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	3b01      	subs	r3, #1
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	061b      	lsls	r3, r3, #24
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	071b      	lsls	r3, r3, #28
 80029a8:	491b      	ldr	r1, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ae:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <HAL_RCC_OscConfig+0x4b0>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fa14 	bl	8000de0 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fa10 	bl	8000de0 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e020      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x44c>
 80029da:	e018      	b.n	8002a0e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_RCC_OscConfig+0x4b0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe f9fd 	bl	8000de0 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe f9f9 	bl	8000de0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e009      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_OscConfig+0x4a8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x47a>
 8002a08:	e001      	b.n	8002a0e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	42470060 	.word	0x42470060

08002a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e03f      	b.n	8002ab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe f87e 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	; 0x24
 8002a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f90b 	bl	8002c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b088      	sub	sp, #32
 8002ac2:	af02      	add	r7, sp, #8
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	f040 8083 	bne.w	8002be6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_UART_Transmit+0x2e>
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e07b      	b.n	8002be8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_UART_Transmit+0x40>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e074      	b.n	8002be8 <HAL_UART_Transmit+0x12a>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2221      	movs	r2, #33	; 0x21
 8002b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b14:	f7fe f964 	bl	8000de0 <HAL_GetTick>
 8002b18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002b2e:	e042      	b.n	8002bb6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b46:	d122      	bne.n	8002b8e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f84c 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e042      	b.n	8002be8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b74:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	3302      	adds	r3, #2
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	e017      	b.n	8002bb6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	e013      	b.n	8002bb6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f829 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e01f      	b.n	8002be8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	60ba      	str	r2, [r7, #8]
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1b7      	bne.n	8002b30 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2140      	movs	r1, #64	; 0x40
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f810 	bl	8002bf0 <UART_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e006      	b.n	8002be8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c00:	e02c      	b.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d028      	beq.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c10:	f7fe f8e6 	bl	8000de0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d21d      	bcs.n	8002c5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e00f      	b.n	8002c7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4013      	ands	r3, r2
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d0c3      	beq.n	8002c02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cc6:	f023 030c 	bic.w	r3, r3, #12
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	68f9      	ldr	r1, [r7, #12]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf2:	f040 818b 	bne.w	800300c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4ac1      	ldr	r2, [pc, #772]	; (8003000 <UART_SetConfig+0x37c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d005      	beq.n	8002d0c <UART_SetConfig+0x88>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4abf      	ldr	r2, [pc, #764]	; (8003004 <UART_SetConfig+0x380>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f040 80bd 	bne.w	8002e86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d0c:	f7ff fa7c 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 8002d10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	461d      	mov	r5, r3
 8002d16:	f04f 0600 	mov.w	r6, #0
 8002d1a:	46a8      	mov	r8, r5
 8002d1c:	46b1      	mov	r9, r6
 8002d1e:	eb18 0308 	adds.w	r3, r8, r8
 8002d22:	eb49 0409 	adc.w	r4, r9, r9
 8002d26:	4698      	mov	r8, r3
 8002d28:	46a1      	mov	r9, r4
 8002d2a:	eb18 0805 	adds.w	r8, r8, r5
 8002d2e:	eb49 0906 	adc.w	r9, r9, r6
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d46:	4688      	mov	r8, r1
 8002d48:	4691      	mov	r9, r2
 8002d4a:	eb18 0005 	adds.w	r0, r8, r5
 8002d4e:	eb49 0106 	adc.w	r1, r9, r6
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	461d      	mov	r5, r3
 8002d58:	f04f 0600 	mov.w	r6, #0
 8002d5c:	196b      	adds	r3, r5, r5
 8002d5e:	eb46 0406 	adc.w	r4, r6, r6
 8002d62:	461a      	mov	r2, r3
 8002d64:	4623      	mov	r3, r4
 8002d66:	f7fd faab 	bl	80002c0 <__aeabi_uldivmod>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4ba5      	ldr	r3, [pc, #660]	; (8003008 <UART_SetConfig+0x384>)
 8002d72:	fba3 2302 	umull	r2, r3, r3, r2
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	461d      	mov	r5, r3
 8002d80:	f04f 0600 	mov.w	r6, #0
 8002d84:	46a9      	mov	r9, r5
 8002d86:	46b2      	mov	sl, r6
 8002d88:	eb19 0309 	adds.w	r3, r9, r9
 8002d8c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d90:	4699      	mov	r9, r3
 8002d92:	46a2      	mov	sl, r4
 8002d94:	eb19 0905 	adds.w	r9, r9, r5
 8002d98:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002da8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002db0:	4689      	mov	r9, r1
 8002db2:	4692      	mov	sl, r2
 8002db4:	eb19 0005 	adds.w	r0, r9, r5
 8002db8:	eb4a 0106 	adc.w	r1, sl, r6
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	461d      	mov	r5, r3
 8002dc2:	f04f 0600 	mov.w	r6, #0
 8002dc6:	196b      	adds	r3, r5, r5
 8002dc8:	eb46 0406 	adc.w	r4, r6, r6
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4623      	mov	r3, r4
 8002dd0:	f7fd fa76 	bl	80002c0 <__aeabi_uldivmod>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b8b      	ldr	r3, [pc, #556]	; (8003008 <UART_SetConfig+0x384>)
 8002ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	2164      	movs	r1, #100	; 0x64
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	3332      	adds	r3, #50	; 0x32
 8002dee:	4a86      	ldr	r2, [pc, #536]	; (8003008 <UART_SetConfig+0x384>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dfc:	4498      	add	r8, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	461d      	mov	r5, r3
 8002e02:	f04f 0600 	mov.w	r6, #0
 8002e06:	46a9      	mov	r9, r5
 8002e08:	46b2      	mov	sl, r6
 8002e0a:	eb19 0309 	adds.w	r3, r9, r9
 8002e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8002e12:	4699      	mov	r9, r3
 8002e14:	46a2      	mov	sl, r4
 8002e16:	eb19 0905 	adds.w	r9, r9, r5
 8002e1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e32:	4689      	mov	r9, r1
 8002e34:	4692      	mov	sl, r2
 8002e36:	eb19 0005 	adds.w	r0, r9, r5
 8002e3a:	eb4a 0106 	adc.w	r1, sl, r6
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	461d      	mov	r5, r3
 8002e44:	f04f 0600 	mov.w	r6, #0
 8002e48:	196b      	adds	r3, r5, r5
 8002e4a:	eb46 0406 	adc.w	r4, r6, r6
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4623      	mov	r3, r4
 8002e52:	f7fd fa35 	bl	80002c0 <__aeabi_uldivmod>
 8002e56:	4603      	mov	r3, r0
 8002e58:	460c      	mov	r4, r1
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <UART_SetConfig+0x384>)
 8002e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2164      	movs	r1, #100	; 0x64
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	3332      	adds	r3, #50	; 0x32
 8002e70:	4a65      	ldr	r2, [pc, #404]	; (8003008 <UART_SetConfig+0x384>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	f003 0207 	and.w	r2, r3, #7
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4442      	add	r2, r8
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e26f      	b.n	8003366 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e86:	f7ff f9ab 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8002e8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	461d      	mov	r5, r3
 8002e90:	f04f 0600 	mov.w	r6, #0
 8002e94:	46a8      	mov	r8, r5
 8002e96:	46b1      	mov	r9, r6
 8002e98:	eb18 0308 	adds.w	r3, r8, r8
 8002e9c:	eb49 0409 	adc.w	r4, r9, r9
 8002ea0:	4698      	mov	r8, r3
 8002ea2:	46a1      	mov	r9, r4
 8002ea4:	eb18 0805 	adds.w	r8, r8, r5
 8002ea8:	eb49 0906 	adc.w	r9, r9, r6
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002eb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ebc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ec0:	4688      	mov	r8, r1
 8002ec2:	4691      	mov	r9, r2
 8002ec4:	eb18 0005 	adds.w	r0, r8, r5
 8002ec8:	eb49 0106 	adc.w	r1, r9, r6
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	f04f 0600 	mov.w	r6, #0
 8002ed6:	196b      	adds	r3, r5, r5
 8002ed8:	eb46 0406 	adc.w	r4, r6, r6
 8002edc:	461a      	mov	r2, r3
 8002ede:	4623      	mov	r3, r4
 8002ee0:	f7fd f9ee 	bl	80002c0 <__aeabi_uldivmod>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	460c      	mov	r4, r1
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <UART_SetConfig+0x384>)
 8002eec:	fba3 2302 	umull	r2, r3, r3, r2
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	461d      	mov	r5, r3
 8002efa:	f04f 0600 	mov.w	r6, #0
 8002efe:	46a9      	mov	r9, r5
 8002f00:	46b2      	mov	sl, r6
 8002f02:	eb19 0309 	adds.w	r3, r9, r9
 8002f06:	eb4a 040a 	adc.w	r4, sl, sl
 8002f0a:	4699      	mov	r9, r3
 8002f0c:	46a2      	mov	sl, r4
 8002f0e:	eb19 0905 	adds.w	r9, r9, r5
 8002f12:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f2a:	4689      	mov	r9, r1
 8002f2c:	4692      	mov	sl, r2
 8002f2e:	eb19 0005 	adds.w	r0, r9, r5
 8002f32:	eb4a 0106 	adc.w	r1, sl, r6
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	f04f 0600 	mov.w	r6, #0
 8002f40:	196b      	adds	r3, r5, r5
 8002f42:	eb46 0406 	adc.w	r4, r6, r6
 8002f46:	461a      	mov	r2, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	f7fd f9b9 	bl	80002c0 <__aeabi_uldivmod>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	461a      	mov	r2, r3
 8002f54:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <UART_SetConfig+0x384>)
 8002f56:	fba3 1302 	umull	r1, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2164      	movs	r1, #100	; 0x64
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	3332      	adds	r3, #50	; 0x32
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <UART_SetConfig+0x384>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f76:	4498      	add	r8, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	f04f 0600 	mov.w	r6, #0
 8002f80:	46a9      	mov	r9, r5
 8002f82:	46b2      	mov	sl, r6
 8002f84:	eb19 0309 	adds.w	r3, r9, r9
 8002f88:	eb4a 040a 	adc.w	r4, sl, sl
 8002f8c:	4699      	mov	r9, r3
 8002f8e:	46a2      	mov	sl, r4
 8002f90:	eb19 0905 	adds.w	r9, r9, r5
 8002f94:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f98:	f04f 0100 	mov.w	r1, #0
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fac:	4689      	mov	r9, r1
 8002fae:	4692      	mov	sl, r2
 8002fb0:	eb19 0005 	adds.w	r0, r9, r5
 8002fb4:	eb4a 0106 	adc.w	r1, sl, r6
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	461d      	mov	r5, r3
 8002fbe:	f04f 0600 	mov.w	r6, #0
 8002fc2:	196b      	adds	r3, r5, r5
 8002fc4:	eb46 0406 	adc.w	r4, r6, r6
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4623      	mov	r3, r4
 8002fcc:	f7fd f978 	bl	80002c0 <__aeabi_uldivmod>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <UART_SetConfig+0x384>)
 8002fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	2164      	movs	r1, #100	; 0x64
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	3332      	adds	r3, #50	; 0x32
 8002fea:	4a07      	ldr	r2, [pc, #28]	; (8003008 <UART_SetConfig+0x384>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	f003 0207 	and.w	r2, r3, #7
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4442      	add	r2, r8
 8002ffc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ffe:	e1b2      	b.n	8003366 <UART_SetConfig+0x6e2>
 8003000:	40011000 	.word	0x40011000
 8003004:	40011400 	.word	0x40011400
 8003008:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4ad7      	ldr	r2, [pc, #860]	; (8003370 <UART_SetConfig+0x6ec>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d005      	beq.n	8003022 <UART_SetConfig+0x39e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4ad6      	ldr	r2, [pc, #856]	; (8003374 <UART_SetConfig+0x6f0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	f040 80d1 	bne.w	80031c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003022:	f7ff f8f1 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 8003026:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	469a      	mov	sl, r3
 800302c:	f04f 0b00 	mov.w	fp, #0
 8003030:	46d0      	mov	r8, sl
 8003032:	46d9      	mov	r9, fp
 8003034:	eb18 0308 	adds.w	r3, r8, r8
 8003038:	eb49 0409 	adc.w	r4, r9, r9
 800303c:	4698      	mov	r8, r3
 800303e:	46a1      	mov	r9, r4
 8003040:	eb18 080a 	adds.w	r8, r8, sl
 8003044:	eb49 090b 	adc.w	r9, r9, fp
 8003048:	f04f 0100 	mov.w	r1, #0
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003054:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003058:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800305c:	4688      	mov	r8, r1
 800305e:	4691      	mov	r9, r2
 8003060:	eb1a 0508 	adds.w	r5, sl, r8
 8003064:	eb4b 0609 	adc.w	r6, fp, r9
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4619      	mov	r1, r3
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	f04f 0400 	mov.w	r4, #0
 800307a:	0094      	lsls	r4, r2, #2
 800307c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003080:	008b      	lsls	r3, r1, #2
 8003082:	461a      	mov	r2, r3
 8003084:	4623      	mov	r3, r4
 8003086:	4628      	mov	r0, r5
 8003088:	4631      	mov	r1, r6
 800308a:	f7fd f919 	bl	80002c0 <__aeabi_uldivmod>
 800308e:	4603      	mov	r3, r0
 8003090:	460c      	mov	r4, r1
 8003092:	461a      	mov	r2, r3
 8003094:	4bb8      	ldr	r3, [pc, #736]	; (8003378 <UART_SetConfig+0x6f4>)
 8003096:	fba3 2302 	umull	r2, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	469b      	mov	fp, r3
 80030a4:	f04f 0c00 	mov.w	ip, #0
 80030a8:	46d9      	mov	r9, fp
 80030aa:	46e2      	mov	sl, ip
 80030ac:	eb19 0309 	adds.w	r3, r9, r9
 80030b0:	eb4a 040a 	adc.w	r4, sl, sl
 80030b4:	4699      	mov	r9, r3
 80030b6:	46a2      	mov	sl, r4
 80030b8:	eb19 090b 	adds.w	r9, r9, fp
 80030bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030d4:	4689      	mov	r9, r1
 80030d6:	4692      	mov	sl, r2
 80030d8:	eb1b 0509 	adds.w	r5, fp, r9
 80030dc:	eb4c 060a 	adc.w	r6, ip, sl
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4619      	mov	r1, r3
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f04f 0400 	mov.w	r4, #0
 80030f2:	0094      	lsls	r4, r2, #2
 80030f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030f8:	008b      	lsls	r3, r1, #2
 80030fa:	461a      	mov	r2, r3
 80030fc:	4623      	mov	r3, r4
 80030fe:	4628      	mov	r0, r5
 8003100:	4631      	mov	r1, r6
 8003102:	f7fd f8dd 	bl	80002c0 <__aeabi_uldivmod>
 8003106:	4603      	mov	r3, r0
 8003108:	460c      	mov	r4, r1
 800310a:	461a      	mov	r2, r3
 800310c:	4b9a      	ldr	r3, [pc, #616]	; (8003378 <UART_SetConfig+0x6f4>)
 800310e:	fba3 1302 	umull	r1, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2164      	movs	r1, #100	; 0x64
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	3332      	adds	r3, #50	; 0x32
 8003120:	4a95      	ldr	r2, [pc, #596]	; (8003378 <UART_SetConfig+0x6f4>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800312c:	4498      	add	r8, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	469b      	mov	fp, r3
 8003132:	f04f 0c00 	mov.w	ip, #0
 8003136:	46d9      	mov	r9, fp
 8003138:	46e2      	mov	sl, ip
 800313a:	eb19 0309 	adds.w	r3, r9, r9
 800313e:	eb4a 040a 	adc.w	r4, sl, sl
 8003142:	4699      	mov	r9, r3
 8003144:	46a2      	mov	sl, r4
 8003146:	eb19 090b 	adds.w	r9, r9, fp
 800314a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800315a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800315e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003162:	4689      	mov	r9, r1
 8003164:	4692      	mov	sl, r2
 8003166:	eb1b 0509 	adds.w	r5, fp, r9
 800316a:	eb4c 060a 	adc.w	r6, ip, sl
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4619      	mov	r1, r3
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	f04f 0400 	mov.w	r4, #0
 8003180:	0094      	lsls	r4, r2, #2
 8003182:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003186:	008b      	lsls	r3, r1, #2
 8003188:	461a      	mov	r2, r3
 800318a:	4623      	mov	r3, r4
 800318c:	4628      	mov	r0, r5
 800318e:	4631      	mov	r1, r6
 8003190:	f7fd f896 	bl	80002c0 <__aeabi_uldivmod>
 8003194:	4603      	mov	r3, r0
 8003196:	460c      	mov	r4, r1
 8003198:	461a      	mov	r2, r3
 800319a:	4b77      	ldr	r3, [pc, #476]	; (8003378 <UART_SetConfig+0x6f4>)
 800319c:	fba3 1302 	umull	r1, r3, r3, r2
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	2164      	movs	r1, #100	; 0x64
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	3332      	adds	r3, #50	; 0x32
 80031ae:	4a72      	ldr	r2, [pc, #456]	; (8003378 <UART_SetConfig+0x6f4>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	f003 020f 	and.w	r2, r3, #15
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4442      	add	r2, r8
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	e0d0      	b.n	8003366 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031c4:	f7ff f80c 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 80031c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	469a      	mov	sl, r3
 80031ce:	f04f 0b00 	mov.w	fp, #0
 80031d2:	46d0      	mov	r8, sl
 80031d4:	46d9      	mov	r9, fp
 80031d6:	eb18 0308 	adds.w	r3, r8, r8
 80031da:	eb49 0409 	adc.w	r4, r9, r9
 80031de:	4698      	mov	r8, r3
 80031e0:	46a1      	mov	r9, r4
 80031e2:	eb18 080a 	adds.w	r8, r8, sl
 80031e6:	eb49 090b 	adc.w	r9, r9, fp
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031fe:	4688      	mov	r8, r1
 8003200:	4691      	mov	r9, r2
 8003202:	eb1a 0508 	adds.w	r5, sl, r8
 8003206:	eb4b 0609 	adc.w	r6, fp, r9
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f04f 0400 	mov.w	r4, #0
 800321c:	0094      	lsls	r4, r2, #2
 800321e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003222:	008b      	lsls	r3, r1, #2
 8003224:	461a      	mov	r2, r3
 8003226:	4623      	mov	r3, r4
 8003228:	4628      	mov	r0, r5
 800322a:	4631      	mov	r1, r6
 800322c:	f7fd f848 	bl	80002c0 <__aeabi_uldivmod>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	461a      	mov	r2, r3
 8003236:	4b50      	ldr	r3, [pc, #320]	; (8003378 <UART_SetConfig+0x6f4>)
 8003238:	fba3 2302 	umull	r2, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	469b      	mov	fp, r3
 8003246:	f04f 0c00 	mov.w	ip, #0
 800324a:	46d9      	mov	r9, fp
 800324c:	46e2      	mov	sl, ip
 800324e:	eb19 0309 	adds.w	r3, r9, r9
 8003252:	eb4a 040a 	adc.w	r4, sl, sl
 8003256:	4699      	mov	r9, r3
 8003258:	46a2      	mov	sl, r4
 800325a:	eb19 090b 	adds.w	r9, r9, fp
 800325e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800326e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003276:	4689      	mov	r9, r1
 8003278:	4692      	mov	sl, r2
 800327a:	eb1b 0509 	adds.w	r5, fp, r9
 800327e:	eb4c 060a 	adc.w	r6, ip, sl
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4619      	mov	r1, r3
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	f04f 0400 	mov.w	r4, #0
 8003294:	0094      	lsls	r4, r2, #2
 8003296:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800329a:	008b      	lsls	r3, r1, #2
 800329c:	461a      	mov	r2, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	4628      	mov	r0, r5
 80032a2:	4631      	mov	r1, r6
 80032a4:	f7fd f80c 	bl	80002c0 <__aeabi_uldivmod>
 80032a8:	4603      	mov	r3, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b32      	ldr	r3, [pc, #200]	; (8003378 <UART_SetConfig+0x6f4>)
 80032b0:	fba3 1302 	umull	r1, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	2164      	movs	r1, #100	; 0x64
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	3332      	adds	r3, #50	; 0x32
 80032c2:	4a2d      	ldr	r2, [pc, #180]	; (8003378 <UART_SetConfig+0x6f4>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ce:	4498      	add	r8, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	469b      	mov	fp, r3
 80032d4:	f04f 0c00 	mov.w	ip, #0
 80032d8:	46d9      	mov	r9, fp
 80032da:	46e2      	mov	sl, ip
 80032dc:	eb19 0309 	adds.w	r3, r9, r9
 80032e0:	eb4a 040a 	adc.w	r4, sl, sl
 80032e4:	4699      	mov	r9, r3
 80032e6:	46a2      	mov	sl, r4
 80032e8:	eb19 090b 	adds.w	r9, r9, fp
 80032ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003300:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003304:	4689      	mov	r9, r1
 8003306:	4692      	mov	sl, r2
 8003308:	eb1b 0509 	adds.w	r5, fp, r9
 800330c:	eb4c 060a 	adc.w	r6, ip, sl
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4619      	mov	r1, r3
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	f04f 0400 	mov.w	r4, #0
 8003322:	0094      	lsls	r4, r2, #2
 8003324:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003328:	008b      	lsls	r3, r1, #2
 800332a:	461a      	mov	r2, r3
 800332c:	4623      	mov	r3, r4
 800332e:	4628      	mov	r0, r5
 8003330:	4631      	mov	r1, r6
 8003332:	f7fc ffc5 	bl	80002c0 <__aeabi_uldivmod>
 8003336:	4603      	mov	r3, r0
 8003338:	460c      	mov	r4, r1
 800333a:	461a      	mov	r2, r3
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <UART_SetConfig+0x6f4>)
 800333e:	fba3 1302 	umull	r1, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2164      	movs	r1, #100	; 0x64
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	; 0x32
 8003350:	4a09      	ldr	r2, [pc, #36]	; (8003378 <UART_SetConfig+0x6f4>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4442      	add	r2, r8
 8003362:	609a      	str	r2, [r3, #8]
}
 8003364:	e7ff      	b.n	8003366 <UART_SetConfig+0x6e2>
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003370:	40011000 	.word	0x40011000
 8003374:	40011400 	.word	0x40011400
 8003378:	51eb851f 	.word	0x51eb851f

0800337c <__errno>:
 800337c:	4b01      	ldr	r3, [pc, #4]	; (8003384 <__errno+0x8>)
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	2000000c 	.word	0x2000000c

08003388 <__libc_init_array>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	4e0d      	ldr	r6, [pc, #52]	; (80033c0 <__libc_init_array+0x38>)
 800338c:	4c0d      	ldr	r4, [pc, #52]	; (80033c4 <__libc_init_array+0x3c>)
 800338e:	1ba4      	subs	r4, r4, r6
 8003390:	10a4      	asrs	r4, r4, #2
 8003392:	2500      	movs	r5, #0
 8003394:	42a5      	cmp	r5, r4
 8003396:	d109      	bne.n	80033ac <__libc_init_array+0x24>
 8003398:	4e0b      	ldr	r6, [pc, #44]	; (80033c8 <__libc_init_array+0x40>)
 800339a:	4c0c      	ldr	r4, [pc, #48]	; (80033cc <__libc_init_array+0x44>)
 800339c:	f000 fc1e 	bl	8003bdc <_init>
 80033a0:	1ba4      	subs	r4, r4, r6
 80033a2:	10a4      	asrs	r4, r4, #2
 80033a4:	2500      	movs	r5, #0
 80033a6:	42a5      	cmp	r5, r4
 80033a8:	d105      	bne.n	80033b6 <__libc_init_array+0x2e>
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033b0:	4798      	blx	r3
 80033b2:	3501      	adds	r5, #1
 80033b4:	e7ee      	b.n	8003394 <__libc_init_array+0xc>
 80033b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ba:	4798      	blx	r3
 80033bc:	3501      	adds	r5, #1
 80033be:	e7f2      	b.n	80033a6 <__libc_init_array+0x1e>
 80033c0:	08003cd4 	.word	0x08003cd4
 80033c4:	08003cd4 	.word	0x08003cd4
 80033c8:	08003cd4 	.word	0x08003cd4
 80033cc:	08003cd8 	.word	0x08003cd8

080033d0 <siprintf>:
 80033d0:	b40e      	push	{r1, r2, r3}
 80033d2:	b500      	push	{lr}
 80033d4:	b09c      	sub	sp, #112	; 0x70
 80033d6:	ab1d      	add	r3, sp, #116	; 0x74
 80033d8:	9002      	str	r0, [sp, #8]
 80033da:	9006      	str	r0, [sp, #24]
 80033dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033e0:	4809      	ldr	r0, [pc, #36]	; (8003408 <siprintf+0x38>)
 80033e2:	9107      	str	r1, [sp, #28]
 80033e4:	9104      	str	r1, [sp, #16]
 80033e6:	4909      	ldr	r1, [pc, #36]	; (800340c <siprintf+0x3c>)
 80033e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80033ec:	9105      	str	r1, [sp, #20]
 80033ee:	6800      	ldr	r0, [r0, #0]
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	a902      	add	r1, sp, #8
 80033f4:	f000 f866 	bl	80034c4 <_svfiprintf_r>
 80033f8:	9b02      	ldr	r3, [sp, #8]
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	b01c      	add	sp, #112	; 0x70
 8003400:	f85d eb04 	ldr.w	lr, [sp], #4
 8003404:	b003      	add	sp, #12
 8003406:	4770      	bx	lr
 8003408:	2000000c 	.word	0x2000000c
 800340c:	ffff0208 	.word	0xffff0208

08003410 <__ssputs_r>:
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	688e      	ldr	r6, [r1, #8]
 8003416:	429e      	cmp	r6, r3
 8003418:	4682      	mov	sl, r0
 800341a:	460c      	mov	r4, r1
 800341c:	4690      	mov	r8, r2
 800341e:	4699      	mov	r9, r3
 8003420:	d837      	bhi.n	8003492 <__ssputs_r+0x82>
 8003422:	898a      	ldrh	r2, [r1, #12]
 8003424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003428:	d031      	beq.n	800348e <__ssputs_r+0x7e>
 800342a:	6825      	ldr	r5, [r4, #0]
 800342c:	6909      	ldr	r1, [r1, #16]
 800342e:	1a6f      	subs	r7, r5, r1
 8003430:	6965      	ldr	r5, [r4, #20]
 8003432:	2302      	movs	r3, #2
 8003434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003438:	fb95 f5f3 	sdiv	r5, r5, r3
 800343c:	f109 0301 	add.w	r3, r9, #1
 8003440:	443b      	add	r3, r7
 8003442:	429d      	cmp	r5, r3
 8003444:	bf38      	it	cc
 8003446:	461d      	movcc	r5, r3
 8003448:	0553      	lsls	r3, r2, #21
 800344a:	d530      	bpl.n	80034ae <__ssputs_r+0x9e>
 800344c:	4629      	mov	r1, r5
 800344e:	f000 fb2b 	bl	8003aa8 <_malloc_r>
 8003452:	4606      	mov	r6, r0
 8003454:	b950      	cbnz	r0, 800346c <__ssputs_r+0x5c>
 8003456:	230c      	movs	r3, #12
 8003458:	f8ca 3000 	str.w	r3, [sl]
 800345c:	89a3      	ldrh	r3, [r4, #12]
 800345e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003462:	81a3      	strh	r3, [r4, #12]
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346c:	463a      	mov	r2, r7
 800346e:	6921      	ldr	r1, [r4, #16]
 8003470:	f000 faa8 	bl	80039c4 <memcpy>
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800347a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	6126      	str	r6, [r4, #16]
 8003482:	6165      	str	r5, [r4, #20]
 8003484:	443e      	add	r6, r7
 8003486:	1bed      	subs	r5, r5, r7
 8003488:	6026      	str	r6, [r4, #0]
 800348a:	60a5      	str	r5, [r4, #8]
 800348c:	464e      	mov	r6, r9
 800348e:	454e      	cmp	r6, r9
 8003490:	d900      	bls.n	8003494 <__ssputs_r+0x84>
 8003492:	464e      	mov	r6, r9
 8003494:	4632      	mov	r2, r6
 8003496:	4641      	mov	r1, r8
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	f000 fa9e 	bl	80039da <memmove>
 800349e:	68a3      	ldr	r3, [r4, #8]
 80034a0:	1b9b      	subs	r3, r3, r6
 80034a2:	60a3      	str	r3, [r4, #8]
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	441e      	add	r6, r3
 80034a8:	6026      	str	r6, [r4, #0]
 80034aa:	2000      	movs	r0, #0
 80034ac:	e7dc      	b.n	8003468 <__ssputs_r+0x58>
 80034ae:	462a      	mov	r2, r5
 80034b0:	f000 fb54 	bl	8003b5c <_realloc_r>
 80034b4:	4606      	mov	r6, r0
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d1e2      	bne.n	8003480 <__ssputs_r+0x70>
 80034ba:	6921      	ldr	r1, [r4, #16]
 80034bc:	4650      	mov	r0, sl
 80034be:	f000 faa5 	bl	8003a0c <_free_r>
 80034c2:	e7c8      	b.n	8003456 <__ssputs_r+0x46>

080034c4 <_svfiprintf_r>:
 80034c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	461d      	mov	r5, r3
 80034ca:	898b      	ldrh	r3, [r1, #12]
 80034cc:	061f      	lsls	r7, r3, #24
 80034ce:	b09d      	sub	sp, #116	; 0x74
 80034d0:	4680      	mov	r8, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	4616      	mov	r6, r2
 80034d6:	d50f      	bpl.n	80034f8 <_svfiprintf_r+0x34>
 80034d8:	690b      	ldr	r3, [r1, #16]
 80034da:	b96b      	cbnz	r3, 80034f8 <_svfiprintf_r+0x34>
 80034dc:	2140      	movs	r1, #64	; 0x40
 80034de:	f000 fae3 	bl	8003aa8 <_malloc_r>
 80034e2:	6020      	str	r0, [r4, #0]
 80034e4:	6120      	str	r0, [r4, #16]
 80034e6:	b928      	cbnz	r0, 80034f4 <_svfiprintf_r+0x30>
 80034e8:	230c      	movs	r3, #12
 80034ea:	f8c8 3000 	str.w	r3, [r8]
 80034ee:	f04f 30ff 	mov.w	r0, #4294967295
 80034f2:	e0c8      	b.n	8003686 <_svfiprintf_r+0x1c2>
 80034f4:	2340      	movs	r3, #64	; 0x40
 80034f6:	6163      	str	r3, [r4, #20]
 80034f8:	2300      	movs	r3, #0
 80034fa:	9309      	str	r3, [sp, #36]	; 0x24
 80034fc:	2320      	movs	r3, #32
 80034fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003502:	2330      	movs	r3, #48	; 0x30
 8003504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003508:	9503      	str	r5, [sp, #12]
 800350a:	f04f 0b01 	mov.w	fp, #1
 800350e:	4637      	mov	r7, r6
 8003510:	463d      	mov	r5, r7
 8003512:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003516:	b10b      	cbz	r3, 800351c <_svfiprintf_r+0x58>
 8003518:	2b25      	cmp	r3, #37	; 0x25
 800351a:	d13e      	bne.n	800359a <_svfiprintf_r+0xd6>
 800351c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003520:	d00b      	beq.n	800353a <_svfiprintf_r+0x76>
 8003522:	4653      	mov	r3, sl
 8003524:	4632      	mov	r2, r6
 8003526:	4621      	mov	r1, r4
 8003528:	4640      	mov	r0, r8
 800352a:	f7ff ff71 	bl	8003410 <__ssputs_r>
 800352e:	3001      	adds	r0, #1
 8003530:	f000 80a4 	beq.w	800367c <_svfiprintf_r+0x1b8>
 8003534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003536:	4453      	add	r3, sl
 8003538:	9309      	str	r3, [sp, #36]	; 0x24
 800353a:	783b      	ldrb	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 809d 	beq.w	800367c <_svfiprintf_r+0x1b8>
 8003542:	2300      	movs	r3, #0
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800354c:	9304      	str	r3, [sp, #16]
 800354e:	9307      	str	r3, [sp, #28]
 8003550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003554:	931a      	str	r3, [sp, #104]	; 0x68
 8003556:	462f      	mov	r7, r5
 8003558:	2205      	movs	r2, #5
 800355a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800355e:	4850      	ldr	r0, [pc, #320]	; (80036a0 <_svfiprintf_r+0x1dc>)
 8003560:	f7fc fe5e 	bl	8000220 <memchr>
 8003564:	9b04      	ldr	r3, [sp, #16]
 8003566:	b9d0      	cbnz	r0, 800359e <_svfiprintf_r+0xda>
 8003568:	06d9      	lsls	r1, r3, #27
 800356a:	bf44      	itt	mi
 800356c:	2220      	movmi	r2, #32
 800356e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003572:	071a      	lsls	r2, r3, #28
 8003574:	bf44      	itt	mi
 8003576:	222b      	movmi	r2, #43	; 0x2b
 8003578:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800357c:	782a      	ldrb	r2, [r5, #0]
 800357e:	2a2a      	cmp	r2, #42	; 0x2a
 8003580:	d015      	beq.n	80035ae <_svfiprintf_r+0xea>
 8003582:	9a07      	ldr	r2, [sp, #28]
 8003584:	462f      	mov	r7, r5
 8003586:	2000      	movs	r0, #0
 8003588:	250a      	movs	r5, #10
 800358a:	4639      	mov	r1, r7
 800358c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003590:	3b30      	subs	r3, #48	; 0x30
 8003592:	2b09      	cmp	r3, #9
 8003594:	d94d      	bls.n	8003632 <_svfiprintf_r+0x16e>
 8003596:	b1b8      	cbz	r0, 80035c8 <_svfiprintf_r+0x104>
 8003598:	e00f      	b.n	80035ba <_svfiprintf_r+0xf6>
 800359a:	462f      	mov	r7, r5
 800359c:	e7b8      	b.n	8003510 <_svfiprintf_r+0x4c>
 800359e:	4a40      	ldr	r2, [pc, #256]	; (80036a0 <_svfiprintf_r+0x1dc>)
 80035a0:	1a80      	subs	r0, r0, r2
 80035a2:	fa0b f000 	lsl.w	r0, fp, r0
 80035a6:	4318      	orrs	r0, r3
 80035a8:	9004      	str	r0, [sp, #16]
 80035aa:	463d      	mov	r5, r7
 80035ac:	e7d3      	b.n	8003556 <_svfiprintf_r+0x92>
 80035ae:	9a03      	ldr	r2, [sp, #12]
 80035b0:	1d11      	adds	r1, r2, #4
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	9103      	str	r1, [sp, #12]
 80035b6:	2a00      	cmp	r2, #0
 80035b8:	db01      	blt.n	80035be <_svfiprintf_r+0xfa>
 80035ba:	9207      	str	r2, [sp, #28]
 80035bc:	e004      	b.n	80035c8 <_svfiprintf_r+0x104>
 80035be:	4252      	negs	r2, r2
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	9207      	str	r2, [sp, #28]
 80035c6:	9304      	str	r3, [sp, #16]
 80035c8:	783b      	ldrb	r3, [r7, #0]
 80035ca:	2b2e      	cmp	r3, #46	; 0x2e
 80035cc:	d10c      	bne.n	80035e8 <_svfiprintf_r+0x124>
 80035ce:	787b      	ldrb	r3, [r7, #1]
 80035d0:	2b2a      	cmp	r3, #42	; 0x2a
 80035d2:	d133      	bne.n	800363c <_svfiprintf_r+0x178>
 80035d4:	9b03      	ldr	r3, [sp, #12]
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	9203      	str	r2, [sp, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bfb8      	it	lt
 80035e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80035e4:	3702      	adds	r7, #2
 80035e6:	9305      	str	r3, [sp, #20]
 80035e8:	4d2e      	ldr	r5, [pc, #184]	; (80036a4 <_svfiprintf_r+0x1e0>)
 80035ea:	7839      	ldrb	r1, [r7, #0]
 80035ec:	2203      	movs	r2, #3
 80035ee:	4628      	mov	r0, r5
 80035f0:	f7fc fe16 	bl	8000220 <memchr>
 80035f4:	b138      	cbz	r0, 8003606 <_svfiprintf_r+0x142>
 80035f6:	2340      	movs	r3, #64	; 0x40
 80035f8:	1b40      	subs	r0, r0, r5
 80035fa:	fa03 f000 	lsl.w	r0, r3, r0
 80035fe:	9b04      	ldr	r3, [sp, #16]
 8003600:	4303      	orrs	r3, r0
 8003602:	3701      	adds	r7, #1
 8003604:	9304      	str	r3, [sp, #16]
 8003606:	7839      	ldrb	r1, [r7, #0]
 8003608:	4827      	ldr	r0, [pc, #156]	; (80036a8 <_svfiprintf_r+0x1e4>)
 800360a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800360e:	2206      	movs	r2, #6
 8003610:	1c7e      	adds	r6, r7, #1
 8003612:	f7fc fe05 	bl	8000220 <memchr>
 8003616:	2800      	cmp	r0, #0
 8003618:	d038      	beq.n	800368c <_svfiprintf_r+0x1c8>
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <_svfiprintf_r+0x1e8>)
 800361c:	bb13      	cbnz	r3, 8003664 <_svfiprintf_r+0x1a0>
 800361e:	9b03      	ldr	r3, [sp, #12]
 8003620:	3307      	adds	r3, #7
 8003622:	f023 0307 	bic.w	r3, r3, #7
 8003626:	3308      	adds	r3, #8
 8003628:	9303      	str	r3, [sp, #12]
 800362a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800362c:	444b      	add	r3, r9
 800362e:	9309      	str	r3, [sp, #36]	; 0x24
 8003630:	e76d      	b.n	800350e <_svfiprintf_r+0x4a>
 8003632:	fb05 3202 	mla	r2, r5, r2, r3
 8003636:	2001      	movs	r0, #1
 8003638:	460f      	mov	r7, r1
 800363a:	e7a6      	b.n	800358a <_svfiprintf_r+0xc6>
 800363c:	2300      	movs	r3, #0
 800363e:	3701      	adds	r7, #1
 8003640:	9305      	str	r3, [sp, #20]
 8003642:	4619      	mov	r1, r3
 8003644:	250a      	movs	r5, #10
 8003646:	4638      	mov	r0, r7
 8003648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800364c:	3a30      	subs	r2, #48	; 0x30
 800364e:	2a09      	cmp	r2, #9
 8003650:	d903      	bls.n	800365a <_svfiprintf_r+0x196>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0c8      	beq.n	80035e8 <_svfiprintf_r+0x124>
 8003656:	9105      	str	r1, [sp, #20]
 8003658:	e7c6      	b.n	80035e8 <_svfiprintf_r+0x124>
 800365a:	fb05 2101 	mla	r1, r5, r1, r2
 800365e:	2301      	movs	r3, #1
 8003660:	4607      	mov	r7, r0
 8003662:	e7f0      	b.n	8003646 <_svfiprintf_r+0x182>
 8003664:	ab03      	add	r3, sp, #12
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4622      	mov	r2, r4
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <_svfiprintf_r+0x1ec>)
 800366c:	a904      	add	r1, sp, #16
 800366e:	4640      	mov	r0, r8
 8003670:	f3af 8000 	nop.w
 8003674:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003678:	4681      	mov	r9, r0
 800367a:	d1d6      	bne.n	800362a <_svfiprintf_r+0x166>
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	065b      	lsls	r3, r3, #25
 8003680:	f53f af35 	bmi.w	80034ee <_svfiprintf_r+0x2a>
 8003684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003686:	b01d      	add	sp, #116	; 0x74
 8003688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368c:	ab03      	add	r3, sp, #12
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4622      	mov	r2, r4
 8003692:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <_svfiprintf_r+0x1ec>)
 8003694:	a904      	add	r1, sp, #16
 8003696:	4640      	mov	r0, r8
 8003698:	f000 f882 	bl	80037a0 <_printf_i>
 800369c:	e7ea      	b.n	8003674 <_svfiprintf_r+0x1b0>
 800369e:	bf00      	nop
 80036a0:	08003c98 	.word	0x08003c98
 80036a4:	08003c9e 	.word	0x08003c9e
 80036a8:	08003ca2 	.word	0x08003ca2
 80036ac:	00000000 	.word	0x00000000
 80036b0:	08003411 	.word	0x08003411

080036b4 <_printf_common>:
 80036b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b8:	4691      	mov	r9, r2
 80036ba:	461f      	mov	r7, r3
 80036bc:	688a      	ldr	r2, [r1, #8]
 80036be:	690b      	ldr	r3, [r1, #16]
 80036c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036c4:	4293      	cmp	r3, r2
 80036c6:	bfb8      	it	lt
 80036c8:	4613      	movlt	r3, r2
 80036ca:	f8c9 3000 	str.w	r3, [r9]
 80036ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036d2:	4606      	mov	r6, r0
 80036d4:	460c      	mov	r4, r1
 80036d6:	b112      	cbz	r2, 80036de <_printf_common+0x2a>
 80036d8:	3301      	adds	r3, #1
 80036da:	f8c9 3000 	str.w	r3, [r9]
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	0699      	lsls	r1, r3, #26
 80036e2:	bf42      	ittt	mi
 80036e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036e8:	3302      	addmi	r3, #2
 80036ea:	f8c9 3000 	strmi.w	r3, [r9]
 80036ee:	6825      	ldr	r5, [r4, #0]
 80036f0:	f015 0506 	ands.w	r5, r5, #6
 80036f4:	d107      	bne.n	8003706 <_printf_common+0x52>
 80036f6:	f104 0a19 	add.w	sl, r4, #25
 80036fa:	68e3      	ldr	r3, [r4, #12]
 80036fc:	f8d9 2000 	ldr.w	r2, [r9]
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	42ab      	cmp	r3, r5
 8003704:	dc28      	bgt.n	8003758 <_printf_common+0xa4>
 8003706:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	3300      	adds	r3, #0
 800370e:	bf18      	it	ne
 8003710:	2301      	movne	r3, #1
 8003712:	0692      	lsls	r2, r2, #26
 8003714:	d42d      	bmi.n	8003772 <_printf_common+0xbe>
 8003716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800371a:	4639      	mov	r1, r7
 800371c:	4630      	mov	r0, r6
 800371e:	47c0      	blx	r8
 8003720:	3001      	adds	r0, #1
 8003722:	d020      	beq.n	8003766 <_printf_common+0xb2>
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	68e5      	ldr	r5, [r4, #12]
 8003728:	f8d9 2000 	ldr.w	r2, [r9]
 800372c:	f003 0306 	and.w	r3, r3, #6
 8003730:	2b04      	cmp	r3, #4
 8003732:	bf08      	it	eq
 8003734:	1aad      	subeq	r5, r5, r2
 8003736:	68a3      	ldr	r3, [r4, #8]
 8003738:	6922      	ldr	r2, [r4, #16]
 800373a:	bf0c      	ite	eq
 800373c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003740:	2500      	movne	r5, #0
 8003742:	4293      	cmp	r3, r2
 8003744:	bfc4      	itt	gt
 8003746:	1a9b      	subgt	r3, r3, r2
 8003748:	18ed      	addgt	r5, r5, r3
 800374a:	f04f 0900 	mov.w	r9, #0
 800374e:	341a      	adds	r4, #26
 8003750:	454d      	cmp	r5, r9
 8003752:	d11a      	bne.n	800378a <_printf_common+0xd6>
 8003754:	2000      	movs	r0, #0
 8003756:	e008      	b.n	800376a <_printf_common+0xb6>
 8003758:	2301      	movs	r3, #1
 800375a:	4652      	mov	r2, sl
 800375c:	4639      	mov	r1, r7
 800375e:	4630      	mov	r0, r6
 8003760:	47c0      	blx	r8
 8003762:	3001      	adds	r0, #1
 8003764:	d103      	bne.n	800376e <_printf_common+0xba>
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376e:	3501      	adds	r5, #1
 8003770:	e7c3      	b.n	80036fa <_printf_common+0x46>
 8003772:	18e1      	adds	r1, r4, r3
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	2030      	movs	r0, #48	; 0x30
 8003778:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800377c:	4422      	add	r2, r4
 800377e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003782:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003786:	3302      	adds	r3, #2
 8003788:	e7c5      	b.n	8003716 <_printf_common+0x62>
 800378a:	2301      	movs	r3, #1
 800378c:	4622      	mov	r2, r4
 800378e:	4639      	mov	r1, r7
 8003790:	4630      	mov	r0, r6
 8003792:	47c0      	blx	r8
 8003794:	3001      	adds	r0, #1
 8003796:	d0e6      	beq.n	8003766 <_printf_common+0xb2>
 8003798:	f109 0901 	add.w	r9, r9, #1
 800379c:	e7d8      	b.n	8003750 <_printf_common+0x9c>
	...

080037a0 <_printf_i>:
 80037a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037a8:	460c      	mov	r4, r1
 80037aa:	7e09      	ldrb	r1, [r1, #24]
 80037ac:	b085      	sub	sp, #20
 80037ae:	296e      	cmp	r1, #110	; 0x6e
 80037b0:	4617      	mov	r7, r2
 80037b2:	4606      	mov	r6, r0
 80037b4:	4698      	mov	r8, r3
 80037b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037b8:	f000 80b3 	beq.w	8003922 <_printf_i+0x182>
 80037bc:	d822      	bhi.n	8003804 <_printf_i+0x64>
 80037be:	2963      	cmp	r1, #99	; 0x63
 80037c0:	d036      	beq.n	8003830 <_printf_i+0x90>
 80037c2:	d80a      	bhi.n	80037da <_printf_i+0x3a>
 80037c4:	2900      	cmp	r1, #0
 80037c6:	f000 80b9 	beq.w	800393c <_printf_i+0x19c>
 80037ca:	2958      	cmp	r1, #88	; 0x58
 80037cc:	f000 8083 	beq.w	80038d6 <_printf_i+0x136>
 80037d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037d8:	e032      	b.n	8003840 <_printf_i+0xa0>
 80037da:	2964      	cmp	r1, #100	; 0x64
 80037dc:	d001      	beq.n	80037e2 <_printf_i+0x42>
 80037de:	2969      	cmp	r1, #105	; 0x69
 80037e0:	d1f6      	bne.n	80037d0 <_printf_i+0x30>
 80037e2:	6820      	ldr	r0, [r4, #0]
 80037e4:	6813      	ldr	r3, [r2, #0]
 80037e6:	0605      	lsls	r5, r0, #24
 80037e8:	f103 0104 	add.w	r1, r3, #4
 80037ec:	d52a      	bpl.n	8003844 <_printf_i+0xa4>
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6011      	str	r1, [r2, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	da03      	bge.n	80037fe <_printf_i+0x5e>
 80037f6:	222d      	movs	r2, #45	; 0x2d
 80037f8:	425b      	negs	r3, r3
 80037fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037fe:	486f      	ldr	r0, [pc, #444]	; (80039bc <_printf_i+0x21c>)
 8003800:	220a      	movs	r2, #10
 8003802:	e039      	b.n	8003878 <_printf_i+0xd8>
 8003804:	2973      	cmp	r1, #115	; 0x73
 8003806:	f000 809d 	beq.w	8003944 <_printf_i+0x1a4>
 800380a:	d808      	bhi.n	800381e <_printf_i+0x7e>
 800380c:	296f      	cmp	r1, #111	; 0x6f
 800380e:	d020      	beq.n	8003852 <_printf_i+0xb2>
 8003810:	2970      	cmp	r1, #112	; 0x70
 8003812:	d1dd      	bne.n	80037d0 <_printf_i+0x30>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	f043 0320 	orr.w	r3, r3, #32
 800381a:	6023      	str	r3, [r4, #0]
 800381c:	e003      	b.n	8003826 <_printf_i+0x86>
 800381e:	2975      	cmp	r1, #117	; 0x75
 8003820:	d017      	beq.n	8003852 <_printf_i+0xb2>
 8003822:	2978      	cmp	r1, #120	; 0x78
 8003824:	d1d4      	bne.n	80037d0 <_printf_i+0x30>
 8003826:	2378      	movs	r3, #120	; 0x78
 8003828:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800382c:	4864      	ldr	r0, [pc, #400]	; (80039c0 <_printf_i+0x220>)
 800382e:	e055      	b.n	80038dc <_printf_i+0x13c>
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	1d19      	adds	r1, r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6011      	str	r1, [r2, #0]
 8003838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800383c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003840:	2301      	movs	r3, #1
 8003842:	e08c      	b.n	800395e <_printf_i+0x1be>
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6011      	str	r1, [r2, #0]
 8003848:	f010 0f40 	tst.w	r0, #64	; 0x40
 800384c:	bf18      	it	ne
 800384e:	b21b      	sxthne	r3, r3
 8003850:	e7cf      	b.n	80037f2 <_printf_i+0x52>
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	6825      	ldr	r5, [r4, #0]
 8003856:	1d18      	adds	r0, r3, #4
 8003858:	6010      	str	r0, [r2, #0]
 800385a:	0628      	lsls	r0, r5, #24
 800385c:	d501      	bpl.n	8003862 <_printf_i+0xc2>
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	e002      	b.n	8003868 <_printf_i+0xc8>
 8003862:	0668      	lsls	r0, r5, #25
 8003864:	d5fb      	bpl.n	800385e <_printf_i+0xbe>
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	4854      	ldr	r0, [pc, #336]	; (80039bc <_printf_i+0x21c>)
 800386a:	296f      	cmp	r1, #111	; 0x6f
 800386c:	bf14      	ite	ne
 800386e:	220a      	movne	r2, #10
 8003870:	2208      	moveq	r2, #8
 8003872:	2100      	movs	r1, #0
 8003874:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003878:	6865      	ldr	r5, [r4, #4]
 800387a:	60a5      	str	r5, [r4, #8]
 800387c:	2d00      	cmp	r5, #0
 800387e:	f2c0 8095 	blt.w	80039ac <_printf_i+0x20c>
 8003882:	6821      	ldr	r1, [r4, #0]
 8003884:	f021 0104 	bic.w	r1, r1, #4
 8003888:	6021      	str	r1, [r4, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d13d      	bne.n	800390a <_printf_i+0x16a>
 800388e:	2d00      	cmp	r5, #0
 8003890:	f040 808e 	bne.w	80039b0 <_printf_i+0x210>
 8003894:	4665      	mov	r5, ip
 8003896:	2a08      	cmp	r2, #8
 8003898:	d10b      	bne.n	80038b2 <_printf_i+0x112>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	07db      	lsls	r3, r3, #31
 800389e:	d508      	bpl.n	80038b2 <_printf_i+0x112>
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	6862      	ldr	r2, [r4, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	bfde      	ittt	le
 80038a8:	2330      	movle	r3, #48	; 0x30
 80038aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038b2:	ebac 0305 	sub.w	r3, ip, r5
 80038b6:	6123      	str	r3, [r4, #16]
 80038b8:	f8cd 8000 	str.w	r8, [sp]
 80038bc:	463b      	mov	r3, r7
 80038be:	aa03      	add	r2, sp, #12
 80038c0:	4621      	mov	r1, r4
 80038c2:	4630      	mov	r0, r6
 80038c4:	f7ff fef6 	bl	80036b4 <_printf_common>
 80038c8:	3001      	adds	r0, #1
 80038ca:	d14d      	bne.n	8003968 <_printf_i+0x1c8>
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	b005      	add	sp, #20
 80038d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038d6:	4839      	ldr	r0, [pc, #228]	; (80039bc <_printf_i+0x21c>)
 80038d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038dc:	6813      	ldr	r3, [r2, #0]
 80038de:	6821      	ldr	r1, [r4, #0]
 80038e0:	1d1d      	adds	r5, r3, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6015      	str	r5, [r2, #0]
 80038e6:	060a      	lsls	r2, r1, #24
 80038e8:	d50b      	bpl.n	8003902 <_printf_i+0x162>
 80038ea:	07ca      	lsls	r2, r1, #31
 80038ec:	bf44      	itt	mi
 80038ee:	f041 0120 	orrmi.w	r1, r1, #32
 80038f2:	6021      	strmi	r1, [r4, #0]
 80038f4:	b91b      	cbnz	r3, 80038fe <_printf_i+0x15e>
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	f022 0220 	bic.w	r2, r2, #32
 80038fc:	6022      	str	r2, [r4, #0]
 80038fe:	2210      	movs	r2, #16
 8003900:	e7b7      	b.n	8003872 <_printf_i+0xd2>
 8003902:	064d      	lsls	r5, r1, #25
 8003904:	bf48      	it	mi
 8003906:	b29b      	uxthmi	r3, r3
 8003908:	e7ef      	b.n	80038ea <_printf_i+0x14a>
 800390a:	4665      	mov	r5, ip
 800390c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003910:	fb02 3311 	mls	r3, r2, r1, r3
 8003914:	5cc3      	ldrb	r3, [r0, r3]
 8003916:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800391a:	460b      	mov	r3, r1
 800391c:	2900      	cmp	r1, #0
 800391e:	d1f5      	bne.n	800390c <_printf_i+0x16c>
 8003920:	e7b9      	b.n	8003896 <_printf_i+0xf6>
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	6825      	ldr	r5, [r4, #0]
 8003926:	6961      	ldr	r1, [r4, #20]
 8003928:	1d18      	adds	r0, r3, #4
 800392a:	6010      	str	r0, [r2, #0]
 800392c:	0628      	lsls	r0, r5, #24
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	d501      	bpl.n	8003936 <_printf_i+0x196>
 8003932:	6019      	str	r1, [r3, #0]
 8003934:	e002      	b.n	800393c <_printf_i+0x19c>
 8003936:	066a      	lsls	r2, r5, #25
 8003938:	d5fb      	bpl.n	8003932 <_printf_i+0x192>
 800393a:	8019      	strh	r1, [r3, #0]
 800393c:	2300      	movs	r3, #0
 800393e:	6123      	str	r3, [r4, #16]
 8003940:	4665      	mov	r5, ip
 8003942:	e7b9      	b.n	80038b8 <_printf_i+0x118>
 8003944:	6813      	ldr	r3, [r2, #0]
 8003946:	1d19      	adds	r1, r3, #4
 8003948:	6011      	str	r1, [r2, #0]
 800394a:	681d      	ldr	r5, [r3, #0]
 800394c:	6862      	ldr	r2, [r4, #4]
 800394e:	2100      	movs	r1, #0
 8003950:	4628      	mov	r0, r5
 8003952:	f7fc fc65 	bl	8000220 <memchr>
 8003956:	b108      	cbz	r0, 800395c <_printf_i+0x1bc>
 8003958:	1b40      	subs	r0, r0, r5
 800395a:	6060      	str	r0, [r4, #4]
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	6123      	str	r3, [r4, #16]
 8003960:	2300      	movs	r3, #0
 8003962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003966:	e7a7      	b.n	80038b8 <_printf_i+0x118>
 8003968:	6923      	ldr	r3, [r4, #16]
 800396a:	462a      	mov	r2, r5
 800396c:	4639      	mov	r1, r7
 800396e:	4630      	mov	r0, r6
 8003970:	47c0      	blx	r8
 8003972:	3001      	adds	r0, #1
 8003974:	d0aa      	beq.n	80038cc <_printf_i+0x12c>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	079b      	lsls	r3, r3, #30
 800397a:	d413      	bmi.n	80039a4 <_printf_i+0x204>
 800397c:	68e0      	ldr	r0, [r4, #12]
 800397e:	9b03      	ldr	r3, [sp, #12]
 8003980:	4298      	cmp	r0, r3
 8003982:	bfb8      	it	lt
 8003984:	4618      	movlt	r0, r3
 8003986:	e7a3      	b.n	80038d0 <_printf_i+0x130>
 8003988:	2301      	movs	r3, #1
 800398a:	464a      	mov	r2, r9
 800398c:	4639      	mov	r1, r7
 800398e:	4630      	mov	r0, r6
 8003990:	47c0      	blx	r8
 8003992:	3001      	adds	r0, #1
 8003994:	d09a      	beq.n	80038cc <_printf_i+0x12c>
 8003996:	3501      	adds	r5, #1
 8003998:	68e3      	ldr	r3, [r4, #12]
 800399a:	9a03      	ldr	r2, [sp, #12]
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	42ab      	cmp	r3, r5
 80039a0:	dcf2      	bgt.n	8003988 <_printf_i+0x1e8>
 80039a2:	e7eb      	b.n	800397c <_printf_i+0x1dc>
 80039a4:	2500      	movs	r5, #0
 80039a6:	f104 0919 	add.w	r9, r4, #25
 80039aa:	e7f5      	b.n	8003998 <_printf_i+0x1f8>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ac      	bne.n	800390a <_printf_i+0x16a>
 80039b0:	7803      	ldrb	r3, [r0, #0]
 80039b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ba:	e76c      	b.n	8003896 <_printf_i+0xf6>
 80039bc:	08003ca9 	.word	0x08003ca9
 80039c0:	08003cba 	.word	0x08003cba

080039c4 <memcpy>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	1e43      	subs	r3, r0, #1
 80039c8:	440a      	add	r2, r1
 80039ca:	4291      	cmp	r1, r2
 80039cc:	d100      	bne.n	80039d0 <memcpy+0xc>
 80039ce:	bd10      	pop	{r4, pc}
 80039d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039d8:	e7f7      	b.n	80039ca <memcpy+0x6>

080039da <memmove>:
 80039da:	4288      	cmp	r0, r1
 80039dc:	b510      	push	{r4, lr}
 80039de:	eb01 0302 	add.w	r3, r1, r2
 80039e2:	d807      	bhi.n	80039f4 <memmove+0x1a>
 80039e4:	1e42      	subs	r2, r0, #1
 80039e6:	4299      	cmp	r1, r3
 80039e8:	d00a      	beq.n	8003a00 <memmove+0x26>
 80039ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80039f2:	e7f8      	b.n	80039e6 <memmove+0xc>
 80039f4:	4283      	cmp	r3, r0
 80039f6:	d9f5      	bls.n	80039e4 <memmove+0xa>
 80039f8:	1881      	adds	r1, r0, r2
 80039fa:	1ad2      	subs	r2, r2, r3
 80039fc:	42d3      	cmn	r3, r2
 80039fe:	d100      	bne.n	8003a02 <memmove+0x28>
 8003a00:	bd10      	pop	{r4, pc}
 8003a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a06:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a0a:	e7f7      	b.n	80039fc <memmove+0x22>

08003a0c <_free_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4605      	mov	r5, r0
 8003a10:	2900      	cmp	r1, #0
 8003a12:	d045      	beq.n	8003aa0 <_free_r+0x94>
 8003a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a18:	1f0c      	subs	r4, r1, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bfb8      	it	lt
 8003a1e:	18e4      	addlt	r4, r4, r3
 8003a20:	f000 f8d2 	bl	8003bc8 <__malloc_lock>
 8003a24:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <_free_r+0x98>)
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	4610      	mov	r0, r2
 8003a2a:	b933      	cbnz	r3, 8003a3a <_free_r+0x2e>
 8003a2c:	6063      	str	r3, [r4, #4]
 8003a2e:	6014      	str	r4, [r2, #0]
 8003a30:	4628      	mov	r0, r5
 8003a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a36:	f000 b8c8 	b.w	8003bca <__malloc_unlock>
 8003a3a:	42a3      	cmp	r3, r4
 8003a3c:	d90c      	bls.n	8003a58 <_free_r+0x4c>
 8003a3e:	6821      	ldr	r1, [r4, #0]
 8003a40:	1862      	adds	r2, r4, r1
 8003a42:	4293      	cmp	r3, r2
 8003a44:	bf04      	itt	eq
 8003a46:	681a      	ldreq	r2, [r3, #0]
 8003a48:	685b      	ldreq	r3, [r3, #4]
 8003a4a:	6063      	str	r3, [r4, #4]
 8003a4c:	bf04      	itt	eq
 8003a4e:	1852      	addeq	r2, r2, r1
 8003a50:	6022      	streq	r2, [r4, #0]
 8003a52:	6004      	str	r4, [r0, #0]
 8003a54:	e7ec      	b.n	8003a30 <_free_r+0x24>
 8003a56:	4613      	mov	r3, r2
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	b10a      	cbz	r2, 8003a60 <_free_r+0x54>
 8003a5c:	42a2      	cmp	r2, r4
 8003a5e:	d9fa      	bls.n	8003a56 <_free_r+0x4a>
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	1858      	adds	r0, r3, r1
 8003a64:	42a0      	cmp	r0, r4
 8003a66:	d10b      	bne.n	8003a80 <_free_r+0x74>
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	4401      	add	r1, r0
 8003a6c:	1858      	adds	r0, r3, r1
 8003a6e:	4282      	cmp	r2, r0
 8003a70:	6019      	str	r1, [r3, #0]
 8003a72:	d1dd      	bne.n	8003a30 <_free_r+0x24>
 8003a74:	6810      	ldr	r0, [r2, #0]
 8003a76:	6852      	ldr	r2, [r2, #4]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	4401      	add	r1, r0
 8003a7c:	6019      	str	r1, [r3, #0]
 8003a7e:	e7d7      	b.n	8003a30 <_free_r+0x24>
 8003a80:	d902      	bls.n	8003a88 <_free_r+0x7c>
 8003a82:	230c      	movs	r3, #12
 8003a84:	602b      	str	r3, [r5, #0]
 8003a86:	e7d3      	b.n	8003a30 <_free_r+0x24>
 8003a88:	6820      	ldr	r0, [r4, #0]
 8003a8a:	1821      	adds	r1, r4, r0
 8003a8c:	428a      	cmp	r2, r1
 8003a8e:	bf04      	itt	eq
 8003a90:	6811      	ldreq	r1, [r2, #0]
 8003a92:	6852      	ldreq	r2, [r2, #4]
 8003a94:	6062      	str	r2, [r4, #4]
 8003a96:	bf04      	itt	eq
 8003a98:	1809      	addeq	r1, r1, r0
 8003a9a:	6021      	streq	r1, [r4, #0]
 8003a9c:	605c      	str	r4, [r3, #4]
 8003a9e:	e7c7      	b.n	8003a30 <_free_r+0x24>
 8003aa0:	bd38      	pop	{r3, r4, r5, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000090 	.word	0x20000090

08003aa8 <_malloc_r>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	1ccd      	adds	r5, r1, #3
 8003aac:	f025 0503 	bic.w	r5, r5, #3
 8003ab0:	3508      	adds	r5, #8
 8003ab2:	2d0c      	cmp	r5, #12
 8003ab4:	bf38      	it	cc
 8003ab6:	250c      	movcc	r5, #12
 8003ab8:	2d00      	cmp	r5, #0
 8003aba:	4606      	mov	r6, r0
 8003abc:	db01      	blt.n	8003ac2 <_malloc_r+0x1a>
 8003abe:	42a9      	cmp	r1, r5
 8003ac0:	d903      	bls.n	8003aca <_malloc_r+0x22>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	f000 f87d 	bl	8003bc8 <__malloc_lock>
 8003ace:	4a21      	ldr	r2, [pc, #132]	; (8003b54 <_malloc_r+0xac>)
 8003ad0:	6814      	ldr	r4, [r2, #0]
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	b991      	cbnz	r1, 8003afc <_malloc_r+0x54>
 8003ad6:	4c20      	ldr	r4, [pc, #128]	; (8003b58 <_malloc_r+0xb0>)
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	b91b      	cbnz	r3, 8003ae4 <_malloc_r+0x3c>
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 f863 	bl	8003ba8 <_sbrk_r>
 8003ae2:	6020      	str	r0, [r4, #0]
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f000 f85e 	bl	8003ba8 <_sbrk_r>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d124      	bne.n	8003b3a <_malloc_r+0x92>
 8003af0:	230c      	movs	r3, #12
 8003af2:	6033      	str	r3, [r6, #0]
 8003af4:	4630      	mov	r0, r6
 8003af6:	f000 f868 	bl	8003bca <__malloc_unlock>
 8003afa:	e7e4      	b.n	8003ac6 <_malloc_r+0x1e>
 8003afc:	680b      	ldr	r3, [r1, #0]
 8003afe:	1b5b      	subs	r3, r3, r5
 8003b00:	d418      	bmi.n	8003b34 <_malloc_r+0x8c>
 8003b02:	2b0b      	cmp	r3, #11
 8003b04:	d90f      	bls.n	8003b26 <_malloc_r+0x7e>
 8003b06:	600b      	str	r3, [r1, #0]
 8003b08:	50cd      	str	r5, [r1, r3]
 8003b0a:	18cc      	adds	r4, r1, r3
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	f000 f85c 	bl	8003bca <__malloc_unlock>
 8003b12:	f104 000b 	add.w	r0, r4, #11
 8003b16:	1d23      	adds	r3, r4, #4
 8003b18:	f020 0007 	bic.w	r0, r0, #7
 8003b1c:	1ac3      	subs	r3, r0, r3
 8003b1e:	d0d3      	beq.n	8003ac8 <_malloc_r+0x20>
 8003b20:	425a      	negs	r2, r3
 8003b22:	50e2      	str	r2, [r4, r3]
 8003b24:	e7d0      	b.n	8003ac8 <_malloc_r+0x20>
 8003b26:	428c      	cmp	r4, r1
 8003b28:	684b      	ldr	r3, [r1, #4]
 8003b2a:	bf16      	itet	ne
 8003b2c:	6063      	strne	r3, [r4, #4]
 8003b2e:	6013      	streq	r3, [r2, #0]
 8003b30:	460c      	movne	r4, r1
 8003b32:	e7eb      	b.n	8003b0c <_malloc_r+0x64>
 8003b34:	460c      	mov	r4, r1
 8003b36:	6849      	ldr	r1, [r1, #4]
 8003b38:	e7cc      	b.n	8003ad4 <_malloc_r+0x2c>
 8003b3a:	1cc4      	adds	r4, r0, #3
 8003b3c:	f024 0403 	bic.w	r4, r4, #3
 8003b40:	42a0      	cmp	r0, r4
 8003b42:	d005      	beq.n	8003b50 <_malloc_r+0xa8>
 8003b44:	1a21      	subs	r1, r4, r0
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 f82e 	bl	8003ba8 <_sbrk_r>
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d0cf      	beq.n	8003af0 <_malloc_r+0x48>
 8003b50:	6025      	str	r5, [r4, #0]
 8003b52:	e7db      	b.n	8003b0c <_malloc_r+0x64>
 8003b54:	20000090 	.word	0x20000090
 8003b58:	20000094 	.word	0x20000094

08003b5c <_realloc_r>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	4607      	mov	r7, r0
 8003b60:	4614      	mov	r4, r2
 8003b62:	460e      	mov	r6, r1
 8003b64:	b921      	cbnz	r1, 8003b70 <_realloc_r+0x14>
 8003b66:	4611      	mov	r1, r2
 8003b68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b6c:	f7ff bf9c 	b.w	8003aa8 <_malloc_r>
 8003b70:	b922      	cbnz	r2, 8003b7c <_realloc_r+0x20>
 8003b72:	f7ff ff4b 	bl	8003a0c <_free_r>
 8003b76:	4625      	mov	r5, r4
 8003b78:	4628      	mov	r0, r5
 8003b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b7c:	f000 f826 	bl	8003bcc <_malloc_usable_size_r>
 8003b80:	42a0      	cmp	r0, r4
 8003b82:	d20f      	bcs.n	8003ba4 <_realloc_r+0x48>
 8003b84:	4621      	mov	r1, r4
 8003b86:	4638      	mov	r0, r7
 8003b88:	f7ff ff8e 	bl	8003aa8 <_malloc_r>
 8003b8c:	4605      	mov	r5, r0
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d0f2      	beq.n	8003b78 <_realloc_r+0x1c>
 8003b92:	4631      	mov	r1, r6
 8003b94:	4622      	mov	r2, r4
 8003b96:	f7ff ff15 	bl	80039c4 <memcpy>
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	f7ff ff35 	bl	8003a0c <_free_r>
 8003ba2:	e7e9      	b.n	8003b78 <_realloc_r+0x1c>
 8003ba4:	4635      	mov	r5, r6
 8003ba6:	e7e7      	b.n	8003b78 <_realloc_r+0x1c>

08003ba8 <_sbrk_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4c06      	ldr	r4, [pc, #24]	; (8003bc4 <_sbrk_r+0x1c>)
 8003bac:	2300      	movs	r3, #0
 8003bae:	4605      	mov	r5, r0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	6023      	str	r3, [r4, #0]
 8003bb4:	f7fd f842 	bl	8000c3c <_sbrk>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_sbrk_r+0x1a>
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_sbrk_r+0x1a>
 8003bc0:	602b      	str	r3, [r5, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	20000104 	.word	0x20000104

08003bc8 <__malloc_lock>:
 8003bc8:	4770      	bx	lr

08003bca <__malloc_unlock>:
 8003bca:	4770      	bx	lr

08003bcc <_malloc_usable_size_r>:
 8003bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd0:	1f18      	subs	r0, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bfbc      	itt	lt
 8003bd6:	580b      	ldrlt	r3, [r1, r0]
 8003bd8:	18c0      	addlt	r0, r0, r3
 8003bda:	4770      	bx	lr

08003bdc <_init>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr

08003be8 <_fini>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	bf00      	nop
 8003bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bee:	bc08      	pop	{r3}
 8003bf0:	469e      	mov	lr, r3
 8003bf2:	4770      	bx	lr
