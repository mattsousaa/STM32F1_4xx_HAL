
TIMER_IC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08004bb0  08004bb0  00014bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e68  08004e68  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08004e68  08004e68  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e68  08004e68  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e6c  08004e6c  00014e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08004e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001e0  08005050  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08005050  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009dc3  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001778  00000000  00000000  00029fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab0  00000000  00000000  0002b748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  0002c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142e2  00000000  00000000  0002cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075c8  00000000  00000000  00040ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f920  00000000  00000000  0004848a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7daa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000b7e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b94 	.word	0x08004b94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08004b94 	.word	0x08004b94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
volatile uint8_t count = 1;
volatile uint8_t is_capture_done = FALSE;

char usr_msg[100];

int main(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

	HAL_Init();
 8000a8c:	f000 fb14 	bl	80010b8 <HAL_Init>
	SystemClock_Config();
 8000a90:	f000 f812 	bl	8000ab8 <SystemClock_Config>
	GPIO_Init();
 8000a94:	f000 f84c 	bl	8000b30 <GPIO_Init>
	TIMER2_Init();
 8000a98:	f000 f8ac 	bl	8000bf4 <TIMER2_Init>

	MX_USART2_UART_Init();
 8000a9c:	f000 f976 	bl	8000d8c <MX_USART2_UART_Init>

	if(HAL_TIM_IC_Start_IT(&htimer2,TIM_CHANNEL_2) != HAL_OK){
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <main+0x2c>)
 8000aa4:	f001 fa36 	bl	8001f14 <HAL_TIM_IC_Start_IT>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <main+0x2a>
		Error_Handler();
 8000aae:	f000 f993 	bl	8000dd8 <Error_Handler>
	}


	while(1);
 8000ab2:	e7fe      	b.n	8000ab2 <main+0x2a>
 8000ab4:	20000278 	.word	0x20000278

08000ab8 <SystemClock_Config>:

  	return 0;
}

/* For Cortex-M3 (STM32F1xx)*/
void SystemClock_Config(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b090      	sub	sp, #64	; 0x40
 8000abc:	af00      	add	r7, sp, #0

      RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0318 	add.w	r3, r7, #24
 8000ac2:	2228      	movs	r2, #40	; 0x28
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 f81e 	bl	8002b08 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fdca 	bl	8001684 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x42>
	    Error_Handler();
 8000af6:	f000 f96f 	bl	8000dd8 <Error_Handler>
	  }

	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000afa:	230f      	movs	r3, #15
 8000afc:	607b      	str	r3, [r7, #4]
	                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0a:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b10:	617b      	str	r3, [r7, #20]

	  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK){
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 f834 	bl	8001b84 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x6e>
	    Error_Handler();
 8000b22:	f000 f959 	bl	8000dd8 <Error_Handler>
	  }

}
 8000b26:	bf00      	nop
 8000b28:	3740      	adds	r7, #64	; 0x40
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <GPIO_Init>:

void GPIO_Init(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef ledgpio;

	/* GPIOA clock enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <GPIO_Init+0x4c>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <GPIO_Init+0x4c>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <GPIO_Init+0x4c>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

    /* High Level GPIO Initialization */
	ledgpio.Pin = GPIO_PIN_5;
 8000b4e:	2320      	movs	r3, #32
 8000b50:	60bb      	str	r3, [r7, #8]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
	ledgpio.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
	ledgpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	617b      	str	r3, [r7, #20]

	/* Init GPIO */
	HAL_GPIO_Init(GPIOA, &ledgpio);
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	4619      	mov	r1, r3
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <GPIO_Init+0x50>)
 8000b66:	f000 fc23 	bl	80013b0 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <GPIO_Init+0x50>)
 8000b70:	f000 fd70 	bl	8001654 <HAL_GPIO_WritePin>
}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010800 	.word	0x40010800

08000b84 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	if(! is_capture_done){
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d123      	bne.n	8000bde <HAL_TIM_IC_CaptureCallback+0x5a>
		if(count == 1){
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x68>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10c      	bne.n	8000bba <HAL_TIM_IC_CaptureCallback+0x36>
			input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000ba8:	6013      	str	r3, [r2, #0]
			//sprintf(usr_msg, "Capture 1: %ld \r\n", input_captures[0]);
			//HAL_UART_Transmit(&huart2,(uint8_t*)usr_msg,strlen(usr_msg),HAL_MAX_DELAY);
			count++;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x68>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x68>)
 8000bb6:	701a      	strb	r2, [r3, #0]
			Frequency_Calculation();
			count = 1;
			is_capture_done = FALSE;
		}
	}
}
 8000bb8:	e011      	b.n	8000bde <HAL_TIM_IC_CaptureCallback+0x5a>
		} else if (count == 2){
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x68>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d10c      	bne.n	8000bde <HAL_TIM_IC_CaptureCallback+0x5a>
			input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_2);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000bcc:	6053      	str	r3, [r2, #4]
			Frequency_Calculation();
 8000bce:	f000 f849 	bl	8000c64 <Frequency_Calculation>
			count = 1;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x68>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
			is_capture_done = FALSE;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000204 	.word	0x20000204
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	200001fc 	.word	0x200001fc

08000bf4 <TIMER2_Init>:

void TIMER2_Init(void){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0

	TIM_IC_InitTypeDef sConfigIC = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]

	htimer2.Instance = TIM2;
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <TIMER2_Init+0x6c>)
 8000c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0c:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <TIMER2_Init+0x6c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
	htimer2.Init.Period = 0xFFFF;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <TIMER2_Init+0x6c>)
 8000c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c1a:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 1;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <TIMER2_Init+0x6c>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_IC_Init(&htimer2) != HAL_OK){
 8000c22:	480f      	ldr	r0, [pc, #60]	; (8000c60 <TIMER2_Init+0x6c>)
 8000c24:	f001 f94a 	bl	8001ebc <HAL_TIM_IC_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <TIMER2_Init+0x3e>
		Error_Handler();
 8000c2e:	f000 f8d3 	bl	8000dd8 <Error_Handler>
	}

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c36:	2301      	movs	r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]

	if(HAL_TIM_IC_ConfigChannel(&htimer2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK){
 8000c42:	463b      	mov	r3, r7
 8000c44:	2204      	movs	r2, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <TIMER2_Init+0x6c>)
 8000c4a:	f001 fad3 	bl	80021f4 <HAL_TIM_IC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <TIMER2_Init+0x64>
	    Error_Handler();
 8000c54:	f000 f8c0 	bl	8000dd8 <Error_Handler>
	}

}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000278 	.word	0x20000278

08000c64 <Frequency_Calculation>:

void Frequency_Calculation(void){
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b08b      	sub	sp, #44	; 0x2c
 8000c68:	af00      	add	r7, sp, #0

	uint32_t capture_difference = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
	double timer2_cnt_freq = 0;
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	f04f 0400 	mov.w	r4, #0
 8000c76:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double timer2_cnt_res = 0;
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	f04f 0400 	mov.w	r4, #0
 8000c82:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double user_signal_time_period = 0;
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	f04f 0400 	mov.w	r4, #0
 8000c8e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double user_signal_freq = 0;
 8000c92:	f04f 0300 	mov.w	r3, #0
 8000c96:	f04f 0400 	mov.w	r4, #0
 8000c9a:	e9c7 3400 	strd	r3, r4, [r7]

	if(input_captures[1] > input_captures[0])
 8000c9e:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <Frequency_Calculation+0x110>)
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <Frequency_Calculation+0x110>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d906      	bls.n	8000cb8 <Frequency_Calculation+0x54>
		capture_difference = input_captures[1] - input_captures[0];
 8000caa:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <Frequency_Calculation+0x110>)
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <Frequency_Calculation+0x110>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb6:	e008      	b.n	8000cca <Frequency_Calculation+0x66>
	else
		capture_difference = (0XFFFF - input_captures[0]) + input_captures[1];
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <Frequency_Calculation+0x110>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <Frequency_Calculation+0x110>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000cc6:	33ff      	adds	r3, #255	; 0xff
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24

	timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2) / (htimer2.Init.Prescaler + 1);
 8000cca:	f001 f8b1 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	005a      	lsls	r2, r3, #1
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <Frequency_Calculation+0x114>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fb81 	bl	80003e4 <__aeabi_ui2d>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460c      	mov	r4, r1
 8000ce6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	timer2_cnt_res = 1/timer2_cnt_freq;
 8000cea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	4922      	ldr	r1, [pc, #136]	; (8000d7c <Frequency_Calculation+0x118>)
 8000cf4:	f7ff fd1a 	bl	800072c <__aeabi_ddiv>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	user_signal_time_period = capture_difference * timer2_cnt_res;
 8000d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d02:	f7ff fb6f 	bl	80003e4 <__aeabi_ui2d>
 8000d06:	4603      	mov	r3, r0
 8000d08:	460c      	mov	r4, r1
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d12:	f7ff fbe1 	bl	80004d8 <__aeabi_dmul>
 8000d16:	4603      	mov	r3, r0
 8000d18:	460c      	mov	r4, r1
 8000d1a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	user_signal_freq = 1/user_signal_time_period;
 8000d1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	4915      	ldr	r1, [pc, #84]	; (8000d7c <Frequency_Calculation+0x118>)
 8000d28:	f7ff fd00 	bl	800072c <__aeabi_ddiv>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	460c      	mov	r4, r1
 8000d30:	e9c7 3400 	strd	r3, r4, [r7]

	memset(usr_msg,0,sizeof(usr_msg));
 8000d34:	2264      	movs	r2, #100	; 0x64
 8000d36:	2100      	movs	r1, #0
 8000d38:	4811      	ldr	r0, [pc, #68]	; (8000d80 <Frequency_Calculation+0x11c>)
 8000d3a:	f001 fee5 	bl	8002b08 <memset>
	sprintf(usr_msg, "Frequency of the signal applied = %.2f Hz\r\n", user_signal_freq);
 8000d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d42:	4910      	ldr	r1, [pc, #64]	; (8000d84 <Frequency_Calculation+0x120>)
 8000d44:	480e      	ldr	r0, [pc, #56]	; (8000d80 <Frequency_Calculation+0x11c>)
 8000d46:	f002 fb37 	bl	80033b8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <Frequency_Calculation+0x11c>)
 8000d4c:	f7ff fa00 	bl	8000150 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	4909      	ldr	r1, [pc, #36]	; (8000d80 <Frequency_Calculation+0x11c>)
 8000d5a:	480b      	ldr	r0, [pc, #44]	; (8000d88 <Frequency_Calculation+0x124>)
 8000d5c:	f001 fcec 	bl	8002738 <HAL_UART_Transmit>

	input_captures[0] = 0;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <Frequency_Calculation+0x110>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
	input_captures[1] = 0;
 8000d66:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <Frequency_Calculation+0x110>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]

}
 8000d6c:	bf00      	nop
 8000d6e:	372c      	adds	r7, #44	; 0x2c
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}
 8000d74:	200001fc 	.word	0x200001fc
 8000d78:	20000278 	.word	0x20000278
 8000d7c:	3ff00000 	.word	0x3ff00000
 8000d80:	20000214 	.word	0x20000214
 8000d84:	08004bb0 	.word	0x08004bb0
 8000d88:	200002b8 	.word	0x200002b8

08000d8c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_USART2_UART_Init+0x44>)
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <MX_USART2_UART_Init+0x48>)
 8000d94:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USART2_UART_Init+0x44>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USART2_UART_Init+0x44>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_USART2_UART_Init+0x44>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USART2_UART_Init+0x44>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_USART2_UART_Init+0x44>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USART2_UART_Init+0x44>)
 8000db8:	2208      	movs	r2, #8
 8000dba:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_USART2_UART_Init+0x44>)
 8000dbe:	f001 fc6e 	bl	800269e <HAL_UART_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART2_UART_Init+0x40>
		Error_Handler();
 8000dc8:	f000 f806 	bl	8000dd8 <Error_Handler>
  	}

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200002b8 	.word	0x200002b8
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <Error_Handler>:

void Error_Handler(void){
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
	while(1);
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x4>
	...

08000de0 <HAL_MspInit>:
#include "stm32f1xx_hal_tim.h"

//Uncomment the #define HAL_TIM_MODULE_ENABLED in stm32f1xx_hal_conf.h
#include "stm32f1xx_hal_conf.h"

void HAL_MspInit(void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

	__HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_MspInit+0x78>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_MspInit+0x78>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_MspInit+0x78>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

	/* DISABLE: JTAG-DP Disabled and SW-DP Disabled */
	__HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_MspInit+0x7c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <HAL_MspInit+0x7c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6053      	str	r3, [r2, #4]

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f000 fa7a 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x80>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x80>)
 8000e26:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000e2a:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f06f 000b 	mvn.w	r0, #11
 8000e34:	f000 fa79 	bl	800132a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f06f 000a 	mvn.w	r0, #10
 8000e40:	f000 fa73 	bl	800132a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	f06f 0009 	mvn.w	r0, #9
 8000e4c:	f000 fa6d 	bl	800132a <HAL_NVIC_SetPriority>

}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	//1. enable the peripheral clock for the timer2 peripheral
	__HAL_RCC_AFIO_CLK_ENABLE();
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_TIM_IC_MspInit+0x80>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <HAL_TIM_IC_MspInit+0x80>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_TIM_IC_MspInit+0x80>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_TIM_IC_MspInit+0x80>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <HAL_TIM_IC_MspInit+0x80>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	61d3      	str	r3, [r2, #28]
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_TIM_IC_MspInit+0x80>)
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_TIM_IC_MspInit+0x80>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <HAL_TIM_IC_MspInit+0x80>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_TIM_IC_MspInit+0x80>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    //2. Configure a gpio to behave as timer2 channel 1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <HAL_TIM_IC_MspInit+0x84>)
 8000ec8:	f000 fa72 	bl	80013b0 <HAL_GPIO_Init>

    //3. nvic settings
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	210f      	movs	r1, #15
 8000ed0:	201c      	movs	r0, #28
 8000ed2:	f000 fa2a 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed6:	201c      	movs	r0, #28
 8000ed8:	f000 fa43 	bl	8001362 <HAL_NVIC_EnableIRQ>

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010800 	.word	0x40010800

08000eec <HAL_UART_MspInit>:
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA and AFIO peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_UART_MspInit+0x94>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <HAL_UART_MspInit+0x94>)
 8000efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efe:	61d3      	str	r3, [r2, #28]
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_UART_MspInit+0x94>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_UART_MspInit+0x94>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <HAL_UART_MspInit+0x94>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_UART_MspInit+0x94>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_AFIO_CLK_ENABLE();
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_UART_MspInit+0x94>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <HAL_UART_MspInit+0x94>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_UART_MspInit+0x94>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
	gpio_uart.Pull = GPIO_PULLUP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	623b      	str	r3, [r7, #32]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4619      	mov	r1, r3
 8000f52:	480c      	ldr	r0, [pc, #48]	; (8000f84 <HAL_UART_MspInit+0x98>)
 8000f54:	f000 fa2c 	bl	80013b0 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	61bb      	str	r3, [r7, #24]
	//gpio_uart.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	4619      	mov	r1, r3
 8000f62:	4808      	ldr	r0, [pc, #32]	; (8000f84 <HAL_UART_MspInit+0x98>)
 8000f64:	f000 fa24 	bl	80013b0 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f68:	2026      	movs	r0, #38	; 0x26
 8000f6a:	f000 f9fa 	bl	8001362 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	210f      	movs	r1, #15
 8000f72:	2026      	movs	r0, #38	; 0x26
 8000f74:	f000 f9d9 	bl	800132a <HAL_NVIC_SetPriority>

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010800 	.word	0x40010800

08000f88 <SysTick_Handler>:
#include "main.h"
#include "stm32f1xx_it.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000f8c:	f000 f8da 	bl	8001144 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000f90:	f000 fa01 	bl	8001396 <HAL_SYSTICK_IRQHandler>

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&htimer2);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM2_IRQHandler+0x10>)
 8000f9e:	f001 f821 	bl	8001fe4 <HAL_TIM_IRQHandler>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000278 	.word	0x20000278

08000fac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x50>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x16>
		heap_end = &end;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <_sbrk+0x50>)
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <_sbrk+0x54>)
 8000fc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <_sbrk+0x50>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <_sbrk+0x50>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	466a      	mov	r2, sp
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d907      	bls.n	8000fe6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fd6:	f001 fd6d 	bl	8002ab4 <__errno>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	230c      	movs	r3, #12
 8000fde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <_sbrk+0x50>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <_sbrk+0x50>)
 8000ff0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000208 	.word	0x20000208
 8001000:	20000300 	.word	0x20000300

08001004 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <SystemInit+0x5c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <SystemInit+0x5c>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <SystemInit+0x5c>)
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4911      	ldr	r1, [pc, #68]	; (8001060 <SystemInit+0x5c>)
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <SystemInit+0x60>)
 800101c:	4013      	ands	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <SystemInit+0x5c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <SystemInit+0x5c>)
 8001026:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800102a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <SystemInit+0x5c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <SystemInit+0x5c>)
 8001036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <SystemInit+0x5c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <SystemInit+0x5c>)
 8001042:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001046:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SystemInit+0x5c>)
 800104a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800104e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SystemInit+0x64>)
 8001052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001056:	609a      	str	r2, [r3, #8]
#endif 
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	f8ff0000 	.word	0xf8ff0000
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800106c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800106e:	e003      	b.n	8001078 <LoopCopyDataInit>

08001070 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001072:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001074:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001076:	3104      	adds	r1, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800107c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001080:	d3f6      	bcc.n	8001070 <CopyDataInit>
  ldr r2, =_sbss
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001084:	e002      	b.n	800108c <LoopFillZerobss>

08001086 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001088:	f842 3b04 	str.w	r3, [r2], #4

0800108c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800108e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001090:	d3f9      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001092:	f7ff ffb7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f001 fd13 	bl	8002ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109a:	f7ff fcf5 	bl	8000a88 <main>
  bx lr
 800109e:	4770      	bx	lr
  ldr r3, =_sidata
 80010a0:	08004e70 	.word	0x08004e70
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010a8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80010ac:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80010b0:	20000300 	.word	0x20000300

080010b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_2_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x28>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x28>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f923 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fe84 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f93b 	bl	800137e <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f903 	bl	800132a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000004 	.word	0x20000004
 800113c:	2000000c 	.word	0x2000000c
 8001140:	20000008 	.word	0x20000008

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_IncTick+0x1c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x20>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a03      	ldr	r2, [pc, #12]	; (8001164 <HAL_IncTick+0x20>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	2000000c 	.word	0x2000000c
 8001164:	200002f8 	.word	0x200002f8

08001168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <HAL_GetTick+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	200002f8 	.word	0x200002f8

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4906      	ldr	r1, [pc, #24]	; (8001214 <__NVIC_EnableIRQ+0x34>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff90 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff2d 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff42 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff90 	bl	800126c <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5f 	bl	8001218 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff35 	bl	80011e0 <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa2 	bl	80012d0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800139a:	f000 f802 	bl	80013a2 <HAL_SYSTICK_Callback>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b08b      	sub	sp, #44	; 0x2c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e121      	b.n	8001608 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c4:	2201      	movs	r2, #1
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f040 8110 	bne.w	8001602 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d034      	beq.n	8001454 <HAL_GPIO_Init+0xa4>
 80013ea:	2b12      	cmp	r3, #18
 80013ec:	d80d      	bhi.n	800140a <HAL_GPIO_Init+0x5a>
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d02b      	beq.n	800144a <HAL_GPIO_Init+0x9a>
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d804      	bhi.n	8001400 <HAL_GPIO_Init+0x50>
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d031      	beq.n	800145e <HAL_GPIO_Init+0xae>
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d01c      	beq.n	8001438 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fe:	e048      	b.n	8001492 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001400:	2b03      	cmp	r3, #3
 8001402:	d043      	beq.n	800148c <HAL_GPIO_Init+0xdc>
 8001404:	2b11      	cmp	r3, #17
 8001406:	d01b      	beq.n	8001440 <HAL_GPIO_Init+0x90>
          break;
 8001408:	e043      	b.n	8001492 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800140a:	4a86      	ldr	r2, [pc, #536]	; (8001624 <HAL_GPIO_Init+0x274>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d026      	beq.n	800145e <HAL_GPIO_Init+0xae>
 8001410:	4a84      	ldr	r2, [pc, #528]	; (8001624 <HAL_GPIO_Init+0x274>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d806      	bhi.n	8001424 <HAL_GPIO_Init+0x74>
 8001416:	4a84      	ldr	r2, [pc, #528]	; (8001628 <HAL_GPIO_Init+0x278>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d020      	beq.n	800145e <HAL_GPIO_Init+0xae>
 800141c:	4a83      	ldr	r2, [pc, #524]	; (800162c <HAL_GPIO_Init+0x27c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01d      	beq.n	800145e <HAL_GPIO_Init+0xae>
          break;
 8001422:	e036      	b.n	8001492 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001424:	4a82      	ldr	r2, [pc, #520]	; (8001630 <HAL_GPIO_Init+0x280>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0xae>
 800142a:	4a82      	ldr	r2, [pc, #520]	; (8001634 <HAL_GPIO_Init+0x284>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d016      	beq.n	800145e <HAL_GPIO_Init+0xae>
 8001430:	4a81      	ldr	r2, [pc, #516]	; (8001638 <HAL_GPIO_Init+0x288>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0xae>
          break;
 8001436:	e02c      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e028      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	3304      	adds	r3, #4
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e023      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	3308      	adds	r3, #8
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e01e      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	330c      	adds	r3, #12
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e019      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001466:	2304      	movs	r3, #4
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e012      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	611a      	str	r2, [r3, #16]
          break;
 800147e:	e008      	b.n	8001492 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	615a      	str	r2, [r3, #20]
          break;
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2bff      	cmp	r3, #255	; 0xff
 8001496:	d801      	bhi.n	800149c <HAL_GPIO_Init+0xec>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	e001      	b.n	80014a0 <HAL_GPIO_Init+0xf0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2bff      	cmp	r3, #255	; 0xff
 80014a6:	d802      	bhi.n	80014ae <HAL_GPIO_Init+0xfe>
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x104>
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3b08      	subs	r3, #8
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	210f      	movs	r1, #15
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	401a      	ands	r2, r3
 80014c6:	6a39      	ldr	r1, [r7, #32]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	431a      	orrs	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8090 	beq.w	8001602 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_GPIO_Init+0x28c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a55      	ldr	r2, [pc, #340]	; (800163c <HAL_GPIO_Init+0x28c>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6193      	str	r3, [r2, #24]
 80014ee:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_GPIO_Init+0x28c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014fa:	4a51      	ldr	r2, [pc, #324]	; (8001640 <HAL_GPIO_Init+0x290>)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a48      	ldr	r2, [pc, #288]	; (8001644 <HAL_GPIO_Init+0x294>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d00d      	beq.n	8001542 <HAL_GPIO_Init+0x192>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a47      	ldr	r2, [pc, #284]	; (8001648 <HAL_GPIO_Init+0x298>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d007      	beq.n	800153e <HAL_GPIO_Init+0x18e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a46      	ldr	r2, [pc, #280]	; (800164c <HAL_GPIO_Init+0x29c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_GPIO_Init+0x18a>
 8001536:	2302      	movs	r3, #2
 8001538:	e004      	b.n	8001544 <HAL_GPIO_Init+0x194>
 800153a:	2303      	movs	r3, #3
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x194>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_GPIO_Init+0x194>
 8001542:	2300      	movs	r3, #0
 8001544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001546:	f002 0203 	and.w	r2, r2, #3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4093      	lsls	r3, r2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001554:	493a      	ldr	r1, [pc, #232]	; (8001640 <HAL_GPIO_Init+0x290>)
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800156e:	4b38      	ldr	r3, [pc, #224]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4937      	ldr	r1, [pc, #220]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
 800157a:	e006      	b.n	800158a <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	43db      	mvns	r3, r3
 8001584:	4932      	ldr	r1, [pc, #200]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 8001586:	4013      	ands	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d006      	beq.n	80015a4 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001596:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	492d      	ldr	r1, [pc, #180]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
 80015a2:	e006      	b.n	80015b2 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4928      	ldr	r1, [pc, #160]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	4923      	ldr	r1, [pc, #140]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	608b      	str	r3, [r1, #8]
 80015ca:	e006      	b.n	80015da <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	491e      	ldr	r1, [pc, #120]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	4919      	ldr	r1, [pc, #100]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60cb      	str	r3, [r1, #12]
 80015f2:	e006      	b.n	8001602 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4914      	ldr	r1, [pc, #80]	; (8001650 <HAL_GPIO_Init+0x2a0>)
 80015fe:	4013      	ands	r3, r2
 8001600:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	3301      	adds	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	f47f aed6 	bne.w	80013c4 <HAL_GPIO_Init+0x14>
  }
}
 8001618:	bf00      	nop
 800161a:	372c      	adds	r7, #44	; 0x2c
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	10210000 	.word	0x10210000
 8001628:	10110000 	.word	0x10110000
 800162c:	10120000 	.word	0x10120000
 8001630:	10310000 	.word	0x10310000
 8001634:	10320000 	.word	0x10320000
 8001638:	10220000 	.word	0x10220000
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	40010800 	.word	0x40010800
 8001648:	40010c00 	.word	0x40010c00
 800164c:	40011000 	.word	0x40011000
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
 8001660:	4613      	mov	r3, r2
 8001662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001664:	787b      	ldrb	r3, [r7, #1]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001670:	e003      	b.n	800167a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	041a      	lsls	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	611a      	str	r2, [r3, #16]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e26c      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d112      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d10b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d168      	bne.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e246      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x76>
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xbc>
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fd02 	bl	8001168 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fcfe 	bl	8001168 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1fa      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xe4>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fcee 	bl	8001168 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fcea 	bl	8001168 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1e6      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x10c>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1ba      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fca3 	bl	8001168 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fc9f 	bl	8001168 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e19b      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fc82 	bl	8001168 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fc7e 	bl	8001168 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e17a      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03a      	beq.n	8001908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fc62 	bl	8001168 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc5e 	bl	8001168 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e15a      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 fada 	bl	8001e80 <RCC_Delay>
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fc48 	bl	8001168 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fc44 	bl	8001168 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d908      	bls.n	80018fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e140      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b9e      	ldr	r3, [pc, #632]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e9      	bne.n	80018dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a6 	beq.w	8001a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b97      	ldr	r3, [pc, #604]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b94      	ldr	r3, [pc, #592]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a93      	ldr	r2, [pc, #588]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b8e      	ldr	r3, [pc, #568]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a8a      	ldr	r2, [pc, #552]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7ff fc05 	bl	8001168 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7ff fc01 	bl	8001168 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0fd      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 8001988:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02d      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x334>
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a75      	ldr	r2, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a72      	ldr	r2, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x356>
 80019c0:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a6c      	ldr	r2, [pc, #432]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019da:	4b67      	ldr	r3, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a66      	ldr	r2, [pc, #408]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a63      	ldr	r2, [pc, #396]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fbb5 	bl	8001168 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff fbb1 	bl	8001168 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0ab      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCC_OscConfig+0x37e>
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb9f 	bl	8001168 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fb9b 	bl	8001168 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e095      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8081 	beq.w	8001b6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d061      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d146      	bne.n	8001b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fb6f 	bl	8001168 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff fb6b 	bl	8001168 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e067      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab6:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	492d      	ldr	r1, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a19      	ldr	r1, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb3f 	bl	8001168 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fb3b 	bl	8001168 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e037      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
 8001b0c:	e02f      	b.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fb28 	bl	8001168 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff fb24 	bl	8001168 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e020      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x498>
 8001b3a:	e018      	b.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420060 	.word	0x42420060

08001b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d0      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d910      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4965      	ldr	r1, [pc, #404]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b8      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	494d      	ldr	r1, [pc, #308]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d040      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d115      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e073      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06b      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4936      	ldr	r1, [pc, #216]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c74:	f7ff fa78 	bl	8001168 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7ff fa74 	bl	8001168 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e053      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d210      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4922      	ldr	r1, [pc, #136]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e032      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4916      	ldr	r1, [pc, #88]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d12:	f000 f821 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d16:	4601      	mov	r1, r0
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	fa21 f303 	lsr.w	r3, r1, r3
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1cc>)
 8001d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f9d6 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08004bf0 	.word	0x08004bf0
 8001d50:	20000004 	.word	0x20000004
 8001d54:	20000008 	.word	0x20000008

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b490      	push	{r4, r7}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d60:	1d3c      	adds	r4, r7, #4
 8001d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x40>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x46>
 8001d96:	e02d      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d9a:	623b      	str	r3, [r7, #32]
      break;
 8001d9c:	e02d      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001daa:	4413      	add	r3, r2
 8001dac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001db0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c5b      	lsrs	r3, r3, #17
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dca:	4413      	add	r3, r2
 8001dcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd6:	fb02 f203 	mul.w	r2, r2, r3
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e004      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	623b      	str	r3, [r7, #32]
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df6:	623b      	str	r3, [r7, #32]
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	08004bdc 	.word	0x08004bdc
 8001e0c:	08004bec 	.word	0x08004bec
 8001e10:	40021000 	.word	0x40021000
 8001e14:	007a1200 	.word	0x007a1200
 8001e18:	003d0900 	.word	0x003d0900

08001e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20000004 	.word	0x20000004

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e34:	f7ff fff2 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e38:	4601      	mov	r1, r0
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4a03      	ldr	r2, [pc, #12]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08004c00 	.word	0x08004c00

08001e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e5c:	f7ff ffde 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e60:	4601      	mov	r1, r0
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	0adb      	lsrs	r3, r3, #11
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08004c00 	.word	0x08004c00

08001e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <RCC_Delay+0x34>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <RCC_Delay+0x38>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0a5b      	lsrs	r3, r3, #9
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e9c:	bf00      	nop
  }
  while (Delay --);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1e5a      	subs	r2, r3, #1
 8001ea2:	60fa      	str	r2, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f9      	bne.n	8001e9c <RCC_Delay+0x1c>
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	10624dd3 	.word	0x10624dd3

08001ebc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e01d      	b.n	8001f0a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe ffbe 	bl	8000e64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f000 fa3a 	bl	8002374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d841      	bhi.n	8001fa8 <HAL_TIM_IC_Start_IT+0x94>
 8001f24:	a201      	add	r2, pc, #4	; (adr r2, 8001f2c <HAL_TIM_IC_Start_IT+0x18>)
 8001f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2a:	bf00      	nop
 8001f2c:	08001f61 	.word	0x08001f61
 8001f30:	08001fa9 	.word	0x08001fa9
 8001f34:	08001fa9 	.word	0x08001fa9
 8001f38:	08001fa9 	.word	0x08001fa9
 8001f3c:	08001f73 	.word	0x08001f73
 8001f40:	08001fa9 	.word	0x08001fa9
 8001f44:	08001fa9 	.word	0x08001fa9
 8001f48:	08001fa9 	.word	0x08001fa9
 8001f4c:	08001f85 	.word	0x08001f85
 8001f50:	08001fa9 	.word	0x08001fa9
 8001f54:	08001fa9 	.word	0x08001fa9
 8001f58:	08001fa9 	.word	0x08001fa9
 8001f5c:	08001f97 	.word	0x08001f97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0202 	orr.w	r2, r2, #2
 8001f6e:	60da      	str	r2, [r3, #12]
      break;
 8001f70:	e01b      	b.n	8001faa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0204 	orr.w	r2, r2, #4
 8001f80:	60da      	str	r2, [r3, #12]
      break;
 8001f82:	e012      	b.n	8001faa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0208 	orr.w	r2, r2, #8
 8001f92:	60da      	str	r2, [r3, #12]
      break;
 8001f94:	e009      	b.n	8001faa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0210 	orr.w	r2, r2, #16
 8001fa4:	60da      	str	r2, [r3, #12]
      break;
 8001fa6:	e000      	b.n	8001faa <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8001fa8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fb3d 	bl	8002632 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d007      	beq.n	8001fda <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0202 	mvn.w	r2, #2
 8002010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fdac 	bl	8000b84 <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f985 	bl	800233e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f98b 	bl	8002350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b04      	cmp	r3, #4
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b04      	cmp	r3, #4
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0204 	mvn.w	r2, #4
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fd82 	bl	8000b84 <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f95b 	bl	800233e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f961 	bl	8002350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0208 	mvn.w	r2, #8
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2204      	movs	r2, #4
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fd58 	bl	8000b84 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f931 	bl	800233e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f937 	bl	8002350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b10      	cmp	r3, #16
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0210 	mvn.w	r2, #16
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2208      	movs	r2, #8
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fd2e 	bl	8000b84 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f907 	bl	800233e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f90d 	bl	8002350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0201 	mvn.w	r2, #1
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8e2 	bl	800232c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b80      	cmp	r3, #128	; 0x80
 8002174:	d10e      	bne.n	8002194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002180:	2b80      	cmp	r3, #128	; 0x80
 8002182:	d107      	bne.n	8002194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fa7c 	bl	800268c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d10e      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b40      	cmp	r3, #64	; 0x40
 80021ae:	d107      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8d1 	bl	8002362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d107      	bne.n	80021ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0220 	mvn.w	r2, #32
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fa47 	bl	800267a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_TIM_IC_ConfigChannel+0x1a>
 800220a:	2302      	movs	r3, #2
 800220c:	e08a      	b.n	8002324 <HAL_TIM_IC_ConfigChannel+0x130>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11b      	bne.n	800225c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f000 f8f6 	bl	8002424 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 020c 	bic.w	r2, r2, #12
 8002246:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6999      	ldr	r1, [r3, #24]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	619a      	str	r2, [r3, #24]
 800225a:	e05a      	b.n	8002312 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d11c      	bne.n	800229c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f000 f92b 	bl	80024cc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699a      	ldr	r2, [r3, #24]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002284:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6999      	ldr	r1, [r3, #24]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	021a      	lsls	r2, r3, #8
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	619a      	str	r2, [r3, #24]
 800229a:	e03a      	b.n	8002312 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d11b      	bne.n	80022da <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6819      	ldr	r1, [r3, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f000 f947 	bl	8002544 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 020c 	bic.w	r2, r2, #12
 80022c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69d9      	ldr	r1, [r3, #28]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	61da      	str	r2, [r3, #28]
 80022d8:	e01b      	b.n	8002312 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f000 f966 	bl	80025ba <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69d9      	ldr	r1, [r3, #28]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	021a      	lsls	r2, r3, #8
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a25      	ldr	r2, [pc, #148]	; (800241c <TIM_Base_SetConfig+0xa8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d007      	beq.n	800239c <TIM_Base_SetConfig+0x28>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002392:	d003      	beq.n	800239c <TIM_Base_SetConfig+0x28>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a22      	ldr	r2, [pc, #136]	; (8002420 <TIM_Base_SetConfig+0xac>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d108      	bne.n	80023ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a1a      	ldr	r2, [pc, #104]	; (800241c <TIM_Base_SetConfig+0xa8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0x52>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0x52>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <TIM_Base_SetConfig+0xac>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d108      	bne.n	80023d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <TIM_Base_SetConfig+0xa8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d103      	bne.n	800240c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	615a      	str	r2, [r3, #20]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40000400 	.word	0x40000400

08002424 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <TIM_TI1_SetConfig+0xa0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <TIM_TI1_SetConfig+0x3e>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002458:	d003      	beq.n	8002462 <TIM_TI1_SetConfig+0x3e>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <TIM_TI1_SetConfig+0xa4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <TIM_TI1_SetConfig+0x42>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <TIM_TI1_SetConfig+0x44>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e003      	b.n	8002486 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800248c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	b2db      	uxtb	r3, r3
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f023 030a 	bic.w	r3, r3, #10
 80024a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f003 030a 	and.w	r3, r3, #10
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	621a      	str	r2, [r3, #32]
}
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400

080024cc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	f023 0210 	bic.w	r2, r3, #16
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800250a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	031b      	lsls	r3, r3, #12
 8002510:	b29b      	uxth	r3, r3
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800251e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	621a      	str	r2, [r3, #32]
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f023 0303 	bic.w	r3, r3, #3
 8002570:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002580:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	b2db      	uxtb	r3, r3
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002594:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	621a      	str	r2, [r3, #32]
}
 80025b0:	bf00      	nop
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b087      	sub	sp, #28
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	031b      	lsls	r3, r3, #12
 80025fe:	b29b      	uxth	r3, r3
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800260c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	031b      	lsls	r3, r3, #12
 8002612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	621a      	str	r2, [r3, #32]
}
 8002628:	bf00      	nop
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002632:	b480      	push	{r7}
 8002634:	b087      	sub	sp, #28
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2201      	movs	r2, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a1a      	ldr	r2, [r3, #32]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	43db      	mvns	r3, r3
 8002654:	401a      	ands	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a1a      	ldr	r2, [r3, #32]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	431a      	orrs	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	621a      	str	r2, [r3, #32]
}
 8002670:	bf00      	nop
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e03f      	b.n	8002730 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7fe fc11 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2224      	movs	r2, #36	; 0x24
 80026ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f90c 	bl	8002900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002706:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002716:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b20      	cmp	r3, #32
 8002756:	f040 8083 	bne.w	8002860 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_UART_Transmit+0x2e>
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07b      	b.n	8002862 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_UART_Transmit+0x40>
 8002774:	2302      	movs	r3, #2
 8002776:	e074      	b.n	8002862 <HAL_UART_Transmit+0x12a>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2221      	movs	r2, #33	; 0x21
 800278a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800278e:	f7fe fceb 	bl	8001168 <HAL_GetTick>
 8002792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	88fa      	ldrh	r2, [r7, #6]
 8002798:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027a0:	e042      	b.n	8002828 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b8:	d122      	bne.n	8002800 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2200      	movs	r2, #0
 80027c2:	2180      	movs	r1, #128	; 0x80
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f850 	bl	800286a <UART_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e046      	b.n	8002862 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	3302      	adds	r3, #2
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	e017      	b.n	8002828 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	3301      	adds	r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	e013      	b.n	8002828 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	2180      	movs	r1, #128	; 0x80
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f82d 	bl	800286a <UART_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e023      	b.n	8002862 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	60ba      	str	r2, [r7, #8]
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1b7      	bne.n	80027a2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	2140      	movs	r1, #64	; 0x40
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f814 	bl	800286a <UART_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e00a      	b.n	8002862 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287a:	e02c      	b.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002882:	d028      	beq.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x30>
 800288a:	f7fe fc6d 	bl	8001168 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	429a      	cmp	r2, r3
 8002898:	d21d      	bcs.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e00f      	b.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4013      	ands	r3, r2
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	bf0c      	ite	eq
 80028e6:	2301      	moveq	r3, #1
 80028e8:	2300      	movne	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d0c3      	beq.n	800287c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800293a:	f023 030c 	bic.w	r3, r3, #12
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	68f9      	ldr	r1, [r7, #12]
 8002944:	430b      	orrs	r3, r1
 8002946:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a52      	ldr	r2, [pc, #328]	; (8002aac <UART_SetConfig+0x1ac>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d14e      	bne.n	8002a06 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002968:	f7ff fa76 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 800296c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009a      	lsls	r2, r3, #2
 8002978:	441a      	add	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	4a4a      	ldr	r2, [pc, #296]	; (8002ab0 <UART_SetConfig+0x1b0>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	0119      	lsls	r1, r3, #4
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	009a      	lsls	r2, r3, #2
 8002998:	441a      	add	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029a4:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <UART_SetConfig+0x1b0>)
 80029a6:	fba3 0302 	umull	r0, r3, r3, r2
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	fb00 f303 	mul.w	r3, r0, r3
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	3332      	adds	r3, #50	; 0x32
 80029b8:	4a3d      	ldr	r2, [pc, #244]	; (8002ab0 <UART_SetConfig+0x1b0>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c4:	4419      	add	r1, r3
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009a      	lsls	r2, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029dc:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <UART_SetConfig+0x1b0>)
 80029de:	fba3 0302 	umull	r0, r3, r3, r2
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2064      	movs	r0, #100	; 0x64
 80029e6:	fb00 f303 	mul.w	r3, r0, r3
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	3332      	adds	r3, #50	; 0x32
 80029f0:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <UART_SetConfig+0x1b0>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	f003 020f 	and.w	r2, r3, #15
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	440a      	add	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002a04:	e04d      	b.n	8002aa2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a06:	f7ff fa13 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002a0a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <UART_SetConfig+0x1b0>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	0119      	lsls	r1, r3, #4
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	009a      	lsls	r2, r3, #2
 8002a36:	441a      	add	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <UART_SetConfig+0x1b0>)
 8002a44:	fba3 0302 	umull	r0, r3, r3, r2
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	2064      	movs	r0, #100	; 0x64
 8002a4c:	fb00 f303 	mul.w	r3, r0, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	3332      	adds	r3, #50	; 0x32
 8002a56:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <UART_SetConfig+0x1b0>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	095b      	lsrs	r3, r3, #5
 8002a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a62:	4419      	add	r1, r3
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009a      	lsls	r2, r3, #2
 8002a6e:	441a      	add	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <UART_SetConfig+0x1b0>)
 8002a7c:	fba3 0302 	umull	r0, r3, r3, r2
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	2064      	movs	r0, #100	; 0x64
 8002a84:	fb00 f303 	mul.w	r3, r0, r3
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	3332      	adds	r3, #50	; 0x32
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <UART_SetConfig+0x1b0>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	f003 020f 	and.w	r2, r3, #15
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	51eb851f 	.word	0x51eb851f

08002ab4 <__errno>:
 8002ab4:	4b01      	ldr	r3, [pc, #4]	; (8002abc <__errno+0x8>)
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000010 	.word	0x20000010

08002ac0 <__libc_init_array>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	2500      	movs	r5, #0
 8002ac4:	4e0c      	ldr	r6, [pc, #48]	; (8002af8 <__libc_init_array+0x38>)
 8002ac6:	4c0d      	ldr	r4, [pc, #52]	; (8002afc <__libc_init_array+0x3c>)
 8002ac8:	1ba4      	subs	r4, r4, r6
 8002aca:	10a4      	asrs	r4, r4, #2
 8002acc:	42a5      	cmp	r5, r4
 8002ace:	d109      	bne.n	8002ae4 <__libc_init_array+0x24>
 8002ad0:	f002 f860 	bl	8004b94 <_init>
 8002ad4:	2500      	movs	r5, #0
 8002ad6:	4e0a      	ldr	r6, [pc, #40]	; (8002b00 <__libc_init_array+0x40>)
 8002ad8:	4c0a      	ldr	r4, [pc, #40]	; (8002b04 <__libc_init_array+0x44>)
 8002ada:	1ba4      	subs	r4, r4, r6
 8002adc:	10a4      	asrs	r4, r4, #2
 8002ade:	42a5      	cmp	r5, r4
 8002ae0:	d105      	bne.n	8002aee <__libc_init_array+0x2e>
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ae8:	4798      	blx	r3
 8002aea:	3501      	adds	r5, #1
 8002aec:	e7ee      	b.n	8002acc <__libc_init_array+0xc>
 8002aee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002af2:	4798      	blx	r3
 8002af4:	3501      	adds	r5, #1
 8002af6:	e7f2      	b.n	8002ade <__libc_init_array+0x1e>
 8002af8:	08004e68 	.word	0x08004e68
 8002afc:	08004e68 	.word	0x08004e68
 8002b00:	08004e68 	.word	0x08004e68
 8002b04:	08004e6c 	.word	0x08004e6c

08002b08 <memset>:
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4402      	add	r2, r0
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <memset+0xa>
 8002b10:	4770      	bx	lr
 8002b12:	f803 1b01 	strb.w	r1, [r3], #1
 8002b16:	e7f9      	b.n	8002b0c <memset+0x4>

08002b18 <__cvt>:
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b1e:	461e      	mov	r6, r3
 8002b20:	bfbb      	ittet	lt
 8002b22:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002b26:	461e      	movlt	r6, r3
 8002b28:	2300      	movge	r3, #0
 8002b2a:	232d      	movlt	r3, #45	; 0x2d
 8002b2c:	b088      	sub	sp, #32
 8002b2e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002b30:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002b34:	f027 0720 	bic.w	r7, r7, #32
 8002b38:	2f46      	cmp	r7, #70	; 0x46
 8002b3a:	4614      	mov	r4, r2
 8002b3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002b3e:	700b      	strb	r3, [r1, #0]
 8002b40:	d004      	beq.n	8002b4c <__cvt+0x34>
 8002b42:	2f45      	cmp	r7, #69	; 0x45
 8002b44:	d100      	bne.n	8002b48 <__cvt+0x30>
 8002b46:	3501      	adds	r5, #1
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e000      	b.n	8002b4e <__cvt+0x36>
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	aa07      	add	r2, sp, #28
 8002b50:	9204      	str	r2, [sp, #16]
 8002b52:	aa06      	add	r2, sp, #24
 8002b54:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002b58:	e9cd 3500 	strd	r3, r5, [sp]
 8002b5c:	4622      	mov	r2, r4
 8002b5e:	4633      	mov	r3, r6
 8002b60:	f000 fcda 	bl	8003518 <_dtoa_r>
 8002b64:	2f47      	cmp	r7, #71	; 0x47
 8002b66:	4680      	mov	r8, r0
 8002b68:	d102      	bne.n	8002b70 <__cvt+0x58>
 8002b6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b6c:	07db      	lsls	r3, r3, #31
 8002b6e:	d526      	bpl.n	8002bbe <__cvt+0xa6>
 8002b70:	2f46      	cmp	r7, #70	; 0x46
 8002b72:	eb08 0905 	add.w	r9, r8, r5
 8002b76:	d111      	bne.n	8002b9c <__cvt+0x84>
 8002b78:	f898 3000 	ldrb.w	r3, [r8]
 8002b7c:	2b30      	cmp	r3, #48	; 0x30
 8002b7e:	d10a      	bne.n	8002b96 <__cvt+0x7e>
 8002b80:	2200      	movs	r2, #0
 8002b82:	2300      	movs	r3, #0
 8002b84:	4620      	mov	r0, r4
 8002b86:	4631      	mov	r1, r6
 8002b88:	f7fd ff0e 	bl	80009a8 <__aeabi_dcmpeq>
 8002b8c:	b918      	cbnz	r0, 8002b96 <__cvt+0x7e>
 8002b8e:	f1c5 0501 	rsb	r5, r5, #1
 8002b92:	f8ca 5000 	str.w	r5, [sl]
 8002b96:	f8da 3000 	ldr.w	r3, [sl]
 8002b9a:	4499      	add	r9, r3
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	4631      	mov	r1, r6
 8002ba4:	f7fd ff00 	bl	80009a8 <__aeabi_dcmpeq>
 8002ba8:	b938      	cbnz	r0, 8002bba <__cvt+0xa2>
 8002baa:	2230      	movs	r2, #48	; 0x30
 8002bac:	9b07      	ldr	r3, [sp, #28]
 8002bae:	454b      	cmp	r3, r9
 8002bb0:	d205      	bcs.n	8002bbe <__cvt+0xa6>
 8002bb2:	1c59      	adds	r1, r3, #1
 8002bb4:	9107      	str	r1, [sp, #28]
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e7f8      	b.n	8002bac <__cvt+0x94>
 8002bba:	f8cd 901c 	str.w	r9, [sp, #28]
 8002bbe:	4640      	mov	r0, r8
 8002bc0:	9b07      	ldr	r3, [sp, #28]
 8002bc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002bc4:	eba3 0308 	sub.w	r3, r3, r8
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	b008      	add	sp, #32
 8002bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002bd0 <__exponent>:
 8002bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bd2:	2900      	cmp	r1, #0
 8002bd4:	bfb4      	ite	lt
 8002bd6:	232d      	movlt	r3, #45	; 0x2d
 8002bd8:	232b      	movge	r3, #43	; 0x2b
 8002bda:	4604      	mov	r4, r0
 8002bdc:	bfb8      	it	lt
 8002bde:	4249      	neglt	r1, r1
 8002be0:	2909      	cmp	r1, #9
 8002be2:	f804 2b02 	strb.w	r2, [r4], #2
 8002be6:	7043      	strb	r3, [r0, #1]
 8002be8:	dd21      	ble.n	8002c2e <__exponent+0x5e>
 8002bea:	f10d 0307 	add.w	r3, sp, #7
 8002bee:	461f      	mov	r7, r3
 8002bf0:	260a      	movs	r6, #10
 8002bf2:	fb91 f5f6 	sdiv	r5, r1, r6
 8002bf6:	fb06 1115 	mls	r1, r6, r5, r1
 8002bfa:	2d09      	cmp	r5, #9
 8002bfc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002c00:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002c04:	f103 32ff 	add.w	r2, r3, #4294967295
 8002c08:	4629      	mov	r1, r5
 8002c0a:	dc09      	bgt.n	8002c20 <__exponent+0x50>
 8002c0c:	3130      	adds	r1, #48	; 0x30
 8002c0e:	3b02      	subs	r3, #2
 8002c10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002c14:	42bb      	cmp	r3, r7
 8002c16:	4622      	mov	r2, r4
 8002c18:	d304      	bcc.n	8002c24 <__exponent+0x54>
 8002c1a:	1a10      	subs	r0, r2, r0
 8002c1c:	b003      	add	sp, #12
 8002c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c20:	4613      	mov	r3, r2
 8002c22:	e7e6      	b.n	8002bf2 <__exponent+0x22>
 8002c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c28:	f804 2b01 	strb.w	r2, [r4], #1
 8002c2c:	e7f2      	b.n	8002c14 <__exponent+0x44>
 8002c2e:	2330      	movs	r3, #48	; 0x30
 8002c30:	4419      	add	r1, r3
 8002c32:	7083      	strb	r3, [r0, #2]
 8002c34:	1d02      	adds	r2, r0, #4
 8002c36:	70c1      	strb	r1, [r0, #3]
 8002c38:	e7ef      	b.n	8002c1a <__exponent+0x4a>
	...

08002c3c <_printf_float>:
 8002c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c40:	b091      	sub	sp, #68	; 0x44
 8002c42:	460c      	mov	r4, r1
 8002c44:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002c46:	4693      	mov	fp, r2
 8002c48:	461e      	mov	r6, r3
 8002c4a:	4605      	mov	r5, r0
 8002c4c:	f001 fa18 	bl	8004080 <_localeconv_r>
 8002c50:	6803      	ldr	r3, [r0, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	9309      	str	r3, [sp, #36]	; 0x24
 8002c56:	f7fd fa7b 	bl	8000150 <strlen>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	930e      	str	r3, [sp, #56]	; 0x38
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	900a      	str	r0, [sp, #40]	; 0x28
 8002c62:	3307      	adds	r3, #7
 8002c64:	f023 0307 	bic.w	r3, r3, #7
 8002c68:	f103 0208 	add.w	r2, r3, #8
 8002c6c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002c70:	f8d4 a000 	ldr.w	sl, [r4]
 8002c74:	603a      	str	r2, [r7, #0]
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c7e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002c82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002c86:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8c:	4ba6      	ldr	r3, [pc, #664]	; (8002f28 <_printf_float+0x2ec>)
 8002c8e:	4638      	mov	r0, r7
 8002c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c92:	f7fd febb 	bl	8000a0c <__aeabi_dcmpun>
 8002c96:	bb68      	cbnz	r0, 8002cf4 <_printf_float+0xb8>
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	4ba2      	ldr	r3, [pc, #648]	; (8002f28 <_printf_float+0x2ec>)
 8002c9e:	4638      	mov	r0, r7
 8002ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ca2:	f7fd fe95 	bl	80009d0 <__aeabi_dcmple>
 8002ca6:	bb28      	cbnz	r0, 8002cf4 <_printf_float+0xb8>
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2300      	movs	r3, #0
 8002cac:	4638      	mov	r0, r7
 8002cae:	4649      	mov	r1, r9
 8002cb0:	f7fd fe84 	bl	80009bc <__aeabi_dcmplt>
 8002cb4:	b110      	cbz	r0, 8002cbc <_printf_float+0x80>
 8002cb6:	232d      	movs	r3, #45	; 0x2d
 8002cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cbc:	4f9b      	ldr	r7, [pc, #620]	; (8002f2c <_printf_float+0x2f0>)
 8002cbe:	4b9c      	ldr	r3, [pc, #624]	; (8002f30 <_printf_float+0x2f4>)
 8002cc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002cc4:	bf98      	it	ls
 8002cc6:	461f      	movls	r7, r3
 8002cc8:	2303      	movs	r3, #3
 8002cca:	f04f 0900 	mov.w	r9, #0
 8002cce:	6123      	str	r3, [r4, #16]
 8002cd0:	f02a 0304 	bic.w	r3, sl, #4
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	9600      	str	r6, [sp, #0]
 8002cd8:	465b      	mov	r3, fp
 8002cda:	aa0f      	add	r2, sp, #60	; 0x3c
 8002cdc:	4621      	mov	r1, r4
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f000 f9e2 	bl	80030a8 <_printf_common>
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	f040 8090 	bne.w	8002e0a <_printf_float+0x1ce>
 8002cea:	f04f 30ff 	mov.w	r0, #4294967295
 8002cee:	b011      	add	sp, #68	; 0x44
 8002cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf4:	463a      	mov	r2, r7
 8002cf6:	464b      	mov	r3, r9
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	f7fd fe86 	bl	8000a0c <__aeabi_dcmpun>
 8002d00:	b110      	cbz	r0, 8002d08 <_printf_float+0xcc>
 8002d02:	4f8c      	ldr	r7, [pc, #560]	; (8002f34 <_printf_float+0x2f8>)
 8002d04:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <_printf_float+0x2fc>)
 8002d06:	e7db      	b.n	8002cc0 <_printf_float+0x84>
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002d0e:	1c59      	adds	r1, r3, #1
 8002d10:	a80d      	add	r0, sp, #52	; 0x34
 8002d12:	a90e      	add	r1, sp, #56	; 0x38
 8002d14:	d140      	bne.n	8002d98 <_printf_float+0x15c>
 8002d16:	2306      	movs	r3, #6
 8002d18:	6063      	str	r3, [r4, #4]
 8002d1a:	f04f 0c00 	mov.w	ip, #0
 8002d1e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002d22:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002d26:	6863      	ldr	r3, [r4, #4]
 8002d28:	6022      	str	r2, [r4, #0]
 8002d2a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	463a      	mov	r2, r7
 8002d32:	464b      	mov	r3, r9
 8002d34:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f7ff feed 	bl	8002b18 <__cvt>
 8002d3e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002d42:	2b47      	cmp	r3, #71	; 0x47
 8002d44:	4607      	mov	r7, r0
 8002d46:	d109      	bne.n	8002d5c <_printf_float+0x120>
 8002d48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d4a:	1cd8      	adds	r0, r3, #3
 8002d4c:	db02      	blt.n	8002d54 <_printf_float+0x118>
 8002d4e:	6862      	ldr	r2, [r4, #4]
 8002d50:	4293      	cmp	r3, r2
 8002d52:	dd47      	ble.n	8002de4 <_printf_float+0x1a8>
 8002d54:	f1a8 0802 	sub.w	r8, r8, #2
 8002d58:	fa5f f888 	uxtb.w	r8, r8
 8002d5c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002d60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d62:	d824      	bhi.n	8002dae <_printf_float+0x172>
 8002d64:	3901      	subs	r1, #1
 8002d66:	4642      	mov	r2, r8
 8002d68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d6c:	910d      	str	r1, [sp, #52]	; 0x34
 8002d6e:	f7ff ff2f 	bl	8002bd0 <__exponent>
 8002d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d74:	4681      	mov	r9, r0
 8002d76:	1813      	adds	r3, r2, r0
 8002d78:	2a01      	cmp	r2, #1
 8002d7a:	6123      	str	r3, [r4, #16]
 8002d7c:	dc02      	bgt.n	8002d84 <_printf_float+0x148>
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	07d1      	lsls	r1, r2, #31
 8002d82:	d501      	bpl.n	8002d88 <_printf_float+0x14c>
 8002d84:	3301      	adds	r3, #1
 8002d86:	6123      	str	r3, [r4, #16]
 8002d88:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0a2      	beq.n	8002cd6 <_printf_float+0x9a>
 8002d90:	232d      	movs	r3, #45	; 0x2d
 8002d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d96:	e79e      	b.n	8002cd6 <_printf_float+0x9a>
 8002d98:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002d9c:	f000 816e 	beq.w	800307c <_printf_float+0x440>
 8002da0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002da4:	d1b9      	bne.n	8002d1a <_printf_float+0xde>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1b7      	bne.n	8002d1a <_printf_float+0xde>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e7b4      	b.n	8002d18 <_printf_float+0xdc>
 8002dae:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002db2:	d119      	bne.n	8002de8 <_printf_float+0x1ac>
 8002db4:	2900      	cmp	r1, #0
 8002db6:	6863      	ldr	r3, [r4, #4]
 8002db8:	dd0c      	ble.n	8002dd4 <_printf_float+0x198>
 8002dba:	6121      	str	r1, [r4, #16]
 8002dbc:	b913      	cbnz	r3, 8002dc4 <_printf_float+0x188>
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	07d2      	lsls	r2, r2, #31
 8002dc2:	d502      	bpl.n	8002dca <_printf_float+0x18e>
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	440b      	add	r3, r1
 8002dc8:	6123      	str	r3, [r4, #16]
 8002dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dcc:	f04f 0900 	mov.w	r9, #0
 8002dd0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002dd2:	e7d9      	b.n	8002d88 <_printf_float+0x14c>
 8002dd4:	b913      	cbnz	r3, 8002ddc <_printf_float+0x1a0>
 8002dd6:	6822      	ldr	r2, [r4, #0]
 8002dd8:	07d0      	lsls	r0, r2, #31
 8002dda:	d501      	bpl.n	8002de0 <_printf_float+0x1a4>
 8002ddc:	3302      	adds	r3, #2
 8002dde:	e7f3      	b.n	8002dc8 <_printf_float+0x18c>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e7f1      	b.n	8002dc8 <_printf_float+0x18c>
 8002de4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002de8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002dec:	4293      	cmp	r3, r2
 8002dee:	db05      	blt.n	8002dfc <_printf_float+0x1c0>
 8002df0:	6822      	ldr	r2, [r4, #0]
 8002df2:	6123      	str	r3, [r4, #16]
 8002df4:	07d1      	lsls	r1, r2, #31
 8002df6:	d5e8      	bpl.n	8002dca <_printf_float+0x18e>
 8002df8:	3301      	adds	r3, #1
 8002dfa:	e7e5      	b.n	8002dc8 <_printf_float+0x18c>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bfcc      	ite	gt
 8002e00:	2301      	movgt	r3, #1
 8002e02:	f1c3 0302 	rsble	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	e7de      	b.n	8002dc8 <_printf_float+0x18c>
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	055a      	lsls	r2, r3, #21
 8002e0e:	d407      	bmi.n	8002e20 <_printf_float+0x1e4>
 8002e10:	6923      	ldr	r3, [r4, #16]
 8002e12:	463a      	mov	r2, r7
 8002e14:	4659      	mov	r1, fp
 8002e16:	4628      	mov	r0, r5
 8002e18:	47b0      	blx	r6
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d129      	bne.n	8002e72 <_printf_float+0x236>
 8002e1e:	e764      	b.n	8002cea <_printf_float+0xae>
 8002e20:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002e24:	f240 80d7 	bls.w	8002fd6 <_printf_float+0x39a>
 8002e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f7fd fdba 	bl	80009a8 <__aeabi_dcmpeq>
 8002e34:	b388      	cbz	r0, 8002e9a <_printf_float+0x25e>
 8002e36:	2301      	movs	r3, #1
 8002e38:	4a40      	ldr	r2, [pc, #256]	; (8002f3c <_printf_float+0x300>)
 8002e3a:	4659      	mov	r1, fp
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	47b0      	blx	r6
 8002e40:	3001      	adds	r0, #1
 8002e42:	f43f af52 	beq.w	8002cea <_printf_float+0xae>
 8002e46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	db02      	blt.n	8002e54 <_printf_float+0x218>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	07d8      	lsls	r0, r3, #31
 8002e52:	d50e      	bpl.n	8002e72 <_printf_float+0x236>
 8002e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e58:	4659      	mov	r1, fp
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	47b0      	blx	r6
 8002e5e:	3001      	adds	r0, #1
 8002e60:	f43f af43 	beq.w	8002cea <_printf_float+0xae>
 8002e64:	2700      	movs	r7, #0
 8002e66:	f104 081a 	add.w	r8, r4, #26
 8002e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	42bb      	cmp	r3, r7
 8002e70:	dc09      	bgt.n	8002e86 <_printf_float+0x24a>
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	079f      	lsls	r7, r3, #30
 8002e76:	f100 80fd 	bmi.w	8003074 <_printf_float+0x438>
 8002e7a:	68e0      	ldr	r0, [r4, #12]
 8002e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e7e:	4298      	cmp	r0, r3
 8002e80:	bfb8      	it	lt
 8002e82:	4618      	movlt	r0, r3
 8002e84:	e733      	b.n	8002cee <_printf_float+0xb2>
 8002e86:	2301      	movs	r3, #1
 8002e88:	4642      	mov	r2, r8
 8002e8a:	4659      	mov	r1, fp
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	47b0      	blx	r6
 8002e90:	3001      	adds	r0, #1
 8002e92:	f43f af2a 	beq.w	8002cea <_printf_float+0xae>
 8002e96:	3701      	adds	r7, #1
 8002e98:	e7e7      	b.n	8002e6a <_printf_float+0x22e>
 8002e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	dc2b      	bgt.n	8002ef8 <_printf_float+0x2bc>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <_printf_float+0x300>)
 8002ea4:	4659      	mov	r1, fp
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	47b0      	blx	r6
 8002eaa:	3001      	adds	r0, #1
 8002eac:	f43f af1d 	beq.w	8002cea <_printf_float+0xae>
 8002eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002eb2:	b923      	cbnz	r3, 8002ebe <_printf_float+0x282>
 8002eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002eb6:	b913      	cbnz	r3, 8002ebe <_printf_float+0x282>
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	07d9      	lsls	r1, r3, #31
 8002ebc:	d5d9      	bpl.n	8002e72 <_printf_float+0x236>
 8002ebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ec2:	4659      	mov	r1, fp
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	47b0      	blx	r6
 8002ec8:	3001      	adds	r0, #1
 8002eca:	f43f af0e 	beq.w	8002cea <_printf_float+0xae>
 8002ece:	f04f 0800 	mov.w	r8, #0
 8002ed2:	f104 091a 	add.w	r9, r4, #26
 8002ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ed8:	425b      	negs	r3, r3
 8002eda:	4543      	cmp	r3, r8
 8002edc:	dc01      	bgt.n	8002ee2 <_printf_float+0x2a6>
 8002ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ee0:	e797      	b.n	8002e12 <_printf_float+0x1d6>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	464a      	mov	r2, r9
 8002ee6:	4659      	mov	r1, fp
 8002ee8:	4628      	mov	r0, r5
 8002eea:	47b0      	blx	r6
 8002eec:	3001      	adds	r0, #1
 8002eee:	f43f aefc 	beq.w	8002cea <_printf_float+0xae>
 8002ef2:	f108 0801 	add.w	r8, r8, #1
 8002ef6:	e7ee      	b.n	8002ed6 <_printf_float+0x29a>
 8002ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002efa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002efc:	429a      	cmp	r2, r3
 8002efe:	bfa8      	it	ge
 8002f00:	461a      	movge	r2, r3
 8002f02:	2a00      	cmp	r2, #0
 8002f04:	4690      	mov	r8, r2
 8002f06:	dd07      	ble.n	8002f18 <_printf_float+0x2dc>
 8002f08:	4613      	mov	r3, r2
 8002f0a:	4659      	mov	r1, fp
 8002f0c:	463a      	mov	r2, r7
 8002f0e:	4628      	mov	r0, r5
 8002f10:	47b0      	blx	r6
 8002f12:	3001      	adds	r0, #1
 8002f14:	f43f aee9 	beq.w	8002cea <_printf_float+0xae>
 8002f18:	f104 031a 	add.w	r3, r4, #26
 8002f1c:	f04f 0a00 	mov.w	sl, #0
 8002f20:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f26:	e015      	b.n	8002f54 <_printf_float+0x318>
 8002f28:	7fefffff 	.word	0x7fefffff
 8002f2c:	08004c0c 	.word	0x08004c0c
 8002f30:	08004c08 	.word	0x08004c08
 8002f34:	08004c14 	.word	0x08004c14
 8002f38:	08004c10 	.word	0x08004c10
 8002f3c:	08004c18 	.word	0x08004c18
 8002f40:	2301      	movs	r3, #1
 8002f42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f44:	4659      	mov	r1, fp
 8002f46:	4628      	mov	r0, r5
 8002f48:	47b0      	blx	r6
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	f43f aecd 	beq.w	8002cea <_printf_float+0xae>
 8002f50:	f10a 0a01 	add.w	sl, sl, #1
 8002f54:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002f58:	eba9 0308 	sub.w	r3, r9, r8
 8002f5c:	4553      	cmp	r3, sl
 8002f5e:	dcef      	bgt.n	8002f40 <_printf_float+0x304>
 8002f60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f64:	429a      	cmp	r2, r3
 8002f66:	444f      	add	r7, r9
 8002f68:	db14      	blt.n	8002f94 <_printf_float+0x358>
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	07da      	lsls	r2, r3, #31
 8002f6e:	d411      	bmi.n	8002f94 <_printf_float+0x358>
 8002f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f74:	eba3 0209 	sub.w	r2, r3, r9
 8002f78:	eba3 0901 	sub.w	r9, r3, r1
 8002f7c:	4591      	cmp	r9, r2
 8002f7e:	bfa8      	it	ge
 8002f80:	4691      	movge	r9, r2
 8002f82:	f1b9 0f00 	cmp.w	r9, #0
 8002f86:	dc0d      	bgt.n	8002fa4 <_printf_float+0x368>
 8002f88:	2700      	movs	r7, #0
 8002f8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f8e:	f104 081a 	add.w	r8, r4, #26
 8002f92:	e018      	b.n	8002fc6 <_printf_float+0x38a>
 8002f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f98:	4659      	mov	r1, fp
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	47b0      	blx	r6
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d1e6      	bne.n	8002f70 <_printf_float+0x334>
 8002fa2:	e6a2      	b.n	8002cea <_printf_float+0xae>
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	463a      	mov	r2, r7
 8002fa8:	4659      	mov	r1, fp
 8002faa:	4628      	mov	r0, r5
 8002fac:	47b0      	blx	r6
 8002fae:	3001      	adds	r0, #1
 8002fb0:	d1ea      	bne.n	8002f88 <_printf_float+0x34c>
 8002fb2:	e69a      	b.n	8002cea <_printf_float+0xae>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	4642      	mov	r2, r8
 8002fb8:	4659      	mov	r1, fp
 8002fba:	4628      	mov	r0, r5
 8002fbc:	47b0      	blx	r6
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	f43f ae93 	beq.w	8002cea <_printf_float+0xae>
 8002fc4:	3701      	adds	r7, #1
 8002fc6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	eba3 0309 	sub.w	r3, r3, r9
 8002fd0:	42bb      	cmp	r3, r7
 8002fd2:	dcef      	bgt.n	8002fb4 <_printf_float+0x378>
 8002fd4:	e74d      	b.n	8002e72 <_printf_float+0x236>
 8002fd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fd8:	2a01      	cmp	r2, #1
 8002fda:	dc01      	bgt.n	8002fe0 <_printf_float+0x3a4>
 8002fdc:	07db      	lsls	r3, r3, #31
 8002fde:	d538      	bpl.n	8003052 <_printf_float+0x416>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	463a      	mov	r2, r7
 8002fe4:	4659      	mov	r1, fp
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	47b0      	blx	r6
 8002fea:	3001      	adds	r0, #1
 8002fec:	f43f ae7d 	beq.w	8002cea <_printf_float+0xae>
 8002ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	47b0      	blx	r6
 8002ffa:	3001      	adds	r0, #1
 8002ffc:	f107 0701 	add.w	r7, r7, #1
 8003000:	f43f ae73 	beq.w	8002cea <_printf_float+0xae>
 8003004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800300a:	2200      	movs	r2, #0
 800300c:	f103 38ff 	add.w	r8, r3, #4294967295
 8003010:	2300      	movs	r3, #0
 8003012:	f7fd fcc9 	bl	80009a8 <__aeabi_dcmpeq>
 8003016:	b9c0      	cbnz	r0, 800304a <_printf_float+0x40e>
 8003018:	4643      	mov	r3, r8
 800301a:	463a      	mov	r2, r7
 800301c:	4659      	mov	r1, fp
 800301e:	4628      	mov	r0, r5
 8003020:	47b0      	blx	r6
 8003022:	3001      	adds	r0, #1
 8003024:	d10d      	bne.n	8003042 <_printf_float+0x406>
 8003026:	e660      	b.n	8002cea <_printf_float+0xae>
 8003028:	2301      	movs	r3, #1
 800302a:	4642      	mov	r2, r8
 800302c:	4659      	mov	r1, fp
 800302e:	4628      	mov	r0, r5
 8003030:	47b0      	blx	r6
 8003032:	3001      	adds	r0, #1
 8003034:	f43f ae59 	beq.w	8002cea <_printf_float+0xae>
 8003038:	3701      	adds	r7, #1
 800303a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800303c:	3b01      	subs	r3, #1
 800303e:	42bb      	cmp	r3, r7
 8003040:	dcf2      	bgt.n	8003028 <_printf_float+0x3ec>
 8003042:	464b      	mov	r3, r9
 8003044:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003048:	e6e4      	b.n	8002e14 <_printf_float+0x1d8>
 800304a:	2700      	movs	r7, #0
 800304c:	f104 081a 	add.w	r8, r4, #26
 8003050:	e7f3      	b.n	800303a <_printf_float+0x3fe>
 8003052:	2301      	movs	r3, #1
 8003054:	e7e1      	b.n	800301a <_printf_float+0x3de>
 8003056:	2301      	movs	r3, #1
 8003058:	4642      	mov	r2, r8
 800305a:	4659      	mov	r1, fp
 800305c:	4628      	mov	r0, r5
 800305e:	47b0      	blx	r6
 8003060:	3001      	adds	r0, #1
 8003062:	f43f ae42 	beq.w	8002cea <_printf_float+0xae>
 8003066:	3701      	adds	r7, #1
 8003068:	68e3      	ldr	r3, [r4, #12]
 800306a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	42bb      	cmp	r3, r7
 8003070:	dcf1      	bgt.n	8003056 <_printf_float+0x41a>
 8003072:	e702      	b.n	8002e7a <_printf_float+0x23e>
 8003074:	2700      	movs	r7, #0
 8003076:	f104 0819 	add.w	r8, r4, #25
 800307a:	e7f5      	b.n	8003068 <_printf_float+0x42c>
 800307c:	2b00      	cmp	r3, #0
 800307e:	f43f ae94 	beq.w	8002daa <_printf_float+0x16e>
 8003082:	f04f 0c00 	mov.w	ip, #0
 8003086:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800308a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800308e:	6022      	str	r2, [r4, #0]
 8003090:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003094:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	463a      	mov	r2, r7
 800309c:	464b      	mov	r3, r9
 800309e:	4628      	mov	r0, r5
 80030a0:	f7ff fd3a 	bl	8002b18 <__cvt>
 80030a4:	4607      	mov	r7, r0
 80030a6:	e64f      	b.n	8002d48 <_printf_float+0x10c>

080030a8 <_printf_common>:
 80030a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ac:	4691      	mov	r9, r2
 80030ae:	461f      	mov	r7, r3
 80030b0:	688a      	ldr	r2, [r1, #8]
 80030b2:	690b      	ldr	r3, [r1, #16]
 80030b4:	4606      	mov	r6, r0
 80030b6:	4293      	cmp	r3, r2
 80030b8:	bfb8      	it	lt
 80030ba:	4613      	movlt	r3, r2
 80030bc:	f8c9 3000 	str.w	r3, [r9]
 80030c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030c4:	460c      	mov	r4, r1
 80030c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ca:	b112      	cbz	r2, 80030d2 <_printf_common+0x2a>
 80030cc:	3301      	adds	r3, #1
 80030ce:	f8c9 3000 	str.w	r3, [r9]
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	0699      	lsls	r1, r3, #26
 80030d6:	bf42      	ittt	mi
 80030d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030dc:	3302      	addmi	r3, #2
 80030de:	f8c9 3000 	strmi.w	r3, [r9]
 80030e2:	6825      	ldr	r5, [r4, #0]
 80030e4:	f015 0506 	ands.w	r5, r5, #6
 80030e8:	d107      	bne.n	80030fa <_printf_common+0x52>
 80030ea:	f104 0a19 	add.w	sl, r4, #25
 80030ee:	68e3      	ldr	r3, [r4, #12]
 80030f0:	f8d9 2000 	ldr.w	r2, [r9]
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	42ab      	cmp	r3, r5
 80030f8:	dc29      	bgt.n	800314e <_printf_common+0xa6>
 80030fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	3300      	adds	r3, #0
 8003102:	bf18      	it	ne
 8003104:	2301      	movne	r3, #1
 8003106:	0692      	lsls	r2, r2, #26
 8003108:	d42e      	bmi.n	8003168 <_printf_common+0xc0>
 800310a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800310e:	4639      	mov	r1, r7
 8003110:	4630      	mov	r0, r6
 8003112:	47c0      	blx	r8
 8003114:	3001      	adds	r0, #1
 8003116:	d021      	beq.n	800315c <_printf_common+0xb4>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	68e5      	ldr	r5, [r4, #12]
 800311c:	f003 0306 	and.w	r3, r3, #6
 8003120:	2b04      	cmp	r3, #4
 8003122:	bf18      	it	ne
 8003124:	2500      	movne	r5, #0
 8003126:	f8d9 2000 	ldr.w	r2, [r9]
 800312a:	f04f 0900 	mov.w	r9, #0
 800312e:	bf08      	it	eq
 8003130:	1aad      	subeq	r5, r5, r2
 8003132:	68a3      	ldr	r3, [r4, #8]
 8003134:	6922      	ldr	r2, [r4, #16]
 8003136:	bf08      	it	eq
 8003138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800313c:	4293      	cmp	r3, r2
 800313e:	bfc4      	itt	gt
 8003140:	1a9b      	subgt	r3, r3, r2
 8003142:	18ed      	addgt	r5, r5, r3
 8003144:	341a      	adds	r4, #26
 8003146:	454d      	cmp	r5, r9
 8003148:	d11a      	bne.n	8003180 <_printf_common+0xd8>
 800314a:	2000      	movs	r0, #0
 800314c:	e008      	b.n	8003160 <_printf_common+0xb8>
 800314e:	2301      	movs	r3, #1
 8003150:	4652      	mov	r2, sl
 8003152:	4639      	mov	r1, r7
 8003154:	4630      	mov	r0, r6
 8003156:	47c0      	blx	r8
 8003158:	3001      	adds	r0, #1
 800315a:	d103      	bne.n	8003164 <_printf_common+0xbc>
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003164:	3501      	adds	r5, #1
 8003166:	e7c2      	b.n	80030ee <_printf_common+0x46>
 8003168:	2030      	movs	r0, #48	; 0x30
 800316a:	18e1      	adds	r1, r4, r3
 800316c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003176:	4422      	add	r2, r4
 8003178:	3302      	adds	r3, #2
 800317a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800317e:	e7c4      	b.n	800310a <_printf_common+0x62>
 8003180:	2301      	movs	r3, #1
 8003182:	4622      	mov	r2, r4
 8003184:	4639      	mov	r1, r7
 8003186:	4630      	mov	r0, r6
 8003188:	47c0      	blx	r8
 800318a:	3001      	adds	r0, #1
 800318c:	d0e6      	beq.n	800315c <_printf_common+0xb4>
 800318e:	f109 0901 	add.w	r9, r9, #1
 8003192:	e7d8      	b.n	8003146 <_printf_common+0x9e>

08003194 <_printf_i>:
 8003194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003198:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800319c:	460c      	mov	r4, r1
 800319e:	7e09      	ldrb	r1, [r1, #24]
 80031a0:	b085      	sub	sp, #20
 80031a2:	296e      	cmp	r1, #110	; 0x6e
 80031a4:	4617      	mov	r7, r2
 80031a6:	4606      	mov	r6, r0
 80031a8:	4698      	mov	r8, r3
 80031aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031ac:	f000 80b3 	beq.w	8003316 <_printf_i+0x182>
 80031b0:	d822      	bhi.n	80031f8 <_printf_i+0x64>
 80031b2:	2963      	cmp	r1, #99	; 0x63
 80031b4:	d036      	beq.n	8003224 <_printf_i+0x90>
 80031b6:	d80a      	bhi.n	80031ce <_printf_i+0x3a>
 80031b8:	2900      	cmp	r1, #0
 80031ba:	f000 80b9 	beq.w	8003330 <_printf_i+0x19c>
 80031be:	2958      	cmp	r1, #88	; 0x58
 80031c0:	f000 8083 	beq.w	80032ca <_printf_i+0x136>
 80031c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031cc:	e032      	b.n	8003234 <_printf_i+0xa0>
 80031ce:	2964      	cmp	r1, #100	; 0x64
 80031d0:	d001      	beq.n	80031d6 <_printf_i+0x42>
 80031d2:	2969      	cmp	r1, #105	; 0x69
 80031d4:	d1f6      	bne.n	80031c4 <_printf_i+0x30>
 80031d6:	6820      	ldr	r0, [r4, #0]
 80031d8:	6813      	ldr	r3, [r2, #0]
 80031da:	0605      	lsls	r5, r0, #24
 80031dc:	f103 0104 	add.w	r1, r3, #4
 80031e0:	d52a      	bpl.n	8003238 <_printf_i+0xa4>
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6011      	str	r1, [r2, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	da03      	bge.n	80031f2 <_printf_i+0x5e>
 80031ea:	222d      	movs	r2, #45	; 0x2d
 80031ec:	425b      	negs	r3, r3
 80031ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031f2:	486f      	ldr	r0, [pc, #444]	; (80033b0 <_printf_i+0x21c>)
 80031f4:	220a      	movs	r2, #10
 80031f6:	e039      	b.n	800326c <_printf_i+0xd8>
 80031f8:	2973      	cmp	r1, #115	; 0x73
 80031fa:	f000 809d 	beq.w	8003338 <_printf_i+0x1a4>
 80031fe:	d808      	bhi.n	8003212 <_printf_i+0x7e>
 8003200:	296f      	cmp	r1, #111	; 0x6f
 8003202:	d020      	beq.n	8003246 <_printf_i+0xb2>
 8003204:	2970      	cmp	r1, #112	; 0x70
 8003206:	d1dd      	bne.n	80031c4 <_printf_i+0x30>
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	f043 0320 	orr.w	r3, r3, #32
 800320e:	6023      	str	r3, [r4, #0]
 8003210:	e003      	b.n	800321a <_printf_i+0x86>
 8003212:	2975      	cmp	r1, #117	; 0x75
 8003214:	d017      	beq.n	8003246 <_printf_i+0xb2>
 8003216:	2978      	cmp	r1, #120	; 0x78
 8003218:	d1d4      	bne.n	80031c4 <_printf_i+0x30>
 800321a:	2378      	movs	r3, #120	; 0x78
 800321c:	4865      	ldr	r0, [pc, #404]	; (80033b4 <_printf_i+0x220>)
 800321e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003222:	e055      	b.n	80032d0 <_printf_i+0x13c>
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800322a:	1d19      	adds	r1, r3, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6011      	str	r1, [r2, #0]
 8003230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003234:	2301      	movs	r3, #1
 8003236:	e08c      	b.n	8003352 <_printf_i+0x1be>
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800323e:	6011      	str	r1, [r2, #0]
 8003240:	bf18      	it	ne
 8003242:	b21b      	sxthne	r3, r3
 8003244:	e7cf      	b.n	80031e6 <_printf_i+0x52>
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	6825      	ldr	r5, [r4, #0]
 800324a:	1d18      	adds	r0, r3, #4
 800324c:	6010      	str	r0, [r2, #0]
 800324e:	0628      	lsls	r0, r5, #24
 8003250:	d501      	bpl.n	8003256 <_printf_i+0xc2>
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	e002      	b.n	800325c <_printf_i+0xc8>
 8003256:	0668      	lsls	r0, r5, #25
 8003258:	d5fb      	bpl.n	8003252 <_printf_i+0xbe>
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	296f      	cmp	r1, #111	; 0x6f
 800325e:	bf14      	ite	ne
 8003260:	220a      	movne	r2, #10
 8003262:	2208      	moveq	r2, #8
 8003264:	4852      	ldr	r0, [pc, #328]	; (80033b0 <_printf_i+0x21c>)
 8003266:	2100      	movs	r1, #0
 8003268:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800326c:	6865      	ldr	r5, [r4, #4]
 800326e:	2d00      	cmp	r5, #0
 8003270:	60a5      	str	r5, [r4, #8]
 8003272:	f2c0 8095 	blt.w	80033a0 <_printf_i+0x20c>
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	f021 0104 	bic.w	r1, r1, #4
 800327c:	6021      	str	r1, [r4, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d13d      	bne.n	80032fe <_printf_i+0x16a>
 8003282:	2d00      	cmp	r5, #0
 8003284:	f040 808e 	bne.w	80033a4 <_printf_i+0x210>
 8003288:	4665      	mov	r5, ip
 800328a:	2a08      	cmp	r2, #8
 800328c:	d10b      	bne.n	80032a6 <_printf_i+0x112>
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	07db      	lsls	r3, r3, #31
 8003292:	d508      	bpl.n	80032a6 <_printf_i+0x112>
 8003294:	6923      	ldr	r3, [r4, #16]
 8003296:	6862      	ldr	r2, [r4, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	bfde      	ittt	le
 800329c:	2330      	movle	r3, #48	; 0x30
 800329e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032a6:	ebac 0305 	sub.w	r3, ip, r5
 80032aa:	6123      	str	r3, [r4, #16]
 80032ac:	f8cd 8000 	str.w	r8, [sp]
 80032b0:	463b      	mov	r3, r7
 80032b2:	aa03      	add	r2, sp, #12
 80032b4:	4621      	mov	r1, r4
 80032b6:	4630      	mov	r0, r6
 80032b8:	f7ff fef6 	bl	80030a8 <_printf_common>
 80032bc:	3001      	adds	r0, #1
 80032be:	d14d      	bne.n	800335c <_printf_i+0x1c8>
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	b005      	add	sp, #20
 80032c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032ca:	4839      	ldr	r0, [pc, #228]	; (80033b0 <_printf_i+0x21c>)
 80032cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032d0:	6813      	ldr	r3, [r2, #0]
 80032d2:	6821      	ldr	r1, [r4, #0]
 80032d4:	1d1d      	adds	r5, r3, #4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6015      	str	r5, [r2, #0]
 80032da:	060a      	lsls	r2, r1, #24
 80032dc:	d50b      	bpl.n	80032f6 <_printf_i+0x162>
 80032de:	07ca      	lsls	r2, r1, #31
 80032e0:	bf44      	itt	mi
 80032e2:	f041 0120 	orrmi.w	r1, r1, #32
 80032e6:	6021      	strmi	r1, [r4, #0]
 80032e8:	b91b      	cbnz	r3, 80032f2 <_printf_i+0x15e>
 80032ea:	6822      	ldr	r2, [r4, #0]
 80032ec:	f022 0220 	bic.w	r2, r2, #32
 80032f0:	6022      	str	r2, [r4, #0]
 80032f2:	2210      	movs	r2, #16
 80032f4:	e7b7      	b.n	8003266 <_printf_i+0xd2>
 80032f6:	064d      	lsls	r5, r1, #25
 80032f8:	bf48      	it	mi
 80032fa:	b29b      	uxthmi	r3, r3
 80032fc:	e7ef      	b.n	80032de <_printf_i+0x14a>
 80032fe:	4665      	mov	r5, ip
 8003300:	fbb3 f1f2 	udiv	r1, r3, r2
 8003304:	fb02 3311 	mls	r3, r2, r1, r3
 8003308:	5cc3      	ldrb	r3, [r0, r3]
 800330a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800330e:	460b      	mov	r3, r1
 8003310:	2900      	cmp	r1, #0
 8003312:	d1f5      	bne.n	8003300 <_printf_i+0x16c>
 8003314:	e7b9      	b.n	800328a <_printf_i+0xf6>
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	6825      	ldr	r5, [r4, #0]
 800331a:	1d18      	adds	r0, r3, #4
 800331c:	6961      	ldr	r1, [r4, #20]
 800331e:	6010      	str	r0, [r2, #0]
 8003320:	0628      	lsls	r0, r5, #24
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	d501      	bpl.n	800332a <_printf_i+0x196>
 8003326:	6019      	str	r1, [r3, #0]
 8003328:	e002      	b.n	8003330 <_printf_i+0x19c>
 800332a:	066a      	lsls	r2, r5, #25
 800332c:	d5fb      	bpl.n	8003326 <_printf_i+0x192>
 800332e:	8019      	strh	r1, [r3, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	4665      	mov	r5, ip
 8003334:	6123      	str	r3, [r4, #16]
 8003336:	e7b9      	b.n	80032ac <_printf_i+0x118>
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	1d19      	adds	r1, r3, #4
 800333c:	6011      	str	r1, [r2, #0]
 800333e:	681d      	ldr	r5, [r3, #0]
 8003340:	6862      	ldr	r2, [r4, #4]
 8003342:	2100      	movs	r1, #0
 8003344:	4628      	mov	r0, r5
 8003346:	f000 feb1 	bl	80040ac <memchr>
 800334a:	b108      	cbz	r0, 8003350 <_printf_i+0x1bc>
 800334c:	1b40      	subs	r0, r0, r5
 800334e:	6060      	str	r0, [r4, #4]
 8003350:	6863      	ldr	r3, [r4, #4]
 8003352:	6123      	str	r3, [r4, #16]
 8003354:	2300      	movs	r3, #0
 8003356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800335a:	e7a7      	b.n	80032ac <_printf_i+0x118>
 800335c:	6923      	ldr	r3, [r4, #16]
 800335e:	462a      	mov	r2, r5
 8003360:	4639      	mov	r1, r7
 8003362:	4630      	mov	r0, r6
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d0aa      	beq.n	80032c0 <_printf_i+0x12c>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	079b      	lsls	r3, r3, #30
 800336e:	d413      	bmi.n	8003398 <_printf_i+0x204>
 8003370:	68e0      	ldr	r0, [r4, #12]
 8003372:	9b03      	ldr	r3, [sp, #12]
 8003374:	4298      	cmp	r0, r3
 8003376:	bfb8      	it	lt
 8003378:	4618      	movlt	r0, r3
 800337a:	e7a3      	b.n	80032c4 <_printf_i+0x130>
 800337c:	2301      	movs	r3, #1
 800337e:	464a      	mov	r2, r9
 8003380:	4639      	mov	r1, r7
 8003382:	4630      	mov	r0, r6
 8003384:	47c0      	blx	r8
 8003386:	3001      	adds	r0, #1
 8003388:	d09a      	beq.n	80032c0 <_printf_i+0x12c>
 800338a:	3501      	adds	r5, #1
 800338c:	68e3      	ldr	r3, [r4, #12]
 800338e:	9a03      	ldr	r2, [sp, #12]
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	42ab      	cmp	r3, r5
 8003394:	dcf2      	bgt.n	800337c <_printf_i+0x1e8>
 8003396:	e7eb      	b.n	8003370 <_printf_i+0x1dc>
 8003398:	2500      	movs	r5, #0
 800339a:	f104 0919 	add.w	r9, r4, #25
 800339e:	e7f5      	b.n	800338c <_printf_i+0x1f8>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ac      	bne.n	80032fe <_printf_i+0x16a>
 80033a4:	7803      	ldrb	r3, [r0, #0]
 80033a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033ae:	e76c      	b.n	800328a <_printf_i+0xf6>
 80033b0:	08004c1a 	.word	0x08004c1a
 80033b4:	08004c2b 	.word	0x08004c2b

080033b8 <siprintf>:
 80033b8:	b40e      	push	{r1, r2, r3}
 80033ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033be:	b500      	push	{lr}
 80033c0:	b09c      	sub	sp, #112	; 0x70
 80033c2:	ab1d      	add	r3, sp, #116	; 0x74
 80033c4:	9002      	str	r0, [sp, #8]
 80033c6:	9006      	str	r0, [sp, #24]
 80033c8:	9107      	str	r1, [sp, #28]
 80033ca:	9104      	str	r1, [sp, #16]
 80033cc:	4808      	ldr	r0, [pc, #32]	; (80033f0 <siprintf+0x38>)
 80033ce:	4909      	ldr	r1, [pc, #36]	; (80033f4 <siprintf+0x3c>)
 80033d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80033d4:	9105      	str	r1, [sp, #20]
 80033d6:	6800      	ldr	r0, [r0, #0]
 80033d8:	a902      	add	r1, sp, #8
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	f001 fa6a 	bl	80048b4 <_svfiprintf_r>
 80033e0:	2200      	movs	r2, #0
 80033e2:	9b02      	ldr	r3, [sp, #8]
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	b01c      	add	sp, #112	; 0x70
 80033e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033ec:	b003      	add	sp, #12
 80033ee:	4770      	bx	lr
 80033f0:	20000010 	.word	0x20000010
 80033f4:	ffff0208 	.word	0xffff0208

080033f8 <quorem>:
 80033f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fc:	6903      	ldr	r3, [r0, #16]
 80033fe:	690c      	ldr	r4, [r1, #16]
 8003400:	4680      	mov	r8, r0
 8003402:	42a3      	cmp	r3, r4
 8003404:	f2c0 8084 	blt.w	8003510 <quorem+0x118>
 8003408:	3c01      	subs	r4, #1
 800340a:	f101 0714 	add.w	r7, r1, #20
 800340e:	f100 0614 	add.w	r6, r0, #20
 8003412:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003416:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800341a:	3501      	adds	r5, #1
 800341c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003420:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003424:	eb06 030c 	add.w	r3, r6, ip
 8003428:	eb07 090c 	add.w	r9, r7, ip
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	b39d      	cbz	r5, 8003498 <quorem+0xa0>
 8003430:	f04f 0a00 	mov.w	sl, #0
 8003434:	4638      	mov	r0, r7
 8003436:	46b6      	mov	lr, r6
 8003438:	46d3      	mov	fp, sl
 800343a:	f850 2b04 	ldr.w	r2, [r0], #4
 800343e:	b293      	uxth	r3, r2
 8003440:	fb05 a303 	mla	r3, r5, r3, sl
 8003444:	0c12      	lsrs	r2, r2, #16
 8003446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800344a:	fb05 a202 	mla	r2, r5, r2, sl
 800344e:	b29b      	uxth	r3, r3
 8003450:	ebab 0303 	sub.w	r3, fp, r3
 8003454:	f8de b000 	ldr.w	fp, [lr]
 8003458:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800345c:	fa1f fb8b 	uxth.w	fp, fp
 8003460:	445b      	add	r3, fp
 8003462:	fa1f fb82 	uxth.w	fp, r2
 8003466:	f8de 2000 	ldr.w	r2, [lr]
 800346a:	4581      	cmp	r9, r0
 800346c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003474:	b29b      	uxth	r3, r3
 8003476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800347a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800347e:	f84e 3b04 	str.w	r3, [lr], #4
 8003482:	d2da      	bcs.n	800343a <quorem+0x42>
 8003484:	f856 300c 	ldr.w	r3, [r6, ip]
 8003488:	b933      	cbnz	r3, 8003498 <quorem+0xa0>
 800348a:	9b01      	ldr	r3, [sp, #4]
 800348c:	3b04      	subs	r3, #4
 800348e:	429e      	cmp	r6, r3
 8003490:	461a      	mov	r2, r3
 8003492:	d331      	bcc.n	80034f8 <quorem+0x100>
 8003494:	f8c8 4010 	str.w	r4, [r8, #16]
 8003498:	4640      	mov	r0, r8
 800349a:	f001 f835 	bl	8004508 <__mcmp>
 800349e:	2800      	cmp	r0, #0
 80034a0:	db26      	blt.n	80034f0 <quorem+0xf8>
 80034a2:	4630      	mov	r0, r6
 80034a4:	f04f 0c00 	mov.w	ip, #0
 80034a8:	3501      	adds	r5, #1
 80034aa:	f857 1b04 	ldr.w	r1, [r7], #4
 80034ae:	f8d0 e000 	ldr.w	lr, [r0]
 80034b2:	b28b      	uxth	r3, r1
 80034b4:	ebac 0303 	sub.w	r3, ip, r3
 80034b8:	fa1f f28e 	uxth.w	r2, lr
 80034bc:	4413      	add	r3, r2
 80034be:	0c0a      	lsrs	r2, r1, #16
 80034c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80034c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034ce:	45b9      	cmp	r9, r7
 80034d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80034d4:	f840 3b04 	str.w	r3, [r0], #4
 80034d8:	d2e7      	bcs.n	80034aa <quorem+0xb2>
 80034da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80034de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80034e2:	b92a      	cbnz	r2, 80034f0 <quorem+0xf8>
 80034e4:	3b04      	subs	r3, #4
 80034e6:	429e      	cmp	r6, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	d30b      	bcc.n	8003504 <quorem+0x10c>
 80034ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80034f0:	4628      	mov	r0, r5
 80034f2:	b003      	add	sp, #12
 80034f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	3b04      	subs	r3, #4
 80034fc:	2a00      	cmp	r2, #0
 80034fe:	d1c9      	bne.n	8003494 <quorem+0x9c>
 8003500:	3c01      	subs	r4, #1
 8003502:	e7c4      	b.n	800348e <quorem+0x96>
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	3b04      	subs	r3, #4
 8003508:	2a00      	cmp	r2, #0
 800350a:	d1ef      	bne.n	80034ec <quorem+0xf4>
 800350c:	3c01      	subs	r4, #1
 800350e:	e7ea      	b.n	80034e6 <quorem+0xee>
 8003510:	2000      	movs	r0, #0
 8003512:	e7ee      	b.n	80034f2 <quorem+0xfa>
 8003514:	0000      	movs	r0, r0
	...

08003518 <_dtoa_r>:
 8003518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800351c:	4616      	mov	r6, r2
 800351e:	461f      	mov	r7, r3
 8003520:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003522:	b095      	sub	sp, #84	; 0x54
 8003524:	4604      	mov	r4, r0
 8003526:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800352a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800352e:	b93d      	cbnz	r5, 8003540 <_dtoa_r+0x28>
 8003530:	2010      	movs	r0, #16
 8003532:	f000 fdb3 	bl	800409c <malloc>
 8003536:	6260      	str	r0, [r4, #36]	; 0x24
 8003538:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800353c:	6005      	str	r5, [r0, #0]
 800353e:	60c5      	str	r5, [r0, #12]
 8003540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	b151      	cbz	r1, 800355c <_dtoa_r+0x44>
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	2301      	movs	r3, #1
 800354a:	4093      	lsls	r3, r2
 800354c:	604a      	str	r2, [r1, #4]
 800354e:	608b      	str	r3, [r1, #8]
 8003550:	4620      	mov	r0, r4
 8003552:	f000 fdf8 	bl	8004146 <_Bfree>
 8003556:	2200      	movs	r2, #0
 8003558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	1e3b      	subs	r3, r7, #0
 800355e:	bfaf      	iteee	ge
 8003560:	2300      	movge	r3, #0
 8003562:	2201      	movlt	r2, #1
 8003564:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003568:	9303      	strlt	r3, [sp, #12]
 800356a:	bfac      	ite	ge
 800356c:	f8c8 3000 	strge.w	r3, [r8]
 8003570:	f8c8 2000 	strlt.w	r2, [r8]
 8003574:	4bae      	ldr	r3, [pc, #696]	; (8003830 <_dtoa_r+0x318>)
 8003576:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800357a:	ea33 0308 	bics.w	r3, r3, r8
 800357e:	d11b      	bne.n	80035b8 <_dtoa_r+0xa0>
 8003580:	f242 730f 	movw	r3, #9999	; 0x270f
 8003584:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	9b02      	ldr	r3, [sp, #8]
 800358a:	b923      	cbnz	r3, 8003596 <_dtoa_r+0x7e>
 800358c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003590:	2800      	cmp	r0, #0
 8003592:	f000 8545 	beq.w	8004020 <_dtoa_r+0xb08>
 8003596:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003598:	b953      	cbnz	r3, 80035b0 <_dtoa_r+0x98>
 800359a:	4ba6      	ldr	r3, [pc, #664]	; (8003834 <_dtoa_r+0x31c>)
 800359c:	e021      	b.n	80035e2 <_dtoa_r+0xca>
 800359e:	4ba6      	ldr	r3, [pc, #664]	; (8003838 <_dtoa_r+0x320>)
 80035a0:	9306      	str	r3, [sp, #24]
 80035a2:	3308      	adds	r3, #8
 80035a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	9806      	ldr	r0, [sp, #24]
 80035aa:	b015      	add	sp, #84	; 0x54
 80035ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b0:	4ba0      	ldr	r3, [pc, #640]	; (8003834 <_dtoa_r+0x31c>)
 80035b2:	9306      	str	r3, [sp, #24]
 80035b4:	3303      	adds	r3, #3
 80035b6:	e7f5      	b.n	80035a4 <_dtoa_r+0x8c>
 80035b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80035bc:	2200      	movs	r2, #0
 80035be:	2300      	movs	r3, #0
 80035c0:	4630      	mov	r0, r6
 80035c2:	4639      	mov	r1, r7
 80035c4:	f7fd f9f0 	bl	80009a8 <__aeabi_dcmpeq>
 80035c8:	4682      	mov	sl, r0
 80035ca:	b160      	cbz	r0, 80035e6 <_dtoa_r+0xce>
 80035cc:	2301      	movs	r3, #1
 80035ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8520 	beq.w	800401a <_dtoa_r+0xb02>
 80035da:	4b98      	ldr	r3, [pc, #608]	; (800383c <_dtoa_r+0x324>)
 80035dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	9306      	str	r3, [sp, #24]
 80035e4:	e7e0      	b.n	80035a8 <_dtoa_r+0x90>
 80035e6:	ab12      	add	r3, sp, #72	; 0x48
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	ab13      	add	r3, sp, #76	; 0x4c
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	4632      	mov	r2, r6
 80035f0:	463b      	mov	r3, r7
 80035f2:	4620      	mov	r0, r4
 80035f4:	f001 f800 	bl	80045f8 <__d2b>
 80035f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80035fc:	4683      	mov	fp, r0
 80035fe:	2d00      	cmp	r5, #0
 8003600:	d07d      	beq.n	80036fe <_dtoa_r+0x1e6>
 8003602:	46b0      	mov	r8, r6
 8003604:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003608:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800360c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003610:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003614:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003618:	2200      	movs	r2, #0
 800361a:	4b89      	ldr	r3, [pc, #548]	; (8003840 <_dtoa_r+0x328>)
 800361c:	4640      	mov	r0, r8
 800361e:	4649      	mov	r1, r9
 8003620:	f7fc fda2 	bl	8000168 <__aeabi_dsub>
 8003624:	a37c      	add	r3, pc, #496	; (adr r3, 8003818 <_dtoa_r+0x300>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f7fc ff55 	bl	80004d8 <__aeabi_dmul>
 800362e:	a37c      	add	r3, pc, #496	; (adr r3, 8003820 <_dtoa_r+0x308>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f7fc fd9a 	bl	800016c <__adddf3>
 8003638:	4606      	mov	r6, r0
 800363a:	4628      	mov	r0, r5
 800363c:	460f      	mov	r7, r1
 800363e:	f7fc fee1 	bl	8000404 <__aeabi_i2d>
 8003642:	a379      	add	r3, pc, #484	; (adr r3, 8003828 <_dtoa_r+0x310>)
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f7fc ff46 	bl	80004d8 <__aeabi_dmul>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4630      	mov	r0, r6
 8003652:	4639      	mov	r1, r7
 8003654:	f7fc fd8a 	bl	800016c <__adddf3>
 8003658:	4606      	mov	r6, r0
 800365a:	460f      	mov	r7, r1
 800365c:	f7fd f9ec 	bl	8000a38 <__aeabi_d2iz>
 8003660:	2200      	movs	r2, #0
 8003662:	4682      	mov	sl, r0
 8003664:	2300      	movs	r3, #0
 8003666:	4630      	mov	r0, r6
 8003668:	4639      	mov	r1, r7
 800366a:	f7fd f9a7 	bl	80009bc <__aeabi_dcmplt>
 800366e:	b148      	cbz	r0, 8003684 <_dtoa_r+0x16c>
 8003670:	4650      	mov	r0, sl
 8003672:	f7fc fec7 	bl	8000404 <__aeabi_i2d>
 8003676:	4632      	mov	r2, r6
 8003678:	463b      	mov	r3, r7
 800367a:	f7fd f995 	bl	80009a8 <__aeabi_dcmpeq>
 800367e:	b908      	cbnz	r0, 8003684 <_dtoa_r+0x16c>
 8003680:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003684:	f1ba 0f16 	cmp.w	sl, #22
 8003688:	d85a      	bhi.n	8003740 <_dtoa_r+0x228>
 800368a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800368e:	496d      	ldr	r1, [pc, #436]	; (8003844 <_dtoa_r+0x32c>)
 8003690:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003698:	f7fd f9ae 	bl	80009f8 <__aeabi_dcmpgt>
 800369c:	2800      	cmp	r0, #0
 800369e:	d051      	beq.n	8003744 <_dtoa_r+0x22c>
 80036a0:	2300      	movs	r3, #0
 80036a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80036a6:	930d      	str	r3, [sp, #52]	; 0x34
 80036a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036aa:	1b5d      	subs	r5, r3, r5
 80036ac:	1e6b      	subs	r3, r5, #1
 80036ae:	9307      	str	r3, [sp, #28]
 80036b0:	bf43      	ittte	mi
 80036b2:	2300      	movmi	r3, #0
 80036b4:	f1c5 0901 	rsbmi	r9, r5, #1
 80036b8:	9307      	strmi	r3, [sp, #28]
 80036ba:	f04f 0900 	movpl.w	r9, #0
 80036be:	f1ba 0f00 	cmp.w	sl, #0
 80036c2:	db41      	blt.n	8003748 <_dtoa_r+0x230>
 80036c4:	9b07      	ldr	r3, [sp, #28]
 80036c6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80036ca:	4453      	add	r3, sl
 80036cc:	9307      	str	r3, [sp, #28]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9308      	str	r3, [sp, #32]
 80036d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80036d4:	2b09      	cmp	r3, #9
 80036d6:	f200 808f 	bhi.w	80037f8 <_dtoa_r+0x2e0>
 80036da:	2b05      	cmp	r3, #5
 80036dc:	bfc4      	itt	gt
 80036de:	3b04      	subgt	r3, #4
 80036e0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80036e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80036e4:	bfc8      	it	gt
 80036e6:	2500      	movgt	r5, #0
 80036e8:	f1a3 0302 	sub.w	r3, r3, #2
 80036ec:	bfd8      	it	le
 80036ee:	2501      	movle	r5, #1
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	f200 808d 	bhi.w	8003810 <_dtoa_r+0x2f8>
 80036f6:	e8df f003 	tbb	[pc, r3]
 80036fa:	7d7b      	.short	0x7d7b
 80036fc:	6f2f      	.short	0x6f2f
 80036fe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003702:	441d      	add	r5, r3
 8003704:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003708:	2820      	cmp	r0, #32
 800370a:	dd13      	ble.n	8003734 <_dtoa_r+0x21c>
 800370c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003710:	9b02      	ldr	r3, [sp, #8]
 8003712:	fa08 f800 	lsl.w	r8, r8, r0
 8003716:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800371a:	fa23 f000 	lsr.w	r0, r3, r0
 800371e:	ea48 0000 	orr.w	r0, r8, r0
 8003722:	f7fc fe5f 	bl	80003e4 <__aeabi_ui2d>
 8003726:	2301      	movs	r3, #1
 8003728:	4680      	mov	r8, r0
 800372a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800372e:	3d01      	subs	r5, #1
 8003730:	9310      	str	r3, [sp, #64]	; 0x40
 8003732:	e771      	b.n	8003618 <_dtoa_r+0x100>
 8003734:	9b02      	ldr	r3, [sp, #8]
 8003736:	f1c0 0020 	rsb	r0, r0, #32
 800373a:	fa03 f000 	lsl.w	r0, r3, r0
 800373e:	e7f0      	b.n	8003722 <_dtoa_r+0x20a>
 8003740:	2301      	movs	r3, #1
 8003742:	e7b0      	b.n	80036a6 <_dtoa_r+0x18e>
 8003744:	900d      	str	r0, [sp, #52]	; 0x34
 8003746:	e7af      	b.n	80036a8 <_dtoa_r+0x190>
 8003748:	f1ca 0300 	rsb	r3, sl, #0
 800374c:	9308      	str	r3, [sp, #32]
 800374e:	2300      	movs	r3, #0
 8003750:	eba9 090a 	sub.w	r9, r9, sl
 8003754:	930c      	str	r3, [sp, #48]	; 0x30
 8003756:	e7bc      	b.n	80036d2 <_dtoa_r+0x1ba>
 8003758:	2301      	movs	r3, #1
 800375a:	9309      	str	r3, [sp, #36]	; 0x24
 800375c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800375e:	2b00      	cmp	r3, #0
 8003760:	dd74      	ble.n	800384c <_dtoa_r+0x334>
 8003762:	4698      	mov	r8, r3
 8003764:	9304      	str	r3, [sp, #16]
 8003766:	2200      	movs	r2, #0
 8003768:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800376a:	6072      	str	r2, [r6, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	f102 0014 	add.w	r0, r2, #20
 8003772:	4298      	cmp	r0, r3
 8003774:	6871      	ldr	r1, [r6, #4]
 8003776:	d96e      	bls.n	8003856 <_dtoa_r+0x33e>
 8003778:	4620      	mov	r0, r4
 800377a:	f000 fcb0 	bl	80040de <_Balloc>
 800377e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003780:	6030      	str	r0, [r6, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b8 0f0e 	cmp.w	r8, #14
 8003788:	9306      	str	r3, [sp, #24]
 800378a:	f200 80ed 	bhi.w	8003968 <_dtoa_r+0x450>
 800378e:	2d00      	cmp	r5, #0
 8003790:	f000 80ea 	beq.w	8003968 <_dtoa_r+0x450>
 8003794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003798:	f1ba 0f00 	cmp.w	sl, #0
 800379c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80037a0:	dd77      	ble.n	8003892 <_dtoa_r+0x37a>
 80037a2:	4a28      	ldr	r2, [pc, #160]	; (8003844 <_dtoa_r+0x32c>)
 80037a4:	f00a 030f 	and.w	r3, sl, #15
 80037a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80037ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80037b0:	06f0      	lsls	r0, r6, #27
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80037ba:	d568      	bpl.n	800388e <_dtoa_r+0x376>
 80037bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <_dtoa_r+0x330>)
 80037c2:	2503      	movs	r5, #3
 80037c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037c8:	f7fc ffb0 	bl	800072c <__aeabi_ddiv>
 80037cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037d0:	f006 060f 	and.w	r6, r6, #15
 80037d4:	4f1c      	ldr	r7, [pc, #112]	; (8003848 <_dtoa_r+0x330>)
 80037d6:	e04f      	b.n	8003878 <_dtoa_r+0x360>
 80037d8:	2301      	movs	r3, #1
 80037da:	9309      	str	r3, [sp, #36]	; 0x24
 80037dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80037de:	4453      	add	r3, sl
 80037e0:	f103 0801 	add.w	r8, r3, #1
 80037e4:	9304      	str	r3, [sp, #16]
 80037e6:	4643      	mov	r3, r8
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bfb8      	it	lt
 80037ec:	2301      	movlt	r3, #1
 80037ee:	e7ba      	b.n	8003766 <_dtoa_r+0x24e>
 80037f0:	2300      	movs	r3, #0
 80037f2:	e7b2      	b.n	800375a <_dtoa_r+0x242>
 80037f4:	2300      	movs	r3, #0
 80037f6:	e7f0      	b.n	80037da <_dtoa_r+0x2c2>
 80037f8:	2501      	movs	r5, #1
 80037fa:	2300      	movs	r3, #0
 80037fc:	9509      	str	r5, [sp, #36]	; 0x24
 80037fe:	931e      	str	r3, [sp, #120]	; 0x78
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	2200      	movs	r2, #0
 8003806:	9304      	str	r3, [sp, #16]
 8003808:	4698      	mov	r8, r3
 800380a:	2312      	movs	r3, #18
 800380c:	921f      	str	r2, [sp, #124]	; 0x7c
 800380e:	e7aa      	b.n	8003766 <_dtoa_r+0x24e>
 8003810:	2301      	movs	r3, #1
 8003812:	9309      	str	r3, [sp, #36]	; 0x24
 8003814:	e7f4      	b.n	8003800 <_dtoa_r+0x2e8>
 8003816:	bf00      	nop
 8003818:	636f4361 	.word	0x636f4361
 800381c:	3fd287a7 	.word	0x3fd287a7
 8003820:	8b60c8b3 	.word	0x8b60c8b3
 8003824:	3fc68a28 	.word	0x3fc68a28
 8003828:	509f79fb 	.word	0x509f79fb
 800382c:	3fd34413 	.word	0x3fd34413
 8003830:	7ff00000 	.word	0x7ff00000
 8003834:	08004c45 	.word	0x08004c45
 8003838:	08004c3c 	.word	0x08004c3c
 800383c:	08004c19 	.word	0x08004c19
 8003840:	3ff80000 	.word	0x3ff80000
 8003844:	08004c78 	.word	0x08004c78
 8003848:	08004c50 	.word	0x08004c50
 800384c:	2301      	movs	r3, #1
 800384e:	9304      	str	r3, [sp, #16]
 8003850:	4698      	mov	r8, r3
 8003852:	461a      	mov	r2, r3
 8003854:	e7da      	b.n	800380c <_dtoa_r+0x2f4>
 8003856:	3101      	adds	r1, #1
 8003858:	6071      	str	r1, [r6, #4]
 800385a:	0052      	lsls	r2, r2, #1
 800385c:	e787      	b.n	800376e <_dtoa_r+0x256>
 800385e:	07f1      	lsls	r1, r6, #31
 8003860:	d508      	bpl.n	8003874 <_dtoa_r+0x35c>
 8003862:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800386a:	f7fc fe35 	bl	80004d8 <__aeabi_dmul>
 800386e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003872:	3501      	adds	r5, #1
 8003874:	1076      	asrs	r6, r6, #1
 8003876:	3708      	adds	r7, #8
 8003878:	2e00      	cmp	r6, #0
 800387a:	d1f0      	bne.n	800385e <_dtoa_r+0x346>
 800387c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003884:	f7fc ff52 	bl	800072c <__aeabi_ddiv>
 8003888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800388c:	e01b      	b.n	80038c6 <_dtoa_r+0x3ae>
 800388e:	2502      	movs	r5, #2
 8003890:	e7a0      	b.n	80037d4 <_dtoa_r+0x2bc>
 8003892:	f000 80a4 	beq.w	80039de <_dtoa_r+0x4c6>
 8003896:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800389a:	f1ca 0600 	rsb	r6, sl, #0
 800389e:	4ba0      	ldr	r3, [pc, #640]	; (8003b20 <_dtoa_r+0x608>)
 80038a0:	f006 020f 	and.w	r2, r6, #15
 80038a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fe14 	bl	80004d8 <__aeabi_dmul>
 80038b0:	2502      	movs	r5, #2
 80038b2:	2300      	movs	r3, #0
 80038b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038b8:	4f9a      	ldr	r7, [pc, #616]	; (8003b24 <_dtoa_r+0x60c>)
 80038ba:	1136      	asrs	r6, r6, #4
 80038bc:	2e00      	cmp	r6, #0
 80038be:	f040 8083 	bne.w	80039c8 <_dtoa_r+0x4b0>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e0      	bne.n	8003888 <_dtoa_r+0x370>
 80038c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 808a 	beq.w	80039e2 <_dtoa_r+0x4ca>
 80038ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80038d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038da:	2200      	movs	r2, #0
 80038dc:	4b92      	ldr	r3, [pc, #584]	; (8003b28 <_dtoa_r+0x610>)
 80038de:	f7fd f86d 	bl	80009bc <__aeabi_dcmplt>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d07d      	beq.n	80039e2 <_dtoa_r+0x4ca>
 80038e6:	f1b8 0f00 	cmp.w	r8, #0
 80038ea:	d07a      	beq.n	80039e2 <_dtoa_r+0x4ca>
 80038ec:	9b04      	ldr	r3, [sp, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dd36      	ble.n	8003960 <_dtoa_r+0x448>
 80038f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038f6:	2200      	movs	r2, #0
 80038f8:	4b8c      	ldr	r3, [pc, #560]	; (8003b2c <_dtoa_r+0x614>)
 80038fa:	f7fc fded 	bl	80004d8 <__aeabi_dmul>
 80038fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003902:	9e04      	ldr	r6, [sp, #16]
 8003904:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003908:	3501      	adds	r5, #1
 800390a:	4628      	mov	r0, r5
 800390c:	f7fc fd7a 	bl	8000404 <__aeabi_i2d>
 8003910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003914:	f7fc fde0 	bl	80004d8 <__aeabi_dmul>
 8003918:	2200      	movs	r2, #0
 800391a:	4b85      	ldr	r3, [pc, #532]	; (8003b30 <_dtoa_r+0x618>)
 800391c:	f7fc fc26 	bl	800016c <__adddf3>
 8003920:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003924:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003928:	950b      	str	r5, [sp, #44]	; 0x2c
 800392a:	2e00      	cmp	r6, #0
 800392c:	d15c      	bne.n	80039e8 <_dtoa_r+0x4d0>
 800392e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003932:	2200      	movs	r2, #0
 8003934:	4b7f      	ldr	r3, [pc, #508]	; (8003b34 <_dtoa_r+0x61c>)
 8003936:	f7fc fc17 	bl	8000168 <__aeabi_dsub>
 800393a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800393c:	462b      	mov	r3, r5
 800393e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003942:	f7fd f859 	bl	80009f8 <__aeabi_dcmpgt>
 8003946:	2800      	cmp	r0, #0
 8003948:	f040 8281 	bne.w	8003e4e <_dtoa_r+0x936>
 800394c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003952:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003956:	f7fd f831 	bl	80009bc <__aeabi_dcmplt>
 800395a:	2800      	cmp	r0, #0
 800395c:	f040 8275 	bne.w	8003e4a <_dtoa_r+0x932>
 8003960:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003964:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800396a:	2b00      	cmp	r3, #0
 800396c:	f2c0 814b 	blt.w	8003c06 <_dtoa_r+0x6ee>
 8003970:	f1ba 0f0e 	cmp.w	sl, #14
 8003974:	f300 8147 	bgt.w	8003c06 <_dtoa_r+0x6ee>
 8003978:	4b69      	ldr	r3, [pc, #420]	; (8003b20 <_dtoa_r+0x608>)
 800397a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003986:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003988:	2b00      	cmp	r3, #0
 800398a:	f280 80d7 	bge.w	8003b3c <_dtoa_r+0x624>
 800398e:	f1b8 0f00 	cmp.w	r8, #0
 8003992:	f300 80d3 	bgt.w	8003b3c <_dtoa_r+0x624>
 8003996:	f040 8257 	bne.w	8003e48 <_dtoa_r+0x930>
 800399a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800399e:	2200      	movs	r2, #0
 80039a0:	4b64      	ldr	r3, [pc, #400]	; (8003b34 <_dtoa_r+0x61c>)
 80039a2:	f7fc fd99 	bl	80004d8 <__aeabi_dmul>
 80039a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039aa:	f7fd f81b 	bl	80009e4 <__aeabi_dcmpge>
 80039ae:	4646      	mov	r6, r8
 80039b0:	4647      	mov	r7, r8
 80039b2:	2800      	cmp	r0, #0
 80039b4:	f040 822d 	bne.w	8003e12 <_dtoa_r+0x8fa>
 80039b8:	9b06      	ldr	r3, [sp, #24]
 80039ba:	9a06      	ldr	r2, [sp, #24]
 80039bc:	1c5d      	adds	r5, r3, #1
 80039be:	2331      	movs	r3, #49	; 0x31
 80039c0:	f10a 0a01 	add.w	sl, sl, #1
 80039c4:	7013      	strb	r3, [r2, #0]
 80039c6:	e228      	b.n	8003e1a <_dtoa_r+0x902>
 80039c8:	07f2      	lsls	r2, r6, #31
 80039ca:	d505      	bpl.n	80039d8 <_dtoa_r+0x4c0>
 80039cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039d0:	f7fc fd82 	bl	80004d8 <__aeabi_dmul>
 80039d4:	2301      	movs	r3, #1
 80039d6:	3501      	adds	r5, #1
 80039d8:	1076      	asrs	r6, r6, #1
 80039da:	3708      	adds	r7, #8
 80039dc:	e76e      	b.n	80038bc <_dtoa_r+0x3a4>
 80039de:	2502      	movs	r5, #2
 80039e0:	e771      	b.n	80038c6 <_dtoa_r+0x3ae>
 80039e2:	4657      	mov	r7, sl
 80039e4:	4646      	mov	r6, r8
 80039e6:	e790      	b.n	800390a <_dtoa_r+0x3f2>
 80039e8:	4b4d      	ldr	r3, [pc, #308]	; (8003b20 <_dtoa_r+0x608>)
 80039ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80039ee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80039f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d048      	beq.n	8003a8a <_dtoa_r+0x572>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	2000      	movs	r0, #0
 80039fe:	494e      	ldr	r1, [pc, #312]	; (8003b38 <_dtoa_r+0x620>)
 8003a00:	f7fc fe94 	bl	800072c <__aeabi_ddiv>
 8003a04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a08:	f7fc fbae 	bl	8000168 <__aeabi_dsub>
 8003a0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a10:	9d06      	ldr	r5, [sp, #24]
 8003a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a16:	f7fd f80f 	bl	8000a38 <__aeabi_d2iz>
 8003a1a:	9011      	str	r0, [sp, #68]	; 0x44
 8003a1c:	f7fc fcf2 	bl	8000404 <__aeabi_i2d>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a28:	f7fc fb9e 	bl	8000168 <__aeabi_dsub>
 8003a2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a32:	3330      	adds	r3, #48	; 0x30
 8003a34:	f805 3b01 	strb.w	r3, [r5], #1
 8003a38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a3c:	f7fc ffbe 	bl	80009bc <__aeabi_dcmplt>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d163      	bne.n	8003b0c <_dtoa_r+0x5f4>
 8003a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a48:	2000      	movs	r0, #0
 8003a4a:	4937      	ldr	r1, [pc, #220]	; (8003b28 <_dtoa_r+0x610>)
 8003a4c:	f7fc fb8c 	bl	8000168 <__aeabi_dsub>
 8003a50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a54:	f7fc ffb2 	bl	80009bc <__aeabi_dcmplt>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	f040 80b5 	bne.w	8003bc8 <_dtoa_r+0x6b0>
 8003a5e:	9b06      	ldr	r3, [sp, #24]
 8003a60:	1aeb      	subs	r3, r5, r3
 8003a62:	429e      	cmp	r6, r3
 8003a64:	f77f af7c 	ble.w	8003960 <_dtoa_r+0x448>
 8003a68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <_dtoa_r+0x614>)
 8003a70:	f7fc fd32 	bl	80004d8 <__aeabi_dmul>
 8003a74:	2200      	movs	r2, #0
 8003a76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <_dtoa_r+0x614>)
 8003a80:	f7fc fd2a 	bl	80004d8 <__aeabi_dmul>
 8003a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a88:	e7c3      	b.n	8003a12 <_dtoa_r+0x4fa>
 8003a8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a8e:	f7fc fd23 	bl	80004d8 <__aeabi_dmul>
 8003a92:	9b06      	ldr	r3, [sp, #24]
 8003a94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a98:	199d      	adds	r5, r3, r6
 8003a9a:	461e      	mov	r6, r3
 8003a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aa0:	f7fc ffca 	bl	8000a38 <__aeabi_d2iz>
 8003aa4:	9011      	str	r0, [sp, #68]	; 0x44
 8003aa6:	f7fc fcad 	bl	8000404 <__aeabi_i2d>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ab2:	f7fc fb59 	bl	8000168 <__aeabi_dsub>
 8003ab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003abc:	3330      	adds	r3, #48	; 0x30
 8003abe:	f806 3b01 	strb.w	r3, [r6], #1
 8003ac2:	42ae      	cmp	r6, r5
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	d124      	bne.n	8003b14 <_dtoa_r+0x5fc>
 8003aca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <_dtoa_r+0x620>)
 8003ad0:	f7fc fb4c 	bl	800016c <__adddf3>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003adc:	f7fc ff8c 	bl	80009f8 <__aeabi_dcmpgt>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d171      	bne.n	8003bc8 <_dtoa_r+0x6b0>
 8003ae4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ae8:	2000      	movs	r0, #0
 8003aea:	4913      	ldr	r1, [pc, #76]	; (8003b38 <_dtoa_r+0x620>)
 8003aec:	f7fc fb3c 	bl	8000168 <__aeabi_dsub>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003af8:	f7fc ff60 	bl	80009bc <__aeabi_dcmplt>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f43f af2f 	beq.w	8003960 <_dtoa_r+0x448>
 8003b02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003b06:	1e6a      	subs	r2, r5, #1
 8003b08:	2b30      	cmp	r3, #48	; 0x30
 8003b0a:	d001      	beq.n	8003b10 <_dtoa_r+0x5f8>
 8003b0c:	46ba      	mov	sl, r7
 8003b0e:	e04a      	b.n	8003ba6 <_dtoa_r+0x68e>
 8003b10:	4615      	mov	r5, r2
 8003b12:	e7f6      	b.n	8003b02 <_dtoa_r+0x5ea>
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <_dtoa_r+0x614>)
 8003b16:	f7fc fcdf 	bl	80004d8 <__aeabi_dmul>
 8003b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b1e:	e7bd      	b.n	8003a9c <_dtoa_r+0x584>
 8003b20:	08004c78 	.word	0x08004c78
 8003b24:	08004c50 	.word	0x08004c50
 8003b28:	3ff00000 	.word	0x3ff00000
 8003b2c:	40240000 	.word	0x40240000
 8003b30:	401c0000 	.word	0x401c0000
 8003b34:	40140000 	.word	0x40140000
 8003b38:	3fe00000 	.word	0x3fe00000
 8003b3c:	9d06      	ldr	r5, [sp, #24]
 8003b3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b46:	4630      	mov	r0, r6
 8003b48:	4639      	mov	r1, r7
 8003b4a:	f7fc fdef 	bl	800072c <__aeabi_ddiv>
 8003b4e:	f7fc ff73 	bl	8000a38 <__aeabi_d2iz>
 8003b52:	4681      	mov	r9, r0
 8003b54:	f7fc fc56 	bl	8000404 <__aeabi_i2d>
 8003b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b5c:	f7fc fcbc 	bl	80004d8 <__aeabi_dmul>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4630      	mov	r0, r6
 8003b66:	4639      	mov	r1, r7
 8003b68:	f7fc fafe 	bl	8000168 <__aeabi_dsub>
 8003b6c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003b70:	f805 6b01 	strb.w	r6, [r5], #1
 8003b74:	9e06      	ldr	r6, [sp, #24]
 8003b76:	4602      	mov	r2, r0
 8003b78:	1bae      	subs	r6, r5, r6
 8003b7a:	45b0      	cmp	r8, r6
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	d135      	bne.n	8003bec <_dtoa_r+0x6d4>
 8003b80:	f7fc faf4 	bl	800016c <__adddf3>
 8003b84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b88:	4606      	mov	r6, r0
 8003b8a:	460f      	mov	r7, r1
 8003b8c:	f7fc ff34 	bl	80009f8 <__aeabi_dcmpgt>
 8003b90:	b9c8      	cbnz	r0, 8003bc6 <_dtoa_r+0x6ae>
 8003b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b96:	4630      	mov	r0, r6
 8003b98:	4639      	mov	r1, r7
 8003b9a:	f7fc ff05 	bl	80009a8 <__aeabi_dcmpeq>
 8003b9e:	b110      	cbz	r0, 8003ba6 <_dtoa_r+0x68e>
 8003ba0:	f019 0f01 	tst.w	r9, #1
 8003ba4:	d10f      	bne.n	8003bc6 <_dtoa_r+0x6ae>
 8003ba6:	4659      	mov	r1, fp
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f000 facc 	bl	8004146 <_Bfree>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bb2:	702b      	strb	r3, [r5, #0]
 8003bb4:	f10a 0301 	add.w	r3, sl, #1
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f43f acf3 	beq.w	80035a8 <_dtoa_r+0x90>
 8003bc2:	601d      	str	r5, [r3, #0]
 8003bc4:	e4f0      	b.n	80035a8 <_dtoa_r+0x90>
 8003bc6:	4657      	mov	r7, sl
 8003bc8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003bcc:	1e6b      	subs	r3, r5, #1
 8003bce:	2a39      	cmp	r2, #57	; 0x39
 8003bd0:	d106      	bne.n	8003be0 <_dtoa_r+0x6c8>
 8003bd2:	9a06      	ldr	r2, [sp, #24]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <_dtoa_r+0x6d0>
 8003bd8:	2330      	movs	r3, #48	; 0x30
 8003bda:	7013      	strb	r3, [r2, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	3701      	adds	r7, #1
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	3201      	adds	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	e791      	b.n	8003b0c <_dtoa_r+0x5f4>
 8003be8:	461d      	mov	r5, r3
 8003bea:	e7ed      	b.n	8003bc8 <_dtoa_r+0x6b0>
 8003bec:	2200      	movs	r2, #0
 8003bee:	4b99      	ldr	r3, [pc, #612]	; (8003e54 <_dtoa_r+0x93c>)
 8003bf0:	f7fc fc72 	bl	80004d8 <__aeabi_dmul>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	460f      	mov	r7, r1
 8003bfc:	f7fc fed4 	bl	80009a8 <__aeabi_dcmpeq>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d09e      	beq.n	8003b42 <_dtoa_r+0x62a>
 8003c04:	e7cf      	b.n	8003ba6 <_dtoa_r+0x68e>
 8003c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c08:	2a00      	cmp	r2, #0
 8003c0a:	f000 8088 	beq.w	8003d1e <_dtoa_r+0x806>
 8003c0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003c10:	2a01      	cmp	r2, #1
 8003c12:	dc6d      	bgt.n	8003cf0 <_dtoa_r+0x7d8>
 8003c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003c16:	2a00      	cmp	r2, #0
 8003c18:	d066      	beq.n	8003ce8 <_dtoa_r+0x7d0>
 8003c1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003c1e:	464d      	mov	r5, r9
 8003c20:	9e08      	ldr	r6, [sp, #32]
 8003c22:	9a07      	ldr	r2, [sp, #28]
 8003c24:	2101      	movs	r1, #1
 8003c26:	441a      	add	r2, r3
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4499      	add	r9, r3
 8003c2c:	9207      	str	r2, [sp, #28]
 8003c2e:	f000 fb2a 	bl	8004286 <__i2b>
 8003c32:	4607      	mov	r7, r0
 8003c34:	2d00      	cmp	r5, #0
 8003c36:	dd0b      	ble.n	8003c50 <_dtoa_r+0x738>
 8003c38:	9b07      	ldr	r3, [sp, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	dd08      	ble.n	8003c50 <_dtoa_r+0x738>
 8003c3e:	42ab      	cmp	r3, r5
 8003c40:	bfa8      	it	ge
 8003c42:	462b      	movge	r3, r5
 8003c44:	9a07      	ldr	r2, [sp, #28]
 8003c46:	eba9 0903 	sub.w	r9, r9, r3
 8003c4a:	1aed      	subs	r5, r5, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	9307      	str	r3, [sp, #28]
 8003c50:	9b08      	ldr	r3, [sp, #32]
 8003c52:	b1eb      	cbz	r3, 8003c90 <_dtoa_r+0x778>
 8003c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d065      	beq.n	8003d26 <_dtoa_r+0x80e>
 8003c5a:	b18e      	cbz	r6, 8003c80 <_dtoa_r+0x768>
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	4632      	mov	r2, r6
 8003c60:	4620      	mov	r0, r4
 8003c62:	f000 fbaf 	bl	80043c4 <__pow5mult>
 8003c66:	465a      	mov	r2, fp
 8003c68:	4601      	mov	r1, r0
 8003c6a:	4607      	mov	r7, r0
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f000 fb13 	bl	8004298 <__multiply>
 8003c72:	4659      	mov	r1, fp
 8003c74:	900a      	str	r0, [sp, #40]	; 0x28
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 fa65 	bl	8004146 <_Bfree>
 8003c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c7e:	469b      	mov	fp, r3
 8003c80:	9b08      	ldr	r3, [sp, #32]
 8003c82:	1b9a      	subs	r2, r3, r6
 8003c84:	d004      	beq.n	8003c90 <_dtoa_r+0x778>
 8003c86:	4659      	mov	r1, fp
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f000 fb9b 	bl	80043c4 <__pow5mult>
 8003c8e:	4683      	mov	fp, r0
 8003c90:	2101      	movs	r1, #1
 8003c92:	4620      	mov	r0, r4
 8003c94:	f000 faf7 	bl	8004286 <__i2b>
 8003c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 81c6 	beq.w	800402e <_dtoa_r+0xb16>
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4601      	mov	r1, r0
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f000 fb8c 	bl	80043c4 <__pow5mult>
 8003cac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cae:	4606      	mov	r6, r0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	dc3e      	bgt.n	8003d32 <_dtoa_r+0x81a>
 8003cb4:	9b02      	ldr	r3, [sp, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d137      	bne.n	8003d2a <_dtoa_r+0x812>
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d134      	bne.n	8003d2e <_dtoa_r+0x816>
 8003cc4:	9b03      	ldr	r3, [sp, #12]
 8003cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cca:	0d1b      	lsrs	r3, r3, #20
 8003ccc:	051b      	lsls	r3, r3, #20
 8003cce:	b12b      	cbz	r3, 8003cdc <_dtoa_r+0x7c4>
 8003cd0:	9b07      	ldr	r3, [sp, #28]
 8003cd2:	f109 0901 	add.w	r9, r9, #1
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	9307      	str	r3, [sp, #28]
 8003cda:	2301      	movs	r3, #1
 8003cdc:	9308      	str	r3, [sp, #32]
 8003cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d128      	bne.n	8003d36 <_dtoa_r+0x81e>
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e02e      	b.n	8003d46 <_dtoa_r+0x82e>
 8003ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003cee:	e796      	b.n	8003c1e <_dtoa_r+0x706>
 8003cf0:	9b08      	ldr	r3, [sp, #32]
 8003cf2:	f108 36ff 	add.w	r6, r8, #4294967295
 8003cf6:	42b3      	cmp	r3, r6
 8003cf8:	bfb7      	itett	lt
 8003cfa:	9b08      	ldrlt	r3, [sp, #32]
 8003cfc:	1b9e      	subge	r6, r3, r6
 8003cfe:	1af2      	sublt	r2, r6, r3
 8003d00:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003d02:	bfbf      	itttt	lt
 8003d04:	9608      	strlt	r6, [sp, #32]
 8003d06:	189b      	addlt	r3, r3, r2
 8003d08:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003d0a:	2600      	movlt	r6, #0
 8003d0c:	f1b8 0f00 	cmp.w	r8, #0
 8003d10:	bfb9      	ittee	lt
 8003d12:	eba9 0508 	sublt.w	r5, r9, r8
 8003d16:	2300      	movlt	r3, #0
 8003d18:	464d      	movge	r5, r9
 8003d1a:	4643      	movge	r3, r8
 8003d1c:	e781      	b.n	8003c22 <_dtoa_r+0x70a>
 8003d1e:	9e08      	ldr	r6, [sp, #32]
 8003d20:	464d      	mov	r5, r9
 8003d22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003d24:	e786      	b.n	8003c34 <_dtoa_r+0x71c>
 8003d26:	9a08      	ldr	r2, [sp, #32]
 8003d28:	e7ad      	b.n	8003c86 <_dtoa_r+0x76e>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e7d6      	b.n	8003cdc <_dtoa_r+0x7c4>
 8003d2e:	9b02      	ldr	r3, [sp, #8]
 8003d30:	e7d4      	b.n	8003cdc <_dtoa_r+0x7c4>
 8003d32:	2300      	movs	r3, #0
 8003d34:	9308      	str	r3, [sp, #32]
 8003d36:	6933      	ldr	r3, [r6, #16]
 8003d38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003d3c:	6918      	ldr	r0, [r3, #16]
 8003d3e:	f000 fa54 	bl	80041ea <__hi0bits>
 8003d42:	f1c0 0020 	rsb	r0, r0, #32
 8003d46:	9b07      	ldr	r3, [sp, #28]
 8003d48:	4418      	add	r0, r3
 8003d4a:	f010 001f 	ands.w	r0, r0, #31
 8003d4e:	d047      	beq.n	8003de0 <_dtoa_r+0x8c8>
 8003d50:	f1c0 0320 	rsb	r3, r0, #32
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	dd3b      	ble.n	8003dd0 <_dtoa_r+0x8b8>
 8003d58:	9b07      	ldr	r3, [sp, #28]
 8003d5a:	f1c0 001c 	rsb	r0, r0, #28
 8003d5e:	4481      	add	r9, r0
 8003d60:	4405      	add	r5, r0
 8003d62:	4403      	add	r3, r0
 8003d64:	9307      	str	r3, [sp, #28]
 8003d66:	f1b9 0f00 	cmp.w	r9, #0
 8003d6a:	dd05      	ble.n	8003d78 <_dtoa_r+0x860>
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	464a      	mov	r2, r9
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 fb75 	bl	8004460 <__lshift>
 8003d76:	4683      	mov	fp, r0
 8003d78:	9b07      	ldr	r3, [sp, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	dd05      	ble.n	8003d8a <_dtoa_r+0x872>
 8003d7e:	4631      	mov	r1, r6
 8003d80:	461a      	mov	r2, r3
 8003d82:	4620      	mov	r0, r4
 8003d84:	f000 fb6c 	bl	8004460 <__lshift>
 8003d88:	4606      	mov	r6, r0
 8003d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d8c:	b353      	cbz	r3, 8003de4 <_dtoa_r+0x8cc>
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4658      	mov	r0, fp
 8003d92:	f000 fbb9 	bl	8004508 <__mcmp>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	da24      	bge.n	8003de4 <_dtoa_r+0x8cc>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	220a      	movs	r2, #10
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 f9e7 	bl	8004174 <__multadd>
 8003da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dac:	4683      	mov	fp, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8144 	beq.w	800403c <_dtoa_r+0xb24>
 8003db4:	2300      	movs	r3, #0
 8003db6:	4639      	mov	r1, r7
 8003db8:	220a      	movs	r2, #10
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f000 f9da 	bl	8004174 <__multadd>
 8003dc0:	9b04      	ldr	r3, [sp, #16]
 8003dc2:	4607      	mov	r7, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	dc4d      	bgt.n	8003e64 <_dtoa_r+0x94c>
 8003dc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	dd4a      	ble.n	8003e64 <_dtoa_r+0x94c>
 8003dce:	e011      	b.n	8003df4 <_dtoa_r+0x8dc>
 8003dd0:	d0c9      	beq.n	8003d66 <_dtoa_r+0x84e>
 8003dd2:	9a07      	ldr	r2, [sp, #28]
 8003dd4:	331c      	adds	r3, #28
 8003dd6:	441a      	add	r2, r3
 8003dd8:	4499      	add	r9, r3
 8003dda:	441d      	add	r5, r3
 8003ddc:	4613      	mov	r3, r2
 8003dde:	e7c1      	b.n	8003d64 <_dtoa_r+0x84c>
 8003de0:	4603      	mov	r3, r0
 8003de2:	e7f6      	b.n	8003dd2 <_dtoa_r+0x8ba>
 8003de4:	f1b8 0f00 	cmp.w	r8, #0
 8003de8:	dc36      	bgt.n	8003e58 <_dtoa_r+0x940>
 8003dea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	dd33      	ble.n	8003e58 <_dtoa_r+0x940>
 8003df0:	f8cd 8010 	str.w	r8, [sp, #16]
 8003df4:	9b04      	ldr	r3, [sp, #16]
 8003df6:	b963      	cbnz	r3, 8003e12 <_dtoa_r+0x8fa>
 8003df8:	4631      	mov	r1, r6
 8003dfa:	2205      	movs	r2, #5
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f000 f9b9 	bl	8004174 <__multadd>
 8003e02:	4601      	mov	r1, r0
 8003e04:	4606      	mov	r6, r0
 8003e06:	4658      	mov	r0, fp
 8003e08:	f000 fb7e 	bl	8004508 <__mcmp>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	f73f add3 	bgt.w	80039b8 <_dtoa_r+0x4a0>
 8003e12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e14:	9d06      	ldr	r5, [sp, #24]
 8003e16:	ea6f 0a03 	mvn.w	sl, r3
 8003e1a:	f04f 0900 	mov.w	r9, #0
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4620      	mov	r0, r4
 8003e22:	f000 f990 	bl	8004146 <_Bfree>
 8003e26:	2f00      	cmp	r7, #0
 8003e28:	f43f aebd 	beq.w	8003ba6 <_dtoa_r+0x68e>
 8003e2c:	f1b9 0f00 	cmp.w	r9, #0
 8003e30:	d005      	beq.n	8003e3e <_dtoa_r+0x926>
 8003e32:	45b9      	cmp	r9, r7
 8003e34:	d003      	beq.n	8003e3e <_dtoa_r+0x926>
 8003e36:	4649      	mov	r1, r9
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f000 f984 	bl	8004146 <_Bfree>
 8003e3e:	4639      	mov	r1, r7
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 f980 	bl	8004146 <_Bfree>
 8003e46:	e6ae      	b.n	8003ba6 <_dtoa_r+0x68e>
 8003e48:	2600      	movs	r6, #0
 8003e4a:	4637      	mov	r7, r6
 8003e4c:	e7e1      	b.n	8003e12 <_dtoa_r+0x8fa>
 8003e4e:	46ba      	mov	sl, r7
 8003e50:	4637      	mov	r7, r6
 8003e52:	e5b1      	b.n	80039b8 <_dtoa_r+0x4a0>
 8003e54:	40240000 	.word	0x40240000
 8003e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80f3 	beq.w	800404a <_dtoa_r+0xb32>
 8003e64:	2d00      	cmp	r5, #0
 8003e66:	dd05      	ble.n	8003e74 <_dtoa_r+0x95c>
 8003e68:	4639      	mov	r1, r7
 8003e6a:	462a      	mov	r2, r5
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 faf7 	bl	8004460 <__lshift>
 8003e72:	4607      	mov	r7, r0
 8003e74:	9b08      	ldr	r3, [sp, #32]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d04c      	beq.n	8003f14 <_dtoa_r+0x9fc>
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f000 f92e 	bl	80040de <_Balloc>
 8003e82:	4605      	mov	r5, r0
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	f107 010c 	add.w	r1, r7, #12
 8003e8a:	3202      	adds	r2, #2
 8003e8c:	0092      	lsls	r2, r2, #2
 8003e8e:	300c      	adds	r0, #12
 8003e90:	f000 f91a 	bl	80040c8 <memcpy>
 8003e94:	2201      	movs	r2, #1
 8003e96:	4629      	mov	r1, r5
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f000 fae1 	bl	8004460 <__lshift>
 8003e9e:	46b9      	mov	r9, r7
 8003ea0:	4607      	mov	r7, r0
 8003ea2:	9b06      	ldr	r3, [sp, #24]
 8003ea4:	9307      	str	r3, [sp, #28]
 8003ea6:	9b02      	ldr	r3, [sp, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	9308      	str	r3, [sp, #32]
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4658      	mov	r0, fp
 8003eb2:	f7ff faa1 	bl	80033f8 <quorem>
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	4605      	mov	r5, r0
 8003eba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003ebe:	4658      	mov	r0, fp
 8003ec0:	f000 fb22 	bl	8004508 <__mcmp>
 8003ec4:	463a      	mov	r2, r7
 8003ec6:	9002      	str	r0, [sp, #8]
 8003ec8:	4631      	mov	r1, r6
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fb36 	bl	800453c <__mdiff>
 8003ed0:	68c3      	ldr	r3, [r0, #12]
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	bb03      	cbnz	r3, 8003f18 <_dtoa_r+0xa00>
 8003ed6:	4601      	mov	r1, r0
 8003ed8:	9009      	str	r0, [sp, #36]	; 0x24
 8003eda:	4658      	mov	r0, fp
 8003edc:	f000 fb14 	bl	8004508 <__mcmp>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eea:	f000 f92c 	bl	8004146 <_Bfree>
 8003eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ef0:	b9a3      	cbnz	r3, 8003f1c <_dtoa_r+0xa04>
 8003ef2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ef4:	b992      	cbnz	r2, 8003f1c <_dtoa_r+0xa04>
 8003ef6:	9a08      	ldr	r2, [sp, #32]
 8003ef8:	b982      	cbnz	r2, 8003f1c <_dtoa_r+0xa04>
 8003efa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003efe:	d029      	beq.n	8003f54 <_dtoa_r+0xa3c>
 8003f00:	9b02      	ldr	r3, [sp, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	dd01      	ble.n	8003f0a <_dtoa_r+0x9f2>
 8003f06:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003f0a:	9b07      	ldr	r3, [sp, #28]
 8003f0c:	1c5d      	adds	r5, r3, #1
 8003f0e:	f883 8000 	strb.w	r8, [r3]
 8003f12:	e784      	b.n	8003e1e <_dtoa_r+0x906>
 8003f14:	4638      	mov	r0, r7
 8003f16:	e7c2      	b.n	8003e9e <_dtoa_r+0x986>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e7e3      	b.n	8003ee4 <_dtoa_r+0x9cc>
 8003f1c:	9a02      	ldr	r2, [sp, #8]
 8003f1e:	2a00      	cmp	r2, #0
 8003f20:	db04      	blt.n	8003f2c <_dtoa_r+0xa14>
 8003f22:	d123      	bne.n	8003f6c <_dtoa_r+0xa54>
 8003f24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003f26:	bb0a      	cbnz	r2, 8003f6c <_dtoa_r+0xa54>
 8003f28:	9a08      	ldr	r2, [sp, #32]
 8003f2a:	b9fa      	cbnz	r2, 8003f6c <_dtoa_r+0xa54>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	ddec      	ble.n	8003f0a <_dtoa_r+0x9f2>
 8003f30:	4659      	mov	r1, fp
 8003f32:	2201      	movs	r2, #1
 8003f34:	4620      	mov	r0, r4
 8003f36:	f000 fa93 	bl	8004460 <__lshift>
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	4683      	mov	fp, r0
 8003f3e:	f000 fae3 	bl	8004508 <__mcmp>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	dc03      	bgt.n	8003f4e <_dtoa_r+0xa36>
 8003f46:	d1e0      	bne.n	8003f0a <_dtoa_r+0x9f2>
 8003f48:	f018 0f01 	tst.w	r8, #1
 8003f4c:	d0dd      	beq.n	8003f0a <_dtoa_r+0x9f2>
 8003f4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003f52:	d1d8      	bne.n	8003f06 <_dtoa_r+0x9ee>
 8003f54:	9b07      	ldr	r3, [sp, #28]
 8003f56:	9a07      	ldr	r2, [sp, #28]
 8003f58:	1c5d      	adds	r5, r3, #1
 8003f5a:	2339      	movs	r3, #57	; 0x39
 8003f5c:	7013      	strb	r3, [r2, #0]
 8003f5e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f62:	1e6a      	subs	r2, r5, #1
 8003f64:	2b39      	cmp	r3, #57	; 0x39
 8003f66:	d04d      	beq.n	8004004 <_dtoa_r+0xaec>
 8003f68:	3301      	adds	r3, #1
 8003f6a:	e052      	b.n	8004012 <_dtoa_r+0xafa>
 8003f6c:	9a07      	ldr	r2, [sp, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f102 0501 	add.w	r5, r2, #1
 8003f74:	dd06      	ble.n	8003f84 <_dtoa_r+0xa6c>
 8003f76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003f7a:	d0eb      	beq.n	8003f54 <_dtoa_r+0xa3c>
 8003f7c:	f108 0801 	add.w	r8, r8, #1
 8003f80:	9b07      	ldr	r3, [sp, #28]
 8003f82:	e7c4      	b.n	8003f0e <_dtoa_r+0x9f6>
 8003f84:	9b06      	ldr	r3, [sp, #24]
 8003f86:	9a04      	ldr	r2, [sp, #16]
 8003f88:	1aeb      	subs	r3, r5, r3
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003f90:	d021      	beq.n	8003fd6 <_dtoa_r+0xabe>
 8003f92:	4659      	mov	r1, fp
 8003f94:	2300      	movs	r3, #0
 8003f96:	220a      	movs	r2, #10
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f000 f8eb 	bl	8004174 <__multadd>
 8003f9e:	45b9      	cmp	r9, r7
 8003fa0:	4683      	mov	fp, r0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	f04f 020a 	mov.w	r2, #10
 8003faa:	4649      	mov	r1, r9
 8003fac:	4620      	mov	r0, r4
 8003fae:	d105      	bne.n	8003fbc <_dtoa_r+0xaa4>
 8003fb0:	f000 f8e0 	bl	8004174 <__multadd>
 8003fb4:	4681      	mov	r9, r0
 8003fb6:	4607      	mov	r7, r0
 8003fb8:	9507      	str	r5, [sp, #28]
 8003fba:	e778      	b.n	8003eae <_dtoa_r+0x996>
 8003fbc:	f000 f8da 	bl	8004174 <__multadd>
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	4681      	mov	r9, r0
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	220a      	movs	r2, #10
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f000 f8d3 	bl	8004174 <__multadd>
 8003fce:	4607      	mov	r7, r0
 8003fd0:	e7f2      	b.n	8003fb8 <_dtoa_r+0xaa0>
 8003fd2:	f04f 0900 	mov.w	r9, #0
 8003fd6:	4659      	mov	r1, fp
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f000 fa40 	bl	8004460 <__lshift>
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4683      	mov	fp, r0
 8003fe4:	f000 fa90 	bl	8004508 <__mcmp>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	dcb8      	bgt.n	8003f5e <_dtoa_r+0xa46>
 8003fec:	d102      	bne.n	8003ff4 <_dtoa_r+0xadc>
 8003fee:	f018 0f01 	tst.w	r8, #1
 8003ff2:	d1b4      	bne.n	8003f5e <_dtoa_r+0xa46>
 8003ff4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ff8:	1e6a      	subs	r2, r5, #1
 8003ffa:	2b30      	cmp	r3, #48	; 0x30
 8003ffc:	f47f af0f 	bne.w	8003e1e <_dtoa_r+0x906>
 8004000:	4615      	mov	r5, r2
 8004002:	e7f7      	b.n	8003ff4 <_dtoa_r+0xadc>
 8004004:	9b06      	ldr	r3, [sp, #24]
 8004006:	4293      	cmp	r3, r2
 8004008:	d105      	bne.n	8004016 <_dtoa_r+0xafe>
 800400a:	2331      	movs	r3, #49	; 0x31
 800400c:	9a06      	ldr	r2, [sp, #24]
 800400e:	f10a 0a01 	add.w	sl, sl, #1
 8004012:	7013      	strb	r3, [r2, #0]
 8004014:	e703      	b.n	8003e1e <_dtoa_r+0x906>
 8004016:	4615      	mov	r5, r2
 8004018:	e7a1      	b.n	8003f5e <_dtoa_r+0xa46>
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <_dtoa_r+0xb60>)
 800401c:	f7ff bae1 	b.w	80035e2 <_dtoa_r+0xca>
 8004020:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004022:	2b00      	cmp	r3, #0
 8004024:	f47f aabb 	bne.w	800359e <_dtoa_r+0x86>
 8004028:	4b14      	ldr	r3, [pc, #80]	; (800407c <_dtoa_r+0xb64>)
 800402a:	f7ff bada 	b.w	80035e2 <_dtoa_r+0xca>
 800402e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004030:	2b01      	cmp	r3, #1
 8004032:	f77f ae3f 	ble.w	8003cb4 <_dtoa_r+0x79c>
 8004036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004038:	9308      	str	r3, [sp, #32]
 800403a:	e653      	b.n	8003ce4 <_dtoa_r+0x7cc>
 800403c:	9b04      	ldr	r3, [sp, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	dc03      	bgt.n	800404a <_dtoa_r+0xb32>
 8004042:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004044:	2b02      	cmp	r3, #2
 8004046:	f73f aed5 	bgt.w	8003df4 <_dtoa_r+0x8dc>
 800404a:	9d06      	ldr	r5, [sp, #24]
 800404c:	4631      	mov	r1, r6
 800404e:	4658      	mov	r0, fp
 8004050:	f7ff f9d2 	bl	80033f8 <quorem>
 8004054:	9b06      	ldr	r3, [sp, #24]
 8004056:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800405a:	f805 8b01 	strb.w	r8, [r5], #1
 800405e:	9a04      	ldr	r2, [sp, #16]
 8004060:	1aeb      	subs	r3, r5, r3
 8004062:	429a      	cmp	r2, r3
 8004064:	ddb5      	ble.n	8003fd2 <_dtoa_r+0xaba>
 8004066:	4659      	mov	r1, fp
 8004068:	2300      	movs	r3, #0
 800406a:	220a      	movs	r2, #10
 800406c:	4620      	mov	r0, r4
 800406e:	f000 f881 	bl	8004174 <__multadd>
 8004072:	4683      	mov	fp, r0
 8004074:	e7ea      	b.n	800404c <_dtoa_r+0xb34>
 8004076:	bf00      	nop
 8004078:	08004c18 	.word	0x08004c18
 800407c:	08004c3c 	.word	0x08004c3c

08004080 <_localeconv_r>:
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <_localeconv_r+0x14>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a18      	ldr	r0, [r3, #32]
 8004086:	4b04      	ldr	r3, [pc, #16]	; (8004098 <_localeconv_r+0x18>)
 8004088:	2800      	cmp	r0, #0
 800408a:	bf08      	it	eq
 800408c:	4618      	moveq	r0, r3
 800408e:	30f0      	adds	r0, #240	; 0xf0
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000010 	.word	0x20000010
 8004098:	20000074 	.word	0x20000074

0800409c <malloc>:
 800409c:	4b02      	ldr	r3, [pc, #8]	; (80040a8 <malloc+0xc>)
 800409e:	4601      	mov	r1, r0
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	f000 bb53 	b.w	800474c <_malloc_r>
 80040a6:	bf00      	nop
 80040a8:	20000010 	.word	0x20000010

080040ac <memchr>:
 80040ac:	b510      	push	{r4, lr}
 80040ae:	b2c9      	uxtb	r1, r1
 80040b0:	4402      	add	r2, r0
 80040b2:	4290      	cmp	r0, r2
 80040b4:	4603      	mov	r3, r0
 80040b6:	d101      	bne.n	80040bc <memchr+0x10>
 80040b8:	2300      	movs	r3, #0
 80040ba:	e003      	b.n	80040c4 <memchr+0x18>
 80040bc:	781c      	ldrb	r4, [r3, #0]
 80040be:	3001      	adds	r0, #1
 80040c0:	428c      	cmp	r4, r1
 80040c2:	d1f6      	bne.n	80040b2 <memchr+0x6>
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd10      	pop	{r4, pc}

080040c8 <memcpy>:
 80040c8:	b510      	push	{r4, lr}
 80040ca:	1e43      	subs	r3, r0, #1
 80040cc:	440a      	add	r2, r1
 80040ce:	4291      	cmp	r1, r2
 80040d0:	d100      	bne.n	80040d4 <memcpy+0xc>
 80040d2:	bd10      	pop	{r4, pc}
 80040d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040dc:	e7f7      	b.n	80040ce <memcpy+0x6>

080040de <_Balloc>:
 80040de:	b570      	push	{r4, r5, r6, lr}
 80040e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80040e2:	4604      	mov	r4, r0
 80040e4:	460e      	mov	r6, r1
 80040e6:	b93d      	cbnz	r5, 80040f8 <_Balloc+0x1a>
 80040e8:	2010      	movs	r0, #16
 80040ea:	f7ff ffd7 	bl	800409c <malloc>
 80040ee:	6260      	str	r0, [r4, #36]	; 0x24
 80040f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80040f4:	6005      	str	r5, [r0, #0]
 80040f6:	60c5      	str	r5, [r0, #12]
 80040f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80040fa:	68eb      	ldr	r3, [r5, #12]
 80040fc:	b183      	cbz	r3, 8004120 <_Balloc+0x42>
 80040fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004106:	b9b8      	cbnz	r0, 8004138 <_Balloc+0x5a>
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f506 	lsl.w	r5, r1, r6
 800410e:	1d6a      	adds	r2, r5, #5
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	4620      	mov	r0, r4
 8004114:	f000 fabf 	bl	8004696 <_calloc_r>
 8004118:	b160      	cbz	r0, 8004134 <_Balloc+0x56>
 800411a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800411e:	e00e      	b.n	800413e <_Balloc+0x60>
 8004120:	2221      	movs	r2, #33	; 0x21
 8004122:	2104      	movs	r1, #4
 8004124:	4620      	mov	r0, r4
 8004126:	f000 fab6 	bl	8004696 <_calloc_r>
 800412a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800412c:	60e8      	str	r0, [r5, #12]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e4      	bne.n	80040fe <_Balloc+0x20>
 8004134:	2000      	movs	r0, #0
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	6802      	ldr	r2, [r0, #0]
 800413a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800413e:	2300      	movs	r3, #0
 8004140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004144:	e7f7      	b.n	8004136 <_Balloc+0x58>

08004146 <_Bfree>:
 8004146:	b570      	push	{r4, r5, r6, lr}
 8004148:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800414a:	4606      	mov	r6, r0
 800414c:	460d      	mov	r5, r1
 800414e:	b93c      	cbnz	r4, 8004160 <_Bfree+0x1a>
 8004150:	2010      	movs	r0, #16
 8004152:	f7ff ffa3 	bl	800409c <malloc>
 8004156:	6270      	str	r0, [r6, #36]	; 0x24
 8004158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800415c:	6004      	str	r4, [r0, #0]
 800415e:	60c4      	str	r4, [r0, #12]
 8004160:	b13d      	cbz	r5, 8004172 <_Bfree+0x2c>
 8004162:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004164:	686a      	ldr	r2, [r5, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800416c:	6029      	str	r1, [r5, #0]
 800416e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004172:	bd70      	pop	{r4, r5, r6, pc}

08004174 <__multadd>:
 8004174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004178:	461f      	mov	r7, r3
 800417a:	4606      	mov	r6, r0
 800417c:	460c      	mov	r4, r1
 800417e:	2300      	movs	r3, #0
 8004180:	690d      	ldr	r5, [r1, #16]
 8004182:	f101 0c14 	add.w	ip, r1, #20
 8004186:	f8dc 0000 	ldr.w	r0, [ip]
 800418a:	3301      	adds	r3, #1
 800418c:	b281      	uxth	r1, r0
 800418e:	fb02 7101 	mla	r1, r2, r1, r7
 8004192:	0c00      	lsrs	r0, r0, #16
 8004194:	0c0f      	lsrs	r7, r1, #16
 8004196:	fb02 7000 	mla	r0, r2, r0, r7
 800419a:	b289      	uxth	r1, r1
 800419c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80041a0:	429d      	cmp	r5, r3
 80041a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80041a6:	f84c 1b04 	str.w	r1, [ip], #4
 80041aa:	dcec      	bgt.n	8004186 <__multadd+0x12>
 80041ac:	b1d7      	cbz	r7, 80041e4 <__multadd+0x70>
 80041ae:	68a3      	ldr	r3, [r4, #8]
 80041b0:	42ab      	cmp	r3, r5
 80041b2:	dc12      	bgt.n	80041da <__multadd+0x66>
 80041b4:	6861      	ldr	r1, [r4, #4]
 80041b6:	4630      	mov	r0, r6
 80041b8:	3101      	adds	r1, #1
 80041ba:	f7ff ff90 	bl	80040de <_Balloc>
 80041be:	4680      	mov	r8, r0
 80041c0:	6922      	ldr	r2, [r4, #16]
 80041c2:	f104 010c 	add.w	r1, r4, #12
 80041c6:	3202      	adds	r2, #2
 80041c8:	0092      	lsls	r2, r2, #2
 80041ca:	300c      	adds	r0, #12
 80041cc:	f7ff ff7c 	bl	80040c8 <memcpy>
 80041d0:	4621      	mov	r1, r4
 80041d2:	4630      	mov	r0, r6
 80041d4:	f7ff ffb7 	bl	8004146 <_Bfree>
 80041d8:	4644      	mov	r4, r8
 80041da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80041de:	3501      	adds	r5, #1
 80041e0:	615f      	str	r7, [r3, #20]
 80041e2:	6125      	str	r5, [r4, #16]
 80041e4:	4620      	mov	r0, r4
 80041e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080041ea <__hi0bits>:
 80041ea:	0c02      	lsrs	r2, r0, #16
 80041ec:	0412      	lsls	r2, r2, #16
 80041ee:	4603      	mov	r3, r0
 80041f0:	b9b2      	cbnz	r2, 8004220 <__hi0bits+0x36>
 80041f2:	0403      	lsls	r3, r0, #16
 80041f4:	2010      	movs	r0, #16
 80041f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80041fa:	bf04      	itt	eq
 80041fc:	021b      	lsleq	r3, r3, #8
 80041fe:	3008      	addeq	r0, #8
 8004200:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004204:	bf04      	itt	eq
 8004206:	011b      	lsleq	r3, r3, #4
 8004208:	3004      	addeq	r0, #4
 800420a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800420e:	bf04      	itt	eq
 8004210:	009b      	lsleq	r3, r3, #2
 8004212:	3002      	addeq	r0, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	db06      	blt.n	8004226 <__hi0bits+0x3c>
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	d503      	bpl.n	8004224 <__hi0bits+0x3a>
 800421c:	3001      	adds	r0, #1
 800421e:	4770      	bx	lr
 8004220:	2000      	movs	r0, #0
 8004222:	e7e8      	b.n	80041f6 <__hi0bits+0xc>
 8004224:	2020      	movs	r0, #32
 8004226:	4770      	bx	lr

08004228 <__lo0bits>:
 8004228:	6803      	ldr	r3, [r0, #0]
 800422a:	4601      	mov	r1, r0
 800422c:	f013 0207 	ands.w	r2, r3, #7
 8004230:	d00b      	beq.n	800424a <__lo0bits+0x22>
 8004232:	07da      	lsls	r2, r3, #31
 8004234:	d423      	bmi.n	800427e <__lo0bits+0x56>
 8004236:	0798      	lsls	r0, r3, #30
 8004238:	bf49      	itett	mi
 800423a:	085b      	lsrmi	r3, r3, #1
 800423c:	089b      	lsrpl	r3, r3, #2
 800423e:	2001      	movmi	r0, #1
 8004240:	600b      	strmi	r3, [r1, #0]
 8004242:	bf5c      	itt	pl
 8004244:	600b      	strpl	r3, [r1, #0]
 8004246:	2002      	movpl	r0, #2
 8004248:	4770      	bx	lr
 800424a:	b298      	uxth	r0, r3
 800424c:	b9a8      	cbnz	r0, 800427a <__lo0bits+0x52>
 800424e:	2010      	movs	r0, #16
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004256:	bf04      	itt	eq
 8004258:	0a1b      	lsreq	r3, r3, #8
 800425a:	3008      	addeq	r0, #8
 800425c:	071a      	lsls	r2, r3, #28
 800425e:	bf04      	itt	eq
 8004260:	091b      	lsreq	r3, r3, #4
 8004262:	3004      	addeq	r0, #4
 8004264:	079a      	lsls	r2, r3, #30
 8004266:	bf04      	itt	eq
 8004268:	089b      	lsreq	r3, r3, #2
 800426a:	3002      	addeq	r0, #2
 800426c:	07da      	lsls	r2, r3, #31
 800426e:	d402      	bmi.n	8004276 <__lo0bits+0x4e>
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	d006      	beq.n	8004282 <__lo0bits+0x5a>
 8004274:	3001      	adds	r0, #1
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	4770      	bx	lr
 800427a:	4610      	mov	r0, r2
 800427c:	e7e9      	b.n	8004252 <__lo0bits+0x2a>
 800427e:	2000      	movs	r0, #0
 8004280:	4770      	bx	lr
 8004282:	2020      	movs	r0, #32
 8004284:	4770      	bx	lr

08004286 <__i2b>:
 8004286:	b510      	push	{r4, lr}
 8004288:	460c      	mov	r4, r1
 800428a:	2101      	movs	r1, #1
 800428c:	f7ff ff27 	bl	80040de <_Balloc>
 8004290:	2201      	movs	r2, #1
 8004292:	6144      	str	r4, [r0, #20]
 8004294:	6102      	str	r2, [r0, #16]
 8004296:	bd10      	pop	{r4, pc}

08004298 <__multiply>:
 8004298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429c:	4614      	mov	r4, r2
 800429e:	690a      	ldr	r2, [r1, #16]
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	4688      	mov	r8, r1
 80042a4:	429a      	cmp	r2, r3
 80042a6:	bfbe      	ittt	lt
 80042a8:	460b      	movlt	r3, r1
 80042aa:	46a0      	movlt	r8, r4
 80042ac:	461c      	movlt	r4, r3
 80042ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80042b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80042b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80042ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80042be:	eb07 0609 	add.w	r6, r7, r9
 80042c2:	42b3      	cmp	r3, r6
 80042c4:	bfb8      	it	lt
 80042c6:	3101      	addlt	r1, #1
 80042c8:	f7ff ff09 	bl	80040de <_Balloc>
 80042cc:	f100 0514 	add.w	r5, r0, #20
 80042d0:	462b      	mov	r3, r5
 80042d2:	2200      	movs	r2, #0
 80042d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80042d8:	4573      	cmp	r3, lr
 80042da:	d316      	bcc.n	800430a <__multiply+0x72>
 80042dc:	f104 0214 	add.w	r2, r4, #20
 80042e0:	f108 0114 	add.w	r1, r8, #20
 80042e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80042e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	9b00      	ldr	r3, [sp, #0]
 80042f0:	9201      	str	r2, [sp, #4]
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d80c      	bhi.n	8004310 <__multiply+0x78>
 80042f6:	2e00      	cmp	r6, #0
 80042f8:	dd03      	ble.n	8004302 <__multiply+0x6a>
 80042fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d05d      	beq.n	80043be <__multiply+0x126>
 8004302:	6106      	str	r6, [r0, #16]
 8004304:	b003      	add	sp, #12
 8004306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800430a:	f843 2b04 	str.w	r2, [r3], #4
 800430e:	e7e3      	b.n	80042d8 <__multiply+0x40>
 8004310:	f8b2 b000 	ldrh.w	fp, [r2]
 8004314:	f1bb 0f00 	cmp.w	fp, #0
 8004318:	d023      	beq.n	8004362 <__multiply+0xca>
 800431a:	4689      	mov	r9, r1
 800431c:	46ac      	mov	ip, r5
 800431e:	f04f 0800 	mov.w	r8, #0
 8004322:	f859 4b04 	ldr.w	r4, [r9], #4
 8004326:	f8dc a000 	ldr.w	sl, [ip]
 800432a:	b2a3      	uxth	r3, r4
 800432c:	fa1f fa8a 	uxth.w	sl, sl
 8004330:	fb0b a303 	mla	r3, fp, r3, sl
 8004334:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004338:	f8dc 4000 	ldr.w	r4, [ip]
 800433c:	4443      	add	r3, r8
 800433e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004342:	fb0b 840a 	mla	r4, fp, sl, r8
 8004346:	46e2      	mov	sl, ip
 8004348:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800434c:	b29b      	uxth	r3, r3
 800434e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004352:	454f      	cmp	r7, r9
 8004354:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004358:	f84a 3b04 	str.w	r3, [sl], #4
 800435c:	d82b      	bhi.n	80043b6 <__multiply+0x11e>
 800435e:	f8cc 8004 	str.w	r8, [ip, #4]
 8004362:	9b01      	ldr	r3, [sp, #4]
 8004364:	3204      	adds	r2, #4
 8004366:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800436a:	f1ba 0f00 	cmp.w	sl, #0
 800436e:	d020      	beq.n	80043b2 <__multiply+0x11a>
 8004370:	4689      	mov	r9, r1
 8004372:	46a8      	mov	r8, r5
 8004374:	f04f 0b00 	mov.w	fp, #0
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	f8b9 c000 	ldrh.w	ip, [r9]
 800437e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004382:	b29b      	uxth	r3, r3
 8004384:	fb0a 440c 	mla	r4, sl, ip, r4
 8004388:	46c4      	mov	ip, r8
 800438a:	445c      	add	r4, fp
 800438c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004390:	f84c 3b04 	str.w	r3, [ip], #4
 8004394:	f859 3b04 	ldr.w	r3, [r9], #4
 8004398:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	fb0a b303 	mla	r3, sl, r3, fp
 80043a2:	454f      	cmp	r7, r9
 80043a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80043a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80043ac:	d805      	bhi.n	80043ba <__multiply+0x122>
 80043ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80043b2:	3504      	adds	r5, #4
 80043b4:	e79b      	b.n	80042ee <__multiply+0x56>
 80043b6:	46d4      	mov	ip, sl
 80043b8:	e7b3      	b.n	8004322 <__multiply+0x8a>
 80043ba:	46e0      	mov	r8, ip
 80043bc:	e7dd      	b.n	800437a <__multiply+0xe2>
 80043be:	3e01      	subs	r6, #1
 80043c0:	e799      	b.n	80042f6 <__multiply+0x5e>
	...

080043c4 <__pow5mult>:
 80043c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043c8:	4615      	mov	r5, r2
 80043ca:	f012 0203 	ands.w	r2, r2, #3
 80043ce:	4606      	mov	r6, r0
 80043d0:	460f      	mov	r7, r1
 80043d2:	d007      	beq.n	80043e4 <__pow5mult+0x20>
 80043d4:	4c21      	ldr	r4, [pc, #132]	; (800445c <__pow5mult+0x98>)
 80043d6:	3a01      	subs	r2, #1
 80043d8:	2300      	movs	r3, #0
 80043da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80043de:	f7ff fec9 	bl	8004174 <__multadd>
 80043e2:	4607      	mov	r7, r0
 80043e4:	10ad      	asrs	r5, r5, #2
 80043e6:	d035      	beq.n	8004454 <__pow5mult+0x90>
 80043e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80043ea:	b93c      	cbnz	r4, 80043fc <__pow5mult+0x38>
 80043ec:	2010      	movs	r0, #16
 80043ee:	f7ff fe55 	bl	800409c <malloc>
 80043f2:	6270      	str	r0, [r6, #36]	; 0x24
 80043f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80043f8:	6004      	str	r4, [r0, #0]
 80043fa:	60c4      	str	r4, [r0, #12]
 80043fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004400:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004404:	b94c      	cbnz	r4, 800441a <__pow5mult+0x56>
 8004406:	f240 2171 	movw	r1, #625	; 0x271
 800440a:	4630      	mov	r0, r6
 800440c:	f7ff ff3b 	bl	8004286 <__i2b>
 8004410:	2300      	movs	r3, #0
 8004412:	4604      	mov	r4, r0
 8004414:	f8c8 0008 	str.w	r0, [r8, #8]
 8004418:	6003      	str	r3, [r0, #0]
 800441a:	f04f 0800 	mov.w	r8, #0
 800441e:	07eb      	lsls	r3, r5, #31
 8004420:	d50a      	bpl.n	8004438 <__pow5mult+0x74>
 8004422:	4639      	mov	r1, r7
 8004424:	4622      	mov	r2, r4
 8004426:	4630      	mov	r0, r6
 8004428:	f7ff ff36 	bl	8004298 <__multiply>
 800442c:	4681      	mov	r9, r0
 800442e:	4639      	mov	r1, r7
 8004430:	4630      	mov	r0, r6
 8004432:	f7ff fe88 	bl	8004146 <_Bfree>
 8004436:	464f      	mov	r7, r9
 8004438:	106d      	asrs	r5, r5, #1
 800443a:	d00b      	beq.n	8004454 <__pow5mult+0x90>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	b938      	cbnz	r0, 8004450 <__pow5mult+0x8c>
 8004440:	4622      	mov	r2, r4
 8004442:	4621      	mov	r1, r4
 8004444:	4630      	mov	r0, r6
 8004446:	f7ff ff27 	bl	8004298 <__multiply>
 800444a:	6020      	str	r0, [r4, #0]
 800444c:	f8c0 8000 	str.w	r8, [r0]
 8004450:	4604      	mov	r4, r0
 8004452:	e7e4      	b.n	800441e <__pow5mult+0x5a>
 8004454:	4638      	mov	r0, r7
 8004456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445a:	bf00      	nop
 800445c:	08004d40 	.word	0x08004d40

08004460 <__lshift>:
 8004460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	460c      	mov	r4, r1
 8004466:	4607      	mov	r7, r0
 8004468:	4616      	mov	r6, r2
 800446a:	6923      	ldr	r3, [r4, #16]
 800446c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004470:	eb0a 0903 	add.w	r9, sl, r3
 8004474:	6849      	ldr	r1, [r1, #4]
 8004476:	68a3      	ldr	r3, [r4, #8]
 8004478:	f109 0501 	add.w	r5, r9, #1
 800447c:	42ab      	cmp	r3, r5
 800447e:	db32      	blt.n	80044e6 <__lshift+0x86>
 8004480:	4638      	mov	r0, r7
 8004482:	f7ff fe2c 	bl	80040de <_Balloc>
 8004486:	2300      	movs	r3, #0
 8004488:	4680      	mov	r8, r0
 800448a:	461a      	mov	r2, r3
 800448c:	f100 0114 	add.w	r1, r0, #20
 8004490:	4553      	cmp	r3, sl
 8004492:	db2b      	blt.n	80044ec <__lshift+0x8c>
 8004494:	6920      	ldr	r0, [r4, #16]
 8004496:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800449a:	f104 0314 	add.w	r3, r4, #20
 800449e:	f016 021f 	ands.w	r2, r6, #31
 80044a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80044a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80044aa:	d025      	beq.n	80044f8 <__lshift+0x98>
 80044ac:	2000      	movs	r0, #0
 80044ae:	f1c2 0e20 	rsb	lr, r2, #32
 80044b2:	468a      	mov	sl, r1
 80044b4:	681e      	ldr	r6, [r3, #0]
 80044b6:	4096      	lsls	r6, r2
 80044b8:	4330      	orrs	r0, r6
 80044ba:	f84a 0b04 	str.w	r0, [sl], #4
 80044be:	f853 0b04 	ldr.w	r0, [r3], #4
 80044c2:	459c      	cmp	ip, r3
 80044c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80044c8:	d814      	bhi.n	80044f4 <__lshift+0x94>
 80044ca:	6048      	str	r0, [r1, #4]
 80044cc:	b108      	cbz	r0, 80044d2 <__lshift+0x72>
 80044ce:	f109 0502 	add.w	r5, r9, #2
 80044d2:	3d01      	subs	r5, #1
 80044d4:	4638      	mov	r0, r7
 80044d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80044da:	4621      	mov	r1, r4
 80044dc:	f7ff fe33 	bl	8004146 <_Bfree>
 80044e0:	4640      	mov	r0, r8
 80044e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e6:	3101      	adds	r1, #1
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	e7c7      	b.n	800447c <__lshift+0x1c>
 80044ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80044f0:	3301      	adds	r3, #1
 80044f2:	e7cd      	b.n	8004490 <__lshift+0x30>
 80044f4:	4651      	mov	r1, sl
 80044f6:	e7dc      	b.n	80044b2 <__lshift+0x52>
 80044f8:	3904      	subs	r1, #4
 80044fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80044fe:	459c      	cmp	ip, r3
 8004500:	f841 2f04 	str.w	r2, [r1, #4]!
 8004504:	d8f9      	bhi.n	80044fa <__lshift+0x9a>
 8004506:	e7e4      	b.n	80044d2 <__lshift+0x72>

08004508 <__mcmp>:
 8004508:	6903      	ldr	r3, [r0, #16]
 800450a:	690a      	ldr	r2, [r1, #16]
 800450c:	b530      	push	{r4, r5, lr}
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	d10c      	bne.n	800452c <__mcmp+0x24>
 8004512:	0092      	lsls	r2, r2, #2
 8004514:	3014      	adds	r0, #20
 8004516:	3114      	adds	r1, #20
 8004518:	1884      	adds	r4, r0, r2
 800451a:	4411      	add	r1, r2
 800451c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004520:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004524:	4295      	cmp	r5, r2
 8004526:	d003      	beq.n	8004530 <__mcmp+0x28>
 8004528:	d305      	bcc.n	8004536 <__mcmp+0x2e>
 800452a:	2301      	movs	r3, #1
 800452c:	4618      	mov	r0, r3
 800452e:	bd30      	pop	{r4, r5, pc}
 8004530:	42a0      	cmp	r0, r4
 8004532:	d3f3      	bcc.n	800451c <__mcmp+0x14>
 8004534:	e7fa      	b.n	800452c <__mcmp+0x24>
 8004536:	f04f 33ff 	mov.w	r3, #4294967295
 800453a:	e7f7      	b.n	800452c <__mcmp+0x24>

0800453c <__mdiff>:
 800453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	460d      	mov	r5, r1
 8004542:	4607      	mov	r7, r0
 8004544:	4611      	mov	r1, r2
 8004546:	4628      	mov	r0, r5
 8004548:	4614      	mov	r4, r2
 800454a:	f7ff ffdd 	bl	8004508 <__mcmp>
 800454e:	1e06      	subs	r6, r0, #0
 8004550:	d108      	bne.n	8004564 <__mdiff+0x28>
 8004552:	4631      	mov	r1, r6
 8004554:	4638      	mov	r0, r7
 8004556:	f7ff fdc2 	bl	80040de <_Balloc>
 800455a:	2301      	movs	r3, #1
 800455c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004564:	bfa4      	itt	ge
 8004566:	4623      	movge	r3, r4
 8004568:	462c      	movge	r4, r5
 800456a:	4638      	mov	r0, r7
 800456c:	6861      	ldr	r1, [r4, #4]
 800456e:	bfa6      	itte	ge
 8004570:	461d      	movge	r5, r3
 8004572:	2600      	movge	r6, #0
 8004574:	2601      	movlt	r6, #1
 8004576:	f7ff fdb2 	bl	80040de <_Balloc>
 800457a:	f04f 0e00 	mov.w	lr, #0
 800457e:	60c6      	str	r6, [r0, #12]
 8004580:	692b      	ldr	r3, [r5, #16]
 8004582:	6926      	ldr	r6, [r4, #16]
 8004584:	f104 0214 	add.w	r2, r4, #20
 8004588:	f105 0914 	add.w	r9, r5, #20
 800458c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004590:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004594:	f100 0114 	add.w	r1, r0, #20
 8004598:	f852 ab04 	ldr.w	sl, [r2], #4
 800459c:	f859 5b04 	ldr.w	r5, [r9], #4
 80045a0:	fa1f f38a 	uxth.w	r3, sl
 80045a4:	4473      	add	r3, lr
 80045a6:	b2ac      	uxth	r4, r5
 80045a8:	1b1b      	subs	r3, r3, r4
 80045aa:	0c2c      	lsrs	r4, r5, #16
 80045ac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80045b0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80045ba:	45c8      	cmp	r8, r9
 80045bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80045c0:	4694      	mov	ip, r2
 80045c2:	f841 4b04 	str.w	r4, [r1], #4
 80045c6:	d8e7      	bhi.n	8004598 <__mdiff+0x5c>
 80045c8:	45bc      	cmp	ip, r7
 80045ca:	d304      	bcc.n	80045d6 <__mdiff+0x9a>
 80045cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80045d0:	b183      	cbz	r3, 80045f4 <__mdiff+0xb8>
 80045d2:	6106      	str	r6, [r0, #16]
 80045d4:	e7c4      	b.n	8004560 <__mdiff+0x24>
 80045d6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80045da:	b2a2      	uxth	r2, r4
 80045dc:	4472      	add	r2, lr
 80045de:	1413      	asrs	r3, r2, #16
 80045e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80045e4:	b292      	uxth	r2, r2
 80045e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80045ea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80045ee:	f841 2b04 	str.w	r2, [r1], #4
 80045f2:	e7e9      	b.n	80045c8 <__mdiff+0x8c>
 80045f4:	3e01      	subs	r6, #1
 80045f6:	e7e9      	b.n	80045cc <__mdiff+0x90>

080045f8 <__d2b>:
 80045f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80045fc:	461c      	mov	r4, r3
 80045fe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004602:	2101      	movs	r1, #1
 8004604:	4690      	mov	r8, r2
 8004606:	f7ff fd6a 	bl	80040de <_Balloc>
 800460a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800460e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004612:	4607      	mov	r7, r0
 8004614:	bb34      	cbnz	r4, 8004664 <__d2b+0x6c>
 8004616:	9201      	str	r2, [sp, #4]
 8004618:	f1b8 0200 	subs.w	r2, r8, #0
 800461c:	d027      	beq.n	800466e <__d2b+0x76>
 800461e:	a802      	add	r0, sp, #8
 8004620:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004624:	f7ff fe00 	bl	8004228 <__lo0bits>
 8004628:	9900      	ldr	r1, [sp, #0]
 800462a:	b1f0      	cbz	r0, 800466a <__d2b+0x72>
 800462c:	9a01      	ldr	r2, [sp, #4]
 800462e:	f1c0 0320 	rsb	r3, r0, #32
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	430b      	orrs	r3, r1
 8004638:	40c2      	lsrs	r2, r0
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	9201      	str	r2, [sp, #4]
 800463e:	9b01      	ldr	r3, [sp, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2102      	movne	r1, #2
 8004646:	2101      	moveq	r1, #1
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	6139      	str	r1, [r7, #16]
 800464c:	b1c4      	cbz	r4, 8004680 <__d2b+0x88>
 800464e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004652:	4404      	add	r4, r0
 8004654:	6034      	str	r4, [r6, #0]
 8004656:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800465a:	6028      	str	r0, [r5, #0]
 800465c:	4638      	mov	r0, r7
 800465e:	b002      	add	sp, #8
 8004660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004664:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004668:	e7d5      	b.n	8004616 <__d2b+0x1e>
 800466a:	6179      	str	r1, [r7, #20]
 800466c:	e7e7      	b.n	800463e <__d2b+0x46>
 800466e:	a801      	add	r0, sp, #4
 8004670:	f7ff fdda 	bl	8004228 <__lo0bits>
 8004674:	2101      	movs	r1, #1
 8004676:	9b01      	ldr	r3, [sp, #4]
 8004678:	6139      	str	r1, [r7, #16]
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	3020      	adds	r0, #32
 800467e:	e7e5      	b.n	800464c <__d2b+0x54>
 8004680:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004684:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004688:	6030      	str	r0, [r6, #0]
 800468a:	6918      	ldr	r0, [r3, #16]
 800468c:	f7ff fdad 	bl	80041ea <__hi0bits>
 8004690:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004694:	e7e1      	b.n	800465a <__d2b+0x62>

08004696 <_calloc_r>:
 8004696:	b538      	push	{r3, r4, r5, lr}
 8004698:	fb02 f401 	mul.w	r4, r2, r1
 800469c:	4621      	mov	r1, r4
 800469e:	f000 f855 	bl	800474c <_malloc_r>
 80046a2:	4605      	mov	r5, r0
 80046a4:	b118      	cbz	r0, 80046ae <_calloc_r+0x18>
 80046a6:	4622      	mov	r2, r4
 80046a8:	2100      	movs	r1, #0
 80046aa:	f7fe fa2d 	bl	8002b08 <memset>
 80046ae:	4628      	mov	r0, r5
 80046b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080046b4 <_free_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4605      	mov	r5, r0
 80046b8:	2900      	cmp	r1, #0
 80046ba:	d043      	beq.n	8004744 <_free_r+0x90>
 80046bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c0:	1f0c      	subs	r4, r1, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bfb8      	it	lt
 80046c6:	18e4      	addlt	r4, r4, r3
 80046c8:	f000 fa27 	bl	8004b1a <__malloc_lock>
 80046cc:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <_free_r+0x94>)
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	4610      	mov	r0, r2
 80046d2:	b933      	cbnz	r3, 80046e2 <_free_r+0x2e>
 80046d4:	6063      	str	r3, [r4, #4]
 80046d6:	6014      	str	r4, [r2, #0]
 80046d8:	4628      	mov	r0, r5
 80046da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046de:	f000 ba1d 	b.w	8004b1c <__malloc_unlock>
 80046e2:	42a3      	cmp	r3, r4
 80046e4:	d90b      	bls.n	80046fe <_free_r+0x4a>
 80046e6:	6821      	ldr	r1, [r4, #0]
 80046e8:	1862      	adds	r2, r4, r1
 80046ea:	4293      	cmp	r3, r2
 80046ec:	bf01      	itttt	eq
 80046ee:	681a      	ldreq	r2, [r3, #0]
 80046f0:	685b      	ldreq	r3, [r3, #4]
 80046f2:	1852      	addeq	r2, r2, r1
 80046f4:	6022      	streq	r2, [r4, #0]
 80046f6:	6063      	str	r3, [r4, #4]
 80046f8:	6004      	str	r4, [r0, #0]
 80046fa:	e7ed      	b.n	80046d8 <_free_r+0x24>
 80046fc:	4613      	mov	r3, r2
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	b10a      	cbz	r2, 8004706 <_free_r+0x52>
 8004702:	42a2      	cmp	r2, r4
 8004704:	d9fa      	bls.n	80046fc <_free_r+0x48>
 8004706:	6819      	ldr	r1, [r3, #0]
 8004708:	1858      	adds	r0, r3, r1
 800470a:	42a0      	cmp	r0, r4
 800470c:	d10b      	bne.n	8004726 <_free_r+0x72>
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	4401      	add	r1, r0
 8004712:	1858      	adds	r0, r3, r1
 8004714:	4282      	cmp	r2, r0
 8004716:	6019      	str	r1, [r3, #0]
 8004718:	d1de      	bne.n	80046d8 <_free_r+0x24>
 800471a:	6810      	ldr	r0, [r2, #0]
 800471c:	6852      	ldr	r2, [r2, #4]
 800471e:	4401      	add	r1, r0
 8004720:	6019      	str	r1, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	e7d8      	b.n	80046d8 <_free_r+0x24>
 8004726:	d902      	bls.n	800472e <_free_r+0x7a>
 8004728:	230c      	movs	r3, #12
 800472a:	602b      	str	r3, [r5, #0]
 800472c:	e7d4      	b.n	80046d8 <_free_r+0x24>
 800472e:	6820      	ldr	r0, [r4, #0]
 8004730:	1821      	adds	r1, r4, r0
 8004732:	428a      	cmp	r2, r1
 8004734:	bf01      	itttt	eq
 8004736:	6811      	ldreq	r1, [r2, #0]
 8004738:	6852      	ldreq	r2, [r2, #4]
 800473a:	1809      	addeq	r1, r1, r0
 800473c:	6021      	streq	r1, [r4, #0]
 800473e:	6062      	str	r2, [r4, #4]
 8004740:	605c      	str	r4, [r3, #4]
 8004742:	e7c9      	b.n	80046d8 <_free_r+0x24>
 8004744:	bd38      	pop	{r3, r4, r5, pc}
 8004746:	bf00      	nop
 8004748:	2000020c 	.word	0x2000020c

0800474c <_malloc_r>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	1ccd      	adds	r5, r1, #3
 8004750:	f025 0503 	bic.w	r5, r5, #3
 8004754:	3508      	adds	r5, #8
 8004756:	2d0c      	cmp	r5, #12
 8004758:	bf38      	it	cc
 800475a:	250c      	movcc	r5, #12
 800475c:	2d00      	cmp	r5, #0
 800475e:	4606      	mov	r6, r0
 8004760:	db01      	blt.n	8004766 <_malloc_r+0x1a>
 8004762:	42a9      	cmp	r1, r5
 8004764:	d903      	bls.n	800476e <_malloc_r+0x22>
 8004766:	230c      	movs	r3, #12
 8004768:	6033      	str	r3, [r6, #0]
 800476a:	2000      	movs	r0, #0
 800476c:	bd70      	pop	{r4, r5, r6, pc}
 800476e:	f000 f9d4 	bl	8004b1a <__malloc_lock>
 8004772:	4a21      	ldr	r2, [pc, #132]	; (80047f8 <_malloc_r+0xac>)
 8004774:	6814      	ldr	r4, [r2, #0]
 8004776:	4621      	mov	r1, r4
 8004778:	b991      	cbnz	r1, 80047a0 <_malloc_r+0x54>
 800477a:	4c20      	ldr	r4, [pc, #128]	; (80047fc <_malloc_r+0xb0>)
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	b91b      	cbnz	r3, 8004788 <_malloc_r+0x3c>
 8004780:	4630      	mov	r0, r6
 8004782:	f000 f98f 	bl	8004aa4 <_sbrk_r>
 8004786:	6020      	str	r0, [r4, #0]
 8004788:	4629      	mov	r1, r5
 800478a:	4630      	mov	r0, r6
 800478c:	f000 f98a 	bl	8004aa4 <_sbrk_r>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d124      	bne.n	80047de <_malloc_r+0x92>
 8004794:	230c      	movs	r3, #12
 8004796:	4630      	mov	r0, r6
 8004798:	6033      	str	r3, [r6, #0]
 800479a:	f000 f9bf 	bl	8004b1c <__malloc_unlock>
 800479e:	e7e4      	b.n	800476a <_malloc_r+0x1e>
 80047a0:	680b      	ldr	r3, [r1, #0]
 80047a2:	1b5b      	subs	r3, r3, r5
 80047a4:	d418      	bmi.n	80047d8 <_malloc_r+0x8c>
 80047a6:	2b0b      	cmp	r3, #11
 80047a8:	d90f      	bls.n	80047ca <_malloc_r+0x7e>
 80047aa:	600b      	str	r3, [r1, #0]
 80047ac:	18cc      	adds	r4, r1, r3
 80047ae:	50cd      	str	r5, [r1, r3]
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 f9b3 	bl	8004b1c <__malloc_unlock>
 80047b6:	f104 000b 	add.w	r0, r4, #11
 80047ba:	1d23      	adds	r3, r4, #4
 80047bc:	f020 0007 	bic.w	r0, r0, #7
 80047c0:	1ac3      	subs	r3, r0, r3
 80047c2:	d0d3      	beq.n	800476c <_malloc_r+0x20>
 80047c4:	425a      	negs	r2, r3
 80047c6:	50e2      	str	r2, [r4, r3]
 80047c8:	e7d0      	b.n	800476c <_malloc_r+0x20>
 80047ca:	684b      	ldr	r3, [r1, #4]
 80047cc:	428c      	cmp	r4, r1
 80047ce:	bf16      	itet	ne
 80047d0:	6063      	strne	r3, [r4, #4]
 80047d2:	6013      	streq	r3, [r2, #0]
 80047d4:	460c      	movne	r4, r1
 80047d6:	e7eb      	b.n	80047b0 <_malloc_r+0x64>
 80047d8:	460c      	mov	r4, r1
 80047da:	6849      	ldr	r1, [r1, #4]
 80047dc:	e7cc      	b.n	8004778 <_malloc_r+0x2c>
 80047de:	1cc4      	adds	r4, r0, #3
 80047e0:	f024 0403 	bic.w	r4, r4, #3
 80047e4:	42a0      	cmp	r0, r4
 80047e6:	d005      	beq.n	80047f4 <_malloc_r+0xa8>
 80047e8:	1a21      	subs	r1, r4, r0
 80047ea:	4630      	mov	r0, r6
 80047ec:	f000 f95a 	bl	8004aa4 <_sbrk_r>
 80047f0:	3001      	adds	r0, #1
 80047f2:	d0cf      	beq.n	8004794 <_malloc_r+0x48>
 80047f4:	6025      	str	r5, [r4, #0]
 80047f6:	e7db      	b.n	80047b0 <_malloc_r+0x64>
 80047f8:	2000020c 	.word	0x2000020c
 80047fc:	20000210 	.word	0x20000210

08004800 <__ssputs_r>:
 8004800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004804:	688e      	ldr	r6, [r1, #8]
 8004806:	4682      	mov	sl, r0
 8004808:	429e      	cmp	r6, r3
 800480a:	460c      	mov	r4, r1
 800480c:	4690      	mov	r8, r2
 800480e:	4699      	mov	r9, r3
 8004810:	d837      	bhi.n	8004882 <__ssputs_r+0x82>
 8004812:	898a      	ldrh	r2, [r1, #12]
 8004814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004818:	d031      	beq.n	800487e <__ssputs_r+0x7e>
 800481a:	2302      	movs	r3, #2
 800481c:	6825      	ldr	r5, [r4, #0]
 800481e:	6909      	ldr	r1, [r1, #16]
 8004820:	1a6f      	subs	r7, r5, r1
 8004822:	6965      	ldr	r5, [r4, #20]
 8004824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004828:	fb95 f5f3 	sdiv	r5, r5, r3
 800482c:	f109 0301 	add.w	r3, r9, #1
 8004830:	443b      	add	r3, r7
 8004832:	429d      	cmp	r5, r3
 8004834:	bf38      	it	cc
 8004836:	461d      	movcc	r5, r3
 8004838:	0553      	lsls	r3, r2, #21
 800483a:	d530      	bpl.n	800489e <__ssputs_r+0x9e>
 800483c:	4629      	mov	r1, r5
 800483e:	f7ff ff85 	bl	800474c <_malloc_r>
 8004842:	4606      	mov	r6, r0
 8004844:	b950      	cbnz	r0, 800485c <__ssputs_r+0x5c>
 8004846:	230c      	movs	r3, #12
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	f8ca 3000 	str.w	r3, [sl]
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004856:	81a3      	strh	r3, [r4, #12]
 8004858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485c:	463a      	mov	r2, r7
 800485e:	6921      	ldr	r1, [r4, #16]
 8004860:	f7ff fc32 	bl	80040c8 <memcpy>
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800486a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486e:	81a3      	strh	r3, [r4, #12]
 8004870:	6126      	str	r6, [r4, #16]
 8004872:	443e      	add	r6, r7
 8004874:	6026      	str	r6, [r4, #0]
 8004876:	464e      	mov	r6, r9
 8004878:	6165      	str	r5, [r4, #20]
 800487a:	1bed      	subs	r5, r5, r7
 800487c:	60a5      	str	r5, [r4, #8]
 800487e:	454e      	cmp	r6, r9
 8004880:	d900      	bls.n	8004884 <__ssputs_r+0x84>
 8004882:	464e      	mov	r6, r9
 8004884:	4632      	mov	r2, r6
 8004886:	4641      	mov	r1, r8
 8004888:	6820      	ldr	r0, [r4, #0]
 800488a:	f000 f92d 	bl	8004ae8 <memmove>
 800488e:	68a3      	ldr	r3, [r4, #8]
 8004890:	2000      	movs	r0, #0
 8004892:	1b9b      	subs	r3, r3, r6
 8004894:	60a3      	str	r3, [r4, #8]
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	441e      	add	r6, r3
 800489a:	6026      	str	r6, [r4, #0]
 800489c:	e7dc      	b.n	8004858 <__ssputs_r+0x58>
 800489e:	462a      	mov	r2, r5
 80048a0:	f000 f93d 	bl	8004b1e <_realloc_r>
 80048a4:	4606      	mov	r6, r0
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d1e2      	bne.n	8004870 <__ssputs_r+0x70>
 80048aa:	6921      	ldr	r1, [r4, #16]
 80048ac:	4650      	mov	r0, sl
 80048ae:	f7ff ff01 	bl	80046b4 <_free_r>
 80048b2:	e7c8      	b.n	8004846 <__ssputs_r+0x46>

080048b4 <_svfiprintf_r>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	461d      	mov	r5, r3
 80048ba:	898b      	ldrh	r3, [r1, #12]
 80048bc:	b09d      	sub	sp, #116	; 0x74
 80048be:	061f      	lsls	r7, r3, #24
 80048c0:	4680      	mov	r8, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	4616      	mov	r6, r2
 80048c6:	d50f      	bpl.n	80048e8 <_svfiprintf_r+0x34>
 80048c8:	690b      	ldr	r3, [r1, #16]
 80048ca:	b96b      	cbnz	r3, 80048e8 <_svfiprintf_r+0x34>
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	f7ff ff3d 	bl	800474c <_malloc_r>
 80048d2:	6020      	str	r0, [r4, #0]
 80048d4:	6120      	str	r0, [r4, #16]
 80048d6:	b928      	cbnz	r0, 80048e4 <_svfiprintf_r+0x30>
 80048d8:	230c      	movs	r3, #12
 80048da:	f8c8 3000 	str.w	r3, [r8]
 80048de:	f04f 30ff 	mov.w	r0, #4294967295
 80048e2:	e0c8      	b.n	8004a76 <_svfiprintf_r+0x1c2>
 80048e4:	2340      	movs	r3, #64	; 0x40
 80048e6:	6163      	str	r3, [r4, #20]
 80048e8:	2300      	movs	r3, #0
 80048ea:	9309      	str	r3, [sp, #36]	; 0x24
 80048ec:	2320      	movs	r3, #32
 80048ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f2:	2330      	movs	r3, #48	; 0x30
 80048f4:	f04f 0b01 	mov.w	fp, #1
 80048f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048fc:	9503      	str	r5, [sp, #12]
 80048fe:	4637      	mov	r7, r6
 8004900:	463d      	mov	r5, r7
 8004902:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004906:	b10b      	cbz	r3, 800490c <_svfiprintf_r+0x58>
 8004908:	2b25      	cmp	r3, #37	; 0x25
 800490a:	d13e      	bne.n	800498a <_svfiprintf_r+0xd6>
 800490c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004910:	d00b      	beq.n	800492a <_svfiprintf_r+0x76>
 8004912:	4653      	mov	r3, sl
 8004914:	4632      	mov	r2, r6
 8004916:	4621      	mov	r1, r4
 8004918:	4640      	mov	r0, r8
 800491a:	f7ff ff71 	bl	8004800 <__ssputs_r>
 800491e:	3001      	adds	r0, #1
 8004920:	f000 80a4 	beq.w	8004a6c <_svfiprintf_r+0x1b8>
 8004924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004926:	4453      	add	r3, sl
 8004928:	9309      	str	r3, [sp, #36]	; 0x24
 800492a:	783b      	ldrb	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 809d 	beq.w	8004a6c <_svfiprintf_r+0x1b8>
 8004932:	2300      	movs	r3, #0
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800493c:	9304      	str	r3, [sp, #16]
 800493e:	9307      	str	r3, [sp, #28]
 8004940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004944:	931a      	str	r3, [sp, #104]	; 0x68
 8004946:	462f      	mov	r7, r5
 8004948:	2205      	movs	r2, #5
 800494a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800494e:	4850      	ldr	r0, [pc, #320]	; (8004a90 <_svfiprintf_r+0x1dc>)
 8004950:	f7ff fbac 	bl	80040ac <memchr>
 8004954:	9b04      	ldr	r3, [sp, #16]
 8004956:	b9d0      	cbnz	r0, 800498e <_svfiprintf_r+0xda>
 8004958:	06d9      	lsls	r1, r3, #27
 800495a:	bf44      	itt	mi
 800495c:	2220      	movmi	r2, #32
 800495e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004962:	071a      	lsls	r2, r3, #28
 8004964:	bf44      	itt	mi
 8004966:	222b      	movmi	r2, #43	; 0x2b
 8004968:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800496c:	782a      	ldrb	r2, [r5, #0]
 800496e:	2a2a      	cmp	r2, #42	; 0x2a
 8004970:	d015      	beq.n	800499e <_svfiprintf_r+0xea>
 8004972:	462f      	mov	r7, r5
 8004974:	2000      	movs	r0, #0
 8004976:	250a      	movs	r5, #10
 8004978:	9a07      	ldr	r2, [sp, #28]
 800497a:	4639      	mov	r1, r7
 800497c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004980:	3b30      	subs	r3, #48	; 0x30
 8004982:	2b09      	cmp	r3, #9
 8004984:	d94d      	bls.n	8004a22 <_svfiprintf_r+0x16e>
 8004986:	b1b8      	cbz	r0, 80049b8 <_svfiprintf_r+0x104>
 8004988:	e00f      	b.n	80049aa <_svfiprintf_r+0xf6>
 800498a:	462f      	mov	r7, r5
 800498c:	e7b8      	b.n	8004900 <_svfiprintf_r+0x4c>
 800498e:	4a40      	ldr	r2, [pc, #256]	; (8004a90 <_svfiprintf_r+0x1dc>)
 8004990:	463d      	mov	r5, r7
 8004992:	1a80      	subs	r0, r0, r2
 8004994:	fa0b f000 	lsl.w	r0, fp, r0
 8004998:	4318      	orrs	r0, r3
 800499a:	9004      	str	r0, [sp, #16]
 800499c:	e7d3      	b.n	8004946 <_svfiprintf_r+0x92>
 800499e:	9a03      	ldr	r2, [sp, #12]
 80049a0:	1d11      	adds	r1, r2, #4
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	9103      	str	r1, [sp, #12]
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	db01      	blt.n	80049ae <_svfiprintf_r+0xfa>
 80049aa:	9207      	str	r2, [sp, #28]
 80049ac:	e004      	b.n	80049b8 <_svfiprintf_r+0x104>
 80049ae:	4252      	negs	r2, r2
 80049b0:	f043 0302 	orr.w	r3, r3, #2
 80049b4:	9207      	str	r2, [sp, #28]
 80049b6:	9304      	str	r3, [sp, #16]
 80049b8:	783b      	ldrb	r3, [r7, #0]
 80049ba:	2b2e      	cmp	r3, #46	; 0x2e
 80049bc:	d10c      	bne.n	80049d8 <_svfiprintf_r+0x124>
 80049be:	787b      	ldrb	r3, [r7, #1]
 80049c0:	2b2a      	cmp	r3, #42	; 0x2a
 80049c2:	d133      	bne.n	8004a2c <_svfiprintf_r+0x178>
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	3702      	adds	r7, #2
 80049c8:	1d1a      	adds	r2, r3, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	9203      	str	r2, [sp, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bfb8      	it	lt
 80049d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80049d6:	9305      	str	r3, [sp, #20]
 80049d8:	4d2e      	ldr	r5, [pc, #184]	; (8004a94 <_svfiprintf_r+0x1e0>)
 80049da:	2203      	movs	r2, #3
 80049dc:	7839      	ldrb	r1, [r7, #0]
 80049de:	4628      	mov	r0, r5
 80049e0:	f7ff fb64 	bl	80040ac <memchr>
 80049e4:	b138      	cbz	r0, 80049f6 <_svfiprintf_r+0x142>
 80049e6:	2340      	movs	r3, #64	; 0x40
 80049e8:	1b40      	subs	r0, r0, r5
 80049ea:	fa03 f000 	lsl.w	r0, r3, r0
 80049ee:	9b04      	ldr	r3, [sp, #16]
 80049f0:	3701      	adds	r7, #1
 80049f2:	4303      	orrs	r3, r0
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	7839      	ldrb	r1, [r7, #0]
 80049f8:	2206      	movs	r2, #6
 80049fa:	4827      	ldr	r0, [pc, #156]	; (8004a98 <_svfiprintf_r+0x1e4>)
 80049fc:	1c7e      	adds	r6, r7, #1
 80049fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a02:	f7ff fb53 	bl	80040ac <memchr>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d038      	beq.n	8004a7c <_svfiprintf_r+0x1c8>
 8004a0a:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <_svfiprintf_r+0x1e8>)
 8004a0c:	bb13      	cbnz	r3, 8004a54 <_svfiprintf_r+0x1a0>
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	3307      	adds	r3, #7
 8004a12:	f023 0307 	bic.w	r3, r3, #7
 8004a16:	3308      	adds	r3, #8
 8004a18:	9303      	str	r3, [sp, #12]
 8004a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a1c:	444b      	add	r3, r9
 8004a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a20:	e76d      	b.n	80048fe <_svfiprintf_r+0x4a>
 8004a22:	fb05 3202 	mla	r2, r5, r2, r3
 8004a26:	2001      	movs	r0, #1
 8004a28:	460f      	mov	r7, r1
 8004a2a:	e7a6      	b.n	800497a <_svfiprintf_r+0xc6>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	250a      	movs	r5, #10
 8004a30:	4619      	mov	r1, r3
 8004a32:	3701      	adds	r7, #1
 8004a34:	9305      	str	r3, [sp, #20]
 8004a36:	4638      	mov	r0, r7
 8004a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a3c:	3a30      	subs	r2, #48	; 0x30
 8004a3e:	2a09      	cmp	r2, #9
 8004a40:	d903      	bls.n	8004a4a <_svfiprintf_r+0x196>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0c8      	beq.n	80049d8 <_svfiprintf_r+0x124>
 8004a46:	9105      	str	r1, [sp, #20]
 8004a48:	e7c6      	b.n	80049d8 <_svfiprintf_r+0x124>
 8004a4a:	fb05 2101 	mla	r1, r5, r1, r2
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4607      	mov	r7, r0
 8004a52:	e7f0      	b.n	8004a36 <_svfiprintf_r+0x182>
 8004a54:	ab03      	add	r3, sp, #12
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	4622      	mov	r2, r4
 8004a5a:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <_svfiprintf_r+0x1ec>)
 8004a5c:	a904      	add	r1, sp, #16
 8004a5e:	4640      	mov	r0, r8
 8004a60:	f7fe f8ec 	bl	8002c3c <_printf_float>
 8004a64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a68:	4681      	mov	r9, r0
 8004a6a:	d1d6      	bne.n	8004a1a <_svfiprintf_r+0x166>
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	065b      	lsls	r3, r3, #25
 8004a70:	f53f af35 	bmi.w	80048de <_svfiprintf_r+0x2a>
 8004a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a76:	b01d      	add	sp, #116	; 0x74
 8004a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7c:	ab03      	add	r3, sp, #12
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4622      	mov	r2, r4
 8004a82:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <_svfiprintf_r+0x1ec>)
 8004a84:	a904      	add	r1, sp, #16
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7fe fb84 	bl	8003194 <_printf_i>
 8004a8c:	e7ea      	b.n	8004a64 <_svfiprintf_r+0x1b0>
 8004a8e:	bf00      	nop
 8004a90:	08004d4c 	.word	0x08004d4c
 8004a94:	08004d52 	.word	0x08004d52
 8004a98:	08004d56 	.word	0x08004d56
 8004a9c:	08002c3d 	.word	0x08002c3d
 8004aa0:	08004801 	.word	0x08004801

08004aa4 <_sbrk_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	4c05      	ldr	r4, [pc, #20]	; (8004ac0 <_sbrk_r+0x1c>)
 8004aaa:	4605      	mov	r5, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	6023      	str	r3, [r4, #0]
 8004ab0:	f7fc fa7c 	bl	8000fac <_sbrk>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_sbrk_r+0x1a>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_sbrk_r+0x1a>
 8004abc:	602b      	str	r3, [r5, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	200002fc 	.word	0x200002fc

08004ac4 <__ascii_mbtowc>:
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	b901      	cbnz	r1, 8004aca <__ascii_mbtowc+0x6>
 8004ac8:	a901      	add	r1, sp, #4
 8004aca:	b142      	cbz	r2, 8004ade <__ascii_mbtowc+0x1a>
 8004acc:	b14b      	cbz	r3, 8004ae2 <__ascii_mbtowc+0x1e>
 8004ace:	7813      	ldrb	r3, [r2, #0]
 8004ad0:	600b      	str	r3, [r1, #0]
 8004ad2:	7812      	ldrb	r2, [r2, #0]
 8004ad4:	1c10      	adds	r0, r2, #0
 8004ad6:	bf18      	it	ne
 8004ad8:	2001      	movne	r0, #1
 8004ada:	b002      	add	sp, #8
 8004adc:	4770      	bx	lr
 8004ade:	4610      	mov	r0, r2
 8004ae0:	e7fb      	b.n	8004ada <__ascii_mbtowc+0x16>
 8004ae2:	f06f 0001 	mvn.w	r0, #1
 8004ae6:	e7f8      	b.n	8004ada <__ascii_mbtowc+0x16>

08004ae8 <memmove>:
 8004ae8:	4288      	cmp	r0, r1
 8004aea:	b510      	push	{r4, lr}
 8004aec:	eb01 0302 	add.w	r3, r1, r2
 8004af0:	d807      	bhi.n	8004b02 <memmove+0x1a>
 8004af2:	1e42      	subs	r2, r0, #1
 8004af4:	4299      	cmp	r1, r3
 8004af6:	d00a      	beq.n	8004b0e <memmove+0x26>
 8004af8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004afc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004b00:	e7f8      	b.n	8004af4 <memmove+0xc>
 8004b02:	4283      	cmp	r3, r0
 8004b04:	d9f5      	bls.n	8004af2 <memmove+0xa>
 8004b06:	1881      	adds	r1, r0, r2
 8004b08:	1ad2      	subs	r2, r2, r3
 8004b0a:	42d3      	cmn	r3, r2
 8004b0c:	d100      	bne.n	8004b10 <memmove+0x28>
 8004b0e:	bd10      	pop	{r4, pc}
 8004b10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004b18:	e7f7      	b.n	8004b0a <memmove+0x22>

08004b1a <__malloc_lock>:
 8004b1a:	4770      	bx	lr

08004b1c <__malloc_unlock>:
 8004b1c:	4770      	bx	lr

08004b1e <_realloc_r>:
 8004b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b20:	4607      	mov	r7, r0
 8004b22:	4614      	mov	r4, r2
 8004b24:	460e      	mov	r6, r1
 8004b26:	b921      	cbnz	r1, 8004b32 <_realloc_r+0x14>
 8004b28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	f7ff be0d 	b.w	800474c <_malloc_r>
 8004b32:	b922      	cbnz	r2, 8004b3e <_realloc_r+0x20>
 8004b34:	f7ff fdbe 	bl	80046b4 <_free_r>
 8004b38:	4625      	mov	r5, r4
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b3e:	f000 f821 	bl	8004b84 <_malloc_usable_size_r>
 8004b42:	42a0      	cmp	r0, r4
 8004b44:	d20f      	bcs.n	8004b66 <_realloc_r+0x48>
 8004b46:	4621      	mov	r1, r4
 8004b48:	4638      	mov	r0, r7
 8004b4a:	f7ff fdff 	bl	800474c <_malloc_r>
 8004b4e:	4605      	mov	r5, r0
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d0f2      	beq.n	8004b3a <_realloc_r+0x1c>
 8004b54:	4631      	mov	r1, r6
 8004b56:	4622      	mov	r2, r4
 8004b58:	f7ff fab6 	bl	80040c8 <memcpy>
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4638      	mov	r0, r7
 8004b60:	f7ff fda8 	bl	80046b4 <_free_r>
 8004b64:	e7e9      	b.n	8004b3a <_realloc_r+0x1c>
 8004b66:	4635      	mov	r5, r6
 8004b68:	e7e7      	b.n	8004b3a <_realloc_r+0x1c>

08004b6a <__ascii_wctomb>:
 8004b6a:	b149      	cbz	r1, 8004b80 <__ascii_wctomb+0x16>
 8004b6c:	2aff      	cmp	r2, #255	; 0xff
 8004b6e:	bf8b      	itete	hi
 8004b70:	238a      	movhi	r3, #138	; 0x8a
 8004b72:	700a      	strbls	r2, [r1, #0]
 8004b74:	6003      	strhi	r3, [r0, #0]
 8004b76:	2001      	movls	r0, #1
 8004b78:	bf88      	it	hi
 8004b7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8004b7e:	4770      	bx	lr
 8004b80:	4608      	mov	r0, r1
 8004b82:	4770      	bx	lr

08004b84 <_malloc_usable_size_r>:
 8004b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b88:	1f18      	subs	r0, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bfbc      	itt	lt
 8004b8e:	580b      	ldrlt	r3, [r1, r0]
 8004b90:	18c0      	addlt	r0, r0, r3
 8004b92:	4770      	bx	lr

08004b94 <_init>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr

08004ba0 <_fini>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr
