
TIMER_IC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08004d78  08004d78  00014d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005030  08005030  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005030  08005030  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005030  08005030  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001e0  08005218  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005218  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a009  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001769  00000000  00000000  0002a212  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac8  00000000  00000000  0002b980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a00  00000000  00000000  0002c448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142e2  00000000  00000000  0002ce48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007621  00000000  00000000  0004112a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f968  00000000  00000000  0004874b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b80b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  000b8130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d5c 	.word	0x08004d5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08004d5c 	.word	0x08004d5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
volatile uint8_t count = 1;
volatile uint8_t is_capture_done = FALSE;

char usr_msg[100];

int main(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

	HAL_Init();
 8000a8c:	f000 fb9a 	bl	80011c4 <HAL_Init>
	SystemClock_Config(SYS_CLOCK_FREQ_64_MHZ);
 8000a90:	2040      	movs	r0, #64	; 0x40
 8000a92:	f000 f815 	bl	8000ac0 <SystemClock_Config>
	GPIO_Init();
 8000a96:	f000 f88f 	bl	8000bb8 <GPIO_Init>
	TIMER2_Init();
 8000a9a:	f000 f8ef 	bl	8000c7c <TIMER2_Init>
	TIMER3_Init();
 8000a9e:	f000 f91f 	bl	8000ce0 <TIMER3_Init>

	MX_USART2_UART_Init();
 8000aa2:	f000 f9cb 	bl	8000e3c <MX_USART2_UART_Init>

	//HAL_TIM_Base_Start_IT(&htimer3);

	if(HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_2) != HAL_OK){
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <main+0x34>)
 8000aaa:	f001 fb17 	bl	80020dc <HAL_TIM_IC_Start_IT>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <main+0x30>
		Error_Handler();
 8000ab4:	f000 f9e8 	bl	8000e88 <Error_Handler>
	}

	while(1);
 8000ab8:	e7fe      	b.n	8000ab8 <main+0x30>
 8000aba:	bf00      	nop
 8000abc:	200002b8 	.word	0x200002b8

08000ac0 <SystemClock_Config>:

  	return 0;
}

void SystemClock_Config(uint8_t clock_freq){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b092      	sub	sp, #72	; 0x48
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	647b      	str	r3, [r7, #68]	; 0x44

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq){
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b30      	cmp	r3, #48	; 0x30
 8000ae6:	d016      	beq.n	8000b16 <SystemClock_Config+0x56>
 8000ae8:	2b40      	cmp	r3, #64	; 0x40
 8000aea:	d026      	beq.n	8000b3a <SystemClock_Config+0x7a>
 8000aec:	2b14      	cmp	r3, #20
 8000aee:	d000      	beq.n	8000af2 <SystemClock_Config+0x32>

			break;

		default:

			return;
 8000af0:	e05d      	b.n	8000bae <SystemClock_Config+0xee>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL5;
 8000af2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000af6:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000af8:	230f      	movs	r3, #15
 8000afa:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afc:	2302      	movs	r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b08:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0e:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000b14:	e023      	b.n	8000b5e <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL12;
 8000b16:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2302      	movs	r3, #2
 8000b22:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2c:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000b38:	e011      	b.n	8000b5e <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL16;
 8000b3a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000b40:	230f      	movs	r3, #15
 8000b42:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2302      	movs	r3, #2
 8000b46:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b50:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000b5c:	bf00      	nop

	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fe48 	bl	80017f8 <HAL_RCC_OscConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xb2>
		Error_Handler();
 8000b6e:	f000 f98b 	bl	8000e88 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 f8bd 	bl	8001cf8 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xc8>
		Error_Handler();
 8000b84:	f000 f980 	bl	8000e88 <Error_Handler>
	}

	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000b88:	f001 fa02 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <SystemClock_Config+0xf4>)
 8000b90:	fba3 2302 	umull	r2, r3, r3, r2
 8000b94:	099b      	lsrs	r3, r3, #6
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fc77 	bl	800148a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b9c:	2004      	movs	r0, #4
 8000b9e:	f000 fc81 	bl	80014a4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8000baa:	f000 fc44 	bl	8001436 <HAL_NVIC_SetPriority>

	//You can generate a clock with MCO pins from different sources
	//HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);

}
 8000bae:	3748      	adds	r7, #72	; 0x48
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	10624dd3 	.word	0x10624dd3

08000bb8 <GPIO_Init>:

void GPIO_Init(void){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef ledgpio;

	/* GPIOA clock enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <GPIO_Init+0x4c>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <GPIO_Init+0x4c>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <GPIO_Init+0x4c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

    /* High Level GPIO Initialization */
	ledgpio.Pin = GPIO_PIN_5;
 8000bd6:	2320      	movs	r3, #32
 8000bd8:	60bb      	str	r3, [r7, #8]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
	ledgpio.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
	ledgpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2302      	movs	r3, #2
 8000be4:	617b      	str	r3, [r7, #20]

	/* Init GPIO */
	HAL_GPIO_Init(GPIOA, &ledgpio);
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4619      	mov	r1, r3
 8000bec:	4806      	ldr	r0, [pc, #24]	; (8000c08 <GPIO_Init+0x50>)
 8000bee:	f000 fc81 	bl	80014f4 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4804      	ldr	r0, [pc, #16]	; (8000c08 <GPIO_Init+0x50>)
 8000bf8:	f000 fdce 	bl	8001798 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40010800 	.word	0x40010800

08000c0c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	if(! is_capture_done){
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d123      	bne.n	8000c66 <HAL_TIM_IC_CaptureCallback+0x5a>
		if(count == 1){
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d10c      	bne.n	8000c42 <HAL_TIM_IC_CaptureCallback+0x36>
			// Get the TIM Capture Compare Register value on runtime (rising edge)
			input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_2);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000c30:	6013      	str	r3, [r2, #0]
			count++;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c3e:	701a      	strb	r2, [r3, #0]
			Frequency_Calculation();	// Compute the input frequency signal
			count = 1;
			is_capture_done = FALSE;
		}
	}
}
 8000c40:	e011      	b.n	8000c66 <HAL_TIM_IC_CaptureCallback+0x5a>
		} else if (count == 2){
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d10c      	bne.n	8000c66 <HAL_TIM_IC_CaptureCallback+0x5a>
			input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_2);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000c54:	6053      	str	r3, [r2, #4]
			Frequency_Calculation();	// Compute the input frequency signal
 8000c56:	f000 f85d 	bl	8000d14 <Frequency_Calculation>
			count = 1;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
			is_capture_done = FALSE;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000204 	.word	0x20000204
 8000c74:	20000000 	.word	0x20000000
 8000c78:	200001fc 	.word	0x200001fc

08000c7c <TIMER2_Init>:

void TIMER2_Init(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

	TIM_IC_InitTypeDef sConfigIC;

	htimer2.Instance = TIM2;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <TIMER2_Init+0x60>)
 8000c84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c88:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;	// Timer up count
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <TIMER2_Init+0x60>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
	htimer2.Init.Period = 0xFFFF;					// TIM2 16 bits
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <TIMER2_Init+0x60>)
 8000c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c96:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 1;						// CNT_CLK = TIMx_CLK/(prescaler + 1)
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <TIMER2_Init+0x60>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_IC_Init(&htimer2) != HAL_OK){
 8000c9e:	480f      	ldr	r0, [pc, #60]	; (8000cdc <TIMER2_Init+0x60>)
 8000ca0:	f001 f9f1 	bl	8002086 <HAL_TIM_IC_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <TIMER2_Init+0x32>
		Error_Handler();
 8000caa:	f000 f8ed 	bl	8000e88 <Error_Handler>
	}

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;		// Capture in rising edge of the clock
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;			// Timer in direct mode
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;						// Prescaler 1
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]

	// Enter an input signal on PA1 or use other timer as clock source (Digital clock generator on Proteus)
	if(HAL_TIM_IC_ConfigChannel(&htimer2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK){
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <TIMER2_Init+0x60>)
 8000cc6:	f001 fb79 	bl	80023bc <HAL_TIM_IC_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <TIMER2_Init+0x58>
	    Error_Handler();
 8000cd0:	f000 f8da 	bl	8000e88 <Error_Handler>
	}

}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200002b8 	.word	0x200002b8

08000ce0 <TIMER3_Init>:

void TIMER3_Init(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

	/* Create a time base for 10us with SYSCLK = 64MHz */
	htimer3.Instance = TIM3;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <TIMER3_Init+0x2c>)
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <TIMER3_Init+0x30>)
 8000ce8:	601a      	str	r2, [r3, #0]
	htimer3.Init.Prescaler = 15;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <TIMER3_Init+0x2c>)
 8000cec:	220f      	movs	r2, #15
 8000cee:	605a      	str	r2, [r3, #4]
	htimer3.Init.Period = 40-1;	// The update event happens after one time gap or one time period
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <TIMER3_Init+0x2c>)
 8000cf2:	2227      	movs	r2, #39	; 0x27
 8000cf4:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer3) != HAL_OK){
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <TIMER3_Init+0x2c>)
 8000cf8:	f001 f99a 	bl	8002030 <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <TIMER3_Init+0x26>
		Error_Handler();
 8000d02:	f000 f8c1 	bl	8000e88 <Error_Handler>
	}

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000278 	.word	0x20000278
 8000d10:	40000400 	.word	0x40000400

08000d14 <Frequency_Calculation>:

void Frequency_Calculation(void){
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b08b      	sub	sp, #44	; 0x2c
 8000d18:	af00      	add	r7, sp, #0

	uint32_t capture_difference = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
	double timer2_cnt_freq = 0;
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	f04f 0400 	mov.w	r4, #0
 8000d26:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double timer2_cnt_res = 0;
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	f04f 0400 	mov.w	r4, #0
 8000d32:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double user_signal_time_period = 0;
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	f04f 0400 	mov.w	r4, #0
 8000d3e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double user_signal_freq = 0;
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	f04f 0400 	mov.w	r4, #0
 8000d4a:	e9c7 3400 	strd	r3, r4, [r7]

	if(input_captures[1] > input_captures[0])
 8000d4e:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <Frequency_Calculation+0x110>)
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <Frequency_Calculation+0x110>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d906      	bls.n	8000d68 <Frequency_Calculation+0x54>
		capture_difference = input_captures[1] - input_captures[0];
 8000d5a:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <Frequency_Calculation+0x110>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <Frequency_Calculation+0x110>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
 8000d66:	e008      	b.n	8000d7a <Frequency_Calculation+0x66>
	else
		capture_difference = (0xFFFF - input_captures[0]) + input_captures[1];
 8000d68:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <Frequency_Calculation+0x110>)
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <Frequency_Calculation+0x110>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000d76:	33ff      	adds	r3, #255	; 0xff
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24

	// CLK_TIM2 = 2*PCLK1 because RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2 (see clock tree)
	timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2) / (htimer2.Init.Prescaler + 1);
 8000d7a:	f001 f913 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	005a      	lsls	r2, r3, #1
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <Frequency_Calculation+0x114>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fb29 	bl	80003e4 <__aeabi_ui2d>
 8000d92:	4603      	mov	r3, r0
 8000d94:	460c      	mov	r4, r1
 8000d96:	e9c7 3406 	strd	r3, r4, [r7, #24]
	timer2_cnt_res = 1/timer2_cnt_freq; // Period of CLK_TIM2
 8000d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4922      	ldr	r1, [pc, #136]	; (8000e2c <Frequency_Calculation+0x118>)
 8000da4:	f7ff fcc2 	bl	800072c <__aeabi_ddiv>
 8000da8:	4603      	mov	r3, r0
 8000daa:	460c      	mov	r4, r1
 8000dac:	e9c7 3404 	strd	r3, r4, [r7, #16]
	user_signal_time_period = capture_difference * timer2_cnt_res; // Period of input signal on PA1
 8000db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000db2:	f7ff fb17 	bl	80003e4 <__aeabi_ui2d>
 8000db6:	4603      	mov	r3, r0
 8000db8:	460c      	mov	r4, r1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460c      	mov	r4, r1
 8000dca:	e9c7 3402 	strd	r3, r4, [r7, #8]
	user_signal_freq = 1/user_signal_time_period; // Desired frequency
 8000dce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	4915      	ldr	r1, [pc, #84]	; (8000e2c <Frequency_Calculation+0x118>)
 8000dd8:	f7ff fca8 	bl	800072c <__aeabi_ddiv>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	460c      	mov	r4, r1
 8000de0:	e9c7 3400 	strd	r3, r4, [r7]

	memset(usr_msg,0,sizeof(usr_msg));
 8000de4:	2264      	movs	r2, #100	; 0x64
 8000de6:	2100      	movs	r1, #0
 8000de8:	4811      	ldr	r0, [pc, #68]	; (8000e30 <Frequency_Calculation+0x11c>)
 8000dea:	f001 ff71 	bl	8002cd0 <memset>
	// Put the command "-u _printf_float" in MCU GCC Linker (Miscellaneous)
	sprintf(usr_msg, "Frequency of the signal applied = %.2f Hz\r\n", user_signal_freq);
 8000dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000df2:	4910      	ldr	r1, [pc, #64]	; (8000e34 <Frequency_Calculation+0x120>)
 8000df4:	480e      	ldr	r0, [pc, #56]	; (8000e30 <Frequency_Calculation+0x11c>)
 8000df6:	f002 fbc3 	bl	8003580 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000dfa:	480d      	ldr	r0, [pc, #52]	; (8000e30 <Frequency_Calculation+0x11c>)
 8000dfc:	f7ff f9a8 	bl	8000150 <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	4909      	ldr	r1, [pc, #36]	; (8000e30 <Frequency_Calculation+0x11c>)
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <Frequency_Calculation+0x124>)
 8000e0c:	f001 fd78 	bl	8002900 <HAL_UART_Transmit>

	input_captures[0] = 0;
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <Frequency_Calculation+0x110>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
	input_captures[1] = 0;
 8000e16:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <Frequency_Calculation+0x110>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]

}
 8000e1c:	bf00      	nop
 8000e1e:	372c      	adds	r7, #44	; 0x2c
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	200001fc 	.word	0x200001fc
 8000e28:	200002b8 	.word	0x200002b8
 8000e2c:	3ff00000 	.word	0x3ff00000
 8000e30:	20000214 	.word	0x20000214
 8000e34:	08004d78 	.word	0x08004d78
 8000e38:	200002f8 	.word	0x200002f8

08000e3c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USART2_UART_Init+0x44>)
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <MX_USART2_UART_Init+0x48>)
 8000e44:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART2_UART_Init+0x44>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART2_UART_Init+0x44>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_USART2_UART_Init+0x44>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART2_UART_Init+0x44>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_USART2_UART_Init+0x44>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART2_UART_Init+0x44>)
 8000e68:	2208      	movs	r2, #8
 8000e6a:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_USART2_UART_Init+0x44>)
 8000e6e:	f001 fcfa 	bl	8002866 <HAL_UART_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_USART2_UART_Init+0x40>
		Error_Handler();
 8000e78:	f000 f806 	bl	8000e88 <Error_Handler>
  	}

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200002f8 	.word	0x200002f8
 8000e84:	40004400 	.word	0x40004400

08000e88 <Error_Handler>:

void Error_Handler(void){
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	while(1);
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x4>
	...

08000e90 <HAL_MspInit>:
#include "stm32f1xx_hal_tim.h"

//Uncomment the #define HAL_TIM_MODULE_ENABLED in stm32f1xx_hal_conf.h
#include "stm32f1xx_hal_conf.h"

void HAL_MspInit(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

	__HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_MspInit+0x78>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <HAL_MspInit+0x78>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_MspInit+0x78>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

	/* DISABLE: JTAG-DP Disabled and SW-DP Disabled */
	__HAL_AFIO_REMAP_SWJ_DISABLE();
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_MspInit+0x7c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <HAL_MspInit+0x7c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6053      	str	r3, [r2, #4]

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f000 faa8 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x80>)
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x80>)
 8000ed6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000eda:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f06f 000b 	mvn.w	r0, #11
 8000ee4:	f000 faa7 	bl	8001436 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	f06f 000a 	mvn.w	r0, #10
 8000ef0:	f000 faa1 	bl	8001436 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f06f 0009 	mvn.w	r0, #9
 8000efc:	f000 fa9b 	bl	8001436 <HAL_NVIC_SetPriority>

}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	//1. enable the peripheral clock for the timer2 peripheral
	__HAL_RCC_AFIO_CLK_ENABLE();
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_TIM_IC_MspInit+0x80>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <HAL_TIM_IC_MspInit+0x80>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_TIM_IC_MspInit+0x80>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_TIM_IC_MspInit+0x80>)
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <HAL_TIM_IC_MspInit+0x80>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	61d3      	str	r3, [r2, #28]
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_TIM_IC_MspInit+0x80>)
 8000f42:	69db      	ldr	r3, [r3, #28]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_TIM_IC_MspInit+0x80>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_TIM_IC_MspInit+0x80>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_TIM_IC_MspInit+0x80>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    //2. Configure a gpio to behave as timer2 channel 1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f64:	2303      	movs	r3, #3
 8000f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <HAL_TIM_IC_MspInit+0x84>)
 8000f78:	f000 fabc 	bl	80014f4 <HAL_GPIO_Init>

    //3. nvic settings
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	210f      	movs	r1, #15
 8000f80:	201c      	movs	r0, #28
 8000f82:	f000 fa58 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f86:	201c      	movs	r0, #28
 8000f88:	f000 fa71 	bl	800146e <HAL_NVIC_EnableIRQ>

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010800 	.word	0x40010800

08000f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_TIM_Base_MspInit+0x38>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_TIM_Base_MspInit+0x38>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	61d3      	str	r3, [r2, #28]
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_TIM_Base_MspInit+0x38>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fbc:	201d      	movs	r0, #29
 8000fbe:	f000 fa56 	bl	800146e <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	201d      	movs	r0, #29
 8000fc8:	f000 fa35 	bl	8001436 <HAL_NVIC_SetPriority>

}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_UART_MspInit>:
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA and AFIO peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_UART_MspInit+0x94>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <HAL_UART_MspInit+0x94>)
 8000fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fea:	61d3      	str	r3, [r2, #28]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HAL_UART_MspInit+0x94>)
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_UART_MspInit+0x94>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <HAL_UART_MspInit+0x94>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_UART_MspInit+0x94>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_AFIO_CLK_ENABLE();
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <HAL_UART_MspInit+0x94>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a15      	ldr	r2, [pc, #84]	; (800106c <HAL_UART_MspInit+0x94>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_UART_MspInit+0x94>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 8001028:	2304      	movs	r3, #4
 800102a:	61bb      	str	r3, [r7, #24]
	gpio_uart.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
	gpio_uart.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2302      	movs	r3, #2
 8001036:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4619      	mov	r1, r3
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <HAL_UART_MspInit+0x98>)
 8001040:	f000 fa58 	bl	80014f4 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;
 8001044:	2308      	movs	r3, #8
 8001046:	61bb      	str	r3, [r7, #24]
	//gpio_uart.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	4619      	mov	r1, r3
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <HAL_UART_MspInit+0x98>)
 8001050:	f000 fa50 	bl	80014f4 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001054:	2026      	movs	r0, #38	; 0x26
 8001056:	f000 fa0a 	bl	800146e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	210f      	movs	r1, #15
 800105e:	2026      	movs	r0, #38	; 0x26
 8001060:	f000 f9e9 	bl	8001436 <HAL_NVIC_SetPriority>

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	40010800 	.word	0x40010800

08001074 <SysTick_Handler>:
#include "stm32f1xx_it.h"

extern TIM_HandleTypeDef htimer2;
extern TIM_HandleTypeDef htimer3;

void SysTick_Handler(void){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8001078:	f000 f8ea 	bl	8001250 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800107c:	f000 fa2e 	bl	80014dc <HAL_SYSTICK_IRQHandler>

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&htimer2);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <TIM2_IRQHandler+0x10>)
 800108a:	f001 f88f 	bl	80021ac <HAL_TIM_IRQHandler>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002b8 	.word	0x200002b8

08001098 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// 50KHz square wave
 800109c:	2120      	movs	r1, #32
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <TIM3_IRQHandler+0x18>)
 80010a0:	f000 fb92 	bl	80017c8 <HAL_GPIO_TogglePin>
	HAL_TIM_IRQHandler(&htimer3);
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <TIM3_IRQHandler+0x1c>)
 80010a6:	f001 f881 	bl	80021ac <HAL_TIM_IRQHandler>

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40010800 	.word	0x40010800
 80010b4:	20000278 	.word	0x20000278

080010b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x50>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x16>
		heap_end = &end;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <_sbrk+0x50>)
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <_sbrk+0x54>)
 80010cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <_sbrk+0x50>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <_sbrk+0x50>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	466a      	mov	r2, sp
 80010de:	4293      	cmp	r3, r2
 80010e0:	d907      	bls.n	80010f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010e2:	f001 fdcb 	bl	8002c7c <__errno>
 80010e6:	4602      	mov	r2, r0
 80010e8:	230c      	movs	r3, #12
 80010ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	e006      	b.n	8001100 <_sbrk+0x48>
	}

	heap_end += incr;
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <_sbrk+0x50>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a03      	ldr	r2, [pc, #12]	; (8001108 <_sbrk+0x50>)
 80010fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000208 	.word	0x20000208
 800110c:	20000340 	.word	0x20000340

08001110 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <SystemInit+0x5c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <SystemInit+0x5c>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <SystemInit+0x5c>)
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4911      	ldr	r1, [pc, #68]	; (800116c <SystemInit+0x5c>)
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <SystemInit+0x60>)
 8001128:	4013      	ands	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <SystemInit+0x5c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <SystemInit+0x5c>)
 8001132:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <SystemInit+0x5c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SystemInit+0x5c>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <SystemInit+0x5c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <SystemInit+0x5c>)
 800114e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001152:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SystemInit+0x5c>)
 8001156:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800115a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SystemInit+0x64>)
 800115e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001162:	609a      	str	r2, [r3, #8]
#endif 
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000
 8001170:	f8ff0000 	.word	0xf8ff0000
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001178:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800117a:	e003      	b.n	8001184 <LoopCopyDataInit>

0800117c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800117e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001180:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001182:	3104      	adds	r1, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001184:	480a      	ldr	r0, [pc, #40]	; (80011b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001188:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800118a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800118c:	d3f6      	bcc.n	800117c <CopyDataInit>
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001190:	e002      	b.n	8001198 <LoopFillZerobss>

08001192 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001194:	f842 3b04 	str.w	r3, [r2], #4

08001198 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800119a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800119c:	d3f9      	bcc.n	8001192 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800119e:	f7ff ffb7 	bl	8001110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f001 fd71 	bl	8002c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a6:	f7ff fc6f 	bl	8000a88 <main>
  bx lr
 80011aa:	4770      	bx	lr
  ldr r3, =_sidata
 80011ac:	08005038 	.word	0x08005038
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80011b8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80011bc:	20000340 	.word	0x20000340

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x28>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x28>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f923 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fe56 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f93b 	bl	800148a <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f903 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000004 	.word	0x20000004
 8001248:	2000000c 	.word	0x2000000c
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <HAL_IncTick+0x20>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	2000000c 	.word	0x2000000c
 8001270:	20000338 	.word	0x20000338

08001274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000338 	.word	0x20000338

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <__NVIC_EnableIRQ+0x34>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff90 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff2d 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff42 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff90 	bl	8001378 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5f 	bl	8001324 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff35 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d106      	bne.n	80014c0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80014be:	e005      	b.n	80014cc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014c6:	f023 0304 	bic.w	r3, r3, #4
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80014e0:	f000 f802 	bl	80014e8 <HAL_SYSTICK_Callback>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b08b      	sub	sp, #44	; 0x2c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001506:	e121      	b.n	800174c <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001508:	2201      	movs	r2, #1
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 8110 	bne.w	8001746 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b12      	cmp	r3, #18
 800152c:	d034      	beq.n	8001598 <HAL_GPIO_Init+0xa4>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d80d      	bhi.n	800154e <HAL_GPIO_Init+0x5a>
 8001532:	2b02      	cmp	r3, #2
 8001534:	d02b      	beq.n	800158e <HAL_GPIO_Init+0x9a>
 8001536:	2b02      	cmp	r3, #2
 8001538:	d804      	bhi.n	8001544 <HAL_GPIO_Init+0x50>
 800153a:	2b00      	cmp	r3, #0
 800153c:	d031      	beq.n	80015a2 <HAL_GPIO_Init+0xae>
 800153e:	2b01      	cmp	r3, #1
 8001540:	d01c      	beq.n	800157c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001542:	e048      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001544:	2b03      	cmp	r3, #3
 8001546:	d043      	beq.n	80015d0 <HAL_GPIO_Init+0xdc>
 8001548:	2b11      	cmp	r3, #17
 800154a:	d01b      	beq.n	8001584 <HAL_GPIO_Init+0x90>
          break;
 800154c:	e043      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800154e:	4a86      	ldr	r2, [pc, #536]	; (8001768 <HAL_GPIO_Init+0x274>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d026      	beq.n	80015a2 <HAL_GPIO_Init+0xae>
 8001554:	4a84      	ldr	r2, [pc, #528]	; (8001768 <HAL_GPIO_Init+0x274>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d806      	bhi.n	8001568 <HAL_GPIO_Init+0x74>
 800155a:	4a84      	ldr	r2, [pc, #528]	; (800176c <HAL_GPIO_Init+0x278>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d020      	beq.n	80015a2 <HAL_GPIO_Init+0xae>
 8001560:	4a83      	ldr	r2, [pc, #524]	; (8001770 <HAL_GPIO_Init+0x27c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01d      	beq.n	80015a2 <HAL_GPIO_Init+0xae>
          break;
 8001566:	e036      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001568:	4a82      	ldr	r2, [pc, #520]	; (8001774 <HAL_GPIO_Init+0x280>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0xae>
 800156e:	4a82      	ldr	r2, [pc, #520]	; (8001778 <HAL_GPIO_Init+0x284>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d016      	beq.n	80015a2 <HAL_GPIO_Init+0xae>
 8001574:	4a81      	ldr	r2, [pc, #516]	; (800177c <HAL_GPIO_Init+0x288>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0xae>
          break;
 800157a:	e02c      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e028      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	3304      	adds	r3, #4
 800158a:	623b      	str	r3, [r7, #32]
          break;
 800158c:	e023      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	3308      	adds	r3, #8
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e01e      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	330c      	adds	r3, #12
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e019      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015aa:	2304      	movs	r3, #4
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e012      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b8:	2308      	movs	r3, #8
 80015ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	611a      	str	r2, [r3, #16]
          break;
 80015c2:	e008      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c4:	2308      	movs	r3, #8
 80015c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	615a      	str	r2, [r3, #20]
          break;
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2bff      	cmp	r3, #255	; 0xff
 80015da:	d801      	bhi.n	80015e0 <HAL_GPIO_Init+0xec>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	e001      	b.n	80015e4 <HAL_GPIO_Init+0xf0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3304      	adds	r3, #4
 80015e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2bff      	cmp	r3, #255	; 0xff
 80015ea:	d802      	bhi.n	80015f2 <HAL_GPIO_Init+0xfe>
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x104>
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	3b08      	subs	r3, #8
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	210f      	movs	r1, #15
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	6a39      	ldr	r1, [r7, #32]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8090 	beq.w	8001746 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001626:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_GPIO_Init+0x28c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_GPIO_Init+0x28c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_GPIO_Init+0x28c>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800163e:	4a51      	ldr	r2, [pc, #324]	; (8001784 <HAL_GPIO_Init+0x290>)
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	220f      	movs	r2, #15
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a48      	ldr	r2, [pc, #288]	; (8001788 <HAL_GPIO_Init+0x294>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x192>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a47      	ldr	r2, [pc, #284]	; (800178c <HAL_GPIO_Init+0x298>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x18e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a46      	ldr	r2, [pc, #280]	; (8001790 <HAL_GPIO_Init+0x29c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x18a>
 800167a:	2302      	movs	r3, #2
 800167c:	e004      	b.n	8001688 <HAL_GPIO_Init+0x194>
 800167e:	2303      	movs	r3, #3
 8001680:	e002      	b.n	8001688 <HAL_GPIO_Init+0x194>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x194>
 8001686:	2300      	movs	r3, #0
 8001688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4093      	lsls	r3, r2
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001698:	493a      	ldr	r1, [pc, #232]	; (8001784 <HAL_GPIO_Init+0x290>)
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4937      	ldr	r1, [pc, #220]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
 80016be:	e006      	b.n	80016ce <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016c0:	4b34      	ldr	r3, [pc, #208]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	4932      	ldr	r1, [pc, #200]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	492d      	ldr	r1, [pc, #180]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	4928      	ldr	r1, [pc, #160]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	4923      	ldr	r1, [pc, #140]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	491e      	ldr	r1, [pc, #120]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 800171a:	4013      	ands	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	4919      	ldr	r1, [pc, #100]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	60cb      	str	r3, [r1, #12]
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	4914      	ldr	r1, [pc, #80]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001742:	4013      	ands	r3, r2
 8001744:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	3301      	adds	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	f47f aed6 	bne.w	8001508 <HAL_GPIO_Init+0x14>
  }
}
 800175c:	bf00      	nop
 800175e:	372c      	adds	r7, #44	; 0x2c
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	10210000 	.word	0x10210000
 800176c:	10110000 	.word	0x10110000
 8001770:	10120000 	.word	0x10120000
 8001774:	10310000 	.word	0x10310000
 8001778:	10320000 	.word	0x10320000
 800177c:	10220000 	.word	0x10220000
 8001780:	40021000 	.word	0x40021000
 8001784:	40010000 	.word	0x40010000
 8001788:	40010800 	.word	0x40010800
 800178c:	40010c00 	.word	0x40010c00
 8001790:	40011000 	.word	0x40011000
 8001794:	40010400 	.word	0x40010400

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	611a      	str	r2, [r3, #16]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e0:	887a      	ldrh	r2, [r7, #2]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	611a      	str	r2, [r3, #16]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e26c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8087 	beq.w	8001926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001818:	4b92      	ldr	r3, [pc, #584]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b04      	cmp	r3, #4
 8001822:	d00c      	beq.n	800183e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001824:	4b8f      	ldr	r3, [pc, #572]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d112      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
 8001830:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d10b      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183e:	4b89      	ldr	r3, [pc, #548]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d06c      	beq.n	8001924 <HAL_RCC_OscConfig+0x12c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d168      	bne.n	8001924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e246      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x76>
 8001860:	4b80      	ldr	r3, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a7f      	ldr	r2, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e02e      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x98>
 8001876:	4b7b      	ldr	r3, [pc, #492]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7a      	ldr	r2, [pc, #488]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xbc>
 800189a:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a71      	ldr	r2, [pc, #452]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 80018b4:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6a      	ldr	r2, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a67      	ldr	r2, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fcce 	bl	8001274 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fcca 	bl	8001274 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1fa      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xe4>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fcba 	bl	8001274 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fcb6 	bl	8001274 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1e6      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x10c>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d063      	beq.n	80019fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001932:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11c      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1ba      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	e03a      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fc6f 	bl	8001274 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fc6b 	bl	8001274 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e19b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4927      	ldr	r1, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fc4e 	bl	8001274 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fc4a 	bl	8001274 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e17a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03a      	beq.n	8001a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fc2e 	bl	8001274 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fc2a 	bl	8001274 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e15a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f000 fada 	bl	8001ff4 <RCC_Delay>
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff fc14 	bl	8001274 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4e:	e00f      	b.n	8001a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fc10 	bl	8001274 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d908      	bls.n	8001a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e140      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	42420000 	.word	0x42420000
 8001a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	4b9e      	ldr	r3, [pc, #632]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e9      	bne.n	8001a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80a6 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b97      	ldr	r3, [pc, #604]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b94      	ldr	r3, [pc, #592]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a93      	ldr	r2, [pc, #588]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b91      	ldr	r3, [pc, #580]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b8e      	ldr	r3, [pc, #568]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a8a      	ldr	r2, [pc, #552]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff fbd1 	bl	8001274 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff fbcd 	bl	8001274 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	; 0x64
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0fd      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x312>
 8001afc:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	e02d      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x334>
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a75      	ldr	r2, [pc, #468]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	e01c      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x356>
 8001b34:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a6c      	ldr	r2, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a69      	ldr	r2, [pc, #420]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a66      	ldr	r2, [pc, #408]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b64      	ldr	r3, [pc, #400]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a63      	ldr	r2, [pc, #396]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d015      	beq.n	8001b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fb81 	bl	8001274 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff fb7d 	bl	8001274 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0ab      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCC_OscConfig+0x37e>
 8001b98:	e014      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fb6b 	bl	8001274 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff fb67 	bl	8001274 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e095      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a47      	ldr	r2, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8081 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be0:	4b42      	ldr	r3, [pc, #264]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d061      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d146      	bne.n	8001c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fb3b 	bl	8001274 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff fb37 	bl	8001274 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e067      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d108      	bne.n	8001c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	492d      	ldr	r1, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a19      	ldr	r1, [r3, #32]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	4927      	ldr	r1, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fb0b 	bl	8001274 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fb07 	bl	8001274 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e037      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x46a>
 8001c80:	e02f      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_RCC_OscConfig+0x4fc>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff faf4 	bl	8001274 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff faf0 	bl	8001274 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e020      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x498>
 8001cae:	e018      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e013      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42420060 	.word	0x42420060

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0d0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4965      	ldr	r1, [pc, #404]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d040      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e073      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4936      	ldr	r1, [pc, #216]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7ff fa44 	bl	8001274 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7ff fa40 	bl	8001274 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e053      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d210      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4601      	mov	r1, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	5cd3      	ldrb	r3, [r2, r3]
 8001e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f9a2 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08004db8 	.word	0x08004db8
 8001ec4:	20000004 	.word	0x20000004
 8001ec8:	20000008 	.word	0x20000008

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b490      	push	{r4, r7}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ed4:	1d3c      	adds	r4, r7, #4
 8001ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x46>
 8001f0a:	e02d      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	e02d      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f1e:	4413      	add	r3, r2
 8001f20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c5b      	lsrs	r3, r3, #17
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f3e:	4413      	add	r3, r2
 8001f40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f4a:	fb02 f203 	mul.w	r2, r2, r3
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	e004      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	623b      	str	r3, [r7, #32]
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f6a:	623b      	str	r3, [r7, #32]
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc90      	pop	{r4, r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	08004da4 	.word	0x08004da4
 8001f80:	08004db4 	.word	0x08004db4
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	003d0900 	.word	0x003d0900

08001f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	f7ff fff2 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fac:	4601      	mov	r1, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4a03      	ldr	r2, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	08004dc8 	.word	0x08004dc8

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4601      	mov	r1, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	0adb      	lsrs	r3, r3, #11
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08004dc8 	.word	0x08004dc8

08001ff4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <RCC_Delay+0x34>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <RCC_Delay+0x38>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0a5b      	lsrs	r3, r3, #9
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002010:	bf00      	nop
  }
  while (Delay --);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	60fa      	str	r2, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f9      	bne.n	8002010 <RCC_Delay+0x1c>
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000004 	.word	0x20000004
 800202c:	10624dd3 	.word	0x10624dd3

08002030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e01d      	b.n	800207e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe ffa0 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f000 fa64 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e01d      	b.n	80020d4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7fe ff31 	bl	8000f14 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3304      	adds	r3, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f000 fa39 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d841      	bhi.n	8002170 <HAL_TIM_IC_Start_IT+0x94>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <HAL_TIM_IC_Start_IT+0x18>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002129 	.word	0x08002129
 80020f8:	08002171 	.word	0x08002171
 80020fc:	08002171 	.word	0x08002171
 8002100:	08002171 	.word	0x08002171
 8002104:	0800213b 	.word	0x0800213b
 8002108:	08002171 	.word	0x08002171
 800210c:	08002171 	.word	0x08002171
 8002110:	08002171 	.word	0x08002171
 8002114:	0800214d 	.word	0x0800214d
 8002118:	08002171 	.word	0x08002171
 800211c:	08002171 	.word	0x08002171
 8002120:	08002171 	.word	0x08002171
 8002124:	0800215f 	.word	0x0800215f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0202 	orr.w	r2, r2, #2
 8002136:	60da      	str	r2, [r3, #12]
      break;
 8002138:	e01b      	b.n	8002172 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0204 	orr.w	r2, r2, #4
 8002148:	60da      	str	r2, [r3, #12]
      break;
 800214a:	e012      	b.n	8002172 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0208 	orr.w	r2, r2, #8
 800215a:	60da      	str	r2, [r3, #12]
      break;
 800215c:	e009      	b.n	8002172 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0210 	orr.w	r2, r2, #16
 800216c:	60da      	str	r2, [r3, #12]
      break;
 800216e:	e000      	b.n	8002172 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002170:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	6839      	ldr	r1, [r7, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fb3d 	bl	80027fa <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b06      	cmp	r3, #6
 8002190:	d007      	beq.n	80021a2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d122      	bne.n	8002208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d11b      	bne.n	8002208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0202 	mvn.w	r2, #2
 80021d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fd0c 	bl	8000c0c <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f985 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f98b 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b04      	cmp	r3, #4
 8002214:	d122      	bne.n	800225c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b04      	cmp	r3, #4
 8002222:	d11b      	bne.n	800225c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0204 	mvn.w	r2, #4
 800222c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fce2 	bl	8000c0c <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f95b 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f961 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b08      	cmp	r3, #8
 8002268:	d122      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b08      	cmp	r3, #8
 8002276:	d11b      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0208 	mvn.w	r2, #8
 8002280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2204      	movs	r2, #4
 8002286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fcb8 	bl	8000c0c <HAL_TIM_IC_CaptureCallback>
 800229c:	e005      	b.n	80022aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f931 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f937 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b10      	cmp	r3, #16
 80022bc:	d122      	bne.n	8002304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d11b      	bne.n	8002304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0210 	mvn.w	r2, #16
 80022d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2208      	movs	r2, #8
 80022da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fc8e 	bl	8000c0c <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f907 	bl	8002506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f90d 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10e      	bne.n	8002330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d107      	bne.n	8002330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0201 	mvn.w	r2, #1
 8002328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f8e2 	bl	80024f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233a:	2b80      	cmp	r3, #128	; 0x80
 800233c:	d10e      	bne.n	800235c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b80      	cmp	r3, #128	; 0x80
 800234a:	d107      	bne.n	800235c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa7c 	bl	8002854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d10e      	bne.n	8002388 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d107      	bne.n	8002388 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8d1 	bl	800252a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b20      	cmp	r3, #32
 8002394:	d10e      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d107      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0220 	mvn.w	r2, #32
 80023ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fa47 	bl	8002842 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e08a      	b.n	80024ec <HAL_TIM_IC_ConfigChannel+0x130>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11b      	bne.n	8002424 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f000 f8f6 	bl	80025ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 020c 	bic.w	r2, r2, #12
 800240e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6999      	ldr	r1, [r3, #24]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	619a      	str	r2, [r3, #24]
 8002422:	e05a      	b.n	80024da <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b04      	cmp	r3, #4
 8002428:	d11c      	bne.n	8002464 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f000 f92b 	bl	8002694 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800244c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6999      	ldr	r1, [r3, #24]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	021a      	lsls	r2, r3, #8
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	619a      	str	r2, [r3, #24]
 8002462:	e03a      	b.n	80024da <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b08      	cmp	r3, #8
 8002468:	d11b      	bne.n	80024a2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6819      	ldr	r1, [r3, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f000 f947 	bl	800270c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 020c 	bic.w	r2, r2, #12
 800248c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69d9      	ldr	r1, [r3, #28]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	61da      	str	r2, [r3, #28]
 80024a0:	e01b      	b.n	80024da <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f000 f966 	bl	8002782 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024c4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69d9      	ldr	r1, [r3, #28]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	021a      	lsls	r2, r3, #8
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <TIM_Base_SetConfig+0xa8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <TIM_Base_SetConfig+0x28>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d003      	beq.n	8002564 <TIM_Base_SetConfig+0x28>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <TIM_Base_SetConfig+0xac>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d108      	bne.n	8002576 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <TIM_Base_SetConfig+0xa8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <TIM_Base_SetConfig+0x52>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d003      	beq.n	800258e <TIM_Base_SetConfig+0x52>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <TIM_Base_SetConfig+0xac>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d108      	bne.n	80025a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <TIM_Base_SetConfig+0xa8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d103      	bne.n	80025d4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	615a      	str	r2, [r3, #20]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40000400 	.word	0x40000400

080025ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f023 0201 	bic.w	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <TIM_TI1_SetConfig+0xa0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_TI1_SetConfig+0x3e>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002620:	d003      	beq.n	800262a <TIM_TI1_SetConfig+0x3e>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a1a      	ldr	r2, [pc, #104]	; (8002690 <TIM_TI1_SetConfig+0xa4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <TIM_TI1_SetConfig+0x42>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <TIM_TI1_SetConfig+0x44>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e003      	b.n	800264e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	b2db      	uxtb	r3, r3
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f023 030a 	bic.w	r3, r3, #10
 8002668:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f003 030a 	and.w	r3, r3, #10
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	621a      	str	r2, [r3, #32]
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400

08002694 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f023 0210 	bic.w	r2, r3, #16
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	031b      	lsls	r3, r3, #12
 80026d8:	b29b      	uxth	r3, r3
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	621a      	str	r2, [r3, #32]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 0303 	bic.w	r3, r3, #3
 8002738:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002748:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	b2db      	uxtb	r3, r3
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800275c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	621a      	str	r2, [r3, #32]
}
 8002778:	bf00      	nop
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002782:	b480      	push	{r7}
 8002784:	b087      	sub	sp, #28
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	031b      	lsls	r3, r3, #12
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	031b      	lsls	r3, r3, #12
 80027da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	621a      	str	r2, [r3, #32]
}
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2201      	movs	r2, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	43db      	mvns	r3, r3
 800281c:	401a      	ands	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	431a      	orrs	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	621a      	str	r2, [r3, #32]
}
 8002838:	bf00      	nop
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e03f      	b.n	80028f8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7fe fba3 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2224      	movs	r2, #36	; 0x24
 8002896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f90c 	bl	8002ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b20      	cmp	r3, #32
 800291e:	f040 8083 	bne.w	8002a28 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_UART_Transmit+0x2e>
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e07b      	b.n	8002a2a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_UART_Transmit+0x40>
 800293c:	2302      	movs	r3, #2
 800293e:	e074      	b.n	8002a2a <HAL_UART_Transmit+0x12a>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2221      	movs	r2, #33	; 0x21
 8002952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002956:	f7fe fc8d 	bl	8001274 <HAL_GetTick>
 800295a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002968:	e042      	b.n	80029f0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002980:	d122      	bne.n	80029c8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2200      	movs	r2, #0
 800298a:	2180      	movs	r1, #128	; 0x80
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f850 	bl	8002a32 <UART_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e046      	b.n	8002a2a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029ae:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	3302      	adds	r3, #2
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	e017      	b.n	80029f0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3301      	adds	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	e013      	b.n	80029f0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2200      	movs	r2, #0
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f82d 	bl	8002a32 <UART_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e023      	b.n	8002a2a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	60ba      	str	r2, [r7, #8]
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1b7      	bne.n	800296a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2140      	movs	r1, #64	; 0x40
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f814 	bl	8002a32 <UART_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e00a      	b.n	8002a2a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a42:	e02c      	b.n	8002a9e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4a:	d028      	beq.n	8002a9e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a52:	f7fe fc0f 	bl	8001274 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d21d      	bcs.n	8002a9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e00f      	b.n	8002abe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d0c3      	beq.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b02:	f023 030c 	bic.w	r3, r3, #12
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a52      	ldr	r2, [pc, #328]	; (8002c74 <UART_SetConfig+0x1ac>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d14e      	bne.n	8002bce <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b30:	f7ff fa4c 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8002b34:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009a      	lsls	r2, r3, #2
 8002b40:	441a      	add	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	4a4a      	ldr	r2, [pc, #296]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	0119      	lsls	r1, r3, #4
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009a      	lsls	r2, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b6c:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2064      	movs	r0, #100	; 0x64
 8002b76:	fb00 f303 	mul.w	r3, r0, r3
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	3332      	adds	r3, #50	; 0x32
 8002b80:	4a3d      	ldr	r2, [pc, #244]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b8c:	4419      	add	r1, r3
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009a      	lsls	r2, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2064      	movs	r0, #100	; 0x64
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	3332      	adds	r3, #50	; 0x32
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	f003 020f 	and.w	r2, r3, #15
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	440a      	add	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002bcc:	e04d      	b.n	8002c6a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7ff f9e9 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002bd2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009a      	lsls	r2, r3, #2
 8002bde:	441a      	add	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	0119      	lsls	r1, r3, #4
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009a      	lsls	r2, r3, #2
 8002bfe:	441a      	add	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002c0c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	2064      	movs	r0, #100	; 0x64
 8002c14:	fb00 f303 	mul.w	r3, r0, r3
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	3332      	adds	r3, #50	; 0x32
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002c20:	fba2 2303 	umull	r2, r3, r2, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2a:	4419      	add	r1, r3
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	009a      	lsls	r2, r3, #2
 8002c36:	441a      	add	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002c44:	fba3 0302 	umull	r0, r3, r3, r2
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	2064      	movs	r0, #100	; 0x64
 8002c4c:	fb00 f303 	mul.w	r3, r0, r3
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	3332      	adds	r3, #50	; 0x32
 8002c56:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <UART_SetConfig+0x1b0>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	f003 020f 	and.w	r2, r3, #15
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	440a      	add	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40013800 	.word	0x40013800
 8002c78:	51eb851f 	.word	0x51eb851f

08002c7c <__errno>:
 8002c7c:	4b01      	ldr	r3, [pc, #4]	; (8002c84 <__errno+0x8>)
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000010 	.word	0x20000010

08002c88 <__libc_init_array>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	2500      	movs	r5, #0
 8002c8c:	4e0c      	ldr	r6, [pc, #48]	; (8002cc0 <__libc_init_array+0x38>)
 8002c8e:	4c0d      	ldr	r4, [pc, #52]	; (8002cc4 <__libc_init_array+0x3c>)
 8002c90:	1ba4      	subs	r4, r4, r6
 8002c92:	10a4      	asrs	r4, r4, #2
 8002c94:	42a5      	cmp	r5, r4
 8002c96:	d109      	bne.n	8002cac <__libc_init_array+0x24>
 8002c98:	f002 f860 	bl	8004d5c <_init>
 8002c9c:	2500      	movs	r5, #0
 8002c9e:	4e0a      	ldr	r6, [pc, #40]	; (8002cc8 <__libc_init_array+0x40>)
 8002ca0:	4c0a      	ldr	r4, [pc, #40]	; (8002ccc <__libc_init_array+0x44>)
 8002ca2:	1ba4      	subs	r4, r4, r6
 8002ca4:	10a4      	asrs	r4, r4, #2
 8002ca6:	42a5      	cmp	r5, r4
 8002ca8:	d105      	bne.n	8002cb6 <__libc_init_array+0x2e>
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
 8002cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cb0:	4798      	blx	r3
 8002cb2:	3501      	adds	r5, #1
 8002cb4:	e7ee      	b.n	8002c94 <__libc_init_array+0xc>
 8002cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cba:	4798      	blx	r3
 8002cbc:	3501      	adds	r5, #1
 8002cbe:	e7f2      	b.n	8002ca6 <__libc_init_array+0x1e>
 8002cc0:	08005030 	.word	0x08005030
 8002cc4:	08005030 	.word	0x08005030
 8002cc8:	08005030 	.word	0x08005030
 8002ccc:	08005034 	.word	0x08005034

08002cd0 <memset>:
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4402      	add	r2, r0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d100      	bne.n	8002cda <memset+0xa>
 8002cd8:	4770      	bx	lr
 8002cda:	f803 1b01 	strb.w	r1, [r3], #1
 8002cde:	e7f9      	b.n	8002cd4 <memset+0x4>

08002ce0 <__cvt>:
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ce6:	461e      	mov	r6, r3
 8002ce8:	bfbb      	ittet	lt
 8002cea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002cee:	461e      	movlt	r6, r3
 8002cf0:	2300      	movge	r3, #0
 8002cf2:	232d      	movlt	r3, #45	; 0x2d
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002cf8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002cfc:	f027 0720 	bic.w	r7, r7, #32
 8002d00:	2f46      	cmp	r7, #70	; 0x46
 8002d02:	4614      	mov	r4, r2
 8002d04:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002d06:	700b      	strb	r3, [r1, #0]
 8002d08:	d004      	beq.n	8002d14 <__cvt+0x34>
 8002d0a:	2f45      	cmp	r7, #69	; 0x45
 8002d0c:	d100      	bne.n	8002d10 <__cvt+0x30>
 8002d0e:	3501      	adds	r5, #1
 8002d10:	2302      	movs	r3, #2
 8002d12:	e000      	b.n	8002d16 <__cvt+0x36>
 8002d14:	2303      	movs	r3, #3
 8002d16:	aa07      	add	r2, sp, #28
 8002d18:	9204      	str	r2, [sp, #16]
 8002d1a:	aa06      	add	r2, sp, #24
 8002d1c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002d20:	e9cd 3500 	strd	r3, r5, [sp]
 8002d24:	4622      	mov	r2, r4
 8002d26:	4633      	mov	r3, r6
 8002d28:	f000 fcda 	bl	80036e0 <_dtoa_r>
 8002d2c:	2f47      	cmp	r7, #71	; 0x47
 8002d2e:	4680      	mov	r8, r0
 8002d30:	d102      	bne.n	8002d38 <__cvt+0x58>
 8002d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d34:	07db      	lsls	r3, r3, #31
 8002d36:	d526      	bpl.n	8002d86 <__cvt+0xa6>
 8002d38:	2f46      	cmp	r7, #70	; 0x46
 8002d3a:	eb08 0905 	add.w	r9, r8, r5
 8002d3e:	d111      	bne.n	8002d64 <__cvt+0x84>
 8002d40:	f898 3000 	ldrb.w	r3, [r8]
 8002d44:	2b30      	cmp	r3, #48	; 0x30
 8002d46:	d10a      	bne.n	8002d5e <__cvt+0x7e>
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	4631      	mov	r1, r6
 8002d50:	f7fd fe2a 	bl	80009a8 <__aeabi_dcmpeq>
 8002d54:	b918      	cbnz	r0, 8002d5e <__cvt+0x7e>
 8002d56:	f1c5 0501 	rsb	r5, r5, #1
 8002d5a:	f8ca 5000 	str.w	r5, [sl]
 8002d5e:	f8da 3000 	ldr.w	r3, [sl]
 8002d62:	4499      	add	r9, r3
 8002d64:	2200      	movs	r2, #0
 8002d66:	2300      	movs	r3, #0
 8002d68:	4620      	mov	r0, r4
 8002d6a:	4631      	mov	r1, r6
 8002d6c:	f7fd fe1c 	bl	80009a8 <__aeabi_dcmpeq>
 8002d70:	b938      	cbnz	r0, 8002d82 <__cvt+0xa2>
 8002d72:	2230      	movs	r2, #48	; 0x30
 8002d74:	9b07      	ldr	r3, [sp, #28]
 8002d76:	454b      	cmp	r3, r9
 8002d78:	d205      	bcs.n	8002d86 <__cvt+0xa6>
 8002d7a:	1c59      	adds	r1, r3, #1
 8002d7c:	9107      	str	r1, [sp, #28]
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e7f8      	b.n	8002d74 <__cvt+0x94>
 8002d82:	f8cd 901c 	str.w	r9, [sp, #28]
 8002d86:	4640      	mov	r0, r8
 8002d88:	9b07      	ldr	r3, [sp, #28]
 8002d8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002d8c:	eba3 0308 	sub.w	r3, r3, r8
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	b008      	add	sp, #32
 8002d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d98 <__exponent>:
 8002d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d9a:	2900      	cmp	r1, #0
 8002d9c:	bfb4      	ite	lt
 8002d9e:	232d      	movlt	r3, #45	; 0x2d
 8002da0:	232b      	movge	r3, #43	; 0x2b
 8002da2:	4604      	mov	r4, r0
 8002da4:	bfb8      	it	lt
 8002da6:	4249      	neglt	r1, r1
 8002da8:	2909      	cmp	r1, #9
 8002daa:	f804 2b02 	strb.w	r2, [r4], #2
 8002dae:	7043      	strb	r3, [r0, #1]
 8002db0:	dd21      	ble.n	8002df6 <__exponent+0x5e>
 8002db2:	f10d 0307 	add.w	r3, sp, #7
 8002db6:	461f      	mov	r7, r3
 8002db8:	260a      	movs	r6, #10
 8002dba:	fb91 f5f6 	sdiv	r5, r1, r6
 8002dbe:	fb06 1115 	mls	r1, r6, r5, r1
 8002dc2:	2d09      	cmp	r5, #9
 8002dc4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002dc8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002dcc:	f103 32ff 	add.w	r2, r3, #4294967295
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	dc09      	bgt.n	8002de8 <__exponent+0x50>
 8002dd4:	3130      	adds	r1, #48	; 0x30
 8002dd6:	3b02      	subs	r3, #2
 8002dd8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002ddc:	42bb      	cmp	r3, r7
 8002dde:	4622      	mov	r2, r4
 8002de0:	d304      	bcc.n	8002dec <__exponent+0x54>
 8002de2:	1a10      	subs	r0, r2, r0
 8002de4:	b003      	add	sp, #12
 8002de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de8:	4613      	mov	r3, r2
 8002dea:	e7e6      	b.n	8002dba <__exponent+0x22>
 8002dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002df0:	f804 2b01 	strb.w	r2, [r4], #1
 8002df4:	e7f2      	b.n	8002ddc <__exponent+0x44>
 8002df6:	2330      	movs	r3, #48	; 0x30
 8002df8:	4419      	add	r1, r3
 8002dfa:	7083      	strb	r3, [r0, #2]
 8002dfc:	1d02      	adds	r2, r0, #4
 8002dfe:	70c1      	strb	r1, [r0, #3]
 8002e00:	e7ef      	b.n	8002de2 <__exponent+0x4a>
	...

08002e04 <_printf_float>:
 8002e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e08:	b091      	sub	sp, #68	; 0x44
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002e0e:	4693      	mov	fp, r2
 8002e10:	461e      	mov	r6, r3
 8002e12:	4605      	mov	r5, r0
 8002e14:	f001 fa18 	bl	8004248 <_localeconv_r>
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e1e:	f7fd f997 	bl	8000150 <strlen>
 8002e22:	2300      	movs	r3, #0
 8002e24:	930e      	str	r3, [sp, #56]	; 0x38
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	900a      	str	r0, [sp, #40]	; 0x28
 8002e2a:	3307      	adds	r3, #7
 8002e2c:	f023 0307 	bic.w	r3, r3, #7
 8002e30:	f103 0208 	add.w	r2, r3, #8
 8002e34:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002e38:	f8d4 a000 	ldr.w	sl, [r4]
 8002e3c:	603a      	str	r2, [r7, #0]
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002e46:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002e4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	4ba6      	ldr	r3, [pc, #664]	; (80030f0 <_printf_float+0x2ec>)
 8002e56:	4638      	mov	r0, r7
 8002e58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e5a:	f7fd fdd7 	bl	8000a0c <__aeabi_dcmpun>
 8002e5e:	bb68      	cbnz	r0, 8002ebc <_printf_float+0xb8>
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
 8002e64:	4ba2      	ldr	r3, [pc, #648]	; (80030f0 <_printf_float+0x2ec>)
 8002e66:	4638      	mov	r0, r7
 8002e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e6a:	f7fd fdb1 	bl	80009d0 <__aeabi_dcmple>
 8002e6e:	bb28      	cbnz	r0, 8002ebc <_printf_float+0xb8>
 8002e70:	2200      	movs	r2, #0
 8002e72:	2300      	movs	r3, #0
 8002e74:	4638      	mov	r0, r7
 8002e76:	4649      	mov	r1, r9
 8002e78:	f7fd fda0 	bl	80009bc <__aeabi_dcmplt>
 8002e7c:	b110      	cbz	r0, 8002e84 <_printf_float+0x80>
 8002e7e:	232d      	movs	r3, #45	; 0x2d
 8002e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e84:	4f9b      	ldr	r7, [pc, #620]	; (80030f4 <_printf_float+0x2f0>)
 8002e86:	4b9c      	ldr	r3, [pc, #624]	; (80030f8 <_printf_float+0x2f4>)
 8002e88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002e8c:	bf98      	it	ls
 8002e8e:	461f      	movls	r7, r3
 8002e90:	2303      	movs	r3, #3
 8002e92:	f04f 0900 	mov.w	r9, #0
 8002e96:	6123      	str	r3, [r4, #16]
 8002e98:	f02a 0304 	bic.w	r3, sl, #4
 8002e9c:	6023      	str	r3, [r4, #0]
 8002e9e:	9600      	str	r6, [sp, #0]
 8002ea0:	465b      	mov	r3, fp
 8002ea2:	aa0f      	add	r2, sp, #60	; 0x3c
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f000 f9e2 	bl	8003270 <_printf_common>
 8002eac:	3001      	adds	r0, #1
 8002eae:	f040 8090 	bne.w	8002fd2 <_printf_float+0x1ce>
 8002eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb6:	b011      	add	sp, #68	; 0x44
 8002eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ebc:	463a      	mov	r2, r7
 8002ebe:	464b      	mov	r3, r9
 8002ec0:	4638      	mov	r0, r7
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	f7fd fda2 	bl	8000a0c <__aeabi_dcmpun>
 8002ec8:	b110      	cbz	r0, 8002ed0 <_printf_float+0xcc>
 8002eca:	4f8c      	ldr	r7, [pc, #560]	; (80030fc <_printf_float+0x2f8>)
 8002ecc:	4b8c      	ldr	r3, [pc, #560]	; (8003100 <_printf_float+0x2fc>)
 8002ece:	e7db      	b.n	8002e88 <_printf_float+0x84>
 8002ed0:	6863      	ldr	r3, [r4, #4]
 8002ed2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002ed6:	1c59      	adds	r1, r3, #1
 8002ed8:	a80d      	add	r0, sp, #52	; 0x34
 8002eda:	a90e      	add	r1, sp, #56	; 0x38
 8002edc:	d140      	bne.n	8002f60 <_printf_float+0x15c>
 8002ede:	2306      	movs	r3, #6
 8002ee0:	6063      	str	r3, [r4, #4]
 8002ee2:	f04f 0c00 	mov.w	ip, #0
 8002ee6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002eea:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002eee:	6863      	ldr	r3, [r4, #4]
 8002ef0:	6022      	str	r2, [r4, #0]
 8002ef2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	463a      	mov	r2, r7
 8002efa:	464b      	mov	r3, r9
 8002efc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002f00:	4628      	mov	r0, r5
 8002f02:	f7ff feed 	bl	8002ce0 <__cvt>
 8002f06:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002f0a:	2b47      	cmp	r3, #71	; 0x47
 8002f0c:	4607      	mov	r7, r0
 8002f0e:	d109      	bne.n	8002f24 <_printf_float+0x120>
 8002f10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f12:	1cd8      	adds	r0, r3, #3
 8002f14:	db02      	blt.n	8002f1c <_printf_float+0x118>
 8002f16:	6862      	ldr	r2, [r4, #4]
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	dd47      	ble.n	8002fac <_printf_float+0x1a8>
 8002f1c:	f1a8 0802 	sub.w	r8, r8, #2
 8002f20:	fa5f f888 	uxtb.w	r8, r8
 8002f24:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002f28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f2a:	d824      	bhi.n	8002f76 <_printf_float+0x172>
 8002f2c:	3901      	subs	r1, #1
 8002f2e:	4642      	mov	r2, r8
 8002f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f34:	910d      	str	r1, [sp, #52]	; 0x34
 8002f36:	f7ff ff2f 	bl	8002d98 <__exponent>
 8002f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f3c:	4681      	mov	r9, r0
 8002f3e:	1813      	adds	r3, r2, r0
 8002f40:	2a01      	cmp	r2, #1
 8002f42:	6123      	str	r3, [r4, #16]
 8002f44:	dc02      	bgt.n	8002f4c <_printf_float+0x148>
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	07d1      	lsls	r1, r2, #31
 8002f4a:	d501      	bpl.n	8002f50 <_printf_float+0x14c>
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	6123      	str	r3, [r4, #16]
 8002f50:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0a2      	beq.n	8002e9e <_printf_float+0x9a>
 8002f58:	232d      	movs	r3, #45	; 0x2d
 8002f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f5e:	e79e      	b.n	8002e9e <_printf_float+0x9a>
 8002f60:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002f64:	f000 816e 	beq.w	8003244 <_printf_float+0x440>
 8002f68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f6c:	d1b9      	bne.n	8002ee2 <_printf_float+0xde>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1b7      	bne.n	8002ee2 <_printf_float+0xde>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e7b4      	b.n	8002ee0 <_printf_float+0xdc>
 8002f76:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002f7a:	d119      	bne.n	8002fb0 <_printf_float+0x1ac>
 8002f7c:	2900      	cmp	r1, #0
 8002f7e:	6863      	ldr	r3, [r4, #4]
 8002f80:	dd0c      	ble.n	8002f9c <_printf_float+0x198>
 8002f82:	6121      	str	r1, [r4, #16]
 8002f84:	b913      	cbnz	r3, 8002f8c <_printf_float+0x188>
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	07d2      	lsls	r2, r2, #31
 8002f8a:	d502      	bpl.n	8002f92 <_printf_float+0x18e>
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	440b      	add	r3, r1
 8002f90:	6123      	str	r3, [r4, #16]
 8002f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f94:	f04f 0900 	mov.w	r9, #0
 8002f98:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f9a:	e7d9      	b.n	8002f50 <_printf_float+0x14c>
 8002f9c:	b913      	cbnz	r3, 8002fa4 <_printf_float+0x1a0>
 8002f9e:	6822      	ldr	r2, [r4, #0]
 8002fa0:	07d0      	lsls	r0, r2, #31
 8002fa2:	d501      	bpl.n	8002fa8 <_printf_float+0x1a4>
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	e7f3      	b.n	8002f90 <_printf_float+0x18c>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e7f1      	b.n	8002f90 <_printf_float+0x18c>
 8002fac:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002fb0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	db05      	blt.n	8002fc4 <_printf_float+0x1c0>
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	6123      	str	r3, [r4, #16]
 8002fbc:	07d1      	lsls	r1, r2, #31
 8002fbe:	d5e8      	bpl.n	8002f92 <_printf_float+0x18e>
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	e7e5      	b.n	8002f90 <_printf_float+0x18c>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bfcc      	ite	gt
 8002fc8:	2301      	movgt	r3, #1
 8002fca:	f1c3 0302 	rsble	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	e7de      	b.n	8002f90 <_printf_float+0x18c>
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	055a      	lsls	r2, r3, #21
 8002fd6:	d407      	bmi.n	8002fe8 <_printf_float+0x1e4>
 8002fd8:	6923      	ldr	r3, [r4, #16]
 8002fda:	463a      	mov	r2, r7
 8002fdc:	4659      	mov	r1, fp
 8002fde:	4628      	mov	r0, r5
 8002fe0:	47b0      	blx	r6
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	d129      	bne.n	800303a <_printf_float+0x236>
 8002fe6:	e764      	b.n	8002eb2 <_printf_float+0xae>
 8002fe8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002fec:	f240 80d7 	bls.w	800319e <_printf_float+0x39a>
 8002ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f7fd fcd6 	bl	80009a8 <__aeabi_dcmpeq>
 8002ffc:	b388      	cbz	r0, 8003062 <_printf_float+0x25e>
 8002ffe:	2301      	movs	r3, #1
 8003000:	4a40      	ldr	r2, [pc, #256]	; (8003104 <_printf_float+0x300>)
 8003002:	4659      	mov	r1, fp
 8003004:	4628      	mov	r0, r5
 8003006:	47b0      	blx	r6
 8003008:	3001      	adds	r0, #1
 800300a:	f43f af52 	beq.w	8002eb2 <_printf_float+0xae>
 800300e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003012:	429a      	cmp	r2, r3
 8003014:	db02      	blt.n	800301c <_printf_float+0x218>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	07d8      	lsls	r0, r3, #31
 800301a:	d50e      	bpl.n	800303a <_printf_float+0x236>
 800301c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003020:	4659      	mov	r1, fp
 8003022:	4628      	mov	r0, r5
 8003024:	47b0      	blx	r6
 8003026:	3001      	adds	r0, #1
 8003028:	f43f af43 	beq.w	8002eb2 <_printf_float+0xae>
 800302c:	2700      	movs	r7, #0
 800302e:	f104 081a 	add.w	r8, r4, #26
 8003032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003034:	3b01      	subs	r3, #1
 8003036:	42bb      	cmp	r3, r7
 8003038:	dc09      	bgt.n	800304e <_printf_float+0x24a>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	079f      	lsls	r7, r3, #30
 800303e:	f100 80fd 	bmi.w	800323c <_printf_float+0x438>
 8003042:	68e0      	ldr	r0, [r4, #12]
 8003044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003046:	4298      	cmp	r0, r3
 8003048:	bfb8      	it	lt
 800304a:	4618      	movlt	r0, r3
 800304c:	e733      	b.n	8002eb6 <_printf_float+0xb2>
 800304e:	2301      	movs	r3, #1
 8003050:	4642      	mov	r2, r8
 8003052:	4659      	mov	r1, fp
 8003054:	4628      	mov	r0, r5
 8003056:	47b0      	blx	r6
 8003058:	3001      	adds	r0, #1
 800305a:	f43f af2a 	beq.w	8002eb2 <_printf_float+0xae>
 800305e:	3701      	adds	r7, #1
 8003060:	e7e7      	b.n	8003032 <_printf_float+0x22e>
 8003062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003064:	2b00      	cmp	r3, #0
 8003066:	dc2b      	bgt.n	80030c0 <_printf_float+0x2bc>
 8003068:	2301      	movs	r3, #1
 800306a:	4a26      	ldr	r2, [pc, #152]	; (8003104 <_printf_float+0x300>)
 800306c:	4659      	mov	r1, fp
 800306e:	4628      	mov	r0, r5
 8003070:	47b0      	blx	r6
 8003072:	3001      	adds	r0, #1
 8003074:	f43f af1d 	beq.w	8002eb2 <_printf_float+0xae>
 8003078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800307a:	b923      	cbnz	r3, 8003086 <_printf_float+0x282>
 800307c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800307e:	b913      	cbnz	r3, 8003086 <_printf_float+0x282>
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	07d9      	lsls	r1, r3, #31
 8003084:	d5d9      	bpl.n	800303a <_printf_float+0x236>
 8003086:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800308a:	4659      	mov	r1, fp
 800308c:	4628      	mov	r0, r5
 800308e:	47b0      	blx	r6
 8003090:	3001      	adds	r0, #1
 8003092:	f43f af0e 	beq.w	8002eb2 <_printf_float+0xae>
 8003096:	f04f 0800 	mov.w	r8, #0
 800309a:	f104 091a 	add.w	r9, r4, #26
 800309e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030a0:	425b      	negs	r3, r3
 80030a2:	4543      	cmp	r3, r8
 80030a4:	dc01      	bgt.n	80030aa <_printf_float+0x2a6>
 80030a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030a8:	e797      	b.n	8002fda <_printf_float+0x1d6>
 80030aa:	2301      	movs	r3, #1
 80030ac:	464a      	mov	r2, r9
 80030ae:	4659      	mov	r1, fp
 80030b0:	4628      	mov	r0, r5
 80030b2:	47b0      	blx	r6
 80030b4:	3001      	adds	r0, #1
 80030b6:	f43f aefc 	beq.w	8002eb2 <_printf_float+0xae>
 80030ba:	f108 0801 	add.w	r8, r8, #1
 80030be:	e7ee      	b.n	800309e <_printf_float+0x29a>
 80030c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030c4:	429a      	cmp	r2, r3
 80030c6:	bfa8      	it	ge
 80030c8:	461a      	movge	r2, r3
 80030ca:	2a00      	cmp	r2, #0
 80030cc:	4690      	mov	r8, r2
 80030ce:	dd07      	ble.n	80030e0 <_printf_float+0x2dc>
 80030d0:	4613      	mov	r3, r2
 80030d2:	4659      	mov	r1, fp
 80030d4:	463a      	mov	r2, r7
 80030d6:	4628      	mov	r0, r5
 80030d8:	47b0      	blx	r6
 80030da:	3001      	adds	r0, #1
 80030dc:	f43f aee9 	beq.w	8002eb2 <_printf_float+0xae>
 80030e0:	f104 031a 	add.w	r3, r4, #26
 80030e4:	f04f 0a00 	mov.w	sl, #0
 80030e8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80030ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80030ee:	e015      	b.n	800311c <_printf_float+0x318>
 80030f0:	7fefffff 	.word	0x7fefffff
 80030f4:	08004dd4 	.word	0x08004dd4
 80030f8:	08004dd0 	.word	0x08004dd0
 80030fc:	08004ddc 	.word	0x08004ddc
 8003100:	08004dd8 	.word	0x08004dd8
 8003104:	08004de0 	.word	0x08004de0
 8003108:	2301      	movs	r3, #1
 800310a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800310c:	4659      	mov	r1, fp
 800310e:	4628      	mov	r0, r5
 8003110:	47b0      	blx	r6
 8003112:	3001      	adds	r0, #1
 8003114:	f43f aecd 	beq.w	8002eb2 <_printf_float+0xae>
 8003118:	f10a 0a01 	add.w	sl, sl, #1
 800311c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003120:	eba9 0308 	sub.w	r3, r9, r8
 8003124:	4553      	cmp	r3, sl
 8003126:	dcef      	bgt.n	8003108 <_printf_float+0x304>
 8003128:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800312c:	429a      	cmp	r2, r3
 800312e:	444f      	add	r7, r9
 8003130:	db14      	blt.n	800315c <_printf_float+0x358>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	07da      	lsls	r2, r3, #31
 8003136:	d411      	bmi.n	800315c <_printf_float+0x358>
 8003138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800313a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800313c:	eba3 0209 	sub.w	r2, r3, r9
 8003140:	eba3 0901 	sub.w	r9, r3, r1
 8003144:	4591      	cmp	r9, r2
 8003146:	bfa8      	it	ge
 8003148:	4691      	movge	r9, r2
 800314a:	f1b9 0f00 	cmp.w	r9, #0
 800314e:	dc0d      	bgt.n	800316c <_printf_float+0x368>
 8003150:	2700      	movs	r7, #0
 8003152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003156:	f104 081a 	add.w	r8, r4, #26
 800315a:	e018      	b.n	800318e <_printf_float+0x38a>
 800315c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003160:	4659      	mov	r1, fp
 8003162:	4628      	mov	r0, r5
 8003164:	47b0      	blx	r6
 8003166:	3001      	adds	r0, #1
 8003168:	d1e6      	bne.n	8003138 <_printf_float+0x334>
 800316a:	e6a2      	b.n	8002eb2 <_printf_float+0xae>
 800316c:	464b      	mov	r3, r9
 800316e:	463a      	mov	r2, r7
 8003170:	4659      	mov	r1, fp
 8003172:	4628      	mov	r0, r5
 8003174:	47b0      	blx	r6
 8003176:	3001      	adds	r0, #1
 8003178:	d1ea      	bne.n	8003150 <_printf_float+0x34c>
 800317a:	e69a      	b.n	8002eb2 <_printf_float+0xae>
 800317c:	2301      	movs	r3, #1
 800317e:	4642      	mov	r2, r8
 8003180:	4659      	mov	r1, fp
 8003182:	4628      	mov	r0, r5
 8003184:	47b0      	blx	r6
 8003186:	3001      	adds	r0, #1
 8003188:	f43f ae93 	beq.w	8002eb2 <_printf_float+0xae>
 800318c:	3701      	adds	r7, #1
 800318e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	eba3 0309 	sub.w	r3, r3, r9
 8003198:	42bb      	cmp	r3, r7
 800319a:	dcef      	bgt.n	800317c <_printf_float+0x378>
 800319c:	e74d      	b.n	800303a <_printf_float+0x236>
 800319e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031a0:	2a01      	cmp	r2, #1
 80031a2:	dc01      	bgt.n	80031a8 <_printf_float+0x3a4>
 80031a4:	07db      	lsls	r3, r3, #31
 80031a6:	d538      	bpl.n	800321a <_printf_float+0x416>
 80031a8:	2301      	movs	r3, #1
 80031aa:	463a      	mov	r2, r7
 80031ac:	4659      	mov	r1, fp
 80031ae:	4628      	mov	r0, r5
 80031b0:	47b0      	blx	r6
 80031b2:	3001      	adds	r0, #1
 80031b4:	f43f ae7d 	beq.w	8002eb2 <_printf_float+0xae>
 80031b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031bc:	4659      	mov	r1, fp
 80031be:	4628      	mov	r0, r5
 80031c0:	47b0      	blx	r6
 80031c2:	3001      	adds	r0, #1
 80031c4:	f107 0701 	add.w	r7, r7, #1
 80031c8:	f43f ae73 	beq.w	8002eb2 <_printf_float+0xae>
 80031cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031d2:	2200      	movs	r2, #0
 80031d4:	f103 38ff 	add.w	r8, r3, #4294967295
 80031d8:	2300      	movs	r3, #0
 80031da:	f7fd fbe5 	bl	80009a8 <__aeabi_dcmpeq>
 80031de:	b9c0      	cbnz	r0, 8003212 <_printf_float+0x40e>
 80031e0:	4643      	mov	r3, r8
 80031e2:	463a      	mov	r2, r7
 80031e4:	4659      	mov	r1, fp
 80031e6:	4628      	mov	r0, r5
 80031e8:	47b0      	blx	r6
 80031ea:	3001      	adds	r0, #1
 80031ec:	d10d      	bne.n	800320a <_printf_float+0x406>
 80031ee:	e660      	b.n	8002eb2 <_printf_float+0xae>
 80031f0:	2301      	movs	r3, #1
 80031f2:	4642      	mov	r2, r8
 80031f4:	4659      	mov	r1, fp
 80031f6:	4628      	mov	r0, r5
 80031f8:	47b0      	blx	r6
 80031fa:	3001      	adds	r0, #1
 80031fc:	f43f ae59 	beq.w	8002eb2 <_printf_float+0xae>
 8003200:	3701      	adds	r7, #1
 8003202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003204:	3b01      	subs	r3, #1
 8003206:	42bb      	cmp	r3, r7
 8003208:	dcf2      	bgt.n	80031f0 <_printf_float+0x3ec>
 800320a:	464b      	mov	r3, r9
 800320c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003210:	e6e4      	b.n	8002fdc <_printf_float+0x1d8>
 8003212:	2700      	movs	r7, #0
 8003214:	f104 081a 	add.w	r8, r4, #26
 8003218:	e7f3      	b.n	8003202 <_printf_float+0x3fe>
 800321a:	2301      	movs	r3, #1
 800321c:	e7e1      	b.n	80031e2 <_printf_float+0x3de>
 800321e:	2301      	movs	r3, #1
 8003220:	4642      	mov	r2, r8
 8003222:	4659      	mov	r1, fp
 8003224:	4628      	mov	r0, r5
 8003226:	47b0      	blx	r6
 8003228:	3001      	adds	r0, #1
 800322a:	f43f ae42 	beq.w	8002eb2 <_printf_float+0xae>
 800322e:	3701      	adds	r7, #1
 8003230:	68e3      	ldr	r3, [r4, #12]
 8003232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	42bb      	cmp	r3, r7
 8003238:	dcf1      	bgt.n	800321e <_printf_float+0x41a>
 800323a:	e702      	b.n	8003042 <_printf_float+0x23e>
 800323c:	2700      	movs	r7, #0
 800323e:	f104 0819 	add.w	r8, r4, #25
 8003242:	e7f5      	b.n	8003230 <_printf_float+0x42c>
 8003244:	2b00      	cmp	r3, #0
 8003246:	f43f ae94 	beq.w	8002f72 <_printf_float+0x16e>
 800324a:	f04f 0c00 	mov.w	ip, #0
 800324e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003252:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003256:	6022      	str	r2, [r4, #0]
 8003258:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800325c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	463a      	mov	r2, r7
 8003264:	464b      	mov	r3, r9
 8003266:	4628      	mov	r0, r5
 8003268:	f7ff fd3a 	bl	8002ce0 <__cvt>
 800326c:	4607      	mov	r7, r0
 800326e:	e64f      	b.n	8002f10 <_printf_float+0x10c>

08003270 <_printf_common>:
 8003270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003274:	4691      	mov	r9, r2
 8003276:	461f      	mov	r7, r3
 8003278:	688a      	ldr	r2, [r1, #8]
 800327a:	690b      	ldr	r3, [r1, #16]
 800327c:	4606      	mov	r6, r0
 800327e:	4293      	cmp	r3, r2
 8003280:	bfb8      	it	lt
 8003282:	4613      	movlt	r3, r2
 8003284:	f8c9 3000 	str.w	r3, [r9]
 8003288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800328c:	460c      	mov	r4, r1
 800328e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003292:	b112      	cbz	r2, 800329a <_printf_common+0x2a>
 8003294:	3301      	adds	r3, #1
 8003296:	f8c9 3000 	str.w	r3, [r9]
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	0699      	lsls	r1, r3, #26
 800329e:	bf42      	ittt	mi
 80032a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032a4:	3302      	addmi	r3, #2
 80032a6:	f8c9 3000 	strmi.w	r3, [r9]
 80032aa:	6825      	ldr	r5, [r4, #0]
 80032ac:	f015 0506 	ands.w	r5, r5, #6
 80032b0:	d107      	bne.n	80032c2 <_printf_common+0x52>
 80032b2:	f104 0a19 	add.w	sl, r4, #25
 80032b6:	68e3      	ldr	r3, [r4, #12]
 80032b8:	f8d9 2000 	ldr.w	r2, [r9]
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	42ab      	cmp	r3, r5
 80032c0:	dc29      	bgt.n	8003316 <_printf_common+0xa6>
 80032c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032c6:	6822      	ldr	r2, [r4, #0]
 80032c8:	3300      	adds	r3, #0
 80032ca:	bf18      	it	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	0692      	lsls	r2, r2, #26
 80032d0:	d42e      	bmi.n	8003330 <_printf_common+0xc0>
 80032d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032d6:	4639      	mov	r1, r7
 80032d8:	4630      	mov	r0, r6
 80032da:	47c0      	blx	r8
 80032dc:	3001      	adds	r0, #1
 80032de:	d021      	beq.n	8003324 <_printf_common+0xb4>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	68e5      	ldr	r5, [r4, #12]
 80032e4:	f003 0306 	and.w	r3, r3, #6
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	bf18      	it	ne
 80032ec:	2500      	movne	r5, #0
 80032ee:	f8d9 2000 	ldr.w	r2, [r9]
 80032f2:	f04f 0900 	mov.w	r9, #0
 80032f6:	bf08      	it	eq
 80032f8:	1aad      	subeq	r5, r5, r2
 80032fa:	68a3      	ldr	r3, [r4, #8]
 80032fc:	6922      	ldr	r2, [r4, #16]
 80032fe:	bf08      	it	eq
 8003300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003304:	4293      	cmp	r3, r2
 8003306:	bfc4      	itt	gt
 8003308:	1a9b      	subgt	r3, r3, r2
 800330a:	18ed      	addgt	r5, r5, r3
 800330c:	341a      	adds	r4, #26
 800330e:	454d      	cmp	r5, r9
 8003310:	d11a      	bne.n	8003348 <_printf_common+0xd8>
 8003312:	2000      	movs	r0, #0
 8003314:	e008      	b.n	8003328 <_printf_common+0xb8>
 8003316:	2301      	movs	r3, #1
 8003318:	4652      	mov	r2, sl
 800331a:	4639      	mov	r1, r7
 800331c:	4630      	mov	r0, r6
 800331e:	47c0      	blx	r8
 8003320:	3001      	adds	r0, #1
 8003322:	d103      	bne.n	800332c <_printf_common+0xbc>
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332c:	3501      	adds	r5, #1
 800332e:	e7c2      	b.n	80032b6 <_printf_common+0x46>
 8003330:	2030      	movs	r0, #48	; 0x30
 8003332:	18e1      	adds	r1, r4, r3
 8003334:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800333e:	4422      	add	r2, r4
 8003340:	3302      	adds	r3, #2
 8003342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003346:	e7c4      	b.n	80032d2 <_printf_common+0x62>
 8003348:	2301      	movs	r3, #1
 800334a:	4622      	mov	r2, r4
 800334c:	4639      	mov	r1, r7
 800334e:	4630      	mov	r0, r6
 8003350:	47c0      	blx	r8
 8003352:	3001      	adds	r0, #1
 8003354:	d0e6      	beq.n	8003324 <_printf_common+0xb4>
 8003356:	f109 0901 	add.w	r9, r9, #1
 800335a:	e7d8      	b.n	800330e <_printf_common+0x9e>

0800335c <_printf_i>:
 800335c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003360:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003364:	460c      	mov	r4, r1
 8003366:	7e09      	ldrb	r1, [r1, #24]
 8003368:	b085      	sub	sp, #20
 800336a:	296e      	cmp	r1, #110	; 0x6e
 800336c:	4617      	mov	r7, r2
 800336e:	4606      	mov	r6, r0
 8003370:	4698      	mov	r8, r3
 8003372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003374:	f000 80b3 	beq.w	80034de <_printf_i+0x182>
 8003378:	d822      	bhi.n	80033c0 <_printf_i+0x64>
 800337a:	2963      	cmp	r1, #99	; 0x63
 800337c:	d036      	beq.n	80033ec <_printf_i+0x90>
 800337e:	d80a      	bhi.n	8003396 <_printf_i+0x3a>
 8003380:	2900      	cmp	r1, #0
 8003382:	f000 80b9 	beq.w	80034f8 <_printf_i+0x19c>
 8003386:	2958      	cmp	r1, #88	; 0x58
 8003388:	f000 8083 	beq.w	8003492 <_printf_i+0x136>
 800338c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003390:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003394:	e032      	b.n	80033fc <_printf_i+0xa0>
 8003396:	2964      	cmp	r1, #100	; 0x64
 8003398:	d001      	beq.n	800339e <_printf_i+0x42>
 800339a:	2969      	cmp	r1, #105	; 0x69
 800339c:	d1f6      	bne.n	800338c <_printf_i+0x30>
 800339e:	6820      	ldr	r0, [r4, #0]
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	0605      	lsls	r5, r0, #24
 80033a4:	f103 0104 	add.w	r1, r3, #4
 80033a8:	d52a      	bpl.n	8003400 <_printf_i+0xa4>
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6011      	str	r1, [r2, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da03      	bge.n	80033ba <_printf_i+0x5e>
 80033b2:	222d      	movs	r2, #45	; 0x2d
 80033b4:	425b      	negs	r3, r3
 80033b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033ba:	486f      	ldr	r0, [pc, #444]	; (8003578 <_printf_i+0x21c>)
 80033bc:	220a      	movs	r2, #10
 80033be:	e039      	b.n	8003434 <_printf_i+0xd8>
 80033c0:	2973      	cmp	r1, #115	; 0x73
 80033c2:	f000 809d 	beq.w	8003500 <_printf_i+0x1a4>
 80033c6:	d808      	bhi.n	80033da <_printf_i+0x7e>
 80033c8:	296f      	cmp	r1, #111	; 0x6f
 80033ca:	d020      	beq.n	800340e <_printf_i+0xb2>
 80033cc:	2970      	cmp	r1, #112	; 0x70
 80033ce:	d1dd      	bne.n	800338c <_printf_i+0x30>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	f043 0320 	orr.w	r3, r3, #32
 80033d6:	6023      	str	r3, [r4, #0]
 80033d8:	e003      	b.n	80033e2 <_printf_i+0x86>
 80033da:	2975      	cmp	r1, #117	; 0x75
 80033dc:	d017      	beq.n	800340e <_printf_i+0xb2>
 80033de:	2978      	cmp	r1, #120	; 0x78
 80033e0:	d1d4      	bne.n	800338c <_printf_i+0x30>
 80033e2:	2378      	movs	r3, #120	; 0x78
 80033e4:	4865      	ldr	r0, [pc, #404]	; (800357c <_printf_i+0x220>)
 80033e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033ea:	e055      	b.n	8003498 <_printf_i+0x13c>
 80033ec:	6813      	ldr	r3, [r2, #0]
 80033ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033f2:	1d19      	adds	r1, r3, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6011      	str	r1, [r2, #0]
 80033f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033fc:	2301      	movs	r3, #1
 80033fe:	e08c      	b.n	800351a <_printf_i+0x1be>
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003406:	6011      	str	r1, [r2, #0]
 8003408:	bf18      	it	ne
 800340a:	b21b      	sxthne	r3, r3
 800340c:	e7cf      	b.n	80033ae <_printf_i+0x52>
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	6825      	ldr	r5, [r4, #0]
 8003412:	1d18      	adds	r0, r3, #4
 8003414:	6010      	str	r0, [r2, #0]
 8003416:	0628      	lsls	r0, r5, #24
 8003418:	d501      	bpl.n	800341e <_printf_i+0xc2>
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	e002      	b.n	8003424 <_printf_i+0xc8>
 800341e:	0668      	lsls	r0, r5, #25
 8003420:	d5fb      	bpl.n	800341a <_printf_i+0xbe>
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	296f      	cmp	r1, #111	; 0x6f
 8003426:	bf14      	ite	ne
 8003428:	220a      	movne	r2, #10
 800342a:	2208      	moveq	r2, #8
 800342c:	4852      	ldr	r0, [pc, #328]	; (8003578 <_printf_i+0x21c>)
 800342e:	2100      	movs	r1, #0
 8003430:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003434:	6865      	ldr	r5, [r4, #4]
 8003436:	2d00      	cmp	r5, #0
 8003438:	60a5      	str	r5, [r4, #8]
 800343a:	f2c0 8095 	blt.w	8003568 <_printf_i+0x20c>
 800343e:	6821      	ldr	r1, [r4, #0]
 8003440:	f021 0104 	bic.w	r1, r1, #4
 8003444:	6021      	str	r1, [r4, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d13d      	bne.n	80034c6 <_printf_i+0x16a>
 800344a:	2d00      	cmp	r5, #0
 800344c:	f040 808e 	bne.w	800356c <_printf_i+0x210>
 8003450:	4665      	mov	r5, ip
 8003452:	2a08      	cmp	r2, #8
 8003454:	d10b      	bne.n	800346e <_printf_i+0x112>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	07db      	lsls	r3, r3, #31
 800345a:	d508      	bpl.n	800346e <_printf_i+0x112>
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	6862      	ldr	r2, [r4, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	bfde      	ittt	le
 8003464:	2330      	movle	r3, #48	; 0x30
 8003466:	f805 3c01 	strble.w	r3, [r5, #-1]
 800346a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800346e:	ebac 0305 	sub.w	r3, ip, r5
 8003472:	6123      	str	r3, [r4, #16]
 8003474:	f8cd 8000 	str.w	r8, [sp]
 8003478:	463b      	mov	r3, r7
 800347a:	aa03      	add	r2, sp, #12
 800347c:	4621      	mov	r1, r4
 800347e:	4630      	mov	r0, r6
 8003480:	f7ff fef6 	bl	8003270 <_printf_common>
 8003484:	3001      	adds	r0, #1
 8003486:	d14d      	bne.n	8003524 <_printf_i+0x1c8>
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	b005      	add	sp, #20
 800348e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003492:	4839      	ldr	r0, [pc, #228]	; (8003578 <_printf_i+0x21c>)
 8003494:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003498:	6813      	ldr	r3, [r2, #0]
 800349a:	6821      	ldr	r1, [r4, #0]
 800349c:	1d1d      	adds	r5, r3, #4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6015      	str	r5, [r2, #0]
 80034a2:	060a      	lsls	r2, r1, #24
 80034a4:	d50b      	bpl.n	80034be <_printf_i+0x162>
 80034a6:	07ca      	lsls	r2, r1, #31
 80034a8:	bf44      	itt	mi
 80034aa:	f041 0120 	orrmi.w	r1, r1, #32
 80034ae:	6021      	strmi	r1, [r4, #0]
 80034b0:	b91b      	cbnz	r3, 80034ba <_printf_i+0x15e>
 80034b2:	6822      	ldr	r2, [r4, #0]
 80034b4:	f022 0220 	bic.w	r2, r2, #32
 80034b8:	6022      	str	r2, [r4, #0]
 80034ba:	2210      	movs	r2, #16
 80034bc:	e7b7      	b.n	800342e <_printf_i+0xd2>
 80034be:	064d      	lsls	r5, r1, #25
 80034c0:	bf48      	it	mi
 80034c2:	b29b      	uxthmi	r3, r3
 80034c4:	e7ef      	b.n	80034a6 <_printf_i+0x14a>
 80034c6:	4665      	mov	r5, ip
 80034c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80034cc:	fb02 3311 	mls	r3, r2, r1, r3
 80034d0:	5cc3      	ldrb	r3, [r0, r3]
 80034d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80034d6:	460b      	mov	r3, r1
 80034d8:	2900      	cmp	r1, #0
 80034da:	d1f5      	bne.n	80034c8 <_printf_i+0x16c>
 80034dc:	e7b9      	b.n	8003452 <_printf_i+0xf6>
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	6825      	ldr	r5, [r4, #0]
 80034e2:	1d18      	adds	r0, r3, #4
 80034e4:	6961      	ldr	r1, [r4, #20]
 80034e6:	6010      	str	r0, [r2, #0]
 80034e8:	0628      	lsls	r0, r5, #24
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	d501      	bpl.n	80034f2 <_printf_i+0x196>
 80034ee:	6019      	str	r1, [r3, #0]
 80034f0:	e002      	b.n	80034f8 <_printf_i+0x19c>
 80034f2:	066a      	lsls	r2, r5, #25
 80034f4:	d5fb      	bpl.n	80034ee <_printf_i+0x192>
 80034f6:	8019      	strh	r1, [r3, #0]
 80034f8:	2300      	movs	r3, #0
 80034fa:	4665      	mov	r5, ip
 80034fc:	6123      	str	r3, [r4, #16]
 80034fe:	e7b9      	b.n	8003474 <_printf_i+0x118>
 8003500:	6813      	ldr	r3, [r2, #0]
 8003502:	1d19      	adds	r1, r3, #4
 8003504:	6011      	str	r1, [r2, #0]
 8003506:	681d      	ldr	r5, [r3, #0]
 8003508:	6862      	ldr	r2, [r4, #4]
 800350a:	2100      	movs	r1, #0
 800350c:	4628      	mov	r0, r5
 800350e:	f000 feb1 	bl	8004274 <memchr>
 8003512:	b108      	cbz	r0, 8003518 <_printf_i+0x1bc>
 8003514:	1b40      	subs	r0, r0, r5
 8003516:	6060      	str	r0, [r4, #4]
 8003518:	6863      	ldr	r3, [r4, #4]
 800351a:	6123      	str	r3, [r4, #16]
 800351c:	2300      	movs	r3, #0
 800351e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003522:	e7a7      	b.n	8003474 <_printf_i+0x118>
 8003524:	6923      	ldr	r3, [r4, #16]
 8003526:	462a      	mov	r2, r5
 8003528:	4639      	mov	r1, r7
 800352a:	4630      	mov	r0, r6
 800352c:	47c0      	blx	r8
 800352e:	3001      	adds	r0, #1
 8003530:	d0aa      	beq.n	8003488 <_printf_i+0x12c>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	079b      	lsls	r3, r3, #30
 8003536:	d413      	bmi.n	8003560 <_printf_i+0x204>
 8003538:	68e0      	ldr	r0, [r4, #12]
 800353a:	9b03      	ldr	r3, [sp, #12]
 800353c:	4298      	cmp	r0, r3
 800353e:	bfb8      	it	lt
 8003540:	4618      	movlt	r0, r3
 8003542:	e7a3      	b.n	800348c <_printf_i+0x130>
 8003544:	2301      	movs	r3, #1
 8003546:	464a      	mov	r2, r9
 8003548:	4639      	mov	r1, r7
 800354a:	4630      	mov	r0, r6
 800354c:	47c0      	blx	r8
 800354e:	3001      	adds	r0, #1
 8003550:	d09a      	beq.n	8003488 <_printf_i+0x12c>
 8003552:	3501      	adds	r5, #1
 8003554:	68e3      	ldr	r3, [r4, #12]
 8003556:	9a03      	ldr	r2, [sp, #12]
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	42ab      	cmp	r3, r5
 800355c:	dcf2      	bgt.n	8003544 <_printf_i+0x1e8>
 800355e:	e7eb      	b.n	8003538 <_printf_i+0x1dc>
 8003560:	2500      	movs	r5, #0
 8003562:	f104 0919 	add.w	r9, r4, #25
 8003566:	e7f5      	b.n	8003554 <_printf_i+0x1f8>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ac      	bne.n	80034c6 <_printf_i+0x16a>
 800356c:	7803      	ldrb	r3, [r0, #0]
 800356e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003572:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003576:	e76c      	b.n	8003452 <_printf_i+0xf6>
 8003578:	08004de2 	.word	0x08004de2
 800357c:	08004df3 	.word	0x08004df3

08003580 <siprintf>:
 8003580:	b40e      	push	{r1, r2, r3}
 8003582:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003586:	b500      	push	{lr}
 8003588:	b09c      	sub	sp, #112	; 0x70
 800358a:	ab1d      	add	r3, sp, #116	; 0x74
 800358c:	9002      	str	r0, [sp, #8]
 800358e:	9006      	str	r0, [sp, #24]
 8003590:	9107      	str	r1, [sp, #28]
 8003592:	9104      	str	r1, [sp, #16]
 8003594:	4808      	ldr	r0, [pc, #32]	; (80035b8 <siprintf+0x38>)
 8003596:	4909      	ldr	r1, [pc, #36]	; (80035bc <siprintf+0x3c>)
 8003598:	f853 2b04 	ldr.w	r2, [r3], #4
 800359c:	9105      	str	r1, [sp, #20]
 800359e:	6800      	ldr	r0, [r0, #0]
 80035a0:	a902      	add	r1, sp, #8
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	f001 fa6a 	bl	8004a7c <_svfiprintf_r>
 80035a8:	2200      	movs	r2, #0
 80035aa:	9b02      	ldr	r3, [sp, #8]
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	b01c      	add	sp, #112	; 0x70
 80035b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80035b4:	b003      	add	sp, #12
 80035b6:	4770      	bx	lr
 80035b8:	20000010 	.word	0x20000010
 80035bc:	ffff0208 	.word	0xffff0208

080035c0 <quorem>:
 80035c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c4:	6903      	ldr	r3, [r0, #16]
 80035c6:	690c      	ldr	r4, [r1, #16]
 80035c8:	4680      	mov	r8, r0
 80035ca:	42a3      	cmp	r3, r4
 80035cc:	f2c0 8084 	blt.w	80036d8 <quorem+0x118>
 80035d0:	3c01      	subs	r4, #1
 80035d2:	f101 0714 	add.w	r7, r1, #20
 80035d6:	f100 0614 	add.w	r6, r0, #20
 80035da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80035de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80035e2:	3501      	adds	r5, #1
 80035e4:	fbb0 f5f5 	udiv	r5, r0, r5
 80035e8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80035ec:	eb06 030c 	add.w	r3, r6, ip
 80035f0:	eb07 090c 	add.w	r9, r7, ip
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	b39d      	cbz	r5, 8003660 <quorem+0xa0>
 80035f8:	f04f 0a00 	mov.w	sl, #0
 80035fc:	4638      	mov	r0, r7
 80035fe:	46b6      	mov	lr, r6
 8003600:	46d3      	mov	fp, sl
 8003602:	f850 2b04 	ldr.w	r2, [r0], #4
 8003606:	b293      	uxth	r3, r2
 8003608:	fb05 a303 	mla	r3, r5, r3, sl
 800360c:	0c12      	lsrs	r2, r2, #16
 800360e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003612:	fb05 a202 	mla	r2, r5, r2, sl
 8003616:	b29b      	uxth	r3, r3
 8003618:	ebab 0303 	sub.w	r3, fp, r3
 800361c:	f8de b000 	ldr.w	fp, [lr]
 8003620:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003624:	fa1f fb8b 	uxth.w	fp, fp
 8003628:	445b      	add	r3, fp
 800362a:	fa1f fb82 	uxth.w	fp, r2
 800362e:	f8de 2000 	ldr.w	r2, [lr]
 8003632:	4581      	cmp	r9, r0
 8003634:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800363c:	b29b      	uxth	r3, r3
 800363e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003642:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003646:	f84e 3b04 	str.w	r3, [lr], #4
 800364a:	d2da      	bcs.n	8003602 <quorem+0x42>
 800364c:	f856 300c 	ldr.w	r3, [r6, ip]
 8003650:	b933      	cbnz	r3, 8003660 <quorem+0xa0>
 8003652:	9b01      	ldr	r3, [sp, #4]
 8003654:	3b04      	subs	r3, #4
 8003656:	429e      	cmp	r6, r3
 8003658:	461a      	mov	r2, r3
 800365a:	d331      	bcc.n	80036c0 <quorem+0x100>
 800365c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003660:	4640      	mov	r0, r8
 8003662:	f001 f835 	bl	80046d0 <__mcmp>
 8003666:	2800      	cmp	r0, #0
 8003668:	db26      	blt.n	80036b8 <quorem+0xf8>
 800366a:	4630      	mov	r0, r6
 800366c:	f04f 0c00 	mov.w	ip, #0
 8003670:	3501      	adds	r5, #1
 8003672:	f857 1b04 	ldr.w	r1, [r7], #4
 8003676:	f8d0 e000 	ldr.w	lr, [r0]
 800367a:	b28b      	uxth	r3, r1
 800367c:	ebac 0303 	sub.w	r3, ip, r3
 8003680:	fa1f f28e 	uxth.w	r2, lr
 8003684:	4413      	add	r3, r2
 8003686:	0c0a      	lsrs	r2, r1, #16
 8003688:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800368c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003690:	b29b      	uxth	r3, r3
 8003692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003696:	45b9      	cmp	r9, r7
 8003698:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800369c:	f840 3b04 	str.w	r3, [r0], #4
 80036a0:	d2e7      	bcs.n	8003672 <quorem+0xb2>
 80036a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80036a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80036aa:	b92a      	cbnz	r2, 80036b8 <quorem+0xf8>
 80036ac:	3b04      	subs	r3, #4
 80036ae:	429e      	cmp	r6, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	d30b      	bcc.n	80036cc <quorem+0x10c>
 80036b4:	f8c8 4010 	str.w	r4, [r8, #16]
 80036b8:	4628      	mov	r0, r5
 80036ba:	b003      	add	sp, #12
 80036bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	3b04      	subs	r3, #4
 80036c4:	2a00      	cmp	r2, #0
 80036c6:	d1c9      	bne.n	800365c <quorem+0x9c>
 80036c8:	3c01      	subs	r4, #1
 80036ca:	e7c4      	b.n	8003656 <quorem+0x96>
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	3b04      	subs	r3, #4
 80036d0:	2a00      	cmp	r2, #0
 80036d2:	d1ef      	bne.n	80036b4 <quorem+0xf4>
 80036d4:	3c01      	subs	r4, #1
 80036d6:	e7ea      	b.n	80036ae <quorem+0xee>
 80036d8:	2000      	movs	r0, #0
 80036da:	e7ee      	b.n	80036ba <quorem+0xfa>
 80036dc:	0000      	movs	r0, r0
	...

080036e0 <_dtoa_r>:
 80036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	4616      	mov	r6, r2
 80036e6:	461f      	mov	r7, r3
 80036e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80036ea:	b095      	sub	sp, #84	; 0x54
 80036ec:	4604      	mov	r4, r0
 80036ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80036f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80036f6:	b93d      	cbnz	r5, 8003708 <_dtoa_r+0x28>
 80036f8:	2010      	movs	r0, #16
 80036fa:	f000 fdb3 	bl	8004264 <malloc>
 80036fe:	6260      	str	r0, [r4, #36]	; 0x24
 8003700:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003704:	6005      	str	r5, [r0, #0]
 8003706:	60c5      	str	r5, [r0, #12]
 8003708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	b151      	cbz	r1, 8003724 <_dtoa_r+0x44>
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	2301      	movs	r3, #1
 8003712:	4093      	lsls	r3, r2
 8003714:	604a      	str	r2, [r1, #4]
 8003716:	608b      	str	r3, [r1, #8]
 8003718:	4620      	mov	r0, r4
 800371a:	f000 fdf8 	bl	800430e <_Bfree>
 800371e:	2200      	movs	r2, #0
 8003720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	1e3b      	subs	r3, r7, #0
 8003726:	bfaf      	iteee	ge
 8003728:	2300      	movge	r3, #0
 800372a:	2201      	movlt	r2, #1
 800372c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003730:	9303      	strlt	r3, [sp, #12]
 8003732:	bfac      	ite	ge
 8003734:	f8c8 3000 	strge.w	r3, [r8]
 8003738:	f8c8 2000 	strlt.w	r2, [r8]
 800373c:	4bae      	ldr	r3, [pc, #696]	; (80039f8 <_dtoa_r+0x318>)
 800373e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003742:	ea33 0308 	bics.w	r3, r3, r8
 8003746:	d11b      	bne.n	8003780 <_dtoa_r+0xa0>
 8003748:	f242 730f 	movw	r3, #9999	; 0x270f
 800374c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	9b02      	ldr	r3, [sp, #8]
 8003752:	b923      	cbnz	r3, 800375e <_dtoa_r+0x7e>
 8003754:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003758:	2800      	cmp	r0, #0
 800375a:	f000 8545 	beq.w	80041e8 <_dtoa_r+0xb08>
 800375e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003760:	b953      	cbnz	r3, 8003778 <_dtoa_r+0x98>
 8003762:	4ba6      	ldr	r3, [pc, #664]	; (80039fc <_dtoa_r+0x31c>)
 8003764:	e021      	b.n	80037aa <_dtoa_r+0xca>
 8003766:	4ba6      	ldr	r3, [pc, #664]	; (8003a00 <_dtoa_r+0x320>)
 8003768:	9306      	str	r3, [sp, #24]
 800376a:	3308      	adds	r3, #8
 800376c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	9806      	ldr	r0, [sp, #24]
 8003772:	b015      	add	sp, #84	; 0x54
 8003774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003778:	4ba0      	ldr	r3, [pc, #640]	; (80039fc <_dtoa_r+0x31c>)
 800377a:	9306      	str	r3, [sp, #24]
 800377c:	3303      	adds	r3, #3
 800377e:	e7f5      	b.n	800376c <_dtoa_r+0x8c>
 8003780:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003784:	2200      	movs	r2, #0
 8003786:	2300      	movs	r3, #0
 8003788:	4630      	mov	r0, r6
 800378a:	4639      	mov	r1, r7
 800378c:	f7fd f90c 	bl	80009a8 <__aeabi_dcmpeq>
 8003790:	4682      	mov	sl, r0
 8003792:	b160      	cbz	r0, 80037ae <_dtoa_r+0xce>
 8003794:	2301      	movs	r3, #1
 8003796:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8520 	beq.w	80041e2 <_dtoa_r+0xb02>
 80037a2:	4b98      	ldr	r3, [pc, #608]	; (8003a04 <_dtoa_r+0x324>)
 80037a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	9306      	str	r3, [sp, #24]
 80037ac:	e7e0      	b.n	8003770 <_dtoa_r+0x90>
 80037ae:	ab12      	add	r3, sp, #72	; 0x48
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	ab13      	add	r3, sp, #76	; 0x4c
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	4632      	mov	r2, r6
 80037b8:	463b      	mov	r3, r7
 80037ba:	4620      	mov	r0, r4
 80037bc:	f001 f800 	bl	80047c0 <__d2b>
 80037c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80037c4:	4683      	mov	fp, r0
 80037c6:	2d00      	cmp	r5, #0
 80037c8:	d07d      	beq.n	80038c6 <_dtoa_r+0x1e6>
 80037ca:	46b0      	mov	r8, r6
 80037cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80037d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80037d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80037d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80037dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80037e0:	2200      	movs	r2, #0
 80037e2:	4b89      	ldr	r3, [pc, #548]	; (8003a08 <_dtoa_r+0x328>)
 80037e4:	4640      	mov	r0, r8
 80037e6:	4649      	mov	r1, r9
 80037e8:	f7fc fcbe 	bl	8000168 <__aeabi_dsub>
 80037ec:	a37c      	add	r3, pc, #496	; (adr r3, 80039e0 <_dtoa_r+0x300>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fc fe71 	bl	80004d8 <__aeabi_dmul>
 80037f6:	a37c      	add	r3, pc, #496	; (adr r3, 80039e8 <_dtoa_r+0x308>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f7fc fcb6 	bl	800016c <__adddf3>
 8003800:	4606      	mov	r6, r0
 8003802:	4628      	mov	r0, r5
 8003804:	460f      	mov	r7, r1
 8003806:	f7fc fdfd 	bl	8000404 <__aeabi_i2d>
 800380a:	a379      	add	r3, pc, #484	; (adr r3, 80039f0 <_dtoa_r+0x310>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc fe62 	bl	80004d8 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4630      	mov	r0, r6
 800381a:	4639      	mov	r1, r7
 800381c:	f7fc fca6 	bl	800016c <__adddf3>
 8003820:	4606      	mov	r6, r0
 8003822:	460f      	mov	r7, r1
 8003824:	f7fd f908 	bl	8000a38 <__aeabi_d2iz>
 8003828:	2200      	movs	r2, #0
 800382a:	4682      	mov	sl, r0
 800382c:	2300      	movs	r3, #0
 800382e:	4630      	mov	r0, r6
 8003830:	4639      	mov	r1, r7
 8003832:	f7fd f8c3 	bl	80009bc <__aeabi_dcmplt>
 8003836:	b148      	cbz	r0, 800384c <_dtoa_r+0x16c>
 8003838:	4650      	mov	r0, sl
 800383a:	f7fc fde3 	bl	8000404 <__aeabi_i2d>
 800383e:	4632      	mov	r2, r6
 8003840:	463b      	mov	r3, r7
 8003842:	f7fd f8b1 	bl	80009a8 <__aeabi_dcmpeq>
 8003846:	b908      	cbnz	r0, 800384c <_dtoa_r+0x16c>
 8003848:	f10a 3aff 	add.w	sl, sl, #4294967295
 800384c:	f1ba 0f16 	cmp.w	sl, #22
 8003850:	d85a      	bhi.n	8003908 <_dtoa_r+0x228>
 8003852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003856:	496d      	ldr	r1, [pc, #436]	; (8003a0c <_dtoa_r+0x32c>)
 8003858:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800385c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003860:	f7fd f8ca 	bl	80009f8 <__aeabi_dcmpgt>
 8003864:	2800      	cmp	r0, #0
 8003866:	d051      	beq.n	800390c <_dtoa_r+0x22c>
 8003868:	2300      	movs	r3, #0
 800386a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800386e:	930d      	str	r3, [sp, #52]	; 0x34
 8003870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003872:	1b5d      	subs	r5, r3, r5
 8003874:	1e6b      	subs	r3, r5, #1
 8003876:	9307      	str	r3, [sp, #28]
 8003878:	bf43      	ittte	mi
 800387a:	2300      	movmi	r3, #0
 800387c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003880:	9307      	strmi	r3, [sp, #28]
 8003882:	f04f 0900 	movpl.w	r9, #0
 8003886:	f1ba 0f00 	cmp.w	sl, #0
 800388a:	db41      	blt.n	8003910 <_dtoa_r+0x230>
 800388c:	9b07      	ldr	r3, [sp, #28]
 800388e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003892:	4453      	add	r3, sl
 8003894:	9307      	str	r3, [sp, #28]
 8003896:	2300      	movs	r3, #0
 8003898:	9308      	str	r3, [sp, #32]
 800389a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800389c:	2b09      	cmp	r3, #9
 800389e:	f200 808f 	bhi.w	80039c0 <_dtoa_r+0x2e0>
 80038a2:	2b05      	cmp	r3, #5
 80038a4:	bfc4      	itt	gt
 80038a6:	3b04      	subgt	r3, #4
 80038a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80038aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80038ac:	bfc8      	it	gt
 80038ae:	2500      	movgt	r5, #0
 80038b0:	f1a3 0302 	sub.w	r3, r3, #2
 80038b4:	bfd8      	it	le
 80038b6:	2501      	movle	r5, #1
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	f200 808d 	bhi.w	80039d8 <_dtoa_r+0x2f8>
 80038be:	e8df f003 	tbb	[pc, r3]
 80038c2:	7d7b      	.short	0x7d7b
 80038c4:	6f2f      	.short	0x6f2f
 80038c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80038ca:	441d      	add	r5, r3
 80038cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80038d0:	2820      	cmp	r0, #32
 80038d2:	dd13      	ble.n	80038fc <_dtoa_r+0x21c>
 80038d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80038d8:	9b02      	ldr	r3, [sp, #8]
 80038da:	fa08 f800 	lsl.w	r8, r8, r0
 80038de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80038e2:	fa23 f000 	lsr.w	r0, r3, r0
 80038e6:	ea48 0000 	orr.w	r0, r8, r0
 80038ea:	f7fc fd7b 	bl	80003e4 <__aeabi_ui2d>
 80038ee:	2301      	movs	r3, #1
 80038f0:	4680      	mov	r8, r0
 80038f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80038f6:	3d01      	subs	r5, #1
 80038f8:	9310      	str	r3, [sp, #64]	; 0x40
 80038fa:	e771      	b.n	80037e0 <_dtoa_r+0x100>
 80038fc:	9b02      	ldr	r3, [sp, #8]
 80038fe:	f1c0 0020 	rsb	r0, r0, #32
 8003902:	fa03 f000 	lsl.w	r0, r3, r0
 8003906:	e7f0      	b.n	80038ea <_dtoa_r+0x20a>
 8003908:	2301      	movs	r3, #1
 800390a:	e7b0      	b.n	800386e <_dtoa_r+0x18e>
 800390c:	900d      	str	r0, [sp, #52]	; 0x34
 800390e:	e7af      	b.n	8003870 <_dtoa_r+0x190>
 8003910:	f1ca 0300 	rsb	r3, sl, #0
 8003914:	9308      	str	r3, [sp, #32]
 8003916:	2300      	movs	r3, #0
 8003918:	eba9 090a 	sub.w	r9, r9, sl
 800391c:	930c      	str	r3, [sp, #48]	; 0x30
 800391e:	e7bc      	b.n	800389a <_dtoa_r+0x1ba>
 8003920:	2301      	movs	r3, #1
 8003922:	9309      	str	r3, [sp, #36]	; 0x24
 8003924:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003926:	2b00      	cmp	r3, #0
 8003928:	dd74      	ble.n	8003a14 <_dtoa_r+0x334>
 800392a:	4698      	mov	r8, r3
 800392c:	9304      	str	r3, [sp, #16]
 800392e:	2200      	movs	r2, #0
 8003930:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003932:	6072      	str	r2, [r6, #4]
 8003934:	2204      	movs	r2, #4
 8003936:	f102 0014 	add.w	r0, r2, #20
 800393a:	4298      	cmp	r0, r3
 800393c:	6871      	ldr	r1, [r6, #4]
 800393e:	d96e      	bls.n	8003a1e <_dtoa_r+0x33e>
 8003940:	4620      	mov	r0, r4
 8003942:	f000 fcb0 	bl	80042a6 <_Balloc>
 8003946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003948:	6030      	str	r0, [r6, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f1b8 0f0e 	cmp.w	r8, #14
 8003950:	9306      	str	r3, [sp, #24]
 8003952:	f200 80ed 	bhi.w	8003b30 <_dtoa_r+0x450>
 8003956:	2d00      	cmp	r5, #0
 8003958:	f000 80ea 	beq.w	8003b30 <_dtoa_r+0x450>
 800395c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003960:	f1ba 0f00 	cmp.w	sl, #0
 8003964:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003968:	dd77      	ble.n	8003a5a <_dtoa_r+0x37a>
 800396a:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <_dtoa_r+0x32c>)
 800396c:	f00a 030f 	and.w	r3, sl, #15
 8003970:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003974:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003978:	06f0      	lsls	r0, r6, #27
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003982:	d568      	bpl.n	8003a56 <_dtoa_r+0x376>
 8003984:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003988:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <_dtoa_r+0x330>)
 800398a:	2503      	movs	r5, #3
 800398c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003990:	f7fc fecc 	bl	800072c <__aeabi_ddiv>
 8003994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003998:	f006 060f 	and.w	r6, r6, #15
 800399c:	4f1c      	ldr	r7, [pc, #112]	; (8003a10 <_dtoa_r+0x330>)
 800399e:	e04f      	b.n	8003a40 <_dtoa_r+0x360>
 80039a0:	2301      	movs	r3, #1
 80039a2:	9309      	str	r3, [sp, #36]	; 0x24
 80039a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80039a6:	4453      	add	r3, sl
 80039a8:	f103 0801 	add.w	r8, r3, #1
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	4643      	mov	r3, r8
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	bfb8      	it	lt
 80039b4:	2301      	movlt	r3, #1
 80039b6:	e7ba      	b.n	800392e <_dtoa_r+0x24e>
 80039b8:	2300      	movs	r3, #0
 80039ba:	e7b2      	b.n	8003922 <_dtoa_r+0x242>
 80039bc:	2300      	movs	r3, #0
 80039be:	e7f0      	b.n	80039a2 <_dtoa_r+0x2c2>
 80039c0:	2501      	movs	r5, #1
 80039c2:	2300      	movs	r3, #0
 80039c4:	9509      	str	r5, [sp, #36]	; 0x24
 80039c6:	931e      	str	r3, [sp, #120]	; 0x78
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295
 80039cc:	2200      	movs	r2, #0
 80039ce:	9304      	str	r3, [sp, #16]
 80039d0:	4698      	mov	r8, r3
 80039d2:	2312      	movs	r3, #18
 80039d4:	921f      	str	r2, [sp, #124]	; 0x7c
 80039d6:	e7aa      	b.n	800392e <_dtoa_r+0x24e>
 80039d8:	2301      	movs	r3, #1
 80039da:	9309      	str	r3, [sp, #36]	; 0x24
 80039dc:	e7f4      	b.n	80039c8 <_dtoa_r+0x2e8>
 80039de:	bf00      	nop
 80039e0:	636f4361 	.word	0x636f4361
 80039e4:	3fd287a7 	.word	0x3fd287a7
 80039e8:	8b60c8b3 	.word	0x8b60c8b3
 80039ec:	3fc68a28 	.word	0x3fc68a28
 80039f0:	509f79fb 	.word	0x509f79fb
 80039f4:	3fd34413 	.word	0x3fd34413
 80039f8:	7ff00000 	.word	0x7ff00000
 80039fc:	08004e0d 	.word	0x08004e0d
 8003a00:	08004e04 	.word	0x08004e04
 8003a04:	08004de1 	.word	0x08004de1
 8003a08:	3ff80000 	.word	0x3ff80000
 8003a0c:	08004e40 	.word	0x08004e40
 8003a10:	08004e18 	.word	0x08004e18
 8003a14:	2301      	movs	r3, #1
 8003a16:	9304      	str	r3, [sp, #16]
 8003a18:	4698      	mov	r8, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	e7da      	b.n	80039d4 <_dtoa_r+0x2f4>
 8003a1e:	3101      	adds	r1, #1
 8003a20:	6071      	str	r1, [r6, #4]
 8003a22:	0052      	lsls	r2, r2, #1
 8003a24:	e787      	b.n	8003936 <_dtoa_r+0x256>
 8003a26:	07f1      	lsls	r1, r6, #31
 8003a28:	d508      	bpl.n	8003a3c <_dtoa_r+0x35c>
 8003a2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a32:	f7fc fd51 	bl	80004d8 <__aeabi_dmul>
 8003a36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a3a:	3501      	adds	r5, #1
 8003a3c:	1076      	asrs	r6, r6, #1
 8003a3e:	3708      	adds	r7, #8
 8003a40:	2e00      	cmp	r6, #0
 8003a42:	d1f0      	bne.n	8003a26 <_dtoa_r+0x346>
 8003a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a4c:	f7fc fe6e 	bl	800072c <__aeabi_ddiv>
 8003a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a54:	e01b      	b.n	8003a8e <_dtoa_r+0x3ae>
 8003a56:	2502      	movs	r5, #2
 8003a58:	e7a0      	b.n	800399c <_dtoa_r+0x2bc>
 8003a5a:	f000 80a4 	beq.w	8003ba6 <_dtoa_r+0x4c6>
 8003a5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003a62:	f1ca 0600 	rsb	r6, sl, #0
 8003a66:	4ba0      	ldr	r3, [pc, #640]	; (8003ce8 <_dtoa_r+0x608>)
 8003a68:	f006 020f 	and.w	r2, r6, #15
 8003a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fd30 	bl	80004d8 <__aeabi_dmul>
 8003a78:	2502      	movs	r5, #2
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a80:	4f9a      	ldr	r7, [pc, #616]	; (8003cec <_dtoa_r+0x60c>)
 8003a82:	1136      	asrs	r6, r6, #4
 8003a84:	2e00      	cmp	r6, #0
 8003a86:	f040 8083 	bne.w	8003b90 <_dtoa_r+0x4b0>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e0      	bne.n	8003a50 <_dtoa_r+0x370>
 8003a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 808a 	beq.w	8003baa <_dtoa_r+0x4ca>
 8003a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003a9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	4b92      	ldr	r3, [pc, #584]	; (8003cf0 <_dtoa_r+0x610>)
 8003aa6:	f7fc ff89 	bl	80009bc <__aeabi_dcmplt>
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d07d      	beq.n	8003baa <_dtoa_r+0x4ca>
 8003aae:	f1b8 0f00 	cmp.w	r8, #0
 8003ab2:	d07a      	beq.n	8003baa <_dtoa_r+0x4ca>
 8003ab4:	9b04      	ldr	r3, [sp, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	dd36      	ble.n	8003b28 <_dtoa_r+0x448>
 8003aba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003abe:	2200      	movs	r2, #0
 8003ac0:	4b8c      	ldr	r3, [pc, #560]	; (8003cf4 <_dtoa_r+0x614>)
 8003ac2:	f7fc fd09 	bl	80004d8 <__aeabi_dmul>
 8003ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003aca:	9e04      	ldr	r6, [sp, #16]
 8003acc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003ad0:	3501      	adds	r5, #1
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f7fc fc96 	bl	8000404 <__aeabi_i2d>
 8003ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003adc:	f7fc fcfc 	bl	80004d8 <__aeabi_dmul>
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4b85      	ldr	r3, [pc, #532]	; (8003cf8 <_dtoa_r+0x618>)
 8003ae4:	f7fc fb42 	bl	800016c <__adddf3>
 8003ae8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003aec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003af0:	950b      	str	r5, [sp, #44]	; 0x2c
 8003af2:	2e00      	cmp	r6, #0
 8003af4:	d15c      	bne.n	8003bb0 <_dtoa_r+0x4d0>
 8003af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003afa:	2200      	movs	r2, #0
 8003afc:	4b7f      	ldr	r3, [pc, #508]	; (8003cfc <_dtoa_r+0x61c>)
 8003afe:	f7fc fb33 	bl	8000168 <__aeabi_dsub>
 8003b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b04:	462b      	mov	r3, r5
 8003b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b0a:	f7fc ff75 	bl	80009f8 <__aeabi_dcmpgt>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	f040 8281 	bne.w	8004016 <_dtoa_r+0x936>
 8003b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b1a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003b1e:	f7fc ff4d 	bl	80009bc <__aeabi_dcmplt>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	f040 8275 	bne.w	8004012 <_dtoa_r+0x932>
 8003b28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003b2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f2c0 814b 	blt.w	8003dce <_dtoa_r+0x6ee>
 8003b38:	f1ba 0f0e 	cmp.w	sl, #14
 8003b3c:	f300 8147 	bgt.w	8003dce <_dtoa_r+0x6ee>
 8003b40:	4b69      	ldr	r3, [pc, #420]	; (8003ce8 <_dtoa_r+0x608>)
 8003b42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f280 80d7 	bge.w	8003d04 <_dtoa_r+0x624>
 8003b56:	f1b8 0f00 	cmp.w	r8, #0
 8003b5a:	f300 80d3 	bgt.w	8003d04 <_dtoa_r+0x624>
 8003b5e:	f040 8257 	bne.w	8004010 <_dtoa_r+0x930>
 8003b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b66:	2200      	movs	r2, #0
 8003b68:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <_dtoa_r+0x61c>)
 8003b6a:	f7fc fcb5 	bl	80004d8 <__aeabi_dmul>
 8003b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b72:	f7fc ff37 	bl	80009e4 <__aeabi_dcmpge>
 8003b76:	4646      	mov	r6, r8
 8003b78:	4647      	mov	r7, r8
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	f040 822d 	bne.w	8003fda <_dtoa_r+0x8fa>
 8003b80:	9b06      	ldr	r3, [sp, #24]
 8003b82:	9a06      	ldr	r2, [sp, #24]
 8003b84:	1c5d      	adds	r5, r3, #1
 8003b86:	2331      	movs	r3, #49	; 0x31
 8003b88:	f10a 0a01 	add.w	sl, sl, #1
 8003b8c:	7013      	strb	r3, [r2, #0]
 8003b8e:	e228      	b.n	8003fe2 <_dtoa_r+0x902>
 8003b90:	07f2      	lsls	r2, r6, #31
 8003b92:	d505      	bpl.n	8003ba0 <_dtoa_r+0x4c0>
 8003b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b98:	f7fc fc9e 	bl	80004d8 <__aeabi_dmul>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	3501      	adds	r5, #1
 8003ba0:	1076      	asrs	r6, r6, #1
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	e76e      	b.n	8003a84 <_dtoa_r+0x3a4>
 8003ba6:	2502      	movs	r5, #2
 8003ba8:	e771      	b.n	8003a8e <_dtoa_r+0x3ae>
 8003baa:	4657      	mov	r7, sl
 8003bac:	4646      	mov	r6, r8
 8003bae:	e790      	b.n	8003ad2 <_dtoa_r+0x3f2>
 8003bb0:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <_dtoa_r+0x608>)
 8003bb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003bb6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d048      	beq.n	8003c52 <_dtoa_r+0x572>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	494e      	ldr	r1, [pc, #312]	; (8003d00 <_dtoa_r+0x620>)
 8003bc8:	f7fc fdb0 	bl	800072c <__aeabi_ddiv>
 8003bcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003bd0:	f7fc faca 	bl	8000168 <__aeabi_dsub>
 8003bd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003bd8:	9d06      	ldr	r5, [sp, #24]
 8003bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bde:	f7fc ff2b 	bl	8000a38 <__aeabi_d2iz>
 8003be2:	9011      	str	r0, [sp, #68]	; 0x44
 8003be4:	f7fc fc0e 	bl	8000404 <__aeabi_i2d>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bf0:	f7fc faba 	bl	8000168 <__aeabi_dsub>
 8003bf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bfa:	3330      	adds	r3, #48	; 0x30
 8003bfc:	f805 3b01 	strb.w	r3, [r5], #1
 8003c00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c04:	f7fc feda 	bl	80009bc <__aeabi_dcmplt>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d163      	bne.n	8003cd4 <_dtoa_r+0x5f4>
 8003c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c10:	2000      	movs	r0, #0
 8003c12:	4937      	ldr	r1, [pc, #220]	; (8003cf0 <_dtoa_r+0x610>)
 8003c14:	f7fc faa8 	bl	8000168 <__aeabi_dsub>
 8003c18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c1c:	f7fc fece 	bl	80009bc <__aeabi_dcmplt>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	f040 80b5 	bne.w	8003d90 <_dtoa_r+0x6b0>
 8003c26:	9b06      	ldr	r3, [sp, #24]
 8003c28:	1aeb      	subs	r3, r5, r3
 8003c2a:	429e      	cmp	r6, r3
 8003c2c:	f77f af7c 	ble.w	8003b28 <_dtoa_r+0x448>
 8003c30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c34:	2200      	movs	r2, #0
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <_dtoa_r+0x614>)
 8003c38:	f7fc fc4e 	bl	80004d8 <__aeabi_dmul>
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c46:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <_dtoa_r+0x614>)
 8003c48:	f7fc fc46 	bl	80004d8 <__aeabi_dmul>
 8003c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c50:	e7c3      	b.n	8003bda <_dtoa_r+0x4fa>
 8003c52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c56:	f7fc fc3f 	bl	80004d8 <__aeabi_dmul>
 8003c5a:	9b06      	ldr	r3, [sp, #24]
 8003c5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c60:	199d      	adds	r5, r3, r6
 8003c62:	461e      	mov	r6, r3
 8003c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c68:	f7fc fee6 	bl	8000a38 <__aeabi_d2iz>
 8003c6c:	9011      	str	r0, [sp, #68]	; 0x44
 8003c6e:	f7fc fbc9 	bl	8000404 <__aeabi_i2d>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c7a:	f7fc fa75 	bl	8000168 <__aeabi_dsub>
 8003c7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c84:	3330      	adds	r3, #48	; 0x30
 8003c86:	f806 3b01 	strb.w	r3, [r6], #1
 8003c8a:	42ae      	cmp	r6, r5
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	d124      	bne.n	8003cdc <_dtoa_r+0x5fc>
 8003c92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c96:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <_dtoa_r+0x620>)
 8003c98:	f7fc fa68 	bl	800016c <__adddf3>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ca4:	f7fc fea8 	bl	80009f8 <__aeabi_dcmpgt>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d171      	bne.n	8003d90 <_dtoa_r+0x6b0>
 8003cac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	4913      	ldr	r1, [pc, #76]	; (8003d00 <_dtoa_r+0x620>)
 8003cb4:	f7fc fa58 	bl	8000168 <__aeabi_dsub>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cc0:	f7fc fe7c 	bl	80009bc <__aeabi_dcmplt>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	f43f af2f 	beq.w	8003b28 <_dtoa_r+0x448>
 8003cca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003cce:	1e6a      	subs	r2, r5, #1
 8003cd0:	2b30      	cmp	r3, #48	; 0x30
 8003cd2:	d001      	beq.n	8003cd8 <_dtoa_r+0x5f8>
 8003cd4:	46ba      	mov	sl, r7
 8003cd6:	e04a      	b.n	8003d6e <_dtoa_r+0x68e>
 8003cd8:	4615      	mov	r5, r2
 8003cda:	e7f6      	b.n	8003cca <_dtoa_r+0x5ea>
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <_dtoa_r+0x614>)
 8003cde:	f7fc fbfb 	bl	80004d8 <__aeabi_dmul>
 8003ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ce6:	e7bd      	b.n	8003c64 <_dtoa_r+0x584>
 8003ce8:	08004e40 	.word	0x08004e40
 8003cec:	08004e18 	.word	0x08004e18
 8003cf0:	3ff00000 	.word	0x3ff00000
 8003cf4:	40240000 	.word	0x40240000
 8003cf8:	401c0000 	.word	0x401c0000
 8003cfc:	40140000 	.word	0x40140000
 8003d00:	3fe00000 	.word	0x3fe00000
 8003d04:	9d06      	ldr	r5, [sp, #24]
 8003d06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d0e:	4630      	mov	r0, r6
 8003d10:	4639      	mov	r1, r7
 8003d12:	f7fc fd0b 	bl	800072c <__aeabi_ddiv>
 8003d16:	f7fc fe8f 	bl	8000a38 <__aeabi_d2iz>
 8003d1a:	4681      	mov	r9, r0
 8003d1c:	f7fc fb72 	bl	8000404 <__aeabi_i2d>
 8003d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d24:	f7fc fbd8 	bl	80004d8 <__aeabi_dmul>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	4639      	mov	r1, r7
 8003d30:	f7fc fa1a 	bl	8000168 <__aeabi_dsub>
 8003d34:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003d38:	f805 6b01 	strb.w	r6, [r5], #1
 8003d3c:	9e06      	ldr	r6, [sp, #24]
 8003d3e:	4602      	mov	r2, r0
 8003d40:	1bae      	subs	r6, r5, r6
 8003d42:	45b0      	cmp	r8, r6
 8003d44:	460b      	mov	r3, r1
 8003d46:	d135      	bne.n	8003db4 <_dtoa_r+0x6d4>
 8003d48:	f7fc fa10 	bl	800016c <__adddf3>
 8003d4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d50:	4606      	mov	r6, r0
 8003d52:	460f      	mov	r7, r1
 8003d54:	f7fc fe50 	bl	80009f8 <__aeabi_dcmpgt>
 8003d58:	b9c8      	cbnz	r0, 8003d8e <_dtoa_r+0x6ae>
 8003d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d5e:	4630      	mov	r0, r6
 8003d60:	4639      	mov	r1, r7
 8003d62:	f7fc fe21 	bl	80009a8 <__aeabi_dcmpeq>
 8003d66:	b110      	cbz	r0, 8003d6e <_dtoa_r+0x68e>
 8003d68:	f019 0f01 	tst.w	r9, #1
 8003d6c:	d10f      	bne.n	8003d8e <_dtoa_r+0x6ae>
 8003d6e:	4659      	mov	r1, fp
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 facc 	bl	800430e <_Bfree>
 8003d76:	2300      	movs	r3, #0
 8003d78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d7a:	702b      	strb	r3, [r5, #0]
 8003d7c:	f10a 0301 	add.w	r3, sl, #1
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f43f acf3 	beq.w	8003770 <_dtoa_r+0x90>
 8003d8a:	601d      	str	r5, [r3, #0]
 8003d8c:	e4f0      	b.n	8003770 <_dtoa_r+0x90>
 8003d8e:	4657      	mov	r7, sl
 8003d90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003d94:	1e6b      	subs	r3, r5, #1
 8003d96:	2a39      	cmp	r2, #57	; 0x39
 8003d98:	d106      	bne.n	8003da8 <_dtoa_r+0x6c8>
 8003d9a:	9a06      	ldr	r2, [sp, #24]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d107      	bne.n	8003db0 <_dtoa_r+0x6d0>
 8003da0:	2330      	movs	r3, #48	; 0x30
 8003da2:	7013      	strb	r3, [r2, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	3701      	adds	r7, #1
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	3201      	adds	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	e791      	b.n	8003cd4 <_dtoa_r+0x5f4>
 8003db0:	461d      	mov	r5, r3
 8003db2:	e7ed      	b.n	8003d90 <_dtoa_r+0x6b0>
 8003db4:	2200      	movs	r2, #0
 8003db6:	4b99      	ldr	r3, [pc, #612]	; (800401c <_dtoa_r+0x93c>)
 8003db8:	f7fc fb8e 	bl	80004d8 <__aeabi_dmul>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	460f      	mov	r7, r1
 8003dc4:	f7fc fdf0 	bl	80009a8 <__aeabi_dcmpeq>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d09e      	beq.n	8003d0a <_dtoa_r+0x62a>
 8003dcc:	e7cf      	b.n	8003d6e <_dtoa_r+0x68e>
 8003dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dd0:	2a00      	cmp	r2, #0
 8003dd2:	f000 8088 	beq.w	8003ee6 <_dtoa_r+0x806>
 8003dd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003dd8:	2a01      	cmp	r2, #1
 8003dda:	dc6d      	bgt.n	8003eb8 <_dtoa_r+0x7d8>
 8003ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003dde:	2a00      	cmp	r2, #0
 8003de0:	d066      	beq.n	8003eb0 <_dtoa_r+0x7d0>
 8003de2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003de6:	464d      	mov	r5, r9
 8003de8:	9e08      	ldr	r6, [sp, #32]
 8003dea:	9a07      	ldr	r2, [sp, #28]
 8003dec:	2101      	movs	r1, #1
 8003dee:	441a      	add	r2, r3
 8003df0:	4620      	mov	r0, r4
 8003df2:	4499      	add	r9, r3
 8003df4:	9207      	str	r2, [sp, #28]
 8003df6:	f000 fb2a 	bl	800444e <__i2b>
 8003dfa:	4607      	mov	r7, r0
 8003dfc:	2d00      	cmp	r5, #0
 8003dfe:	dd0b      	ble.n	8003e18 <_dtoa_r+0x738>
 8003e00:	9b07      	ldr	r3, [sp, #28]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	dd08      	ble.n	8003e18 <_dtoa_r+0x738>
 8003e06:	42ab      	cmp	r3, r5
 8003e08:	bfa8      	it	ge
 8003e0a:	462b      	movge	r3, r5
 8003e0c:	9a07      	ldr	r2, [sp, #28]
 8003e0e:	eba9 0903 	sub.w	r9, r9, r3
 8003e12:	1aed      	subs	r5, r5, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	9307      	str	r3, [sp, #28]
 8003e18:	9b08      	ldr	r3, [sp, #32]
 8003e1a:	b1eb      	cbz	r3, 8003e58 <_dtoa_r+0x778>
 8003e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d065      	beq.n	8003eee <_dtoa_r+0x80e>
 8003e22:	b18e      	cbz	r6, 8003e48 <_dtoa_r+0x768>
 8003e24:	4639      	mov	r1, r7
 8003e26:	4632      	mov	r2, r6
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f000 fbaf 	bl	800458c <__pow5mult>
 8003e2e:	465a      	mov	r2, fp
 8003e30:	4601      	mov	r1, r0
 8003e32:	4607      	mov	r7, r0
 8003e34:	4620      	mov	r0, r4
 8003e36:	f000 fb13 	bl	8004460 <__multiply>
 8003e3a:	4659      	mov	r1, fp
 8003e3c:	900a      	str	r0, [sp, #40]	; 0x28
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f000 fa65 	bl	800430e <_Bfree>
 8003e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e46:	469b      	mov	fp, r3
 8003e48:	9b08      	ldr	r3, [sp, #32]
 8003e4a:	1b9a      	subs	r2, r3, r6
 8003e4c:	d004      	beq.n	8003e58 <_dtoa_r+0x778>
 8003e4e:	4659      	mov	r1, fp
 8003e50:	4620      	mov	r0, r4
 8003e52:	f000 fb9b 	bl	800458c <__pow5mult>
 8003e56:	4683      	mov	fp, r0
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f000 faf7 	bl	800444e <__i2b>
 8003e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e62:	4606      	mov	r6, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 81c6 	beq.w	80041f6 <_dtoa_r+0xb16>
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4601      	mov	r1, r0
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f000 fb8c 	bl	800458c <__pow5mult>
 8003e74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e76:	4606      	mov	r6, r0
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	dc3e      	bgt.n	8003efa <_dtoa_r+0x81a>
 8003e7c:	9b02      	ldr	r3, [sp, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d137      	bne.n	8003ef2 <_dtoa_r+0x812>
 8003e82:	9b03      	ldr	r3, [sp, #12]
 8003e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d134      	bne.n	8003ef6 <_dtoa_r+0x816>
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e92:	0d1b      	lsrs	r3, r3, #20
 8003e94:	051b      	lsls	r3, r3, #20
 8003e96:	b12b      	cbz	r3, 8003ea4 <_dtoa_r+0x7c4>
 8003e98:	9b07      	ldr	r3, [sp, #28]
 8003e9a:	f109 0901 	add.w	r9, r9, #1
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	9307      	str	r3, [sp, #28]
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	9308      	str	r3, [sp, #32]
 8003ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d128      	bne.n	8003efe <_dtoa_r+0x81e>
 8003eac:	2001      	movs	r0, #1
 8003eae:	e02e      	b.n	8003f0e <_dtoa_r+0x82e>
 8003eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003eb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003eb6:	e796      	b.n	8003de6 <_dtoa_r+0x706>
 8003eb8:	9b08      	ldr	r3, [sp, #32]
 8003eba:	f108 36ff 	add.w	r6, r8, #4294967295
 8003ebe:	42b3      	cmp	r3, r6
 8003ec0:	bfb7      	itett	lt
 8003ec2:	9b08      	ldrlt	r3, [sp, #32]
 8003ec4:	1b9e      	subge	r6, r3, r6
 8003ec6:	1af2      	sublt	r2, r6, r3
 8003ec8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003eca:	bfbf      	itttt	lt
 8003ecc:	9608      	strlt	r6, [sp, #32]
 8003ece:	189b      	addlt	r3, r3, r2
 8003ed0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003ed2:	2600      	movlt	r6, #0
 8003ed4:	f1b8 0f00 	cmp.w	r8, #0
 8003ed8:	bfb9      	ittee	lt
 8003eda:	eba9 0508 	sublt.w	r5, r9, r8
 8003ede:	2300      	movlt	r3, #0
 8003ee0:	464d      	movge	r5, r9
 8003ee2:	4643      	movge	r3, r8
 8003ee4:	e781      	b.n	8003dea <_dtoa_r+0x70a>
 8003ee6:	9e08      	ldr	r6, [sp, #32]
 8003ee8:	464d      	mov	r5, r9
 8003eea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003eec:	e786      	b.n	8003dfc <_dtoa_r+0x71c>
 8003eee:	9a08      	ldr	r2, [sp, #32]
 8003ef0:	e7ad      	b.n	8003e4e <_dtoa_r+0x76e>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e7d6      	b.n	8003ea4 <_dtoa_r+0x7c4>
 8003ef6:	9b02      	ldr	r3, [sp, #8]
 8003ef8:	e7d4      	b.n	8003ea4 <_dtoa_r+0x7c4>
 8003efa:	2300      	movs	r3, #0
 8003efc:	9308      	str	r3, [sp, #32]
 8003efe:	6933      	ldr	r3, [r6, #16]
 8003f00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003f04:	6918      	ldr	r0, [r3, #16]
 8003f06:	f000 fa54 	bl	80043b2 <__hi0bits>
 8003f0a:	f1c0 0020 	rsb	r0, r0, #32
 8003f0e:	9b07      	ldr	r3, [sp, #28]
 8003f10:	4418      	add	r0, r3
 8003f12:	f010 001f 	ands.w	r0, r0, #31
 8003f16:	d047      	beq.n	8003fa8 <_dtoa_r+0x8c8>
 8003f18:	f1c0 0320 	rsb	r3, r0, #32
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	dd3b      	ble.n	8003f98 <_dtoa_r+0x8b8>
 8003f20:	9b07      	ldr	r3, [sp, #28]
 8003f22:	f1c0 001c 	rsb	r0, r0, #28
 8003f26:	4481      	add	r9, r0
 8003f28:	4405      	add	r5, r0
 8003f2a:	4403      	add	r3, r0
 8003f2c:	9307      	str	r3, [sp, #28]
 8003f2e:	f1b9 0f00 	cmp.w	r9, #0
 8003f32:	dd05      	ble.n	8003f40 <_dtoa_r+0x860>
 8003f34:	4659      	mov	r1, fp
 8003f36:	464a      	mov	r2, r9
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f000 fb75 	bl	8004628 <__lshift>
 8003f3e:	4683      	mov	fp, r0
 8003f40:	9b07      	ldr	r3, [sp, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	dd05      	ble.n	8003f52 <_dtoa_r+0x872>
 8003f46:	4631      	mov	r1, r6
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f000 fb6c 	bl	8004628 <__lshift>
 8003f50:	4606      	mov	r6, r0
 8003f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f54:	b353      	cbz	r3, 8003fac <_dtoa_r+0x8cc>
 8003f56:	4631      	mov	r1, r6
 8003f58:	4658      	mov	r0, fp
 8003f5a:	f000 fbb9 	bl	80046d0 <__mcmp>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	da24      	bge.n	8003fac <_dtoa_r+0x8cc>
 8003f62:	2300      	movs	r3, #0
 8003f64:	4659      	mov	r1, fp
 8003f66:	220a      	movs	r2, #10
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f000 f9e7 	bl	800433c <__multadd>
 8003f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f74:	4683      	mov	fp, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8144 	beq.w	8004204 <_dtoa_r+0xb24>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4639      	mov	r1, r7
 8003f80:	220a      	movs	r2, #10
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 f9da 	bl	800433c <__multadd>
 8003f88:	9b04      	ldr	r3, [sp, #16]
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	dc4d      	bgt.n	800402c <_dtoa_r+0x94c>
 8003f90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	dd4a      	ble.n	800402c <_dtoa_r+0x94c>
 8003f96:	e011      	b.n	8003fbc <_dtoa_r+0x8dc>
 8003f98:	d0c9      	beq.n	8003f2e <_dtoa_r+0x84e>
 8003f9a:	9a07      	ldr	r2, [sp, #28]
 8003f9c:	331c      	adds	r3, #28
 8003f9e:	441a      	add	r2, r3
 8003fa0:	4499      	add	r9, r3
 8003fa2:	441d      	add	r5, r3
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	e7c1      	b.n	8003f2c <_dtoa_r+0x84c>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	e7f6      	b.n	8003f9a <_dtoa_r+0x8ba>
 8003fac:	f1b8 0f00 	cmp.w	r8, #0
 8003fb0:	dc36      	bgt.n	8004020 <_dtoa_r+0x940>
 8003fb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	dd33      	ble.n	8004020 <_dtoa_r+0x940>
 8003fb8:	f8cd 8010 	str.w	r8, [sp, #16]
 8003fbc:	9b04      	ldr	r3, [sp, #16]
 8003fbe:	b963      	cbnz	r3, 8003fda <_dtoa_r+0x8fa>
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 f9b9 	bl	800433c <__multadd>
 8003fca:	4601      	mov	r1, r0
 8003fcc:	4606      	mov	r6, r0
 8003fce:	4658      	mov	r0, fp
 8003fd0:	f000 fb7e 	bl	80046d0 <__mcmp>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	f73f add3 	bgt.w	8003b80 <_dtoa_r+0x4a0>
 8003fda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003fdc:	9d06      	ldr	r5, [sp, #24]
 8003fde:	ea6f 0a03 	mvn.w	sl, r3
 8003fe2:	f04f 0900 	mov.w	r9, #0
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f000 f990 	bl	800430e <_Bfree>
 8003fee:	2f00      	cmp	r7, #0
 8003ff0:	f43f aebd 	beq.w	8003d6e <_dtoa_r+0x68e>
 8003ff4:	f1b9 0f00 	cmp.w	r9, #0
 8003ff8:	d005      	beq.n	8004006 <_dtoa_r+0x926>
 8003ffa:	45b9      	cmp	r9, r7
 8003ffc:	d003      	beq.n	8004006 <_dtoa_r+0x926>
 8003ffe:	4649      	mov	r1, r9
 8004000:	4620      	mov	r0, r4
 8004002:	f000 f984 	bl	800430e <_Bfree>
 8004006:	4639      	mov	r1, r7
 8004008:	4620      	mov	r0, r4
 800400a:	f000 f980 	bl	800430e <_Bfree>
 800400e:	e6ae      	b.n	8003d6e <_dtoa_r+0x68e>
 8004010:	2600      	movs	r6, #0
 8004012:	4637      	mov	r7, r6
 8004014:	e7e1      	b.n	8003fda <_dtoa_r+0x8fa>
 8004016:	46ba      	mov	sl, r7
 8004018:	4637      	mov	r7, r6
 800401a:	e5b1      	b.n	8003b80 <_dtoa_r+0x4a0>
 800401c:	40240000 	.word	0x40240000
 8004020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004022:	f8cd 8010 	str.w	r8, [sp, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80f3 	beq.w	8004212 <_dtoa_r+0xb32>
 800402c:	2d00      	cmp	r5, #0
 800402e:	dd05      	ble.n	800403c <_dtoa_r+0x95c>
 8004030:	4639      	mov	r1, r7
 8004032:	462a      	mov	r2, r5
 8004034:	4620      	mov	r0, r4
 8004036:	f000 faf7 	bl	8004628 <__lshift>
 800403a:	4607      	mov	r7, r0
 800403c:	9b08      	ldr	r3, [sp, #32]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04c      	beq.n	80040dc <_dtoa_r+0x9fc>
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4620      	mov	r0, r4
 8004046:	f000 f92e 	bl	80042a6 <_Balloc>
 800404a:	4605      	mov	r5, r0
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	f107 010c 	add.w	r1, r7, #12
 8004052:	3202      	adds	r2, #2
 8004054:	0092      	lsls	r2, r2, #2
 8004056:	300c      	adds	r0, #12
 8004058:	f000 f91a 	bl	8004290 <memcpy>
 800405c:	2201      	movs	r2, #1
 800405e:	4629      	mov	r1, r5
 8004060:	4620      	mov	r0, r4
 8004062:	f000 fae1 	bl	8004628 <__lshift>
 8004066:	46b9      	mov	r9, r7
 8004068:	4607      	mov	r7, r0
 800406a:	9b06      	ldr	r3, [sp, #24]
 800406c:	9307      	str	r3, [sp, #28]
 800406e:	9b02      	ldr	r3, [sp, #8]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	9308      	str	r3, [sp, #32]
 8004076:	4631      	mov	r1, r6
 8004078:	4658      	mov	r0, fp
 800407a:	f7ff faa1 	bl	80035c0 <quorem>
 800407e:	4649      	mov	r1, r9
 8004080:	4605      	mov	r5, r0
 8004082:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004086:	4658      	mov	r0, fp
 8004088:	f000 fb22 	bl	80046d0 <__mcmp>
 800408c:	463a      	mov	r2, r7
 800408e:	9002      	str	r0, [sp, #8]
 8004090:	4631      	mov	r1, r6
 8004092:	4620      	mov	r0, r4
 8004094:	f000 fb36 	bl	8004704 <__mdiff>
 8004098:	68c3      	ldr	r3, [r0, #12]
 800409a:	4602      	mov	r2, r0
 800409c:	bb03      	cbnz	r3, 80040e0 <_dtoa_r+0xa00>
 800409e:	4601      	mov	r1, r0
 80040a0:	9009      	str	r0, [sp, #36]	; 0x24
 80040a2:	4658      	mov	r0, fp
 80040a4:	f000 fb14 	bl	80046d0 <__mcmp>
 80040a8:	4603      	mov	r3, r0
 80040aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040ac:	4611      	mov	r1, r2
 80040ae:	4620      	mov	r0, r4
 80040b0:	9309      	str	r3, [sp, #36]	; 0x24
 80040b2:	f000 f92c 	bl	800430e <_Bfree>
 80040b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b8:	b9a3      	cbnz	r3, 80040e4 <_dtoa_r+0xa04>
 80040ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80040bc:	b992      	cbnz	r2, 80040e4 <_dtoa_r+0xa04>
 80040be:	9a08      	ldr	r2, [sp, #32]
 80040c0:	b982      	cbnz	r2, 80040e4 <_dtoa_r+0xa04>
 80040c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80040c6:	d029      	beq.n	800411c <_dtoa_r+0xa3c>
 80040c8:	9b02      	ldr	r3, [sp, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	dd01      	ble.n	80040d2 <_dtoa_r+0x9f2>
 80040ce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80040d2:	9b07      	ldr	r3, [sp, #28]
 80040d4:	1c5d      	adds	r5, r3, #1
 80040d6:	f883 8000 	strb.w	r8, [r3]
 80040da:	e784      	b.n	8003fe6 <_dtoa_r+0x906>
 80040dc:	4638      	mov	r0, r7
 80040de:	e7c2      	b.n	8004066 <_dtoa_r+0x986>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e7e3      	b.n	80040ac <_dtoa_r+0x9cc>
 80040e4:	9a02      	ldr	r2, [sp, #8]
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	db04      	blt.n	80040f4 <_dtoa_r+0xa14>
 80040ea:	d123      	bne.n	8004134 <_dtoa_r+0xa54>
 80040ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80040ee:	bb0a      	cbnz	r2, 8004134 <_dtoa_r+0xa54>
 80040f0:	9a08      	ldr	r2, [sp, #32]
 80040f2:	b9fa      	cbnz	r2, 8004134 <_dtoa_r+0xa54>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	ddec      	ble.n	80040d2 <_dtoa_r+0x9f2>
 80040f8:	4659      	mov	r1, fp
 80040fa:	2201      	movs	r2, #1
 80040fc:	4620      	mov	r0, r4
 80040fe:	f000 fa93 	bl	8004628 <__lshift>
 8004102:	4631      	mov	r1, r6
 8004104:	4683      	mov	fp, r0
 8004106:	f000 fae3 	bl	80046d0 <__mcmp>
 800410a:	2800      	cmp	r0, #0
 800410c:	dc03      	bgt.n	8004116 <_dtoa_r+0xa36>
 800410e:	d1e0      	bne.n	80040d2 <_dtoa_r+0x9f2>
 8004110:	f018 0f01 	tst.w	r8, #1
 8004114:	d0dd      	beq.n	80040d2 <_dtoa_r+0x9f2>
 8004116:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800411a:	d1d8      	bne.n	80040ce <_dtoa_r+0x9ee>
 800411c:	9b07      	ldr	r3, [sp, #28]
 800411e:	9a07      	ldr	r2, [sp, #28]
 8004120:	1c5d      	adds	r5, r3, #1
 8004122:	2339      	movs	r3, #57	; 0x39
 8004124:	7013      	strb	r3, [r2, #0]
 8004126:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800412a:	1e6a      	subs	r2, r5, #1
 800412c:	2b39      	cmp	r3, #57	; 0x39
 800412e:	d04d      	beq.n	80041cc <_dtoa_r+0xaec>
 8004130:	3301      	adds	r3, #1
 8004132:	e052      	b.n	80041da <_dtoa_r+0xafa>
 8004134:	9a07      	ldr	r2, [sp, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f102 0501 	add.w	r5, r2, #1
 800413c:	dd06      	ble.n	800414c <_dtoa_r+0xa6c>
 800413e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004142:	d0eb      	beq.n	800411c <_dtoa_r+0xa3c>
 8004144:	f108 0801 	add.w	r8, r8, #1
 8004148:	9b07      	ldr	r3, [sp, #28]
 800414a:	e7c4      	b.n	80040d6 <_dtoa_r+0x9f6>
 800414c:	9b06      	ldr	r3, [sp, #24]
 800414e:	9a04      	ldr	r2, [sp, #16]
 8004150:	1aeb      	subs	r3, r5, r3
 8004152:	4293      	cmp	r3, r2
 8004154:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004158:	d021      	beq.n	800419e <_dtoa_r+0xabe>
 800415a:	4659      	mov	r1, fp
 800415c:	2300      	movs	r3, #0
 800415e:	220a      	movs	r2, #10
 8004160:	4620      	mov	r0, r4
 8004162:	f000 f8eb 	bl	800433c <__multadd>
 8004166:	45b9      	cmp	r9, r7
 8004168:	4683      	mov	fp, r0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	f04f 020a 	mov.w	r2, #10
 8004172:	4649      	mov	r1, r9
 8004174:	4620      	mov	r0, r4
 8004176:	d105      	bne.n	8004184 <_dtoa_r+0xaa4>
 8004178:	f000 f8e0 	bl	800433c <__multadd>
 800417c:	4681      	mov	r9, r0
 800417e:	4607      	mov	r7, r0
 8004180:	9507      	str	r5, [sp, #28]
 8004182:	e778      	b.n	8004076 <_dtoa_r+0x996>
 8004184:	f000 f8da 	bl	800433c <__multadd>
 8004188:	4639      	mov	r1, r7
 800418a:	4681      	mov	r9, r0
 800418c:	2300      	movs	r3, #0
 800418e:	220a      	movs	r2, #10
 8004190:	4620      	mov	r0, r4
 8004192:	f000 f8d3 	bl	800433c <__multadd>
 8004196:	4607      	mov	r7, r0
 8004198:	e7f2      	b.n	8004180 <_dtoa_r+0xaa0>
 800419a:	f04f 0900 	mov.w	r9, #0
 800419e:	4659      	mov	r1, fp
 80041a0:	2201      	movs	r2, #1
 80041a2:	4620      	mov	r0, r4
 80041a4:	f000 fa40 	bl	8004628 <__lshift>
 80041a8:	4631      	mov	r1, r6
 80041aa:	4683      	mov	fp, r0
 80041ac:	f000 fa90 	bl	80046d0 <__mcmp>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	dcb8      	bgt.n	8004126 <_dtoa_r+0xa46>
 80041b4:	d102      	bne.n	80041bc <_dtoa_r+0xadc>
 80041b6:	f018 0f01 	tst.w	r8, #1
 80041ba:	d1b4      	bne.n	8004126 <_dtoa_r+0xa46>
 80041bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80041c0:	1e6a      	subs	r2, r5, #1
 80041c2:	2b30      	cmp	r3, #48	; 0x30
 80041c4:	f47f af0f 	bne.w	8003fe6 <_dtoa_r+0x906>
 80041c8:	4615      	mov	r5, r2
 80041ca:	e7f7      	b.n	80041bc <_dtoa_r+0xadc>
 80041cc:	9b06      	ldr	r3, [sp, #24]
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d105      	bne.n	80041de <_dtoa_r+0xafe>
 80041d2:	2331      	movs	r3, #49	; 0x31
 80041d4:	9a06      	ldr	r2, [sp, #24]
 80041d6:	f10a 0a01 	add.w	sl, sl, #1
 80041da:	7013      	strb	r3, [r2, #0]
 80041dc:	e703      	b.n	8003fe6 <_dtoa_r+0x906>
 80041de:	4615      	mov	r5, r2
 80041e0:	e7a1      	b.n	8004126 <_dtoa_r+0xa46>
 80041e2:	4b17      	ldr	r3, [pc, #92]	; (8004240 <_dtoa_r+0xb60>)
 80041e4:	f7ff bae1 	b.w	80037aa <_dtoa_r+0xca>
 80041e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f47f aabb 	bne.w	8003766 <_dtoa_r+0x86>
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <_dtoa_r+0xb64>)
 80041f2:	f7ff bada 	b.w	80037aa <_dtoa_r+0xca>
 80041f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	f77f ae3f 	ble.w	8003e7c <_dtoa_r+0x79c>
 80041fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004200:	9308      	str	r3, [sp, #32]
 8004202:	e653      	b.n	8003eac <_dtoa_r+0x7cc>
 8004204:	9b04      	ldr	r3, [sp, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	dc03      	bgt.n	8004212 <_dtoa_r+0xb32>
 800420a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800420c:	2b02      	cmp	r3, #2
 800420e:	f73f aed5 	bgt.w	8003fbc <_dtoa_r+0x8dc>
 8004212:	9d06      	ldr	r5, [sp, #24]
 8004214:	4631      	mov	r1, r6
 8004216:	4658      	mov	r0, fp
 8004218:	f7ff f9d2 	bl	80035c0 <quorem>
 800421c:	9b06      	ldr	r3, [sp, #24]
 800421e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004222:	f805 8b01 	strb.w	r8, [r5], #1
 8004226:	9a04      	ldr	r2, [sp, #16]
 8004228:	1aeb      	subs	r3, r5, r3
 800422a:	429a      	cmp	r2, r3
 800422c:	ddb5      	ble.n	800419a <_dtoa_r+0xaba>
 800422e:	4659      	mov	r1, fp
 8004230:	2300      	movs	r3, #0
 8004232:	220a      	movs	r2, #10
 8004234:	4620      	mov	r0, r4
 8004236:	f000 f881 	bl	800433c <__multadd>
 800423a:	4683      	mov	fp, r0
 800423c:	e7ea      	b.n	8004214 <_dtoa_r+0xb34>
 800423e:	bf00      	nop
 8004240:	08004de0 	.word	0x08004de0
 8004244:	08004e04 	.word	0x08004e04

08004248 <_localeconv_r>:
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <_localeconv_r+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a18      	ldr	r0, [r3, #32]
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <_localeconv_r+0x18>)
 8004250:	2800      	cmp	r0, #0
 8004252:	bf08      	it	eq
 8004254:	4618      	moveq	r0, r3
 8004256:	30f0      	adds	r0, #240	; 0xf0
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000010 	.word	0x20000010
 8004260:	20000074 	.word	0x20000074

08004264 <malloc>:
 8004264:	4b02      	ldr	r3, [pc, #8]	; (8004270 <malloc+0xc>)
 8004266:	4601      	mov	r1, r0
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	f000 bb53 	b.w	8004914 <_malloc_r>
 800426e:	bf00      	nop
 8004270:	20000010 	.word	0x20000010

08004274 <memchr>:
 8004274:	b510      	push	{r4, lr}
 8004276:	b2c9      	uxtb	r1, r1
 8004278:	4402      	add	r2, r0
 800427a:	4290      	cmp	r0, r2
 800427c:	4603      	mov	r3, r0
 800427e:	d101      	bne.n	8004284 <memchr+0x10>
 8004280:	2300      	movs	r3, #0
 8004282:	e003      	b.n	800428c <memchr+0x18>
 8004284:	781c      	ldrb	r4, [r3, #0]
 8004286:	3001      	adds	r0, #1
 8004288:	428c      	cmp	r4, r1
 800428a:	d1f6      	bne.n	800427a <memchr+0x6>
 800428c:	4618      	mov	r0, r3
 800428e:	bd10      	pop	{r4, pc}

08004290 <memcpy>:
 8004290:	b510      	push	{r4, lr}
 8004292:	1e43      	subs	r3, r0, #1
 8004294:	440a      	add	r2, r1
 8004296:	4291      	cmp	r1, r2
 8004298:	d100      	bne.n	800429c <memcpy+0xc>
 800429a:	bd10      	pop	{r4, pc}
 800429c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a4:	e7f7      	b.n	8004296 <memcpy+0x6>

080042a6 <_Balloc>:
 80042a6:	b570      	push	{r4, r5, r6, lr}
 80042a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80042aa:	4604      	mov	r4, r0
 80042ac:	460e      	mov	r6, r1
 80042ae:	b93d      	cbnz	r5, 80042c0 <_Balloc+0x1a>
 80042b0:	2010      	movs	r0, #16
 80042b2:	f7ff ffd7 	bl	8004264 <malloc>
 80042b6:	6260      	str	r0, [r4, #36]	; 0x24
 80042b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80042bc:	6005      	str	r5, [r0, #0]
 80042be:	60c5      	str	r5, [r0, #12]
 80042c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80042c2:	68eb      	ldr	r3, [r5, #12]
 80042c4:	b183      	cbz	r3, 80042e8 <_Balloc+0x42>
 80042c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80042ce:	b9b8      	cbnz	r0, 8004300 <_Balloc+0x5a>
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f506 	lsl.w	r5, r1, r6
 80042d6:	1d6a      	adds	r2, r5, #5
 80042d8:	0092      	lsls	r2, r2, #2
 80042da:	4620      	mov	r0, r4
 80042dc:	f000 fabf 	bl	800485e <_calloc_r>
 80042e0:	b160      	cbz	r0, 80042fc <_Balloc+0x56>
 80042e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80042e6:	e00e      	b.n	8004306 <_Balloc+0x60>
 80042e8:	2221      	movs	r2, #33	; 0x21
 80042ea:	2104      	movs	r1, #4
 80042ec:	4620      	mov	r0, r4
 80042ee:	f000 fab6 	bl	800485e <_calloc_r>
 80042f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042f4:	60e8      	str	r0, [r5, #12]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e4      	bne.n	80042c6 <_Balloc+0x20>
 80042fc:	2000      	movs	r0, #0
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	6802      	ldr	r2, [r0, #0]
 8004302:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004306:	2300      	movs	r3, #0
 8004308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800430c:	e7f7      	b.n	80042fe <_Balloc+0x58>

0800430e <_Bfree>:
 800430e:	b570      	push	{r4, r5, r6, lr}
 8004310:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004312:	4606      	mov	r6, r0
 8004314:	460d      	mov	r5, r1
 8004316:	b93c      	cbnz	r4, 8004328 <_Bfree+0x1a>
 8004318:	2010      	movs	r0, #16
 800431a:	f7ff ffa3 	bl	8004264 <malloc>
 800431e:	6270      	str	r0, [r6, #36]	; 0x24
 8004320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004324:	6004      	str	r4, [r0, #0]
 8004326:	60c4      	str	r4, [r0, #12]
 8004328:	b13d      	cbz	r5, 800433a <_Bfree+0x2c>
 800432a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800432c:	686a      	ldr	r2, [r5, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004334:	6029      	str	r1, [r5, #0]
 8004336:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800433a:	bd70      	pop	{r4, r5, r6, pc}

0800433c <__multadd>:
 800433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004340:	461f      	mov	r7, r3
 8004342:	4606      	mov	r6, r0
 8004344:	460c      	mov	r4, r1
 8004346:	2300      	movs	r3, #0
 8004348:	690d      	ldr	r5, [r1, #16]
 800434a:	f101 0c14 	add.w	ip, r1, #20
 800434e:	f8dc 0000 	ldr.w	r0, [ip]
 8004352:	3301      	adds	r3, #1
 8004354:	b281      	uxth	r1, r0
 8004356:	fb02 7101 	mla	r1, r2, r1, r7
 800435a:	0c00      	lsrs	r0, r0, #16
 800435c:	0c0f      	lsrs	r7, r1, #16
 800435e:	fb02 7000 	mla	r0, r2, r0, r7
 8004362:	b289      	uxth	r1, r1
 8004364:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004368:	429d      	cmp	r5, r3
 800436a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800436e:	f84c 1b04 	str.w	r1, [ip], #4
 8004372:	dcec      	bgt.n	800434e <__multadd+0x12>
 8004374:	b1d7      	cbz	r7, 80043ac <__multadd+0x70>
 8004376:	68a3      	ldr	r3, [r4, #8]
 8004378:	42ab      	cmp	r3, r5
 800437a:	dc12      	bgt.n	80043a2 <__multadd+0x66>
 800437c:	6861      	ldr	r1, [r4, #4]
 800437e:	4630      	mov	r0, r6
 8004380:	3101      	adds	r1, #1
 8004382:	f7ff ff90 	bl	80042a6 <_Balloc>
 8004386:	4680      	mov	r8, r0
 8004388:	6922      	ldr	r2, [r4, #16]
 800438a:	f104 010c 	add.w	r1, r4, #12
 800438e:	3202      	adds	r2, #2
 8004390:	0092      	lsls	r2, r2, #2
 8004392:	300c      	adds	r0, #12
 8004394:	f7ff ff7c 	bl	8004290 <memcpy>
 8004398:	4621      	mov	r1, r4
 800439a:	4630      	mov	r0, r6
 800439c:	f7ff ffb7 	bl	800430e <_Bfree>
 80043a0:	4644      	mov	r4, r8
 80043a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80043a6:	3501      	adds	r5, #1
 80043a8:	615f      	str	r7, [r3, #20]
 80043aa:	6125      	str	r5, [r4, #16]
 80043ac:	4620      	mov	r0, r4
 80043ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080043b2 <__hi0bits>:
 80043b2:	0c02      	lsrs	r2, r0, #16
 80043b4:	0412      	lsls	r2, r2, #16
 80043b6:	4603      	mov	r3, r0
 80043b8:	b9b2      	cbnz	r2, 80043e8 <__hi0bits+0x36>
 80043ba:	0403      	lsls	r3, r0, #16
 80043bc:	2010      	movs	r0, #16
 80043be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80043c2:	bf04      	itt	eq
 80043c4:	021b      	lsleq	r3, r3, #8
 80043c6:	3008      	addeq	r0, #8
 80043c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80043cc:	bf04      	itt	eq
 80043ce:	011b      	lsleq	r3, r3, #4
 80043d0:	3004      	addeq	r0, #4
 80043d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80043d6:	bf04      	itt	eq
 80043d8:	009b      	lsleq	r3, r3, #2
 80043da:	3002      	addeq	r0, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	db06      	blt.n	80043ee <__hi0bits+0x3c>
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	d503      	bpl.n	80043ec <__hi0bits+0x3a>
 80043e4:	3001      	adds	r0, #1
 80043e6:	4770      	bx	lr
 80043e8:	2000      	movs	r0, #0
 80043ea:	e7e8      	b.n	80043be <__hi0bits+0xc>
 80043ec:	2020      	movs	r0, #32
 80043ee:	4770      	bx	lr

080043f0 <__lo0bits>:
 80043f0:	6803      	ldr	r3, [r0, #0]
 80043f2:	4601      	mov	r1, r0
 80043f4:	f013 0207 	ands.w	r2, r3, #7
 80043f8:	d00b      	beq.n	8004412 <__lo0bits+0x22>
 80043fa:	07da      	lsls	r2, r3, #31
 80043fc:	d423      	bmi.n	8004446 <__lo0bits+0x56>
 80043fe:	0798      	lsls	r0, r3, #30
 8004400:	bf49      	itett	mi
 8004402:	085b      	lsrmi	r3, r3, #1
 8004404:	089b      	lsrpl	r3, r3, #2
 8004406:	2001      	movmi	r0, #1
 8004408:	600b      	strmi	r3, [r1, #0]
 800440a:	bf5c      	itt	pl
 800440c:	600b      	strpl	r3, [r1, #0]
 800440e:	2002      	movpl	r0, #2
 8004410:	4770      	bx	lr
 8004412:	b298      	uxth	r0, r3
 8004414:	b9a8      	cbnz	r0, 8004442 <__lo0bits+0x52>
 8004416:	2010      	movs	r0, #16
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800441e:	bf04      	itt	eq
 8004420:	0a1b      	lsreq	r3, r3, #8
 8004422:	3008      	addeq	r0, #8
 8004424:	071a      	lsls	r2, r3, #28
 8004426:	bf04      	itt	eq
 8004428:	091b      	lsreq	r3, r3, #4
 800442a:	3004      	addeq	r0, #4
 800442c:	079a      	lsls	r2, r3, #30
 800442e:	bf04      	itt	eq
 8004430:	089b      	lsreq	r3, r3, #2
 8004432:	3002      	addeq	r0, #2
 8004434:	07da      	lsls	r2, r3, #31
 8004436:	d402      	bmi.n	800443e <__lo0bits+0x4e>
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	d006      	beq.n	800444a <__lo0bits+0x5a>
 800443c:	3001      	adds	r0, #1
 800443e:	600b      	str	r3, [r1, #0]
 8004440:	4770      	bx	lr
 8004442:	4610      	mov	r0, r2
 8004444:	e7e9      	b.n	800441a <__lo0bits+0x2a>
 8004446:	2000      	movs	r0, #0
 8004448:	4770      	bx	lr
 800444a:	2020      	movs	r0, #32
 800444c:	4770      	bx	lr

0800444e <__i2b>:
 800444e:	b510      	push	{r4, lr}
 8004450:	460c      	mov	r4, r1
 8004452:	2101      	movs	r1, #1
 8004454:	f7ff ff27 	bl	80042a6 <_Balloc>
 8004458:	2201      	movs	r2, #1
 800445a:	6144      	str	r4, [r0, #20]
 800445c:	6102      	str	r2, [r0, #16]
 800445e:	bd10      	pop	{r4, pc}

08004460 <__multiply>:
 8004460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	4614      	mov	r4, r2
 8004466:	690a      	ldr	r2, [r1, #16]
 8004468:	6923      	ldr	r3, [r4, #16]
 800446a:	4688      	mov	r8, r1
 800446c:	429a      	cmp	r2, r3
 800446e:	bfbe      	ittt	lt
 8004470:	460b      	movlt	r3, r1
 8004472:	46a0      	movlt	r8, r4
 8004474:	461c      	movlt	r4, r3
 8004476:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800447a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800447e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004482:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004486:	eb07 0609 	add.w	r6, r7, r9
 800448a:	42b3      	cmp	r3, r6
 800448c:	bfb8      	it	lt
 800448e:	3101      	addlt	r1, #1
 8004490:	f7ff ff09 	bl	80042a6 <_Balloc>
 8004494:	f100 0514 	add.w	r5, r0, #20
 8004498:	462b      	mov	r3, r5
 800449a:	2200      	movs	r2, #0
 800449c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80044a0:	4573      	cmp	r3, lr
 80044a2:	d316      	bcc.n	80044d2 <__multiply+0x72>
 80044a4:	f104 0214 	add.w	r2, r4, #20
 80044a8:	f108 0114 	add.w	r1, r8, #20
 80044ac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80044b0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	9b00      	ldr	r3, [sp, #0]
 80044b8:	9201      	str	r2, [sp, #4]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d80c      	bhi.n	80044d8 <__multiply+0x78>
 80044be:	2e00      	cmp	r6, #0
 80044c0:	dd03      	ble.n	80044ca <__multiply+0x6a>
 80044c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d05d      	beq.n	8004586 <__multiply+0x126>
 80044ca:	6106      	str	r6, [r0, #16]
 80044cc:	b003      	add	sp, #12
 80044ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d2:	f843 2b04 	str.w	r2, [r3], #4
 80044d6:	e7e3      	b.n	80044a0 <__multiply+0x40>
 80044d8:	f8b2 b000 	ldrh.w	fp, [r2]
 80044dc:	f1bb 0f00 	cmp.w	fp, #0
 80044e0:	d023      	beq.n	800452a <__multiply+0xca>
 80044e2:	4689      	mov	r9, r1
 80044e4:	46ac      	mov	ip, r5
 80044e6:	f04f 0800 	mov.w	r8, #0
 80044ea:	f859 4b04 	ldr.w	r4, [r9], #4
 80044ee:	f8dc a000 	ldr.w	sl, [ip]
 80044f2:	b2a3      	uxth	r3, r4
 80044f4:	fa1f fa8a 	uxth.w	sl, sl
 80044f8:	fb0b a303 	mla	r3, fp, r3, sl
 80044fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004500:	f8dc 4000 	ldr.w	r4, [ip]
 8004504:	4443      	add	r3, r8
 8004506:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800450a:	fb0b 840a 	mla	r4, fp, sl, r8
 800450e:	46e2      	mov	sl, ip
 8004510:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004514:	b29b      	uxth	r3, r3
 8004516:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800451a:	454f      	cmp	r7, r9
 800451c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004520:	f84a 3b04 	str.w	r3, [sl], #4
 8004524:	d82b      	bhi.n	800457e <__multiply+0x11e>
 8004526:	f8cc 8004 	str.w	r8, [ip, #4]
 800452a:	9b01      	ldr	r3, [sp, #4]
 800452c:	3204      	adds	r2, #4
 800452e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004532:	f1ba 0f00 	cmp.w	sl, #0
 8004536:	d020      	beq.n	800457a <__multiply+0x11a>
 8004538:	4689      	mov	r9, r1
 800453a:	46a8      	mov	r8, r5
 800453c:	f04f 0b00 	mov.w	fp, #0
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	f8b9 c000 	ldrh.w	ip, [r9]
 8004546:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800454a:	b29b      	uxth	r3, r3
 800454c:	fb0a 440c 	mla	r4, sl, ip, r4
 8004550:	46c4      	mov	ip, r8
 8004552:	445c      	add	r4, fp
 8004554:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004558:	f84c 3b04 	str.w	r3, [ip], #4
 800455c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004560:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	fb0a b303 	mla	r3, sl, r3, fp
 800456a:	454f      	cmp	r7, r9
 800456c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004570:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004574:	d805      	bhi.n	8004582 <__multiply+0x122>
 8004576:	f8c8 3004 	str.w	r3, [r8, #4]
 800457a:	3504      	adds	r5, #4
 800457c:	e79b      	b.n	80044b6 <__multiply+0x56>
 800457e:	46d4      	mov	ip, sl
 8004580:	e7b3      	b.n	80044ea <__multiply+0x8a>
 8004582:	46e0      	mov	r8, ip
 8004584:	e7dd      	b.n	8004542 <__multiply+0xe2>
 8004586:	3e01      	subs	r6, #1
 8004588:	e799      	b.n	80044be <__multiply+0x5e>
	...

0800458c <__pow5mult>:
 800458c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004590:	4615      	mov	r5, r2
 8004592:	f012 0203 	ands.w	r2, r2, #3
 8004596:	4606      	mov	r6, r0
 8004598:	460f      	mov	r7, r1
 800459a:	d007      	beq.n	80045ac <__pow5mult+0x20>
 800459c:	4c21      	ldr	r4, [pc, #132]	; (8004624 <__pow5mult+0x98>)
 800459e:	3a01      	subs	r2, #1
 80045a0:	2300      	movs	r3, #0
 80045a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80045a6:	f7ff fec9 	bl	800433c <__multadd>
 80045aa:	4607      	mov	r7, r0
 80045ac:	10ad      	asrs	r5, r5, #2
 80045ae:	d035      	beq.n	800461c <__pow5mult+0x90>
 80045b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80045b2:	b93c      	cbnz	r4, 80045c4 <__pow5mult+0x38>
 80045b4:	2010      	movs	r0, #16
 80045b6:	f7ff fe55 	bl	8004264 <malloc>
 80045ba:	6270      	str	r0, [r6, #36]	; 0x24
 80045bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80045c0:	6004      	str	r4, [r0, #0]
 80045c2:	60c4      	str	r4, [r0, #12]
 80045c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80045c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80045cc:	b94c      	cbnz	r4, 80045e2 <__pow5mult+0x56>
 80045ce:	f240 2171 	movw	r1, #625	; 0x271
 80045d2:	4630      	mov	r0, r6
 80045d4:	f7ff ff3b 	bl	800444e <__i2b>
 80045d8:	2300      	movs	r3, #0
 80045da:	4604      	mov	r4, r0
 80045dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80045e0:	6003      	str	r3, [r0, #0]
 80045e2:	f04f 0800 	mov.w	r8, #0
 80045e6:	07eb      	lsls	r3, r5, #31
 80045e8:	d50a      	bpl.n	8004600 <__pow5mult+0x74>
 80045ea:	4639      	mov	r1, r7
 80045ec:	4622      	mov	r2, r4
 80045ee:	4630      	mov	r0, r6
 80045f0:	f7ff ff36 	bl	8004460 <__multiply>
 80045f4:	4681      	mov	r9, r0
 80045f6:	4639      	mov	r1, r7
 80045f8:	4630      	mov	r0, r6
 80045fa:	f7ff fe88 	bl	800430e <_Bfree>
 80045fe:	464f      	mov	r7, r9
 8004600:	106d      	asrs	r5, r5, #1
 8004602:	d00b      	beq.n	800461c <__pow5mult+0x90>
 8004604:	6820      	ldr	r0, [r4, #0]
 8004606:	b938      	cbnz	r0, 8004618 <__pow5mult+0x8c>
 8004608:	4622      	mov	r2, r4
 800460a:	4621      	mov	r1, r4
 800460c:	4630      	mov	r0, r6
 800460e:	f7ff ff27 	bl	8004460 <__multiply>
 8004612:	6020      	str	r0, [r4, #0]
 8004614:	f8c0 8000 	str.w	r8, [r0]
 8004618:	4604      	mov	r4, r0
 800461a:	e7e4      	b.n	80045e6 <__pow5mult+0x5a>
 800461c:	4638      	mov	r0, r7
 800461e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004622:	bf00      	nop
 8004624:	08004f08 	.word	0x08004f08

08004628 <__lshift>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	460c      	mov	r4, r1
 800462e:	4607      	mov	r7, r0
 8004630:	4616      	mov	r6, r2
 8004632:	6923      	ldr	r3, [r4, #16]
 8004634:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004638:	eb0a 0903 	add.w	r9, sl, r3
 800463c:	6849      	ldr	r1, [r1, #4]
 800463e:	68a3      	ldr	r3, [r4, #8]
 8004640:	f109 0501 	add.w	r5, r9, #1
 8004644:	42ab      	cmp	r3, r5
 8004646:	db32      	blt.n	80046ae <__lshift+0x86>
 8004648:	4638      	mov	r0, r7
 800464a:	f7ff fe2c 	bl	80042a6 <_Balloc>
 800464e:	2300      	movs	r3, #0
 8004650:	4680      	mov	r8, r0
 8004652:	461a      	mov	r2, r3
 8004654:	f100 0114 	add.w	r1, r0, #20
 8004658:	4553      	cmp	r3, sl
 800465a:	db2b      	blt.n	80046b4 <__lshift+0x8c>
 800465c:	6920      	ldr	r0, [r4, #16]
 800465e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004662:	f104 0314 	add.w	r3, r4, #20
 8004666:	f016 021f 	ands.w	r2, r6, #31
 800466a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800466e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004672:	d025      	beq.n	80046c0 <__lshift+0x98>
 8004674:	2000      	movs	r0, #0
 8004676:	f1c2 0e20 	rsb	lr, r2, #32
 800467a:	468a      	mov	sl, r1
 800467c:	681e      	ldr	r6, [r3, #0]
 800467e:	4096      	lsls	r6, r2
 8004680:	4330      	orrs	r0, r6
 8004682:	f84a 0b04 	str.w	r0, [sl], #4
 8004686:	f853 0b04 	ldr.w	r0, [r3], #4
 800468a:	459c      	cmp	ip, r3
 800468c:	fa20 f00e 	lsr.w	r0, r0, lr
 8004690:	d814      	bhi.n	80046bc <__lshift+0x94>
 8004692:	6048      	str	r0, [r1, #4]
 8004694:	b108      	cbz	r0, 800469a <__lshift+0x72>
 8004696:	f109 0502 	add.w	r5, r9, #2
 800469a:	3d01      	subs	r5, #1
 800469c:	4638      	mov	r0, r7
 800469e:	f8c8 5010 	str.w	r5, [r8, #16]
 80046a2:	4621      	mov	r1, r4
 80046a4:	f7ff fe33 	bl	800430e <_Bfree>
 80046a8:	4640      	mov	r0, r8
 80046aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ae:	3101      	adds	r1, #1
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	e7c7      	b.n	8004644 <__lshift+0x1c>
 80046b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80046b8:	3301      	adds	r3, #1
 80046ba:	e7cd      	b.n	8004658 <__lshift+0x30>
 80046bc:	4651      	mov	r1, sl
 80046be:	e7dc      	b.n	800467a <__lshift+0x52>
 80046c0:	3904      	subs	r1, #4
 80046c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80046c6:	459c      	cmp	ip, r3
 80046c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80046cc:	d8f9      	bhi.n	80046c2 <__lshift+0x9a>
 80046ce:	e7e4      	b.n	800469a <__lshift+0x72>

080046d0 <__mcmp>:
 80046d0:	6903      	ldr	r3, [r0, #16]
 80046d2:	690a      	ldr	r2, [r1, #16]
 80046d4:	b530      	push	{r4, r5, lr}
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	d10c      	bne.n	80046f4 <__mcmp+0x24>
 80046da:	0092      	lsls	r2, r2, #2
 80046dc:	3014      	adds	r0, #20
 80046de:	3114      	adds	r1, #20
 80046e0:	1884      	adds	r4, r0, r2
 80046e2:	4411      	add	r1, r2
 80046e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80046e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80046ec:	4295      	cmp	r5, r2
 80046ee:	d003      	beq.n	80046f8 <__mcmp+0x28>
 80046f0:	d305      	bcc.n	80046fe <__mcmp+0x2e>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd30      	pop	{r4, r5, pc}
 80046f8:	42a0      	cmp	r0, r4
 80046fa:	d3f3      	bcc.n	80046e4 <__mcmp+0x14>
 80046fc:	e7fa      	b.n	80046f4 <__mcmp+0x24>
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004702:	e7f7      	b.n	80046f4 <__mcmp+0x24>

08004704 <__mdiff>:
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	460d      	mov	r5, r1
 800470a:	4607      	mov	r7, r0
 800470c:	4611      	mov	r1, r2
 800470e:	4628      	mov	r0, r5
 8004710:	4614      	mov	r4, r2
 8004712:	f7ff ffdd 	bl	80046d0 <__mcmp>
 8004716:	1e06      	subs	r6, r0, #0
 8004718:	d108      	bne.n	800472c <__mdiff+0x28>
 800471a:	4631      	mov	r1, r6
 800471c:	4638      	mov	r0, r7
 800471e:	f7ff fdc2 	bl	80042a6 <_Balloc>
 8004722:	2301      	movs	r3, #1
 8004724:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472c:	bfa4      	itt	ge
 800472e:	4623      	movge	r3, r4
 8004730:	462c      	movge	r4, r5
 8004732:	4638      	mov	r0, r7
 8004734:	6861      	ldr	r1, [r4, #4]
 8004736:	bfa6      	itte	ge
 8004738:	461d      	movge	r5, r3
 800473a:	2600      	movge	r6, #0
 800473c:	2601      	movlt	r6, #1
 800473e:	f7ff fdb2 	bl	80042a6 <_Balloc>
 8004742:	f04f 0e00 	mov.w	lr, #0
 8004746:	60c6      	str	r6, [r0, #12]
 8004748:	692b      	ldr	r3, [r5, #16]
 800474a:	6926      	ldr	r6, [r4, #16]
 800474c:	f104 0214 	add.w	r2, r4, #20
 8004750:	f105 0914 	add.w	r9, r5, #20
 8004754:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004758:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800475c:	f100 0114 	add.w	r1, r0, #20
 8004760:	f852 ab04 	ldr.w	sl, [r2], #4
 8004764:	f859 5b04 	ldr.w	r5, [r9], #4
 8004768:	fa1f f38a 	uxth.w	r3, sl
 800476c:	4473      	add	r3, lr
 800476e:	b2ac      	uxth	r4, r5
 8004770:	1b1b      	subs	r3, r3, r4
 8004772:	0c2c      	lsrs	r4, r5, #16
 8004774:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004778:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800477c:	b29b      	uxth	r3, r3
 800477e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004782:	45c8      	cmp	r8, r9
 8004784:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004788:	4694      	mov	ip, r2
 800478a:	f841 4b04 	str.w	r4, [r1], #4
 800478e:	d8e7      	bhi.n	8004760 <__mdiff+0x5c>
 8004790:	45bc      	cmp	ip, r7
 8004792:	d304      	bcc.n	800479e <__mdiff+0x9a>
 8004794:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004798:	b183      	cbz	r3, 80047bc <__mdiff+0xb8>
 800479a:	6106      	str	r6, [r0, #16]
 800479c:	e7c4      	b.n	8004728 <__mdiff+0x24>
 800479e:	f85c 4b04 	ldr.w	r4, [ip], #4
 80047a2:	b2a2      	uxth	r2, r4
 80047a4:	4472      	add	r2, lr
 80047a6:	1413      	asrs	r3, r2, #16
 80047a8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80047ac:	b292      	uxth	r2, r2
 80047ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80047b2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80047b6:	f841 2b04 	str.w	r2, [r1], #4
 80047ba:	e7e9      	b.n	8004790 <__mdiff+0x8c>
 80047bc:	3e01      	subs	r6, #1
 80047be:	e7e9      	b.n	8004794 <__mdiff+0x90>

080047c0 <__d2b>:
 80047c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80047c4:	461c      	mov	r4, r3
 80047c6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80047ca:	2101      	movs	r1, #1
 80047cc:	4690      	mov	r8, r2
 80047ce:	f7ff fd6a 	bl	80042a6 <_Balloc>
 80047d2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80047d6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80047da:	4607      	mov	r7, r0
 80047dc:	bb34      	cbnz	r4, 800482c <__d2b+0x6c>
 80047de:	9201      	str	r2, [sp, #4]
 80047e0:	f1b8 0200 	subs.w	r2, r8, #0
 80047e4:	d027      	beq.n	8004836 <__d2b+0x76>
 80047e6:	a802      	add	r0, sp, #8
 80047e8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80047ec:	f7ff fe00 	bl	80043f0 <__lo0bits>
 80047f0:	9900      	ldr	r1, [sp, #0]
 80047f2:	b1f0      	cbz	r0, 8004832 <__d2b+0x72>
 80047f4:	9a01      	ldr	r2, [sp, #4]
 80047f6:	f1c0 0320 	rsb	r3, r0, #32
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	430b      	orrs	r3, r1
 8004800:	40c2      	lsrs	r2, r0
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	9201      	str	r2, [sp, #4]
 8004806:	9b01      	ldr	r3, [sp, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf14      	ite	ne
 800480c:	2102      	movne	r1, #2
 800480e:	2101      	moveq	r1, #1
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	6139      	str	r1, [r7, #16]
 8004814:	b1c4      	cbz	r4, 8004848 <__d2b+0x88>
 8004816:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800481a:	4404      	add	r4, r0
 800481c:	6034      	str	r4, [r6, #0]
 800481e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004822:	6028      	str	r0, [r5, #0]
 8004824:	4638      	mov	r0, r7
 8004826:	b002      	add	sp, #8
 8004828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800482c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004830:	e7d5      	b.n	80047de <__d2b+0x1e>
 8004832:	6179      	str	r1, [r7, #20]
 8004834:	e7e7      	b.n	8004806 <__d2b+0x46>
 8004836:	a801      	add	r0, sp, #4
 8004838:	f7ff fdda 	bl	80043f0 <__lo0bits>
 800483c:	2101      	movs	r1, #1
 800483e:	9b01      	ldr	r3, [sp, #4]
 8004840:	6139      	str	r1, [r7, #16]
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	3020      	adds	r0, #32
 8004846:	e7e5      	b.n	8004814 <__d2b+0x54>
 8004848:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800484c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004850:	6030      	str	r0, [r6, #0]
 8004852:	6918      	ldr	r0, [r3, #16]
 8004854:	f7ff fdad 	bl	80043b2 <__hi0bits>
 8004858:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800485c:	e7e1      	b.n	8004822 <__d2b+0x62>

0800485e <_calloc_r>:
 800485e:	b538      	push	{r3, r4, r5, lr}
 8004860:	fb02 f401 	mul.w	r4, r2, r1
 8004864:	4621      	mov	r1, r4
 8004866:	f000 f855 	bl	8004914 <_malloc_r>
 800486a:	4605      	mov	r5, r0
 800486c:	b118      	cbz	r0, 8004876 <_calloc_r+0x18>
 800486e:	4622      	mov	r2, r4
 8004870:	2100      	movs	r1, #0
 8004872:	f7fe fa2d 	bl	8002cd0 <memset>
 8004876:	4628      	mov	r0, r5
 8004878:	bd38      	pop	{r3, r4, r5, pc}
	...

0800487c <_free_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	2900      	cmp	r1, #0
 8004882:	d043      	beq.n	800490c <_free_r+0x90>
 8004884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004888:	1f0c      	subs	r4, r1, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfb8      	it	lt
 800488e:	18e4      	addlt	r4, r4, r3
 8004890:	f000 fa27 	bl	8004ce2 <__malloc_lock>
 8004894:	4a1e      	ldr	r2, [pc, #120]	; (8004910 <_free_r+0x94>)
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	4610      	mov	r0, r2
 800489a:	b933      	cbnz	r3, 80048aa <_free_r+0x2e>
 800489c:	6063      	str	r3, [r4, #4]
 800489e:	6014      	str	r4, [r2, #0]
 80048a0:	4628      	mov	r0, r5
 80048a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048a6:	f000 ba1d 	b.w	8004ce4 <__malloc_unlock>
 80048aa:	42a3      	cmp	r3, r4
 80048ac:	d90b      	bls.n	80048c6 <_free_r+0x4a>
 80048ae:	6821      	ldr	r1, [r4, #0]
 80048b0:	1862      	adds	r2, r4, r1
 80048b2:	4293      	cmp	r3, r2
 80048b4:	bf01      	itttt	eq
 80048b6:	681a      	ldreq	r2, [r3, #0]
 80048b8:	685b      	ldreq	r3, [r3, #4]
 80048ba:	1852      	addeq	r2, r2, r1
 80048bc:	6022      	streq	r2, [r4, #0]
 80048be:	6063      	str	r3, [r4, #4]
 80048c0:	6004      	str	r4, [r0, #0]
 80048c2:	e7ed      	b.n	80048a0 <_free_r+0x24>
 80048c4:	4613      	mov	r3, r2
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	b10a      	cbz	r2, 80048ce <_free_r+0x52>
 80048ca:	42a2      	cmp	r2, r4
 80048cc:	d9fa      	bls.n	80048c4 <_free_r+0x48>
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	1858      	adds	r0, r3, r1
 80048d2:	42a0      	cmp	r0, r4
 80048d4:	d10b      	bne.n	80048ee <_free_r+0x72>
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	4401      	add	r1, r0
 80048da:	1858      	adds	r0, r3, r1
 80048dc:	4282      	cmp	r2, r0
 80048de:	6019      	str	r1, [r3, #0]
 80048e0:	d1de      	bne.n	80048a0 <_free_r+0x24>
 80048e2:	6810      	ldr	r0, [r2, #0]
 80048e4:	6852      	ldr	r2, [r2, #4]
 80048e6:	4401      	add	r1, r0
 80048e8:	6019      	str	r1, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	e7d8      	b.n	80048a0 <_free_r+0x24>
 80048ee:	d902      	bls.n	80048f6 <_free_r+0x7a>
 80048f0:	230c      	movs	r3, #12
 80048f2:	602b      	str	r3, [r5, #0]
 80048f4:	e7d4      	b.n	80048a0 <_free_r+0x24>
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	1821      	adds	r1, r4, r0
 80048fa:	428a      	cmp	r2, r1
 80048fc:	bf01      	itttt	eq
 80048fe:	6811      	ldreq	r1, [r2, #0]
 8004900:	6852      	ldreq	r2, [r2, #4]
 8004902:	1809      	addeq	r1, r1, r0
 8004904:	6021      	streq	r1, [r4, #0]
 8004906:	6062      	str	r2, [r4, #4]
 8004908:	605c      	str	r4, [r3, #4]
 800490a:	e7c9      	b.n	80048a0 <_free_r+0x24>
 800490c:	bd38      	pop	{r3, r4, r5, pc}
 800490e:	bf00      	nop
 8004910:	2000020c 	.word	0x2000020c

08004914 <_malloc_r>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	1ccd      	adds	r5, r1, #3
 8004918:	f025 0503 	bic.w	r5, r5, #3
 800491c:	3508      	adds	r5, #8
 800491e:	2d0c      	cmp	r5, #12
 8004920:	bf38      	it	cc
 8004922:	250c      	movcc	r5, #12
 8004924:	2d00      	cmp	r5, #0
 8004926:	4606      	mov	r6, r0
 8004928:	db01      	blt.n	800492e <_malloc_r+0x1a>
 800492a:	42a9      	cmp	r1, r5
 800492c:	d903      	bls.n	8004936 <_malloc_r+0x22>
 800492e:	230c      	movs	r3, #12
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	2000      	movs	r0, #0
 8004934:	bd70      	pop	{r4, r5, r6, pc}
 8004936:	f000 f9d4 	bl	8004ce2 <__malloc_lock>
 800493a:	4a21      	ldr	r2, [pc, #132]	; (80049c0 <_malloc_r+0xac>)
 800493c:	6814      	ldr	r4, [r2, #0]
 800493e:	4621      	mov	r1, r4
 8004940:	b991      	cbnz	r1, 8004968 <_malloc_r+0x54>
 8004942:	4c20      	ldr	r4, [pc, #128]	; (80049c4 <_malloc_r+0xb0>)
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	b91b      	cbnz	r3, 8004950 <_malloc_r+0x3c>
 8004948:	4630      	mov	r0, r6
 800494a:	f000 f98f 	bl	8004c6c <_sbrk_r>
 800494e:	6020      	str	r0, [r4, #0]
 8004950:	4629      	mov	r1, r5
 8004952:	4630      	mov	r0, r6
 8004954:	f000 f98a 	bl	8004c6c <_sbrk_r>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d124      	bne.n	80049a6 <_malloc_r+0x92>
 800495c:	230c      	movs	r3, #12
 800495e:	4630      	mov	r0, r6
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	f000 f9bf 	bl	8004ce4 <__malloc_unlock>
 8004966:	e7e4      	b.n	8004932 <_malloc_r+0x1e>
 8004968:	680b      	ldr	r3, [r1, #0]
 800496a:	1b5b      	subs	r3, r3, r5
 800496c:	d418      	bmi.n	80049a0 <_malloc_r+0x8c>
 800496e:	2b0b      	cmp	r3, #11
 8004970:	d90f      	bls.n	8004992 <_malloc_r+0x7e>
 8004972:	600b      	str	r3, [r1, #0]
 8004974:	18cc      	adds	r4, r1, r3
 8004976:	50cd      	str	r5, [r1, r3]
 8004978:	4630      	mov	r0, r6
 800497a:	f000 f9b3 	bl	8004ce4 <__malloc_unlock>
 800497e:	f104 000b 	add.w	r0, r4, #11
 8004982:	1d23      	adds	r3, r4, #4
 8004984:	f020 0007 	bic.w	r0, r0, #7
 8004988:	1ac3      	subs	r3, r0, r3
 800498a:	d0d3      	beq.n	8004934 <_malloc_r+0x20>
 800498c:	425a      	negs	r2, r3
 800498e:	50e2      	str	r2, [r4, r3]
 8004990:	e7d0      	b.n	8004934 <_malloc_r+0x20>
 8004992:	684b      	ldr	r3, [r1, #4]
 8004994:	428c      	cmp	r4, r1
 8004996:	bf16      	itet	ne
 8004998:	6063      	strne	r3, [r4, #4]
 800499a:	6013      	streq	r3, [r2, #0]
 800499c:	460c      	movne	r4, r1
 800499e:	e7eb      	b.n	8004978 <_malloc_r+0x64>
 80049a0:	460c      	mov	r4, r1
 80049a2:	6849      	ldr	r1, [r1, #4]
 80049a4:	e7cc      	b.n	8004940 <_malloc_r+0x2c>
 80049a6:	1cc4      	adds	r4, r0, #3
 80049a8:	f024 0403 	bic.w	r4, r4, #3
 80049ac:	42a0      	cmp	r0, r4
 80049ae:	d005      	beq.n	80049bc <_malloc_r+0xa8>
 80049b0:	1a21      	subs	r1, r4, r0
 80049b2:	4630      	mov	r0, r6
 80049b4:	f000 f95a 	bl	8004c6c <_sbrk_r>
 80049b8:	3001      	adds	r0, #1
 80049ba:	d0cf      	beq.n	800495c <_malloc_r+0x48>
 80049bc:	6025      	str	r5, [r4, #0]
 80049be:	e7db      	b.n	8004978 <_malloc_r+0x64>
 80049c0:	2000020c 	.word	0x2000020c
 80049c4:	20000210 	.word	0x20000210

080049c8 <__ssputs_r>:
 80049c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	688e      	ldr	r6, [r1, #8]
 80049ce:	4682      	mov	sl, r0
 80049d0:	429e      	cmp	r6, r3
 80049d2:	460c      	mov	r4, r1
 80049d4:	4690      	mov	r8, r2
 80049d6:	4699      	mov	r9, r3
 80049d8:	d837      	bhi.n	8004a4a <__ssputs_r+0x82>
 80049da:	898a      	ldrh	r2, [r1, #12]
 80049dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049e0:	d031      	beq.n	8004a46 <__ssputs_r+0x7e>
 80049e2:	2302      	movs	r3, #2
 80049e4:	6825      	ldr	r5, [r4, #0]
 80049e6:	6909      	ldr	r1, [r1, #16]
 80049e8:	1a6f      	subs	r7, r5, r1
 80049ea:	6965      	ldr	r5, [r4, #20]
 80049ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80049f4:	f109 0301 	add.w	r3, r9, #1
 80049f8:	443b      	add	r3, r7
 80049fa:	429d      	cmp	r5, r3
 80049fc:	bf38      	it	cc
 80049fe:	461d      	movcc	r5, r3
 8004a00:	0553      	lsls	r3, r2, #21
 8004a02:	d530      	bpl.n	8004a66 <__ssputs_r+0x9e>
 8004a04:	4629      	mov	r1, r5
 8004a06:	f7ff ff85 	bl	8004914 <_malloc_r>
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	b950      	cbnz	r0, 8004a24 <__ssputs_r+0x5c>
 8004a0e:	230c      	movs	r3, #12
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	f8ca 3000 	str.w	r3, [sl]
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	463a      	mov	r2, r7
 8004a26:	6921      	ldr	r1, [r4, #16]
 8004a28:	f7ff fc32 	bl	8004290 <memcpy>
 8004a2c:	89a3      	ldrh	r3, [r4, #12]
 8004a2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	81a3      	strh	r3, [r4, #12]
 8004a38:	6126      	str	r6, [r4, #16]
 8004a3a:	443e      	add	r6, r7
 8004a3c:	6026      	str	r6, [r4, #0]
 8004a3e:	464e      	mov	r6, r9
 8004a40:	6165      	str	r5, [r4, #20]
 8004a42:	1bed      	subs	r5, r5, r7
 8004a44:	60a5      	str	r5, [r4, #8]
 8004a46:	454e      	cmp	r6, r9
 8004a48:	d900      	bls.n	8004a4c <__ssputs_r+0x84>
 8004a4a:	464e      	mov	r6, r9
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	4641      	mov	r1, r8
 8004a50:	6820      	ldr	r0, [r4, #0]
 8004a52:	f000 f92d 	bl	8004cb0 <memmove>
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	2000      	movs	r0, #0
 8004a5a:	1b9b      	subs	r3, r3, r6
 8004a5c:	60a3      	str	r3, [r4, #8]
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	441e      	add	r6, r3
 8004a62:	6026      	str	r6, [r4, #0]
 8004a64:	e7dc      	b.n	8004a20 <__ssputs_r+0x58>
 8004a66:	462a      	mov	r2, r5
 8004a68:	f000 f93d 	bl	8004ce6 <_realloc_r>
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d1e2      	bne.n	8004a38 <__ssputs_r+0x70>
 8004a72:	6921      	ldr	r1, [r4, #16]
 8004a74:	4650      	mov	r0, sl
 8004a76:	f7ff ff01 	bl	800487c <_free_r>
 8004a7a:	e7c8      	b.n	8004a0e <__ssputs_r+0x46>

08004a7c <_svfiprintf_r>:
 8004a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a80:	461d      	mov	r5, r3
 8004a82:	898b      	ldrh	r3, [r1, #12]
 8004a84:	b09d      	sub	sp, #116	; 0x74
 8004a86:	061f      	lsls	r7, r3, #24
 8004a88:	4680      	mov	r8, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	4616      	mov	r6, r2
 8004a8e:	d50f      	bpl.n	8004ab0 <_svfiprintf_r+0x34>
 8004a90:	690b      	ldr	r3, [r1, #16]
 8004a92:	b96b      	cbnz	r3, 8004ab0 <_svfiprintf_r+0x34>
 8004a94:	2140      	movs	r1, #64	; 0x40
 8004a96:	f7ff ff3d 	bl	8004914 <_malloc_r>
 8004a9a:	6020      	str	r0, [r4, #0]
 8004a9c:	6120      	str	r0, [r4, #16]
 8004a9e:	b928      	cbnz	r0, 8004aac <_svfiprintf_r+0x30>
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	f8c8 3000 	str.w	r3, [r8]
 8004aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aaa:	e0c8      	b.n	8004c3e <_svfiprintf_r+0x1c2>
 8004aac:	2340      	movs	r3, #64	; 0x40
 8004aae:	6163      	str	r3, [r4, #20]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aba:	2330      	movs	r3, #48	; 0x30
 8004abc:	f04f 0b01 	mov.w	fp, #1
 8004ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ac4:	9503      	str	r5, [sp, #12]
 8004ac6:	4637      	mov	r7, r6
 8004ac8:	463d      	mov	r5, r7
 8004aca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ace:	b10b      	cbz	r3, 8004ad4 <_svfiprintf_r+0x58>
 8004ad0:	2b25      	cmp	r3, #37	; 0x25
 8004ad2:	d13e      	bne.n	8004b52 <_svfiprintf_r+0xd6>
 8004ad4:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ad8:	d00b      	beq.n	8004af2 <_svfiprintf_r+0x76>
 8004ada:	4653      	mov	r3, sl
 8004adc:	4632      	mov	r2, r6
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	f7ff ff71 	bl	80049c8 <__ssputs_r>
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	f000 80a4 	beq.w	8004c34 <_svfiprintf_r+0x1b8>
 8004aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aee:	4453      	add	r3, sl
 8004af0:	9309      	str	r3, [sp, #36]	; 0x24
 8004af2:	783b      	ldrb	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 809d 	beq.w	8004c34 <_svfiprintf_r+0x1b8>
 8004afa:	2300      	movs	r3, #0
 8004afc:	f04f 32ff 	mov.w	r2, #4294967295
 8004b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	9307      	str	r3, [sp, #28]
 8004b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b0e:	462f      	mov	r7, r5
 8004b10:	2205      	movs	r2, #5
 8004b12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b16:	4850      	ldr	r0, [pc, #320]	; (8004c58 <_svfiprintf_r+0x1dc>)
 8004b18:	f7ff fbac 	bl	8004274 <memchr>
 8004b1c:	9b04      	ldr	r3, [sp, #16]
 8004b1e:	b9d0      	cbnz	r0, 8004b56 <_svfiprintf_r+0xda>
 8004b20:	06d9      	lsls	r1, r3, #27
 8004b22:	bf44      	itt	mi
 8004b24:	2220      	movmi	r2, #32
 8004b26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b2a:	071a      	lsls	r2, r3, #28
 8004b2c:	bf44      	itt	mi
 8004b2e:	222b      	movmi	r2, #43	; 0x2b
 8004b30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b34:	782a      	ldrb	r2, [r5, #0]
 8004b36:	2a2a      	cmp	r2, #42	; 0x2a
 8004b38:	d015      	beq.n	8004b66 <_svfiprintf_r+0xea>
 8004b3a:	462f      	mov	r7, r5
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	250a      	movs	r5, #10
 8004b40:	9a07      	ldr	r2, [sp, #28]
 8004b42:	4639      	mov	r1, r7
 8004b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b48:	3b30      	subs	r3, #48	; 0x30
 8004b4a:	2b09      	cmp	r3, #9
 8004b4c:	d94d      	bls.n	8004bea <_svfiprintf_r+0x16e>
 8004b4e:	b1b8      	cbz	r0, 8004b80 <_svfiprintf_r+0x104>
 8004b50:	e00f      	b.n	8004b72 <_svfiprintf_r+0xf6>
 8004b52:	462f      	mov	r7, r5
 8004b54:	e7b8      	b.n	8004ac8 <_svfiprintf_r+0x4c>
 8004b56:	4a40      	ldr	r2, [pc, #256]	; (8004c58 <_svfiprintf_r+0x1dc>)
 8004b58:	463d      	mov	r5, r7
 8004b5a:	1a80      	subs	r0, r0, r2
 8004b5c:	fa0b f000 	lsl.w	r0, fp, r0
 8004b60:	4318      	orrs	r0, r3
 8004b62:	9004      	str	r0, [sp, #16]
 8004b64:	e7d3      	b.n	8004b0e <_svfiprintf_r+0x92>
 8004b66:	9a03      	ldr	r2, [sp, #12]
 8004b68:	1d11      	adds	r1, r2, #4
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	9103      	str	r1, [sp, #12]
 8004b6e:	2a00      	cmp	r2, #0
 8004b70:	db01      	blt.n	8004b76 <_svfiprintf_r+0xfa>
 8004b72:	9207      	str	r2, [sp, #28]
 8004b74:	e004      	b.n	8004b80 <_svfiprintf_r+0x104>
 8004b76:	4252      	negs	r2, r2
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	9207      	str	r2, [sp, #28]
 8004b7e:	9304      	str	r3, [sp, #16]
 8004b80:	783b      	ldrb	r3, [r7, #0]
 8004b82:	2b2e      	cmp	r3, #46	; 0x2e
 8004b84:	d10c      	bne.n	8004ba0 <_svfiprintf_r+0x124>
 8004b86:	787b      	ldrb	r3, [r7, #1]
 8004b88:	2b2a      	cmp	r3, #42	; 0x2a
 8004b8a:	d133      	bne.n	8004bf4 <_svfiprintf_r+0x178>
 8004b8c:	9b03      	ldr	r3, [sp, #12]
 8004b8e:	3702      	adds	r7, #2
 8004b90:	1d1a      	adds	r2, r3, #4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	9203      	str	r2, [sp, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bfb8      	it	lt
 8004b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b9e:	9305      	str	r3, [sp, #20]
 8004ba0:	4d2e      	ldr	r5, [pc, #184]	; (8004c5c <_svfiprintf_r+0x1e0>)
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	7839      	ldrb	r1, [r7, #0]
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f7ff fb64 	bl	8004274 <memchr>
 8004bac:	b138      	cbz	r0, 8004bbe <_svfiprintf_r+0x142>
 8004bae:	2340      	movs	r3, #64	; 0x40
 8004bb0:	1b40      	subs	r0, r0, r5
 8004bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8004bb6:	9b04      	ldr	r3, [sp, #16]
 8004bb8:	3701      	adds	r7, #1
 8004bba:	4303      	orrs	r3, r0
 8004bbc:	9304      	str	r3, [sp, #16]
 8004bbe:	7839      	ldrb	r1, [r7, #0]
 8004bc0:	2206      	movs	r2, #6
 8004bc2:	4827      	ldr	r0, [pc, #156]	; (8004c60 <_svfiprintf_r+0x1e4>)
 8004bc4:	1c7e      	adds	r6, r7, #1
 8004bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bca:	f7ff fb53 	bl	8004274 <memchr>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d038      	beq.n	8004c44 <_svfiprintf_r+0x1c8>
 8004bd2:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <_svfiprintf_r+0x1e8>)
 8004bd4:	bb13      	cbnz	r3, 8004c1c <_svfiprintf_r+0x1a0>
 8004bd6:	9b03      	ldr	r3, [sp, #12]
 8004bd8:	3307      	adds	r3, #7
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	3308      	adds	r3, #8
 8004be0:	9303      	str	r3, [sp, #12]
 8004be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be4:	444b      	add	r3, r9
 8004be6:	9309      	str	r3, [sp, #36]	; 0x24
 8004be8:	e76d      	b.n	8004ac6 <_svfiprintf_r+0x4a>
 8004bea:	fb05 3202 	mla	r2, r5, r2, r3
 8004bee:	2001      	movs	r0, #1
 8004bf0:	460f      	mov	r7, r1
 8004bf2:	e7a6      	b.n	8004b42 <_svfiprintf_r+0xc6>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	250a      	movs	r5, #10
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	3701      	adds	r7, #1
 8004bfc:	9305      	str	r3, [sp, #20]
 8004bfe:	4638      	mov	r0, r7
 8004c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c04:	3a30      	subs	r2, #48	; 0x30
 8004c06:	2a09      	cmp	r2, #9
 8004c08:	d903      	bls.n	8004c12 <_svfiprintf_r+0x196>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0c8      	beq.n	8004ba0 <_svfiprintf_r+0x124>
 8004c0e:	9105      	str	r1, [sp, #20]
 8004c10:	e7c6      	b.n	8004ba0 <_svfiprintf_r+0x124>
 8004c12:	fb05 2101 	mla	r1, r5, r1, r2
 8004c16:	2301      	movs	r3, #1
 8004c18:	4607      	mov	r7, r0
 8004c1a:	e7f0      	b.n	8004bfe <_svfiprintf_r+0x182>
 8004c1c:	ab03      	add	r3, sp, #12
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	4622      	mov	r2, r4
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <_svfiprintf_r+0x1ec>)
 8004c24:	a904      	add	r1, sp, #16
 8004c26:	4640      	mov	r0, r8
 8004c28:	f7fe f8ec 	bl	8002e04 <_printf_float>
 8004c2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c30:	4681      	mov	r9, r0
 8004c32:	d1d6      	bne.n	8004be2 <_svfiprintf_r+0x166>
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	065b      	lsls	r3, r3, #25
 8004c38:	f53f af35 	bmi.w	8004aa6 <_svfiprintf_r+0x2a>
 8004c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c3e:	b01d      	add	sp, #116	; 0x74
 8004c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c44:	ab03      	add	r3, sp, #12
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	4622      	mov	r2, r4
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <_svfiprintf_r+0x1ec>)
 8004c4c:	a904      	add	r1, sp, #16
 8004c4e:	4640      	mov	r0, r8
 8004c50:	f7fe fb84 	bl	800335c <_printf_i>
 8004c54:	e7ea      	b.n	8004c2c <_svfiprintf_r+0x1b0>
 8004c56:	bf00      	nop
 8004c58:	08004f14 	.word	0x08004f14
 8004c5c:	08004f1a 	.word	0x08004f1a
 8004c60:	08004f1e 	.word	0x08004f1e
 8004c64:	08002e05 	.word	0x08002e05
 8004c68:	080049c9 	.word	0x080049c9

08004c6c <_sbrk_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	2300      	movs	r3, #0
 8004c70:	4c05      	ldr	r4, [pc, #20]	; (8004c88 <_sbrk_r+0x1c>)
 8004c72:	4605      	mov	r5, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	f7fc fa1e 	bl	80010b8 <_sbrk>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_sbrk_r+0x1a>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_sbrk_r+0x1a>
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	2000033c 	.word	0x2000033c

08004c8c <__ascii_mbtowc>:
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	b901      	cbnz	r1, 8004c92 <__ascii_mbtowc+0x6>
 8004c90:	a901      	add	r1, sp, #4
 8004c92:	b142      	cbz	r2, 8004ca6 <__ascii_mbtowc+0x1a>
 8004c94:	b14b      	cbz	r3, 8004caa <__ascii_mbtowc+0x1e>
 8004c96:	7813      	ldrb	r3, [r2, #0]
 8004c98:	600b      	str	r3, [r1, #0]
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	1c10      	adds	r0, r2, #0
 8004c9e:	bf18      	it	ne
 8004ca0:	2001      	movne	r0, #1
 8004ca2:	b002      	add	sp, #8
 8004ca4:	4770      	bx	lr
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	e7fb      	b.n	8004ca2 <__ascii_mbtowc+0x16>
 8004caa:	f06f 0001 	mvn.w	r0, #1
 8004cae:	e7f8      	b.n	8004ca2 <__ascii_mbtowc+0x16>

08004cb0 <memmove>:
 8004cb0:	4288      	cmp	r0, r1
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	eb01 0302 	add.w	r3, r1, r2
 8004cb8:	d807      	bhi.n	8004cca <memmove+0x1a>
 8004cba:	1e42      	subs	r2, r0, #1
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	d00a      	beq.n	8004cd6 <memmove+0x26>
 8004cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cc4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004cc8:	e7f8      	b.n	8004cbc <memmove+0xc>
 8004cca:	4283      	cmp	r3, r0
 8004ccc:	d9f5      	bls.n	8004cba <memmove+0xa>
 8004cce:	1881      	adds	r1, r0, r2
 8004cd0:	1ad2      	subs	r2, r2, r3
 8004cd2:	42d3      	cmn	r3, r2
 8004cd4:	d100      	bne.n	8004cd8 <memmove+0x28>
 8004cd6:	bd10      	pop	{r4, pc}
 8004cd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cdc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ce0:	e7f7      	b.n	8004cd2 <memmove+0x22>

08004ce2 <__malloc_lock>:
 8004ce2:	4770      	bx	lr

08004ce4 <__malloc_unlock>:
 8004ce4:	4770      	bx	lr

08004ce6 <_realloc_r>:
 8004ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce8:	4607      	mov	r7, r0
 8004cea:	4614      	mov	r4, r2
 8004cec:	460e      	mov	r6, r1
 8004cee:	b921      	cbnz	r1, 8004cfa <_realloc_r+0x14>
 8004cf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	f7ff be0d 	b.w	8004914 <_malloc_r>
 8004cfa:	b922      	cbnz	r2, 8004d06 <_realloc_r+0x20>
 8004cfc:	f7ff fdbe 	bl	800487c <_free_r>
 8004d00:	4625      	mov	r5, r4
 8004d02:	4628      	mov	r0, r5
 8004d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d06:	f000 f821 	bl	8004d4c <_malloc_usable_size_r>
 8004d0a:	42a0      	cmp	r0, r4
 8004d0c:	d20f      	bcs.n	8004d2e <_realloc_r+0x48>
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7ff fdff 	bl	8004914 <_malloc_r>
 8004d16:	4605      	mov	r5, r0
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d0f2      	beq.n	8004d02 <_realloc_r+0x1c>
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4622      	mov	r2, r4
 8004d20:	f7ff fab6 	bl	8004290 <memcpy>
 8004d24:	4631      	mov	r1, r6
 8004d26:	4638      	mov	r0, r7
 8004d28:	f7ff fda8 	bl	800487c <_free_r>
 8004d2c:	e7e9      	b.n	8004d02 <_realloc_r+0x1c>
 8004d2e:	4635      	mov	r5, r6
 8004d30:	e7e7      	b.n	8004d02 <_realloc_r+0x1c>

08004d32 <__ascii_wctomb>:
 8004d32:	b149      	cbz	r1, 8004d48 <__ascii_wctomb+0x16>
 8004d34:	2aff      	cmp	r2, #255	; 0xff
 8004d36:	bf8b      	itete	hi
 8004d38:	238a      	movhi	r3, #138	; 0x8a
 8004d3a:	700a      	strbls	r2, [r1, #0]
 8004d3c:	6003      	strhi	r3, [r0, #0]
 8004d3e:	2001      	movls	r0, #1
 8004d40:	bf88      	it	hi
 8004d42:	f04f 30ff 	movhi.w	r0, #4294967295
 8004d46:	4770      	bx	lr
 8004d48:	4608      	mov	r0, r1
 8004d4a:	4770      	bx	lr

08004d4c <_malloc_usable_size_r>:
 8004d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d50:	1f18      	subs	r0, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bfbc      	itt	lt
 8004d56:	580b      	ldrlt	r3, [r1, r0]
 8004d58:	18c0      	addlt	r0, r0, r3
 8004d5a:	4770      	bx	lr

08004d5c <_init>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr

08004d68 <_fini>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr
