
TIMER_IC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08004dc8  08004dc8  00014dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005080  08005080  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005080  08005080  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005080  08005080  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005084  08005084  00015084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001e0  08005268  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005268  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a009  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001769  00000000  00000000  0002a212  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac8  00000000  00000000  0002b980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a00  00000000  00000000  0002c448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142e2  00000000  00000000  0002ce48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007622  00000000  00000000  0004112a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f968  00000000  00000000  0004874c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b80b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  000b8130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004dac 	.word	0x08004dac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08004dac 	.word	0x08004dac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
volatile uint8_t count = 1;
volatile uint8_t is_capture_done = FALSE;

char usr_msg[100];

int main(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

	HAL_Init();
 8000a8c:	f000 fb9e 	bl	80011cc <HAL_Init>
	SystemClock_Config(SYS_CLOCK_FREQ_64_MHZ);
 8000a90:	2040      	movs	r0, #64	; 0x40
 8000a92:	f000 f819 	bl	8000ac8 <SystemClock_Config>
	GPIO_Init();
 8000a96:	f000 f893 	bl	8000bc0 <GPIO_Init>
	TIMER2_Init();
 8000a9a:	f000 f8f3 	bl	8000c84 <TIMER2_Init>
	TIMER3_Init();
 8000a9e:	f000 f923 	bl	8000ce8 <TIMER3_Init>

	MX_USART2_UART_Init();
 8000aa2:	f000 f9cf 	bl	8000e44 <MX_USART2_UART_Init>

	HAL_TIM_Base_Start_IT(&htimer3);
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <main+0x38>)
 8000aa8:	f001 faf1 	bl	800208e <HAL_TIM_Base_Start_IT>

	if(HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_2) != HAL_OK){
 8000aac:	2104      	movs	r1, #4
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <main+0x3c>)
 8000ab0:	f001 fb3c 	bl	800212c <HAL_TIM_IC_Start_IT>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <main+0x36>
		Error_Handler();
 8000aba:	f000 f9e9 	bl	8000e90 <Error_Handler>
	}

	while(1);
 8000abe:	e7fe      	b.n	8000abe <main+0x36>
 8000ac0:	20000278 	.word	0x20000278
 8000ac4:	200002b8 	.word	0x200002b8

08000ac8 <SystemClock_Config>:

  	return 0;
}

void SystemClock_Config(uint8_t clock_freq){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b092      	sub	sp, #72	; 0x48
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	647b      	str	r3, [r7, #68]	; 0x44

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq){
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b30      	cmp	r3, #48	; 0x30
 8000aee:	d016      	beq.n	8000b1e <SystemClock_Config+0x56>
 8000af0:	2b40      	cmp	r3, #64	; 0x40
 8000af2:	d026      	beq.n	8000b42 <SystemClock_Config+0x7a>
 8000af4:	2b14      	cmp	r3, #20
 8000af6:	d000      	beq.n	8000afa <SystemClock_Config+0x32>

			break;

		default:

			return;
 8000af8:	e05d      	b.n	8000bb6 <SystemClock_Config+0xee>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL5;
 8000afa:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000b00:	230f      	movs	r3, #15
 8000b02:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b10:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000b1c:	e023      	b.n	8000b66 <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL12;
 8000b1e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000b24:	230f      	movs	r3, #15
 8000b26:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b34:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3a:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000b40:	e011      	b.n	8000b66 <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL16;
 8000b42:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b46:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b58:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5e:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000b64:	bf00      	nop

	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fe48 	bl	8001800 <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xb2>
		Error_Handler();
 8000b76:	f000 f98b 	bl	8000e90 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 f8bd 	bl	8001d00 <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xc8>
		Error_Handler();
 8000b8c:	f000 f980 	bl	8000e90 <Error_Handler>
	}

	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000b90:	f001 fa02 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8000b94:	4602      	mov	r2, r0
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <SystemClock_Config+0xf4>)
 8000b98:	fba3 2302 	umull	r2, r3, r3, r2
 8000b9c:	099b      	lsrs	r3, r3, #6
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fc77 	bl	8001492 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ba4:	2004      	movs	r0, #4
 8000ba6:	f000 fc81 	bl	80014ac <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	f000 fc44 	bl	800143e <HAL_NVIC_SetPriority>

	//You can generate a clock with MCO pins from different sources
	//HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);

}
 8000bb6:	3748      	adds	r7, #72	; 0x48
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	10624dd3 	.word	0x10624dd3

08000bc0 <GPIO_Init>:

void GPIO_Init(void){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef ledgpio;

	/* GPIOA clock enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <GPIO_Init+0x4c>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <GPIO_Init+0x4c>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <GPIO_Init+0x4c>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

    /* High Level GPIO Initialization */
	ledgpio.Pin = GPIO_PIN_5;
 8000bde:	2320      	movs	r3, #32
 8000be0:	60bb      	str	r3, [r7, #8]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
	ledgpio.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
	ledgpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2302      	movs	r3, #2
 8000bec:	617b      	str	r3, [r7, #20]

	/* Init GPIO */
	HAL_GPIO_Init(GPIOA, &ledgpio);
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <GPIO_Init+0x50>)
 8000bf6:	f000 fc81 	bl	80014fc <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	4804      	ldr	r0, [pc, #16]	; (8000c10 <GPIO_Init+0x50>)
 8000c00:	f000 fdce 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010800 	.word	0x40010800

08000c14 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

	if(! is_capture_done){
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d123      	bne.n	8000c6e <HAL_TIM_IC_CaptureCallback+0x5a>
		if(count == 1){
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d10c      	bne.n	8000c4a <HAL_TIM_IC_CaptureCallback+0x36>
			// Get the TIM Capture Compare Register value on runtime (rising edge)
			input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_2);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000c38:	6013      	str	r3, [r2, #0]
			count++;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c46:	701a      	strb	r2, [r3, #0]
			Frequency_Calculation();	// Compute the input frequency signal
			count = 1;
			is_capture_done = FALSE;
		}
	}
}
 8000c48:	e011      	b.n	8000c6e <HAL_TIM_IC_CaptureCallback+0x5a>
		} else if (count == 2){
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d10c      	bne.n	8000c6e <HAL_TIM_IC_CaptureCallback+0x5a>
			input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_2);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000c5c:	6053      	str	r3, [r2, #4]
			Frequency_Calculation();	// Compute the input frequency signal
 8000c5e:	f000 f85d 	bl	8000d1c <Frequency_Calculation>
			count = 1;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
			is_capture_done = FALSE;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000204 	.word	0x20000204
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	200001fc 	.word	0x200001fc

08000c84 <TIMER2_Init>:

void TIMER2_Init(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0

	TIM_IC_InitTypeDef sConfigIC;

	htimer2.Instance = TIM2;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <TIMER2_Init+0x60>)
 8000c8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c90:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;	// Timer up count
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <TIMER2_Init+0x60>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
	htimer2.Init.Period = 0xFFFF;					// TIM2 16 bits
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <TIMER2_Init+0x60>)
 8000c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9e:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 1;						// CNT_CLK = TIMx_CLK/(prescaler + 1)
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <TIMER2_Init+0x60>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_IC_Init(&htimer2) != HAL_OK){
 8000ca6:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <TIMER2_Init+0x60>)
 8000ca8:	f001 fa14 	bl	80020d4 <HAL_TIM_IC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <TIMER2_Init+0x32>
		Error_Handler();
 8000cb2:	f000 f8ed 	bl	8000e90 <Error_Handler>
	}

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;		// Capture in rising edge of the clock
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;			// Timer in direct mode
 8000cba:	2301      	movs	r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;						// Prescaler 1
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]

	// Enter an input signal on PA1 or use other timer as clock source (Digital clock generator on Proteus)
	if(HAL_TIM_IC_ConfigChannel(&htimer2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK){
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2204      	movs	r2, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <TIMER2_Init+0x60>)
 8000cce:	f001 fb9d 	bl	800240c <HAL_TIM_IC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <TIMER2_Init+0x58>
	    Error_Handler();
 8000cd8:	f000 f8da 	bl	8000e90 <Error_Handler>
	}

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200002b8 	.word	0x200002b8

08000ce8 <TIMER3_Init>:

void TIMER3_Init(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

	/* Create a time base for 10us with SYSCLK = 48MHz */
	htimer3.Instance = TIM3;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <TIMER3_Init+0x2c>)
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <TIMER3_Init+0x30>)
 8000cf0:	601a      	str	r2, [r3, #0]
	htimer3.Init.Prescaler = 16;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <TIMER3_Init+0x2c>)
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	605a      	str	r2, [r3, #4]
	htimer3.Init.Period = 40-1;	// The update event happens after one time gap or one time period
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <TIMER3_Init+0x2c>)
 8000cfa:	2227      	movs	r2, #39	; 0x27
 8000cfc:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer3) != HAL_OK){
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <TIMER3_Init+0x2c>)
 8000d00:	f001 f99a 	bl	8002038 <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <TIMER3_Init+0x26>
		Error_Handler();
 8000d0a:	f000 f8c1 	bl	8000e90 <Error_Handler>
	}

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000278 	.word	0x20000278
 8000d18:	40000400 	.word	0x40000400

08000d1c <Frequency_Calculation>:

void Frequency_Calculation(void){
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b08b      	sub	sp, #44	; 0x2c
 8000d20:	af00      	add	r7, sp, #0

	uint32_t capture_difference = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
	double timer2_cnt_freq = 0;
 8000d26:	f04f 0300 	mov.w	r3, #0
 8000d2a:	f04f 0400 	mov.w	r4, #0
 8000d2e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double timer2_cnt_res = 0;
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	f04f 0400 	mov.w	r4, #0
 8000d3a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double user_signal_time_period = 0;
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	f04f 0400 	mov.w	r4, #0
 8000d46:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double user_signal_freq = 0;
 8000d4a:	f04f 0300 	mov.w	r3, #0
 8000d4e:	f04f 0400 	mov.w	r4, #0
 8000d52:	e9c7 3400 	strd	r3, r4, [r7]

	if(input_captures[1] > input_captures[0])
 8000d56:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <Frequency_Calculation+0x110>)
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <Frequency_Calculation+0x110>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d906      	bls.n	8000d70 <Frequency_Calculation+0x54>
		capture_difference = input_captures[1] - input_captures[0];
 8000d62:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <Frequency_Calculation+0x110>)
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <Frequency_Calculation+0x110>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	e008      	b.n	8000d82 <Frequency_Calculation+0x66>
	else
		capture_difference = (0xFFFF - input_captures[0]) + input_captures[1];
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <Frequency_Calculation+0x110>)
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <Frequency_Calculation+0x110>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000d7e:	33ff      	adds	r3, #255	; 0xff
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24

	// CLK_TIM2 = 2*PCLK1 because RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2 (see clock tree)
	timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2) / (htimer2.Init.Prescaler + 1);
 8000d82:	f001 f913 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8000d86:	4603      	mov	r3, r0
 8000d88:	005a      	lsls	r2, r3, #1
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <Frequency_Calculation+0x114>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fb25 	bl	80003e4 <__aeabi_ui2d>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	timer2_cnt_res = 1/timer2_cnt_freq; // Period of CLK_TIM2
 8000da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4922      	ldr	r1, [pc, #136]	; (8000e34 <Frequency_Calculation+0x118>)
 8000dac:	f7ff fcbe 	bl	800072c <__aeabi_ddiv>
 8000db0:	4603      	mov	r3, r0
 8000db2:	460c      	mov	r4, r1
 8000db4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	user_signal_time_period = capture_difference * timer2_cnt_res; // Period of input signal on PA1
 8000db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dba:	f7ff fb13 	bl	80003e4 <__aeabi_ui2d>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4623      	mov	r3, r4
 8000dc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000dca:	f7ff fb85 	bl	80004d8 <__aeabi_dmul>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	460c      	mov	r4, r1
 8000dd2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	user_signal_freq = 1/user_signal_time_period; // Desired frequency
 8000dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dda:	f04f 0000 	mov.w	r0, #0
 8000dde:	4915      	ldr	r1, [pc, #84]	; (8000e34 <Frequency_Calculation+0x118>)
 8000de0:	f7ff fca4 	bl	800072c <__aeabi_ddiv>
 8000de4:	4603      	mov	r3, r0
 8000de6:	460c      	mov	r4, r1
 8000de8:	e9c7 3400 	strd	r3, r4, [r7]

	memset(usr_msg,0,sizeof(usr_msg));
 8000dec:	2264      	movs	r2, #100	; 0x64
 8000dee:	2100      	movs	r1, #0
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <Frequency_Calculation+0x11c>)
 8000df2:	f001 ff95 	bl	8002d20 <memset>
	sprintf(usr_msg, "Frequency of the signal applied = %.2f Hz\r\n", user_signal_freq);
 8000df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dfa:	4910      	ldr	r1, [pc, #64]	; (8000e3c <Frequency_Calculation+0x120>)
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <Frequency_Calculation+0x11c>)
 8000dfe:	f002 fbe7 	bl	80035d0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)usr_msg, strlen(usr_msg), HAL_MAX_DELAY);
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <Frequency_Calculation+0x11c>)
 8000e04:	f7ff f9a4 	bl	8000150 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	4909      	ldr	r1, [pc, #36]	; (8000e38 <Frequency_Calculation+0x11c>)
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <Frequency_Calculation+0x124>)
 8000e14:	f001 fd9c 	bl	8002950 <HAL_UART_Transmit>

	input_captures[0] = 0;
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <Frequency_Calculation+0x110>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
	input_captures[1] = 0;
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <Frequency_Calculation+0x110>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]

}
 8000e24:	bf00      	nop
 8000e26:	372c      	adds	r7, #44	; 0x2c
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	200001fc 	.word	0x200001fc
 8000e30:	200002b8 	.word	0x200002b8
 8000e34:	3ff00000 	.word	0x3ff00000
 8000e38:	20000214 	.word	0x20000214
 8000e3c:	08004dc8 	.word	0x08004dc8
 8000e40:	200002f8 	.word	0x200002f8

08000e44 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_USART2_UART_Init+0x44>)
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <MX_USART2_UART_Init+0x48>)
 8000e4c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART2_UART_Init+0x44>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART2_UART_Init+0x44>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_USART2_UART_Init+0x44>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x44>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_USART2_UART_Init+0x44>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART2_UART_Init+0x44>)
 8000e70:	2208      	movs	r2, #8
 8000e72:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_USART2_UART_Init+0x44>)
 8000e76:	f001 fd1e 	bl	80028b6 <HAL_UART_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART2_UART_Init+0x40>
		Error_Handler();
 8000e80:	f000 f806 	bl	8000e90 <Error_Handler>
  	}

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200002f8 	.word	0x200002f8
 8000e8c:	40004400 	.word	0x40004400

08000e90 <Error_Handler>:

void Error_Handler(void){
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	while(1);
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x4>
	...

08000e98 <HAL_MspInit>:
#include "stm32f1xx_hal_tim.h"

//Uncomment the #define HAL_TIM_MODULE_ENABLED in stm32f1xx_hal_conf.h
#include "stm32f1xx_hal_conf.h"

void HAL_MspInit(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

	__HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_MspInit+0x78>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_MspInit+0x78>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_MspInit+0x78>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]

	/* DISABLE: JTAG-DP Disabled and SW-DP Disabled */
	__HAL_AFIO_REMAP_SWJ_DISABLE();
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_MspInit+0x7c>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <HAL_MspInit+0x7c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6053      	str	r3, [r2, #4]

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 faa8 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x80>)
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_MspInit+0x80>)
 8000ede:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000ee2:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f06f 000b 	mvn.w	r0, #11
 8000eec:	f000 faa7 	bl	800143e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f06f 000a 	mvn.w	r0, #10
 8000ef8:	f000 faa1 	bl	800143e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	f06f 0009 	mvn.w	r0, #9
 8000f04:	f000 fa9b 	bl	800143e <HAL_NVIC_SetPriority>

}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	//1. enable the peripheral clock for the timer2 peripheral
	__HAL_RCC_AFIO_CLK_ENABLE();
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_TIM_IC_MspInit+0x80>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <HAL_TIM_IC_MspInit+0x80>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_TIM_IC_MspInit+0x80>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_TIM_IC_MspInit+0x80>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <HAL_TIM_IC_MspInit+0x80>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	61d3      	str	r3, [r2, #28]
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_TIM_IC_MspInit+0x80>)
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_TIM_IC_MspInit+0x80>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_TIM_IC_MspInit+0x80>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_TIM_IC_MspInit+0x80>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    //2. Configure a gpio to behave as timer2 channel 1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <HAL_TIM_IC_MspInit+0x84>)
 8000f80:	f000 fabc 	bl	80014fc <HAL_GPIO_Init>

    //3. nvic settings
    HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	210f      	movs	r1, #15
 8000f88:	201c      	movs	r0, #28
 8000f8a:	f000 fa58 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f8e:	201c      	movs	r0, #28
 8000f90:	f000 fa71 	bl	8001476 <HAL_NVIC_EnableIRQ>

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_TIM_Base_MspInit+0x38>)
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_TIM_Base_MspInit+0x38>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	61d3      	str	r3, [r2, #28]
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_TIM_Base_MspInit+0x38>)
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fc4:	201d      	movs	r0, #29
 8000fc6:	f000 fa56 	bl	8001476 <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	210f      	movs	r1, #15
 8000fce:	201d      	movs	r0, #29
 8000fd0:	f000 fa35 	bl	800143e <HAL_NVIC_SetPriority>

}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_UART_MspInit>:
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA and AFIO peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_UART_MspInit+0x94>)
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <HAL_UART_MspInit+0x94>)
 8000fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff2:	61d3      	str	r3, [r2, #28]
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <HAL_UART_MspInit+0x94>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <HAL_UART_MspInit+0x94>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_UART_MspInit+0x94>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_UART_MspInit+0x94>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_AFIO_CLK_ENABLE();
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_UART_MspInit+0x94>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_UART_MspInit+0x94>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_UART_MspInit+0x94>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 8001030:	2304      	movs	r3, #4
 8001032:	61bb      	str	r3, [r7, #24]
	gpio_uart.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
	gpio_uart.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2302      	movs	r3, #2
 800103e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4619      	mov	r1, r3
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <HAL_UART_MspInit+0x98>)
 8001048:	f000 fa58 	bl	80014fc <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;
 800104c:	2308      	movs	r3, #8
 800104e:	61bb      	str	r3, [r7, #24]
	//gpio_uart.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	4619      	mov	r1, r3
 8001056:	4808      	ldr	r0, [pc, #32]	; (8001078 <HAL_UART_MspInit+0x98>)
 8001058:	f000 fa50 	bl	80014fc <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800105c:	2026      	movs	r0, #38	; 0x26
 800105e:	f000 fa0a 	bl	8001476 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	210f      	movs	r1, #15
 8001066:	2026      	movs	r0, #38	; 0x26
 8001068:	f000 f9e9 	bl	800143e <HAL_NVIC_SetPriority>

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800

0800107c <SysTick_Handler>:
#include "stm32f1xx_it.h"

extern TIM_HandleTypeDef htimer2;
extern TIM_HandleTypeDef htimer3;

void SysTick_Handler(void){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8001080:	f000 f8ea 	bl	8001258 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001084:	f000 fa2e 	bl	80014e4 <HAL_SYSTICK_IRQHandler>

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&htimer2);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM2_IRQHandler+0x10>)
 8001092:	f001 f8b3 	bl	80021fc <HAL_TIM_IRQHandler>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200002b8 	.word	0x200002b8

080010a0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010a4:	2120      	movs	r1, #32
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <TIM3_IRQHandler+0x18>)
 80010a8:	f000 fb92 	bl	80017d0 <HAL_GPIO_TogglePin>
	HAL_TIM_IRQHandler(&htimer3);
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <TIM3_IRQHandler+0x1c>)
 80010ae:	f001 f8a5 	bl	80021fc <HAL_TIM_IRQHandler>

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40010800 	.word	0x40010800
 80010bc:	20000278 	.word	0x20000278

080010c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_sbrk+0x50>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x16>
		heap_end = &end;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <_sbrk+0x50>)
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <_sbrk+0x54>)
 80010d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <_sbrk+0x50>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <_sbrk+0x50>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	466a      	mov	r2, sp
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d907      	bls.n	80010fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010ea:	f001 fdef 	bl	8002ccc <__errno>
 80010ee:	4602      	mov	r2, r0
 80010f0:	230c      	movs	r3, #12
 80010f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	e006      	b.n	8001108 <_sbrk+0x48>
	}

	heap_end += incr;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <_sbrk+0x50>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a03      	ldr	r2, [pc, #12]	; (8001110 <_sbrk+0x50>)
 8001104:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000208 	.word	0x20000208
 8001114:	20000340 	.word	0x20000340

08001118 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <SystemInit+0x5c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <SystemInit+0x5c>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <SystemInit+0x5c>)
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4911      	ldr	r1, [pc, #68]	; (8001174 <SystemInit+0x5c>)
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <SystemInit+0x60>)
 8001130:	4013      	ands	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <SystemInit+0x5c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <SystemInit+0x5c>)
 800113a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <SystemInit+0x5c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SystemInit+0x5c>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <SystemInit+0x5c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <SystemInit+0x5c>)
 8001156:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800115a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SystemInit+0x5c>)
 800115e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001162:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SystemInit+0x64>)
 8001166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800116a:	609a      	str	r2, [r3, #8]
#endif 
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	f8ff0000 	.word	0xf8ff0000
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001180:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001182:	e003      	b.n	800118c <LoopCopyDataInit>

08001184 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001186:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001188:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800118a:	3104      	adds	r1, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800118c:	480a      	ldr	r0, [pc, #40]	; (80011b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001190:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001192:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001194:	d3f6      	bcc.n	8001184 <CopyDataInit>
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001198:	e002      	b.n	80011a0 <LoopFillZerobss>

0800119a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800119c:	f842 3b04 	str.w	r3, [r2], #4

080011a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011a4:	d3f9      	bcc.n	800119a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011a6:	f7ff ffb7 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011aa:	f001 fd95 	bl	8002cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ae:	f7ff fc6b 	bl	8000a88 <main>
  bx lr
 80011b2:	4770      	bx	lr
  ldr r3, =_sidata
 80011b4:	08005088 	.word	0x08005088
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80011c0:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80011c4:	20000340 	.word	0x20000340

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_Init+0x28>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_Init+0x28>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f923 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fe56 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f93b 	bl	8001492 <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f903 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000004 	.word	0x20000004
 8001250:	2000000c 	.word	0x2000000c
 8001254:	20000008 	.word	0x20000008

08001258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x1c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x20>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <HAL_IncTick+0x20>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	2000000c 	.word	0x2000000c
 8001278:	20000338 	.word	0x20000338

0800127c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <HAL_GetTick+0x10>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	20000338 	.word	0x20000338

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4906      	ldr	r1, [pc, #24]	; (8001328 <__NVIC_EnableIRQ+0x34>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff90 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff2d 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff42 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff90 	bl	8001380 <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5f 	bl	800132c <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff35 	bl	80012f4 <__NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa2 	bl	80013e4 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d106      	bne.n	80014c8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80014c6:	e005      	b.n	80014d4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80014ce:	f023 0304 	bic.w	r3, r3, #4
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80014e8:	f000 f802 	bl	80014f0 <HAL_SYSTICK_Callback>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	e121      	b.n	8001754 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001510:	2201      	movs	r2, #1
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8110 	bne.w	800174e <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b12      	cmp	r3, #18
 8001534:	d034      	beq.n	80015a0 <HAL_GPIO_Init+0xa4>
 8001536:	2b12      	cmp	r3, #18
 8001538:	d80d      	bhi.n	8001556 <HAL_GPIO_Init+0x5a>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d02b      	beq.n	8001596 <HAL_GPIO_Init+0x9a>
 800153e:	2b02      	cmp	r3, #2
 8001540:	d804      	bhi.n	800154c <HAL_GPIO_Init+0x50>
 8001542:	2b00      	cmp	r3, #0
 8001544:	d031      	beq.n	80015aa <HAL_GPIO_Init+0xae>
 8001546:	2b01      	cmp	r3, #1
 8001548:	d01c      	beq.n	8001584 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800154a:	e048      	b.n	80015de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800154c:	2b03      	cmp	r3, #3
 800154e:	d043      	beq.n	80015d8 <HAL_GPIO_Init+0xdc>
 8001550:	2b11      	cmp	r3, #17
 8001552:	d01b      	beq.n	800158c <HAL_GPIO_Init+0x90>
          break;
 8001554:	e043      	b.n	80015de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001556:	4a86      	ldr	r2, [pc, #536]	; (8001770 <HAL_GPIO_Init+0x274>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d026      	beq.n	80015aa <HAL_GPIO_Init+0xae>
 800155c:	4a84      	ldr	r2, [pc, #528]	; (8001770 <HAL_GPIO_Init+0x274>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d806      	bhi.n	8001570 <HAL_GPIO_Init+0x74>
 8001562:	4a84      	ldr	r2, [pc, #528]	; (8001774 <HAL_GPIO_Init+0x278>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d020      	beq.n	80015aa <HAL_GPIO_Init+0xae>
 8001568:	4a83      	ldr	r2, [pc, #524]	; (8001778 <HAL_GPIO_Init+0x27c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01d      	beq.n	80015aa <HAL_GPIO_Init+0xae>
          break;
 800156e:	e036      	b.n	80015de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001570:	4a82      	ldr	r2, [pc, #520]	; (800177c <HAL_GPIO_Init+0x280>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0xae>
 8001576:	4a82      	ldr	r2, [pc, #520]	; (8001780 <HAL_GPIO_Init+0x284>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d016      	beq.n	80015aa <HAL_GPIO_Init+0xae>
 800157c:	4a81      	ldr	r2, [pc, #516]	; (8001784 <HAL_GPIO_Init+0x288>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0xae>
          break;
 8001582:	e02c      	b.n	80015de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e028      	b.n	80015de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	3304      	adds	r3, #4
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	e023      	b.n	80015de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	3308      	adds	r3, #8
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e01e      	b.n	80015de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	330c      	adds	r3, #12
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e019      	b.n	80015de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015b2:	2304      	movs	r3, #4
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e012      	b.n	80015de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	611a      	str	r2, [r3, #16]
          break;
 80015ca:	e008      	b.n	80015de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	615a      	str	r2, [r3, #20]
          break;
 80015d6:	e002      	b.n	80015de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
          break;
 80015dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2bff      	cmp	r3, #255	; 0xff
 80015e2:	d801      	bhi.n	80015e8 <HAL_GPIO_Init+0xec>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	e001      	b.n	80015ec <HAL_GPIO_Init+0xf0>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3304      	adds	r3, #4
 80015ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2bff      	cmp	r3, #255	; 0xff
 80015f2:	d802      	bhi.n	80015fa <HAL_GPIO_Init+0xfe>
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x104>
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3b08      	subs	r3, #8
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	210f      	movs	r1, #15
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	6a39      	ldr	r1, [r7, #32]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	431a      	orrs	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8090 	beq.w	800174e <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800162e:	4b56      	ldr	r3, [pc, #344]	; (8001788 <HAL_GPIO_Init+0x28c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a55      	ldr	r2, [pc, #340]	; (8001788 <HAL_GPIO_Init+0x28c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b53      	ldr	r3, [pc, #332]	; (8001788 <HAL_GPIO_Init+0x28c>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001646:	4a51      	ldr	r2, [pc, #324]	; (800178c <HAL_GPIO_Init+0x290>)
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a48      	ldr	r2, [pc, #288]	; (8001790 <HAL_GPIO_Init+0x294>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00d      	beq.n	800168e <HAL_GPIO_Init+0x192>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_GPIO_Init+0x298>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d007      	beq.n	800168a <HAL_GPIO_Init+0x18e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a46      	ldr	r2, [pc, #280]	; (8001798 <HAL_GPIO_Init+0x29c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x18a>
 8001682:	2302      	movs	r3, #2
 8001684:	e004      	b.n	8001690 <HAL_GPIO_Init+0x194>
 8001686:	2303      	movs	r3, #3
 8001688:	e002      	b.n	8001690 <HAL_GPIO_Init+0x194>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x194>
 800168e:	2300      	movs	r3, #0
 8001690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001692:	f002 0203 	and.w	r2, r2, #3
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	4093      	lsls	r3, r2
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a0:	493a      	ldr	r1, [pc, #232]	; (800178c <HAL_GPIO_Init+0x290>)
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_GPIO_Init+0x2a0>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4937      	ldr	r1, [pc, #220]	; (800179c <HAL_GPIO_Init+0x2a0>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
 80016c6:	e006      	b.n	80016d6 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_GPIO_Init+0x2a0>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4932      	ldr	r1, [pc, #200]	; (800179c <HAL_GPIO_Init+0x2a0>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_GPIO_Init+0x2a0>)
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	492d      	ldr	r1, [pc, #180]	; (800179c <HAL_GPIO_Init+0x2a0>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
 80016ee:	e006      	b.n	80016fe <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_GPIO_Init+0x2a0>)
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	4928      	ldr	r1, [pc, #160]	; (800179c <HAL_GPIO_Init+0x2a0>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_GPIO_Init+0x2a0>)
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	4923      	ldr	r1, [pc, #140]	; (800179c <HAL_GPIO_Init+0x2a0>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_GPIO_Init+0x2a0>)
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	43db      	mvns	r3, r3
 8001720:	491e      	ldr	r1, [pc, #120]	; (800179c <HAL_GPIO_Init+0x2a0>)
 8001722:	4013      	ands	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_GPIO_Init+0x2a0>)
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	4919      	ldr	r1, [pc, #100]	; (800179c <HAL_GPIO_Init+0x2a0>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	60cb      	str	r3, [r1, #12]
 800173e:	e006      	b.n	800174e <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_GPIO_Init+0x2a0>)
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	43db      	mvns	r3, r3
 8001748:	4914      	ldr	r1, [pc, #80]	; (800179c <HAL_GPIO_Init+0x2a0>)
 800174a:	4013      	ands	r3, r2
 800174c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	3301      	adds	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	fa22 f303 	lsr.w	r3, r2, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	f47f aed6 	bne.w	8001510 <HAL_GPIO_Init+0x14>
  }
}
 8001764:	bf00      	nop
 8001766:	372c      	adds	r7, #44	; 0x2c
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	10210000 	.word	0x10210000
 8001774:	10110000 	.word	0x10110000
 8001778:	10120000 	.word	0x10120000
 800177c:	10310000 	.word	0x10310000
 8001780:	10320000 	.word	0x10320000
 8001784:	10220000 	.word	0x10220000
 8001788:	40021000 	.word	0x40021000
 800178c:	40010000 	.word	0x40010000
 8001790:	40010800 	.word	0x40010800
 8001794:	40010c00 	.word	0x40010c00
 8001798:	40011000 	.word	0x40011000
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	611a      	str	r2, [r3, #16]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e26c      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8087 	beq.w	800192e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001820:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d00c      	beq.n	8001846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800182c:	4b8f      	ldr	r3, [pc, #572]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d112      	bne.n	800185e <HAL_RCC_OscConfig+0x5e>
 8001838:	4b8c      	ldr	r3, [pc, #560]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d10b      	bne.n	800185e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001846:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d06c      	beq.n	800192c <HAL_RCC_OscConfig+0x12c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d168      	bne.n	800192c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e246      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x76>
 8001868:	4b80      	ldr	r3, [pc, #512]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a7f      	ldr	r2, [pc, #508]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e02e      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x98>
 800187e:	4b7b      	ldr	r3, [pc, #492]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7a      	ldr	r2, [pc, #488]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b78      	ldr	r3, [pc, #480]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a77      	ldr	r2, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e01d      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0xbc>
 80018a2:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a71      	ldr	r2, [pc, #452]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b6f      	ldr	r3, [pc, #444]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6e      	ldr	r2, [pc, #440]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 80018bc:	4b6b      	ldr	r3, [pc, #428]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6a      	ldr	r2, [pc, #424]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b68      	ldr	r3, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a67      	ldr	r2, [pc, #412]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fcce 	bl	800127c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fcca 	bl	800127c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e1fa      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0xe4>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fcba 	bl	800127c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fcb6 	bl	800127c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e1e6      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	4b53      	ldr	r3, [pc, #332]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x10c>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d063      	beq.n	8001a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193a:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001946:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	d11c      	bne.n	800198c <HAL_RCC_OscConfig+0x18c>
 8001952:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d116      	bne.n	800198c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e1ba      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4939      	ldr	r1, [pc, #228]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	e03a      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fc6f 	bl	800127c <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff fc6b 	bl	800127c <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e19b      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4927      	ldr	r1, [pc, #156]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fc4e 	bl	800127c <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff fc4a 	bl	800127c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e17a      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d03a      	beq.n	8001a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d019      	beq.n	8001a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fc2e 	bl	800127c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff fc2a 	bl	800127c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e15a      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f000 fada 	bl	8001ffc <RCC_Delay>
 8001a48:	e01c      	b.n	8001a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff fc14 	bl	800127c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a56:	e00f      	b.n	8001a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff fc10 	bl	800127c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d908      	bls.n	8001a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e140      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	42420000 	.word	0x42420000
 8001a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b9e      	ldr	r3, [pc, #632]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e9      	bne.n	8001a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a6 	beq.w	8001bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b97      	ldr	r3, [pc, #604]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10d      	bne.n	8001abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b94      	ldr	r3, [pc, #592]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a93      	ldr	r2, [pc, #588]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b91      	ldr	r3, [pc, #580]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b8e      	ldr	r3, [pc, #568]	; (8001cf8 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aca:	4b8b      	ldr	r3, [pc, #556]	; (8001cf8 <HAL_RCC_OscConfig+0x4f8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a8a      	ldr	r2, [pc, #552]	; (8001cf8 <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fbd1 	bl	800127c <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff fbcd 	bl	800127c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	; 0x64
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0fd      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4b81      	ldr	r3, [pc, #516]	; (8001cf8 <HAL_RCC_OscConfig+0x4f8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x312>
 8001b04:	4b7b      	ldr	r3, [pc, #492]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a7a      	ldr	r2, [pc, #488]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	e02d      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x334>
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a75      	ldr	r2, [pc, #468]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4a72      	ldr	r2, [pc, #456]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	6213      	str	r3, [r2, #32]
 8001b32:	e01c      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x356>
 8001b3c:	4b6d      	ldr	r3, [pc, #436]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a6c      	ldr	r2, [pc, #432]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	4b6a      	ldr	r3, [pc, #424]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a69      	ldr	r2, [pc, #420]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b56:	4b67      	ldr	r3, [pc, #412]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a66      	ldr	r2, [pc, #408]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	4b64      	ldr	r3, [pc, #400]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a63      	ldr	r2, [pc, #396]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d015      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fb81 	bl	800127c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fb7d 	bl	800127c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0ab      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ee      	beq.n	8001b7e <HAL_RCC_OscConfig+0x37e>
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fb6b 	bl	800127c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff fb67 	bl	800127c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e095      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd2:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a47      	ldr	r2, [pc, #284]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8081 	beq.w	8001cea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	4b42      	ldr	r3, [pc, #264]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d061      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d146      	bne.n	8001c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_RCC_OscConfig+0x4fc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fb3b 	bl	800127c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff fb37 	bl	800127c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e067      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d108      	bne.n	8001c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	492d      	ldr	r1, [pc, #180]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c44:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a19      	ldr	r1, [r3, #32]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	430b      	orrs	r3, r1
 8001c56:	4927      	ldr	r1, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_RCC_OscConfig+0x4fc>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb0b 	bl	800127c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff fb07 	bl	800127c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e037      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x46a>
 8001c88:	e02f      	b.n	8001cea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_RCC_OscConfig+0x4fc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff faf4 	bl	800127c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff faf0 	bl	800127c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e020      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x498>
 8001cb6:	e018      	b.n	8001cea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e013      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	42420060 	.word	0x42420060

08001d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d0      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4965      	ldr	r1, [pc, #404]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d040      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e073      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06b      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4936      	ldr	r1, [pc, #216]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff fa44 	bl	800127c <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff fa40 	bl	800127c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e053      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d210      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 f821 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e92:	4601      	mov	r1, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea0:	5cd3      	ldrb	r3, [r2, r3]
 8001ea2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1cc>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f9a2 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40022000 	.word	0x40022000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08004e08 	.word	0x08004e08
 8001ecc:	20000004 	.word	0x20000004
 8001ed0:	20000008 	.word	0x20000008

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001edc:	1d3c      	adds	r4, r7, #4
 8001ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d002      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x40>
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_GetSysClockFreq+0x46>
 8001f12:	e02d      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f16:	623b      	str	r3, [r7, #32]
      break;
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	0c9b      	lsrs	r3, r3, #18
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f26:	4413      	add	r3, r2
 8001f28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	0c5b      	lsrs	r3, r3, #17
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f46:	4413      	add	r3, r2
 8001f48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f52:	fb02 f203 	mul.w	r2, r2, r3
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	e004      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	623b      	str	r3, [r7, #32]
      break;
 8001f6e:	e002      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f72:	623b      	str	r3, [r7, #32]
      break;
 8001f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f76:	6a3b      	ldr	r3, [r7, #32]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc90      	pop	{r4, r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	08004df4 	.word	0x08004df4
 8001f88:	08004e04 	.word	0x08004e04
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	003d0900 	.word	0x003d0900

08001f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f9c:	4b02      	ldr	r3, [pc, #8]	; (8001fa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000004 	.word	0x20000004

08001fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb0:	f7ff fff2 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fb4:	4601      	mov	r1, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4a03      	ldr	r2, [pc, #12]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08004e18 	.word	0x08004e18

08001fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4601      	mov	r1, r0
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	0adb      	lsrs	r3, r3, #11
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08004e18 	.word	0x08004e18

08001ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <RCC_Delay+0x34>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <RCC_Delay+0x38>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0a5b      	lsrs	r3, r3, #9
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002018:	bf00      	nop
  }
  while (Delay --);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	60fa      	str	r2, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <RCC_Delay+0x1c>
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000004 	.word	0x20000004
 8002034:	10624dd3 	.word	0x10624dd3

08002038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e01d      	b.n	8002086 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe ffa0 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3304      	adds	r3, #4
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f000 fa88 	bl	800258c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b06      	cmp	r3, #6
 80020b6:	d007      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e01d      	b.n	8002122 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe ff0e 	bl	8000f1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3304      	adds	r3, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f000 fa3a 	bl	800258c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b0c      	cmp	r3, #12
 800213a:	d841      	bhi.n	80021c0 <HAL_TIM_IC_Start_IT+0x94>
 800213c:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <HAL_TIM_IC_Start_IT+0x18>)
 800213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002142:	bf00      	nop
 8002144:	08002179 	.word	0x08002179
 8002148:	080021c1 	.word	0x080021c1
 800214c:	080021c1 	.word	0x080021c1
 8002150:	080021c1 	.word	0x080021c1
 8002154:	0800218b 	.word	0x0800218b
 8002158:	080021c1 	.word	0x080021c1
 800215c:	080021c1 	.word	0x080021c1
 8002160:	080021c1 	.word	0x080021c1
 8002164:	0800219d 	.word	0x0800219d
 8002168:	080021c1 	.word	0x080021c1
 800216c:	080021c1 	.word	0x080021c1
 8002170:	080021c1 	.word	0x080021c1
 8002174:	080021af 	.word	0x080021af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0202 	orr.w	r2, r2, #2
 8002186:	60da      	str	r2, [r3, #12]
      break;
 8002188:	e01b      	b.n	80021c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0204 	orr.w	r2, r2, #4
 8002198:	60da      	str	r2, [r3, #12]
      break;
 800219a:	e012      	b.n	80021c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0208 	orr.w	r2, r2, #8
 80021aa:	60da      	str	r2, [r3, #12]
      break;
 80021ac:	e009      	b.n	80021c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0210 	orr.w	r2, r2, #16
 80021bc:	60da      	str	r2, [r3, #12]
      break;
 80021be:	e000      	b.n	80021c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80021c0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	6839      	ldr	r1, [r7, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fb3d 	bl	800284a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d007      	beq.n	80021f2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d122      	bne.n	8002258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b02      	cmp	r3, #2
 800221e:	d11b      	bne.n	8002258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0202 	mvn.w	r2, #2
 8002228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fce8 	bl	8000c14 <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f985 	bl	8002556 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f98b 	bl	8002568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d122      	bne.n	80022ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b04      	cmp	r3, #4
 8002272:	d11b      	bne.n	80022ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0204 	mvn.w	r2, #4
 800227c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fcbe 	bl	8000c14 <HAL_TIM_IC_CaptureCallback>
 8002298:	e005      	b.n	80022a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f95b 	bl	8002556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f961 	bl	8002568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d122      	bne.n	8002300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d11b      	bne.n	8002300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0208 	mvn.w	r2, #8
 80022d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2204      	movs	r2, #4
 80022d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fc94 	bl	8000c14 <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f931 	bl	8002556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f937 	bl	8002568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b10      	cmp	r3, #16
 800230c:	d122      	bne.n	8002354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b10      	cmp	r3, #16
 800231a:	d11b      	bne.n	8002354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0210 	mvn.w	r2, #16
 8002324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2208      	movs	r2, #8
 800232a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fc6a 	bl	8000c14 <HAL_TIM_IC_CaptureCallback>
 8002340:	e005      	b.n	800234e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f907 	bl	8002556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f90d 	bl	8002568 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10e      	bne.n	8002380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0201 	mvn.w	r2, #1
 8002378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8e2 	bl	8002544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	2b80      	cmp	r3, #128	; 0x80
 800238c:	d10e      	bne.n	80023ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d107      	bne.n	80023ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa7c 	bl	80028a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d10e      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d107      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8d1 	bl	800257a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d107      	bne.n	8002404 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0220 	mvn.w	r2, #32
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa47 	bl	8002892 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002422:	2302      	movs	r3, #2
 8002424:	e08a      	b.n	800253c <HAL_TIM_IC_ConfigChannel+0x130>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f000 f8f6 	bl	800263c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 020c 	bic.w	r2, r2, #12
 800245e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6999      	ldr	r1, [r3, #24]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	619a      	str	r2, [r3, #24]
 8002472:	e05a      	b.n	800252a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b04      	cmp	r3, #4
 8002478:	d11c      	bne.n	80024b4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f000 f92b 	bl	80026e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800249c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6999      	ldr	r1, [r3, #24]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	021a      	lsls	r2, r3, #8
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	619a      	str	r2, [r3, #24]
 80024b2:	e03a      	b.n	800252a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d11b      	bne.n	80024f2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f000 f947 	bl	800275c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 020c 	bic.w	r2, r2, #12
 80024dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69d9      	ldr	r1, [r3, #28]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	61da      	str	r2, [r3, #28]
 80024f0:	e01b      	b.n	800252a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	6819      	ldr	r1, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f000 f966 	bl	80027d2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002514:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69d9      	ldr	r1, [r3, #28]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	021a      	lsls	r2, r3, #8
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a25      	ldr	r2, [pc, #148]	; (8002634 <TIM_Base_SetConfig+0xa8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <TIM_Base_SetConfig+0x28>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025aa:	d003      	beq.n	80025b4 <TIM_Base_SetConfig+0x28>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a22      	ldr	r2, [pc, #136]	; (8002638 <TIM_Base_SetConfig+0xac>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d108      	bne.n	80025c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <TIM_Base_SetConfig+0xa8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <TIM_Base_SetConfig+0x52>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d003      	beq.n	80025de <TIM_Base_SetConfig+0x52>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a17      	ldr	r2, [pc, #92]	; (8002638 <TIM_Base_SetConfig+0xac>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d108      	bne.n	80025f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a07      	ldr	r2, [pc, #28]	; (8002634 <TIM_Base_SetConfig+0xa8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d103      	bne.n	8002624 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	615a      	str	r2, [r3, #20]
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40012c00 	.word	0x40012c00
 8002638:	40000400 	.word	0x40000400

0800263c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f023 0201 	bic.w	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <TIM_TI1_SetConfig+0xa0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <TIM_TI1_SetConfig+0x3e>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002670:	d003      	beq.n	800267a <TIM_TI1_SetConfig+0x3e>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <TIM_TI1_SetConfig+0xa4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <TIM_TI1_SetConfig+0x42>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <TIM_TI1_SetConfig+0x44>
 800267e:	2300      	movs	r3, #0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e003      	b.n	800269e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f023 030a 	bic.w	r3, r3, #10
 80026b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f003 030a 	and.w	r3, r3, #10
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	621a      	str	r2, [r3, #32]
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40000400 	.word	0x40000400

080026e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f023 0210 	bic.w	r2, r3, #16
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002722:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	031b      	lsls	r3, r3, #12
 8002728:	b29b      	uxth	r3, r3
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002736:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	621a      	str	r2, [r3, #32]
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f023 0303 	bic.w	r3, r3, #3
 8002788:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002798:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	621a      	str	r2, [r3, #32]
}
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b087      	sub	sp, #28
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002810:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	031b      	lsls	r3, r3, #12
 8002816:	b29b      	uxth	r3, r3
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002824:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	031b      	lsls	r3, r3, #12
 800282a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	621a      	str	r2, [r3, #32]
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2201      	movs	r2, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	43db      	mvns	r3, r3
 800286c:	401a      	ands	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	431a      	orrs	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	621a      	str	r2, [r3, #32]
}
 8002888:	bf00      	nop
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e03f      	b.n	8002948 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d106      	bne.n	80028e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7fe fb7f 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2224      	movs	r2, #36	; 0x24
 80028e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f90c 	bl	8002b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800290e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800291e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800292e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b20      	cmp	r3, #32
 800296e:	f040 8083 	bne.w	8002a78 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_UART_Transmit+0x2e>
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07b      	b.n	8002a7a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_UART_Transmit+0x40>
 800298c:	2302      	movs	r3, #2
 800298e:	e074      	b.n	8002a7a <HAL_UART_Transmit+0x12a>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2221      	movs	r2, #33	; 0x21
 80029a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80029a6:	f7fe fc69 	bl	800127c <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	88fa      	ldrh	r2, [r7, #6]
 80029b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029b8:	e042      	b.n	8002a40 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d0:	d122      	bne.n	8002a18 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f850 	bl	8002a82 <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e046      	b.n	8002a7a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029fe:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d103      	bne.n	8002a10 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	e017      	b.n	8002a40 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	3301      	adds	r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	e013      	b.n	8002a40 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f82d 	bl	8002a82 <UART_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e023      	b.n	8002a7a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	60ba      	str	r2, [r7, #8]
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1b7      	bne.n	80029ba <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	2140      	movs	r1, #64	; 0x40
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f814 	bl	8002a82 <UART_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e00a      	b.n	8002a7a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a92:	e02c      	b.n	8002aee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d028      	beq.n	8002aee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aa2:	f7fe fbeb 	bl	800127c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d21d      	bcs.n	8002aee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ac0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e00f      	b.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4013      	ands	r3, r2
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d0c3      	beq.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b52:	f023 030c 	bic.w	r3, r3, #12
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	68f9      	ldr	r1, [r7, #12]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <UART_SetConfig+0x1ac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d14e      	bne.n	8002c1e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b80:	f7ff fa28 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 8002b84:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	4a4a      	ldr	r2, [pc, #296]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	0119      	lsls	r1, r3, #4
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	441a      	add	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bbc:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2064      	movs	r0, #100	; 0x64
 8002bc6:	fb00 f303 	mul.w	r3, r0, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	3332      	adds	r3, #50	; 0x32
 8002bd0:	4a3d      	ldr	r2, [pc, #244]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bdc:	4419      	add	r1, r3
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009a      	lsls	r2, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf4:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2064      	movs	r0, #100	; 0x64
 8002bfe:	fb00 f303 	mul.w	r3, r0, r3
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	3332      	adds	r3, #50	; 0x32
 8002c08:	4a2f      	ldr	r2, [pc, #188]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	440a      	add	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002c1c:	e04d      	b.n	8002cba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c1e:	f7ff f9c5 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8002c22:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009a      	lsls	r2, r3, #2
 8002c2e:	441a      	add	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	0119      	lsls	r1, r3, #4
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009a      	lsls	r2, r3, #2
 8002c4e:	441a      	add	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002c5c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	2064      	movs	r0, #100	; 0x64
 8002c64:	fb00 f303 	mul.w	r3, r0, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	3332      	adds	r3, #50	; 0x32
 8002c6e:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7a:	4419      	add	r1, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002c94:	fba3 0302 	umull	r0, r3, r3, r2
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	2064      	movs	r0, #100	; 0x64
 8002c9c:	fb00 f303 	mul.w	r3, r0, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	3332      	adds	r3, #50	; 0x32
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <UART_SetConfig+0x1b0>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	440a      	add	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40013800 	.word	0x40013800
 8002cc8:	51eb851f 	.word	0x51eb851f

08002ccc <__errno>:
 8002ccc:	4b01      	ldr	r3, [pc, #4]	; (8002cd4 <__errno+0x8>)
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000010 	.word	0x20000010

08002cd8 <__libc_init_array>:
 8002cd8:	b570      	push	{r4, r5, r6, lr}
 8002cda:	2500      	movs	r5, #0
 8002cdc:	4e0c      	ldr	r6, [pc, #48]	; (8002d10 <__libc_init_array+0x38>)
 8002cde:	4c0d      	ldr	r4, [pc, #52]	; (8002d14 <__libc_init_array+0x3c>)
 8002ce0:	1ba4      	subs	r4, r4, r6
 8002ce2:	10a4      	asrs	r4, r4, #2
 8002ce4:	42a5      	cmp	r5, r4
 8002ce6:	d109      	bne.n	8002cfc <__libc_init_array+0x24>
 8002ce8:	f002 f860 	bl	8004dac <_init>
 8002cec:	2500      	movs	r5, #0
 8002cee:	4e0a      	ldr	r6, [pc, #40]	; (8002d18 <__libc_init_array+0x40>)
 8002cf0:	4c0a      	ldr	r4, [pc, #40]	; (8002d1c <__libc_init_array+0x44>)
 8002cf2:	1ba4      	subs	r4, r4, r6
 8002cf4:	10a4      	asrs	r4, r4, #2
 8002cf6:	42a5      	cmp	r5, r4
 8002cf8:	d105      	bne.n	8002d06 <__libc_init_array+0x2e>
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d00:	4798      	blx	r3
 8002d02:	3501      	adds	r5, #1
 8002d04:	e7ee      	b.n	8002ce4 <__libc_init_array+0xc>
 8002d06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d0a:	4798      	blx	r3
 8002d0c:	3501      	adds	r5, #1
 8002d0e:	e7f2      	b.n	8002cf6 <__libc_init_array+0x1e>
 8002d10:	08005080 	.word	0x08005080
 8002d14:	08005080 	.word	0x08005080
 8002d18:	08005080 	.word	0x08005080
 8002d1c:	08005084 	.word	0x08005084

08002d20 <memset>:
 8002d20:	4603      	mov	r3, r0
 8002d22:	4402      	add	r2, r0
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d100      	bne.n	8002d2a <memset+0xa>
 8002d28:	4770      	bx	lr
 8002d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2e:	e7f9      	b.n	8002d24 <memset+0x4>

08002d30 <__cvt>:
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d36:	461e      	mov	r6, r3
 8002d38:	bfbb      	ittet	lt
 8002d3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002d3e:	461e      	movlt	r6, r3
 8002d40:	2300      	movge	r3, #0
 8002d42:	232d      	movlt	r3, #45	; 0x2d
 8002d44:	b088      	sub	sp, #32
 8002d46:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002d48:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002d4c:	f027 0720 	bic.w	r7, r7, #32
 8002d50:	2f46      	cmp	r7, #70	; 0x46
 8002d52:	4614      	mov	r4, r2
 8002d54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002d56:	700b      	strb	r3, [r1, #0]
 8002d58:	d004      	beq.n	8002d64 <__cvt+0x34>
 8002d5a:	2f45      	cmp	r7, #69	; 0x45
 8002d5c:	d100      	bne.n	8002d60 <__cvt+0x30>
 8002d5e:	3501      	adds	r5, #1
 8002d60:	2302      	movs	r3, #2
 8002d62:	e000      	b.n	8002d66 <__cvt+0x36>
 8002d64:	2303      	movs	r3, #3
 8002d66:	aa07      	add	r2, sp, #28
 8002d68:	9204      	str	r2, [sp, #16]
 8002d6a:	aa06      	add	r2, sp, #24
 8002d6c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002d70:	e9cd 3500 	strd	r3, r5, [sp]
 8002d74:	4622      	mov	r2, r4
 8002d76:	4633      	mov	r3, r6
 8002d78:	f000 fcda 	bl	8003730 <_dtoa_r>
 8002d7c:	2f47      	cmp	r7, #71	; 0x47
 8002d7e:	4680      	mov	r8, r0
 8002d80:	d102      	bne.n	8002d88 <__cvt+0x58>
 8002d82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d84:	07db      	lsls	r3, r3, #31
 8002d86:	d526      	bpl.n	8002dd6 <__cvt+0xa6>
 8002d88:	2f46      	cmp	r7, #70	; 0x46
 8002d8a:	eb08 0905 	add.w	r9, r8, r5
 8002d8e:	d111      	bne.n	8002db4 <__cvt+0x84>
 8002d90:	f898 3000 	ldrb.w	r3, [r8]
 8002d94:	2b30      	cmp	r3, #48	; 0x30
 8002d96:	d10a      	bne.n	8002dae <__cvt+0x7e>
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4631      	mov	r1, r6
 8002da0:	f7fd fe02 	bl	80009a8 <__aeabi_dcmpeq>
 8002da4:	b918      	cbnz	r0, 8002dae <__cvt+0x7e>
 8002da6:	f1c5 0501 	rsb	r5, r5, #1
 8002daa:	f8ca 5000 	str.w	r5, [sl]
 8002dae:	f8da 3000 	ldr.w	r3, [sl]
 8002db2:	4499      	add	r9, r3
 8002db4:	2200      	movs	r2, #0
 8002db6:	2300      	movs	r3, #0
 8002db8:	4620      	mov	r0, r4
 8002dba:	4631      	mov	r1, r6
 8002dbc:	f7fd fdf4 	bl	80009a8 <__aeabi_dcmpeq>
 8002dc0:	b938      	cbnz	r0, 8002dd2 <__cvt+0xa2>
 8002dc2:	2230      	movs	r2, #48	; 0x30
 8002dc4:	9b07      	ldr	r3, [sp, #28]
 8002dc6:	454b      	cmp	r3, r9
 8002dc8:	d205      	bcs.n	8002dd6 <__cvt+0xa6>
 8002dca:	1c59      	adds	r1, r3, #1
 8002dcc:	9107      	str	r1, [sp, #28]
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e7f8      	b.n	8002dc4 <__cvt+0x94>
 8002dd2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002dd6:	4640      	mov	r0, r8
 8002dd8:	9b07      	ldr	r3, [sp, #28]
 8002dda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002ddc:	eba3 0308 	sub.w	r3, r3, r8
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	b008      	add	sp, #32
 8002de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002de8 <__exponent>:
 8002de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dea:	2900      	cmp	r1, #0
 8002dec:	bfb4      	ite	lt
 8002dee:	232d      	movlt	r3, #45	; 0x2d
 8002df0:	232b      	movge	r3, #43	; 0x2b
 8002df2:	4604      	mov	r4, r0
 8002df4:	bfb8      	it	lt
 8002df6:	4249      	neglt	r1, r1
 8002df8:	2909      	cmp	r1, #9
 8002dfa:	f804 2b02 	strb.w	r2, [r4], #2
 8002dfe:	7043      	strb	r3, [r0, #1]
 8002e00:	dd21      	ble.n	8002e46 <__exponent+0x5e>
 8002e02:	f10d 0307 	add.w	r3, sp, #7
 8002e06:	461f      	mov	r7, r3
 8002e08:	260a      	movs	r6, #10
 8002e0a:	fb91 f5f6 	sdiv	r5, r1, r6
 8002e0e:	fb06 1115 	mls	r1, r6, r5, r1
 8002e12:	2d09      	cmp	r5, #9
 8002e14:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002e18:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002e1c:	f103 32ff 	add.w	r2, r3, #4294967295
 8002e20:	4629      	mov	r1, r5
 8002e22:	dc09      	bgt.n	8002e38 <__exponent+0x50>
 8002e24:	3130      	adds	r1, #48	; 0x30
 8002e26:	3b02      	subs	r3, #2
 8002e28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002e2c:	42bb      	cmp	r3, r7
 8002e2e:	4622      	mov	r2, r4
 8002e30:	d304      	bcc.n	8002e3c <__exponent+0x54>
 8002e32:	1a10      	subs	r0, r2, r0
 8002e34:	b003      	add	sp, #12
 8002e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e38:	4613      	mov	r3, r2
 8002e3a:	e7e6      	b.n	8002e0a <__exponent+0x22>
 8002e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e40:	f804 2b01 	strb.w	r2, [r4], #1
 8002e44:	e7f2      	b.n	8002e2c <__exponent+0x44>
 8002e46:	2330      	movs	r3, #48	; 0x30
 8002e48:	4419      	add	r1, r3
 8002e4a:	7083      	strb	r3, [r0, #2]
 8002e4c:	1d02      	adds	r2, r0, #4
 8002e4e:	70c1      	strb	r1, [r0, #3]
 8002e50:	e7ef      	b.n	8002e32 <__exponent+0x4a>
	...

08002e54 <_printf_float>:
 8002e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e58:	b091      	sub	sp, #68	; 0x44
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002e5e:	4693      	mov	fp, r2
 8002e60:	461e      	mov	r6, r3
 8002e62:	4605      	mov	r5, r0
 8002e64:	f001 fa18 	bl	8004298 <_localeconv_r>
 8002e68:	6803      	ldr	r3, [r0, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e6e:	f7fd f96f 	bl	8000150 <strlen>
 8002e72:	2300      	movs	r3, #0
 8002e74:	930e      	str	r3, [sp, #56]	; 0x38
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	900a      	str	r0, [sp, #40]	; 0x28
 8002e7a:	3307      	adds	r3, #7
 8002e7c:	f023 0307 	bic.w	r3, r3, #7
 8002e80:	f103 0208 	add.w	r2, r3, #8
 8002e84:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002e88:	f8d4 a000 	ldr.w	sl, [r4]
 8002e8c:	603a      	str	r2, [r7, #0]
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002e96:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	4ba6      	ldr	r3, [pc, #664]	; (8003140 <_printf_float+0x2ec>)
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002eaa:	f7fd fdaf 	bl	8000a0c <__aeabi_dcmpun>
 8002eae:	bb68      	cbnz	r0, 8002f0c <_printf_float+0xb8>
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	4ba2      	ldr	r3, [pc, #648]	; (8003140 <_printf_float+0x2ec>)
 8002eb6:	4638      	mov	r0, r7
 8002eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002eba:	f7fd fd89 	bl	80009d0 <__aeabi_dcmple>
 8002ebe:	bb28      	cbnz	r0, 8002f0c <_printf_float+0xb8>
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	f7fd fd78 	bl	80009bc <__aeabi_dcmplt>
 8002ecc:	b110      	cbz	r0, 8002ed4 <_printf_float+0x80>
 8002ece:	232d      	movs	r3, #45	; 0x2d
 8002ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ed4:	4f9b      	ldr	r7, [pc, #620]	; (8003144 <_printf_float+0x2f0>)
 8002ed6:	4b9c      	ldr	r3, [pc, #624]	; (8003148 <_printf_float+0x2f4>)
 8002ed8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002edc:	bf98      	it	ls
 8002ede:	461f      	movls	r7, r3
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	f04f 0900 	mov.w	r9, #0
 8002ee6:	6123      	str	r3, [r4, #16]
 8002ee8:	f02a 0304 	bic.w	r3, sl, #4
 8002eec:	6023      	str	r3, [r4, #0]
 8002eee:	9600      	str	r6, [sp, #0]
 8002ef0:	465b      	mov	r3, fp
 8002ef2:	aa0f      	add	r2, sp, #60	; 0x3c
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f000 f9e2 	bl	80032c0 <_printf_common>
 8002efc:	3001      	adds	r0, #1
 8002efe:	f040 8090 	bne.w	8003022 <_printf_float+0x1ce>
 8002f02:	f04f 30ff 	mov.w	r0, #4294967295
 8002f06:	b011      	add	sp, #68	; 0x44
 8002f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f0c:	463a      	mov	r2, r7
 8002f0e:	464b      	mov	r3, r9
 8002f10:	4638      	mov	r0, r7
 8002f12:	4649      	mov	r1, r9
 8002f14:	f7fd fd7a 	bl	8000a0c <__aeabi_dcmpun>
 8002f18:	b110      	cbz	r0, 8002f20 <_printf_float+0xcc>
 8002f1a:	4f8c      	ldr	r7, [pc, #560]	; (800314c <_printf_float+0x2f8>)
 8002f1c:	4b8c      	ldr	r3, [pc, #560]	; (8003150 <_printf_float+0x2fc>)
 8002f1e:	e7db      	b.n	8002ed8 <_printf_float+0x84>
 8002f20:	6863      	ldr	r3, [r4, #4]
 8002f22:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002f26:	1c59      	adds	r1, r3, #1
 8002f28:	a80d      	add	r0, sp, #52	; 0x34
 8002f2a:	a90e      	add	r1, sp, #56	; 0x38
 8002f2c:	d140      	bne.n	8002fb0 <_printf_float+0x15c>
 8002f2e:	2306      	movs	r3, #6
 8002f30:	6063      	str	r3, [r4, #4]
 8002f32:	f04f 0c00 	mov.w	ip, #0
 8002f36:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002f3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002f3e:	6863      	ldr	r3, [r4, #4]
 8002f40:	6022      	str	r2, [r4, #0]
 8002f42:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	463a      	mov	r2, r7
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002f50:	4628      	mov	r0, r5
 8002f52:	f7ff feed 	bl	8002d30 <__cvt>
 8002f56:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002f5a:	2b47      	cmp	r3, #71	; 0x47
 8002f5c:	4607      	mov	r7, r0
 8002f5e:	d109      	bne.n	8002f74 <_printf_float+0x120>
 8002f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f62:	1cd8      	adds	r0, r3, #3
 8002f64:	db02      	blt.n	8002f6c <_printf_float+0x118>
 8002f66:	6862      	ldr	r2, [r4, #4]
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	dd47      	ble.n	8002ffc <_printf_float+0x1a8>
 8002f6c:	f1a8 0802 	sub.w	r8, r8, #2
 8002f70:	fa5f f888 	uxtb.w	r8, r8
 8002f74:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002f78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f7a:	d824      	bhi.n	8002fc6 <_printf_float+0x172>
 8002f7c:	3901      	subs	r1, #1
 8002f7e:	4642      	mov	r2, r8
 8002f80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f84:	910d      	str	r1, [sp, #52]	; 0x34
 8002f86:	f7ff ff2f 	bl	8002de8 <__exponent>
 8002f8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f8c:	4681      	mov	r9, r0
 8002f8e:	1813      	adds	r3, r2, r0
 8002f90:	2a01      	cmp	r2, #1
 8002f92:	6123      	str	r3, [r4, #16]
 8002f94:	dc02      	bgt.n	8002f9c <_printf_float+0x148>
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	07d1      	lsls	r1, r2, #31
 8002f9a:	d501      	bpl.n	8002fa0 <_printf_float+0x14c>
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	6123      	str	r3, [r4, #16]
 8002fa0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0a2      	beq.n	8002eee <_printf_float+0x9a>
 8002fa8:	232d      	movs	r3, #45	; 0x2d
 8002faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fae:	e79e      	b.n	8002eee <_printf_float+0x9a>
 8002fb0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002fb4:	f000 816e 	beq.w	8003294 <_printf_float+0x440>
 8002fb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002fbc:	d1b9      	bne.n	8002f32 <_printf_float+0xde>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1b7      	bne.n	8002f32 <_printf_float+0xde>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e7b4      	b.n	8002f30 <_printf_float+0xdc>
 8002fc6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002fca:	d119      	bne.n	8003000 <_printf_float+0x1ac>
 8002fcc:	2900      	cmp	r1, #0
 8002fce:	6863      	ldr	r3, [r4, #4]
 8002fd0:	dd0c      	ble.n	8002fec <_printf_float+0x198>
 8002fd2:	6121      	str	r1, [r4, #16]
 8002fd4:	b913      	cbnz	r3, 8002fdc <_printf_float+0x188>
 8002fd6:	6822      	ldr	r2, [r4, #0]
 8002fd8:	07d2      	lsls	r2, r2, #31
 8002fda:	d502      	bpl.n	8002fe2 <_printf_float+0x18e>
 8002fdc:	3301      	adds	r3, #1
 8002fde:	440b      	add	r3, r1
 8002fe0:	6123      	str	r3, [r4, #16]
 8002fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fe4:	f04f 0900 	mov.w	r9, #0
 8002fe8:	65a3      	str	r3, [r4, #88]	; 0x58
 8002fea:	e7d9      	b.n	8002fa0 <_printf_float+0x14c>
 8002fec:	b913      	cbnz	r3, 8002ff4 <_printf_float+0x1a0>
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	07d0      	lsls	r0, r2, #31
 8002ff2:	d501      	bpl.n	8002ff8 <_printf_float+0x1a4>
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	e7f3      	b.n	8002fe0 <_printf_float+0x18c>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e7f1      	b.n	8002fe0 <_printf_float+0x18c>
 8002ffc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003000:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003004:	4293      	cmp	r3, r2
 8003006:	db05      	blt.n	8003014 <_printf_float+0x1c0>
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	6123      	str	r3, [r4, #16]
 800300c:	07d1      	lsls	r1, r2, #31
 800300e:	d5e8      	bpl.n	8002fe2 <_printf_float+0x18e>
 8003010:	3301      	adds	r3, #1
 8003012:	e7e5      	b.n	8002fe0 <_printf_float+0x18c>
 8003014:	2b00      	cmp	r3, #0
 8003016:	bfcc      	ite	gt
 8003018:	2301      	movgt	r3, #1
 800301a:	f1c3 0302 	rsble	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	e7de      	b.n	8002fe0 <_printf_float+0x18c>
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	055a      	lsls	r2, r3, #21
 8003026:	d407      	bmi.n	8003038 <_printf_float+0x1e4>
 8003028:	6923      	ldr	r3, [r4, #16]
 800302a:	463a      	mov	r2, r7
 800302c:	4659      	mov	r1, fp
 800302e:	4628      	mov	r0, r5
 8003030:	47b0      	blx	r6
 8003032:	3001      	adds	r0, #1
 8003034:	d129      	bne.n	800308a <_printf_float+0x236>
 8003036:	e764      	b.n	8002f02 <_printf_float+0xae>
 8003038:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800303c:	f240 80d7 	bls.w	80031ee <_printf_float+0x39a>
 8003040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003044:	2200      	movs	r2, #0
 8003046:	2300      	movs	r3, #0
 8003048:	f7fd fcae 	bl	80009a8 <__aeabi_dcmpeq>
 800304c:	b388      	cbz	r0, 80030b2 <_printf_float+0x25e>
 800304e:	2301      	movs	r3, #1
 8003050:	4a40      	ldr	r2, [pc, #256]	; (8003154 <_printf_float+0x300>)
 8003052:	4659      	mov	r1, fp
 8003054:	4628      	mov	r0, r5
 8003056:	47b0      	blx	r6
 8003058:	3001      	adds	r0, #1
 800305a:	f43f af52 	beq.w	8002f02 <_printf_float+0xae>
 800305e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003062:	429a      	cmp	r2, r3
 8003064:	db02      	blt.n	800306c <_printf_float+0x218>
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	07d8      	lsls	r0, r3, #31
 800306a:	d50e      	bpl.n	800308a <_printf_float+0x236>
 800306c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003070:	4659      	mov	r1, fp
 8003072:	4628      	mov	r0, r5
 8003074:	47b0      	blx	r6
 8003076:	3001      	adds	r0, #1
 8003078:	f43f af43 	beq.w	8002f02 <_printf_float+0xae>
 800307c:	2700      	movs	r7, #0
 800307e:	f104 081a 	add.w	r8, r4, #26
 8003082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003084:	3b01      	subs	r3, #1
 8003086:	42bb      	cmp	r3, r7
 8003088:	dc09      	bgt.n	800309e <_printf_float+0x24a>
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	079f      	lsls	r7, r3, #30
 800308e:	f100 80fd 	bmi.w	800328c <_printf_float+0x438>
 8003092:	68e0      	ldr	r0, [r4, #12]
 8003094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003096:	4298      	cmp	r0, r3
 8003098:	bfb8      	it	lt
 800309a:	4618      	movlt	r0, r3
 800309c:	e733      	b.n	8002f06 <_printf_float+0xb2>
 800309e:	2301      	movs	r3, #1
 80030a0:	4642      	mov	r2, r8
 80030a2:	4659      	mov	r1, fp
 80030a4:	4628      	mov	r0, r5
 80030a6:	47b0      	blx	r6
 80030a8:	3001      	adds	r0, #1
 80030aa:	f43f af2a 	beq.w	8002f02 <_printf_float+0xae>
 80030ae:	3701      	adds	r7, #1
 80030b0:	e7e7      	b.n	8003082 <_printf_float+0x22e>
 80030b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	dc2b      	bgt.n	8003110 <_printf_float+0x2bc>
 80030b8:	2301      	movs	r3, #1
 80030ba:	4a26      	ldr	r2, [pc, #152]	; (8003154 <_printf_float+0x300>)
 80030bc:	4659      	mov	r1, fp
 80030be:	4628      	mov	r0, r5
 80030c0:	47b0      	blx	r6
 80030c2:	3001      	adds	r0, #1
 80030c4:	f43f af1d 	beq.w	8002f02 <_printf_float+0xae>
 80030c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030ca:	b923      	cbnz	r3, 80030d6 <_printf_float+0x282>
 80030cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030ce:	b913      	cbnz	r3, 80030d6 <_printf_float+0x282>
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	07d9      	lsls	r1, r3, #31
 80030d4:	d5d9      	bpl.n	800308a <_printf_float+0x236>
 80030d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030da:	4659      	mov	r1, fp
 80030dc:	4628      	mov	r0, r5
 80030de:	47b0      	blx	r6
 80030e0:	3001      	adds	r0, #1
 80030e2:	f43f af0e 	beq.w	8002f02 <_printf_float+0xae>
 80030e6:	f04f 0800 	mov.w	r8, #0
 80030ea:	f104 091a 	add.w	r9, r4, #26
 80030ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030f0:	425b      	negs	r3, r3
 80030f2:	4543      	cmp	r3, r8
 80030f4:	dc01      	bgt.n	80030fa <_printf_float+0x2a6>
 80030f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030f8:	e797      	b.n	800302a <_printf_float+0x1d6>
 80030fa:	2301      	movs	r3, #1
 80030fc:	464a      	mov	r2, r9
 80030fe:	4659      	mov	r1, fp
 8003100:	4628      	mov	r0, r5
 8003102:	47b0      	blx	r6
 8003104:	3001      	adds	r0, #1
 8003106:	f43f aefc 	beq.w	8002f02 <_printf_float+0xae>
 800310a:	f108 0801 	add.w	r8, r8, #1
 800310e:	e7ee      	b.n	80030ee <_printf_float+0x29a>
 8003110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003114:	429a      	cmp	r2, r3
 8003116:	bfa8      	it	ge
 8003118:	461a      	movge	r2, r3
 800311a:	2a00      	cmp	r2, #0
 800311c:	4690      	mov	r8, r2
 800311e:	dd07      	ble.n	8003130 <_printf_float+0x2dc>
 8003120:	4613      	mov	r3, r2
 8003122:	4659      	mov	r1, fp
 8003124:	463a      	mov	r2, r7
 8003126:	4628      	mov	r0, r5
 8003128:	47b0      	blx	r6
 800312a:	3001      	adds	r0, #1
 800312c:	f43f aee9 	beq.w	8002f02 <_printf_float+0xae>
 8003130:	f104 031a 	add.w	r3, r4, #26
 8003134:	f04f 0a00 	mov.w	sl, #0
 8003138:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800313c:	930b      	str	r3, [sp, #44]	; 0x2c
 800313e:	e015      	b.n	800316c <_printf_float+0x318>
 8003140:	7fefffff 	.word	0x7fefffff
 8003144:	08004e24 	.word	0x08004e24
 8003148:	08004e20 	.word	0x08004e20
 800314c:	08004e2c 	.word	0x08004e2c
 8003150:	08004e28 	.word	0x08004e28
 8003154:	08004e30 	.word	0x08004e30
 8003158:	2301      	movs	r3, #1
 800315a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800315c:	4659      	mov	r1, fp
 800315e:	4628      	mov	r0, r5
 8003160:	47b0      	blx	r6
 8003162:	3001      	adds	r0, #1
 8003164:	f43f aecd 	beq.w	8002f02 <_printf_float+0xae>
 8003168:	f10a 0a01 	add.w	sl, sl, #1
 800316c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003170:	eba9 0308 	sub.w	r3, r9, r8
 8003174:	4553      	cmp	r3, sl
 8003176:	dcef      	bgt.n	8003158 <_printf_float+0x304>
 8003178:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800317c:	429a      	cmp	r2, r3
 800317e:	444f      	add	r7, r9
 8003180:	db14      	blt.n	80031ac <_printf_float+0x358>
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	07da      	lsls	r2, r3, #31
 8003186:	d411      	bmi.n	80031ac <_printf_float+0x358>
 8003188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800318a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800318c:	eba3 0209 	sub.w	r2, r3, r9
 8003190:	eba3 0901 	sub.w	r9, r3, r1
 8003194:	4591      	cmp	r9, r2
 8003196:	bfa8      	it	ge
 8003198:	4691      	movge	r9, r2
 800319a:	f1b9 0f00 	cmp.w	r9, #0
 800319e:	dc0d      	bgt.n	80031bc <_printf_float+0x368>
 80031a0:	2700      	movs	r7, #0
 80031a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031a6:	f104 081a 	add.w	r8, r4, #26
 80031aa:	e018      	b.n	80031de <_printf_float+0x38a>
 80031ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031b0:	4659      	mov	r1, fp
 80031b2:	4628      	mov	r0, r5
 80031b4:	47b0      	blx	r6
 80031b6:	3001      	adds	r0, #1
 80031b8:	d1e6      	bne.n	8003188 <_printf_float+0x334>
 80031ba:	e6a2      	b.n	8002f02 <_printf_float+0xae>
 80031bc:	464b      	mov	r3, r9
 80031be:	463a      	mov	r2, r7
 80031c0:	4659      	mov	r1, fp
 80031c2:	4628      	mov	r0, r5
 80031c4:	47b0      	blx	r6
 80031c6:	3001      	adds	r0, #1
 80031c8:	d1ea      	bne.n	80031a0 <_printf_float+0x34c>
 80031ca:	e69a      	b.n	8002f02 <_printf_float+0xae>
 80031cc:	2301      	movs	r3, #1
 80031ce:	4642      	mov	r2, r8
 80031d0:	4659      	mov	r1, fp
 80031d2:	4628      	mov	r0, r5
 80031d4:	47b0      	blx	r6
 80031d6:	3001      	adds	r0, #1
 80031d8:	f43f ae93 	beq.w	8002f02 <_printf_float+0xae>
 80031dc:	3701      	adds	r7, #1
 80031de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	eba3 0309 	sub.w	r3, r3, r9
 80031e8:	42bb      	cmp	r3, r7
 80031ea:	dcef      	bgt.n	80031cc <_printf_float+0x378>
 80031ec:	e74d      	b.n	800308a <_printf_float+0x236>
 80031ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031f0:	2a01      	cmp	r2, #1
 80031f2:	dc01      	bgt.n	80031f8 <_printf_float+0x3a4>
 80031f4:	07db      	lsls	r3, r3, #31
 80031f6:	d538      	bpl.n	800326a <_printf_float+0x416>
 80031f8:	2301      	movs	r3, #1
 80031fa:	463a      	mov	r2, r7
 80031fc:	4659      	mov	r1, fp
 80031fe:	4628      	mov	r0, r5
 8003200:	47b0      	blx	r6
 8003202:	3001      	adds	r0, #1
 8003204:	f43f ae7d 	beq.w	8002f02 <_printf_float+0xae>
 8003208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800320c:	4659      	mov	r1, fp
 800320e:	4628      	mov	r0, r5
 8003210:	47b0      	blx	r6
 8003212:	3001      	adds	r0, #1
 8003214:	f107 0701 	add.w	r7, r7, #1
 8003218:	f43f ae73 	beq.w	8002f02 <_printf_float+0xae>
 800321c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003222:	2200      	movs	r2, #0
 8003224:	f103 38ff 	add.w	r8, r3, #4294967295
 8003228:	2300      	movs	r3, #0
 800322a:	f7fd fbbd 	bl	80009a8 <__aeabi_dcmpeq>
 800322e:	b9c0      	cbnz	r0, 8003262 <_printf_float+0x40e>
 8003230:	4643      	mov	r3, r8
 8003232:	463a      	mov	r2, r7
 8003234:	4659      	mov	r1, fp
 8003236:	4628      	mov	r0, r5
 8003238:	47b0      	blx	r6
 800323a:	3001      	adds	r0, #1
 800323c:	d10d      	bne.n	800325a <_printf_float+0x406>
 800323e:	e660      	b.n	8002f02 <_printf_float+0xae>
 8003240:	2301      	movs	r3, #1
 8003242:	4642      	mov	r2, r8
 8003244:	4659      	mov	r1, fp
 8003246:	4628      	mov	r0, r5
 8003248:	47b0      	blx	r6
 800324a:	3001      	adds	r0, #1
 800324c:	f43f ae59 	beq.w	8002f02 <_printf_float+0xae>
 8003250:	3701      	adds	r7, #1
 8003252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003254:	3b01      	subs	r3, #1
 8003256:	42bb      	cmp	r3, r7
 8003258:	dcf2      	bgt.n	8003240 <_printf_float+0x3ec>
 800325a:	464b      	mov	r3, r9
 800325c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003260:	e6e4      	b.n	800302c <_printf_float+0x1d8>
 8003262:	2700      	movs	r7, #0
 8003264:	f104 081a 	add.w	r8, r4, #26
 8003268:	e7f3      	b.n	8003252 <_printf_float+0x3fe>
 800326a:	2301      	movs	r3, #1
 800326c:	e7e1      	b.n	8003232 <_printf_float+0x3de>
 800326e:	2301      	movs	r3, #1
 8003270:	4642      	mov	r2, r8
 8003272:	4659      	mov	r1, fp
 8003274:	4628      	mov	r0, r5
 8003276:	47b0      	blx	r6
 8003278:	3001      	adds	r0, #1
 800327a:	f43f ae42 	beq.w	8002f02 <_printf_float+0xae>
 800327e:	3701      	adds	r7, #1
 8003280:	68e3      	ldr	r3, [r4, #12]
 8003282:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	42bb      	cmp	r3, r7
 8003288:	dcf1      	bgt.n	800326e <_printf_float+0x41a>
 800328a:	e702      	b.n	8003092 <_printf_float+0x23e>
 800328c:	2700      	movs	r7, #0
 800328e:	f104 0819 	add.w	r8, r4, #25
 8003292:	e7f5      	b.n	8003280 <_printf_float+0x42c>
 8003294:	2b00      	cmp	r3, #0
 8003296:	f43f ae94 	beq.w	8002fc2 <_printf_float+0x16e>
 800329a:	f04f 0c00 	mov.w	ip, #0
 800329e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80032a2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80032a6:	6022      	str	r2, [r4, #0]
 80032a8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80032ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	463a      	mov	r2, r7
 80032b4:	464b      	mov	r3, r9
 80032b6:	4628      	mov	r0, r5
 80032b8:	f7ff fd3a 	bl	8002d30 <__cvt>
 80032bc:	4607      	mov	r7, r0
 80032be:	e64f      	b.n	8002f60 <_printf_float+0x10c>

080032c0 <_printf_common>:
 80032c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c4:	4691      	mov	r9, r2
 80032c6:	461f      	mov	r7, r3
 80032c8:	688a      	ldr	r2, [r1, #8]
 80032ca:	690b      	ldr	r3, [r1, #16]
 80032cc:	4606      	mov	r6, r0
 80032ce:	4293      	cmp	r3, r2
 80032d0:	bfb8      	it	lt
 80032d2:	4613      	movlt	r3, r2
 80032d4:	f8c9 3000 	str.w	r3, [r9]
 80032d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032dc:	460c      	mov	r4, r1
 80032de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032e2:	b112      	cbz	r2, 80032ea <_printf_common+0x2a>
 80032e4:	3301      	adds	r3, #1
 80032e6:	f8c9 3000 	str.w	r3, [r9]
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	0699      	lsls	r1, r3, #26
 80032ee:	bf42      	ittt	mi
 80032f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032f4:	3302      	addmi	r3, #2
 80032f6:	f8c9 3000 	strmi.w	r3, [r9]
 80032fa:	6825      	ldr	r5, [r4, #0]
 80032fc:	f015 0506 	ands.w	r5, r5, #6
 8003300:	d107      	bne.n	8003312 <_printf_common+0x52>
 8003302:	f104 0a19 	add.w	sl, r4, #25
 8003306:	68e3      	ldr	r3, [r4, #12]
 8003308:	f8d9 2000 	ldr.w	r2, [r9]
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	42ab      	cmp	r3, r5
 8003310:	dc29      	bgt.n	8003366 <_printf_common+0xa6>
 8003312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	3300      	adds	r3, #0
 800331a:	bf18      	it	ne
 800331c:	2301      	movne	r3, #1
 800331e:	0692      	lsls	r2, r2, #26
 8003320:	d42e      	bmi.n	8003380 <_printf_common+0xc0>
 8003322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003326:	4639      	mov	r1, r7
 8003328:	4630      	mov	r0, r6
 800332a:	47c0      	blx	r8
 800332c:	3001      	adds	r0, #1
 800332e:	d021      	beq.n	8003374 <_printf_common+0xb4>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	68e5      	ldr	r5, [r4, #12]
 8003334:	f003 0306 	and.w	r3, r3, #6
 8003338:	2b04      	cmp	r3, #4
 800333a:	bf18      	it	ne
 800333c:	2500      	movne	r5, #0
 800333e:	f8d9 2000 	ldr.w	r2, [r9]
 8003342:	f04f 0900 	mov.w	r9, #0
 8003346:	bf08      	it	eq
 8003348:	1aad      	subeq	r5, r5, r2
 800334a:	68a3      	ldr	r3, [r4, #8]
 800334c:	6922      	ldr	r2, [r4, #16]
 800334e:	bf08      	it	eq
 8003350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003354:	4293      	cmp	r3, r2
 8003356:	bfc4      	itt	gt
 8003358:	1a9b      	subgt	r3, r3, r2
 800335a:	18ed      	addgt	r5, r5, r3
 800335c:	341a      	adds	r4, #26
 800335e:	454d      	cmp	r5, r9
 8003360:	d11a      	bne.n	8003398 <_printf_common+0xd8>
 8003362:	2000      	movs	r0, #0
 8003364:	e008      	b.n	8003378 <_printf_common+0xb8>
 8003366:	2301      	movs	r3, #1
 8003368:	4652      	mov	r2, sl
 800336a:	4639      	mov	r1, r7
 800336c:	4630      	mov	r0, r6
 800336e:	47c0      	blx	r8
 8003370:	3001      	adds	r0, #1
 8003372:	d103      	bne.n	800337c <_printf_common+0xbc>
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337c:	3501      	adds	r5, #1
 800337e:	e7c2      	b.n	8003306 <_printf_common+0x46>
 8003380:	2030      	movs	r0, #48	; 0x30
 8003382:	18e1      	adds	r1, r4, r3
 8003384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800338e:	4422      	add	r2, r4
 8003390:	3302      	adds	r3, #2
 8003392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003396:	e7c4      	b.n	8003322 <_printf_common+0x62>
 8003398:	2301      	movs	r3, #1
 800339a:	4622      	mov	r2, r4
 800339c:	4639      	mov	r1, r7
 800339e:	4630      	mov	r0, r6
 80033a0:	47c0      	blx	r8
 80033a2:	3001      	adds	r0, #1
 80033a4:	d0e6      	beq.n	8003374 <_printf_common+0xb4>
 80033a6:	f109 0901 	add.w	r9, r9, #1
 80033aa:	e7d8      	b.n	800335e <_printf_common+0x9e>

080033ac <_printf_i>:
 80033ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80033b4:	460c      	mov	r4, r1
 80033b6:	7e09      	ldrb	r1, [r1, #24]
 80033b8:	b085      	sub	sp, #20
 80033ba:	296e      	cmp	r1, #110	; 0x6e
 80033bc:	4617      	mov	r7, r2
 80033be:	4606      	mov	r6, r0
 80033c0:	4698      	mov	r8, r3
 80033c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033c4:	f000 80b3 	beq.w	800352e <_printf_i+0x182>
 80033c8:	d822      	bhi.n	8003410 <_printf_i+0x64>
 80033ca:	2963      	cmp	r1, #99	; 0x63
 80033cc:	d036      	beq.n	800343c <_printf_i+0x90>
 80033ce:	d80a      	bhi.n	80033e6 <_printf_i+0x3a>
 80033d0:	2900      	cmp	r1, #0
 80033d2:	f000 80b9 	beq.w	8003548 <_printf_i+0x19c>
 80033d6:	2958      	cmp	r1, #88	; 0x58
 80033d8:	f000 8083 	beq.w	80034e2 <_printf_i+0x136>
 80033dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80033e4:	e032      	b.n	800344c <_printf_i+0xa0>
 80033e6:	2964      	cmp	r1, #100	; 0x64
 80033e8:	d001      	beq.n	80033ee <_printf_i+0x42>
 80033ea:	2969      	cmp	r1, #105	; 0x69
 80033ec:	d1f6      	bne.n	80033dc <_printf_i+0x30>
 80033ee:	6820      	ldr	r0, [r4, #0]
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	0605      	lsls	r5, r0, #24
 80033f4:	f103 0104 	add.w	r1, r3, #4
 80033f8:	d52a      	bpl.n	8003450 <_printf_i+0xa4>
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6011      	str	r1, [r2, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da03      	bge.n	800340a <_printf_i+0x5e>
 8003402:	222d      	movs	r2, #45	; 0x2d
 8003404:	425b      	negs	r3, r3
 8003406:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800340a:	486f      	ldr	r0, [pc, #444]	; (80035c8 <_printf_i+0x21c>)
 800340c:	220a      	movs	r2, #10
 800340e:	e039      	b.n	8003484 <_printf_i+0xd8>
 8003410:	2973      	cmp	r1, #115	; 0x73
 8003412:	f000 809d 	beq.w	8003550 <_printf_i+0x1a4>
 8003416:	d808      	bhi.n	800342a <_printf_i+0x7e>
 8003418:	296f      	cmp	r1, #111	; 0x6f
 800341a:	d020      	beq.n	800345e <_printf_i+0xb2>
 800341c:	2970      	cmp	r1, #112	; 0x70
 800341e:	d1dd      	bne.n	80033dc <_printf_i+0x30>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	f043 0320 	orr.w	r3, r3, #32
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	e003      	b.n	8003432 <_printf_i+0x86>
 800342a:	2975      	cmp	r1, #117	; 0x75
 800342c:	d017      	beq.n	800345e <_printf_i+0xb2>
 800342e:	2978      	cmp	r1, #120	; 0x78
 8003430:	d1d4      	bne.n	80033dc <_printf_i+0x30>
 8003432:	2378      	movs	r3, #120	; 0x78
 8003434:	4865      	ldr	r0, [pc, #404]	; (80035cc <_printf_i+0x220>)
 8003436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800343a:	e055      	b.n	80034e8 <_printf_i+0x13c>
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003442:	1d19      	adds	r1, r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6011      	str	r1, [r2, #0]
 8003448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800344c:	2301      	movs	r3, #1
 800344e:	e08c      	b.n	800356a <_printf_i+0x1be>
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003456:	6011      	str	r1, [r2, #0]
 8003458:	bf18      	it	ne
 800345a:	b21b      	sxthne	r3, r3
 800345c:	e7cf      	b.n	80033fe <_printf_i+0x52>
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	6825      	ldr	r5, [r4, #0]
 8003462:	1d18      	adds	r0, r3, #4
 8003464:	6010      	str	r0, [r2, #0]
 8003466:	0628      	lsls	r0, r5, #24
 8003468:	d501      	bpl.n	800346e <_printf_i+0xc2>
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e002      	b.n	8003474 <_printf_i+0xc8>
 800346e:	0668      	lsls	r0, r5, #25
 8003470:	d5fb      	bpl.n	800346a <_printf_i+0xbe>
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	296f      	cmp	r1, #111	; 0x6f
 8003476:	bf14      	ite	ne
 8003478:	220a      	movne	r2, #10
 800347a:	2208      	moveq	r2, #8
 800347c:	4852      	ldr	r0, [pc, #328]	; (80035c8 <_printf_i+0x21c>)
 800347e:	2100      	movs	r1, #0
 8003480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003484:	6865      	ldr	r5, [r4, #4]
 8003486:	2d00      	cmp	r5, #0
 8003488:	60a5      	str	r5, [r4, #8]
 800348a:	f2c0 8095 	blt.w	80035b8 <_printf_i+0x20c>
 800348e:	6821      	ldr	r1, [r4, #0]
 8003490:	f021 0104 	bic.w	r1, r1, #4
 8003494:	6021      	str	r1, [r4, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d13d      	bne.n	8003516 <_printf_i+0x16a>
 800349a:	2d00      	cmp	r5, #0
 800349c:	f040 808e 	bne.w	80035bc <_printf_i+0x210>
 80034a0:	4665      	mov	r5, ip
 80034a2:	2a08      	cmp	r2, #8
 80034a4:	d10b      	bne.n	80034be <_printf_i+0x112>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	07db      	lsls	r3, r3, #31
 80034aa:	d508      	bpl.n	80034be <_printf_i+0x112>
 80034ac:	6923      	ldr	r3, [r4, #16]
 80034ae:	6862      	ldr	r2, [r4, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	bfde      	ittt	le
 80034b4:	2330      	movle	r3, #48	; 0x30
 80034b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034be:	ebac 0305 	sub.w	r3, ip, r5
 80034c2:	6123      	str	r3, [r4, #16]
 80034c4:	f8cd 8000 	str.w	r8, [sp]
 80034c8:	463b      	mov	r3, r7
 80034ca:	aa03      	add	r2, sp, #12
 80034cc:	4621      	mov	r1, r4
 80034ce:	4630      	mov	r0, r6
 80034d0:	f7ff fef6 	bl	80032c0 <_printf_common>
 80034d4:	3001      	adds	r0, #1
 80034d6:	d14d      	bne.n	8003574 <_printf_i+0x1c8>
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	b005      	add	sp, #20
 80034de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034e2:	4839      	ldr	r0, [pc, #228]	; (80035c8 <_printf_i+0x21c>)
 80034e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80034e8:	6813      	ldr	r3, [r2, #0]
 80034ea:	6821      	ldr	r1, [r4, #0]
 80034ec:	1d1d      	adds	r5, r3, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6015      	str	r5, [r2, #0]
 80034f2:	060a      	lsls	r2, r1, #24
 80034f4:	d50b      	bpl.n	800350e <_printf_i+0x162>
 80034f6:	07ca      	lsls	r2, r1, #31
 80034f8:	bf44      	itt	mi
 80034fa:	f041 0120 	orrmi.w	r1, r1, #32
 80034fe:	6021      	strmi	r1, [r4, #0]
 8003500:	b91b      	cbnz	r3, 800350a <_printf_i+0x15e>
 8003502:	6822      	ldr	r2, [r4, #0]
 8003504:	f022 0220 	bic.w	r2, r2, #32
 8003508:	6022      	str	r2, [r4, #0]
 800350a:	2210      	movs	r2, #16
 800350c:	e7b7      	b.n	800347e <_printf_i+0xd2>
 800350e:	064d      	lsls	r5, r1, #25
 8003510:	bf48      	it	mi
 8003512:	b29b      	uxthmi	r3, r3
 8003514:	e7ef      	b.n	80034f6 <_printf_i+0x14a>
 8003516:	4665      	mov	r5, ip
 8003518:	fbb3 f1f2 	udiv	r1, r3, r2
 800351c:	fb02 3311 	mls	r3, r2, r1, r3
 8003520:	5cc3      	ldrb	r3, [r0, r3]
 8003522:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003526:	460b      	mov	r3, r1
 8003528:	2900      	cmp	r1, #0
 800352a:	d1f5      	bne.n	8003518 <_printf_i+0x16c>
 800352c:	e7b9      	b.n	80034a2 <_printf_i+0xf6>
 800352e:	6813      	ldr	r3, [r2, #0]
 8003530:	6825      	ldr	r5, [r4, #0]
 8003532:	1d18      	adds	r0, r3, #4
 8003534:	6961      	ldr	r1, [r4, #20]
 8003536:	6010      	str	r0, [r2, #0]
 8003538:	0628      	lsls	r0, r5, #24
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	d501      	bpl.n	8003542 <_printf_i+0x196>
 800353e:	6019      	str	r1, [r3, #0]
 8003540:	e002      	b.n	8003548 <_printf_i+0x19c>
 8003542:	066a      	lsls	r2, r5, #25
 8003544:	d5fb      	bpl.n	800353e <_printf_i+0x192>
 8003546:	8019      	strh	r1, [r3, #0]
 8003548:	2300      	movs	r3, #0
 800354a:	4665      	mov	r5, ip
 800354c:	6123      	str	r3, [r4, #16]
 800354e:	e7b9      	b.n	80034c4 <_printf_i+0x118>
 8003550:	6813      	ldr	r3, [r2, #0]
 8003552:	1d19      	adds	r1, r3, #4
 8003554:	6011      	str	r1, [r2, #0]
 8003556:	681d      	ldr	r5, [r3, #0]
 8003558:	6862      	ldr	r2, [r4, #4]
 800355a:	2100      	movs	r1, #0
 800355c:	4628      	mov	r0, r5
 800355e:	f000 feb1 	bl	80042c4 <memchr>
 8003562:	b108      	cbz	r0, 8003568 <_printf_i+0x1bc>
 8003564:	1b40      	subs	r0, r0, r5
 8003566:	6060      	str	r0, [r4, #4]
 8003568:	6863      	ldr	r3, [r4, #4]
 800356a:	6123      	str	r3, [r4, #16]
 800356c:	2300      	movs	r3, #0
 800356e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003572:	e7a7      	b.n	80034c4 <_printf_i+0x118>
 8003574:	6923      	ldr	r3, [r4, #16]
 8003576:	462a      	mov	r2, r5
 8003578:	4639      	mov	r1, r7
 800357a:	4630      	mov	r0, r6
 800357c:	47c0      	blx	r8
 800357e:	3001      	adds	r0, #1
 8003580:	d0aa      	beq.n	80034d8 <_printf_i+0x12c>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	079b      	lsls	r3, r3, #30
 8003586:	d413      	bmi.n	80035b0 <_printf_i+0x204>
 8003588:	68e0      	ldr	r0, [r4, #12]
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	4298      	cmp	r0, r3
 800358e:	bfb8      	it	lt
 8003590:	4618      	movlt	r0, r3
 8003592:	e7a3      	b.n	80034dc <_printf_i+0x130>
 8003594:	2301      	movs	r3, #1
 8003596:	464a      	mov	r2, r9
 8003598:	4639      	mov	r1, r7
 800359a:	4630      	mov	r0, r6
 800359c:	47c0      	blx	r8
 800359e:	3001      	adds	r0, #1
 80035a0:	d09a      	beq.n	80034d8 <_printf_i+0x12c>
 80035a2:	3501      	adds	r5, #1
 80035a4:	68e3      	ldr	r3, [r4, #12]
 80035a6:	9a03      	ldr	r2, [sp, #12]
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	42ab      	cmp	r3, r5
 80035ac:	dcf2      	bgt.n	8003594 <_printf_i+0x1e8>
 80035ae:	e7eb      	b.n	8003588 <_printf_i+0x1dc>
 80035b0:	2500      	movs	r5, #0
 80035b2:	f104 0919 	add.w	r9, r4, #25
 80035b6:	e7f5      	b.n	80035a4 <_printf_i+0x1f8>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ac      	bne.n	8003516 <_printf_i+0x16a>
 80035bc:	7803      	ldrb	r3, [r0, #0]
 80035be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035c6:	e76c      	b.n	80034a2 <_printf_i+0xf6>
 80035c8:	08004e32 	.word	0x08004e32
 80035cc:	08004e43 	.word	0x08004e43

080035d0 <siprintf>:
 80035d0:	b40e      	push	{r1, r2, r3}
 80035d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035d6:	b500      	push	{lr}
 80035d8:	b09c      	sub	sp, #112	; 0x70
 80035da:	ab1d      	add	r3, sp, #116	; 0x74
 80035dc:	9002      	str	r0, [sp, #8]
 80035de:	9006      	str	r0, [sp, #24]
 80035e0:	9107      	str	r1, [sp, #28]
 80035e2:	9104      	str	r1, [sp, #16]
 80035e4:	4808      	ldr	r0, [pc, #32]	; (8003608 <siprintf+0x38>)
 80035e6:	4909      	ldr	r1, [pc, #36]	; (800360c <siprintf+0x3c>)
 80035e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80035ec:	9105      	str	r1, [sp, #20]
 80035ee:	6800      	ldr	r0, [r0, #0]
 80035f0:	a902      	add	r1, sp, #8
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	f001 fa6a 	bl	8004acc <_svfiprintf_r>
 80035f8:	2200      	movs	r2, #0
 80035fa:	9b02      	ldr	r3, [sp, #8]
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	b01c      	add	sp, #112	; 0x70
 8003600:	f85d eb04 	ldr.w	lr, [sp], #4
 8003604:	b003      	add	sp, #12
 8003606:	4770      	bx	lr
 8003608:	20000010 	.word	0x20000010
 800360c:	ffff0208 	.word	0xffff0208

08003610 <quorem>:
 8003610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	6903      	ldr	r3, [r0, #16]
 8003616:	690c      	ldr	r4, [r1, #16]
 8003618:	4680      	mov	r8, r0
 800361a:	42a3      	cmp	r3, r4
 800361c:	f2c0 8084 	blt.w	8003728 <quorem+0x118>
 8003620:	3c01      	subs	r4, #1
 8003622:	f101 0714 	add.w	r7, r1, #20
 8003626:	f100 0614 	add.w	r6, r0, #20
 800362a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800362e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003632:	3501      	adds	r5, #1
 8003634:	fbb0 f5f5 	udiv	r5, r0, r5
 8003638:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800363c:	eb06 030c 	add.w	r3, r6, ip
 8003640:	eb07 090c 	add.w	r9, r7, ip
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	b39d      	cbz	r5, 80036b0 <quorem+0xa0>
 8003648:	f04f 0a00 	mov.w	sl, #0
 800364c:	4638      	mov	r0, r7
 800364e:	46b6      	mov	lr, r6
 8003650:	46d3      	mov	fp, sl
 8003652:	f850 2b04 	ldr.w	r2, [r0], #4
 8003656:	b293      	uxth	r3, r2
 8003658:	fb05 a303 	mla	r3, r5, r3, sl
 800365c:	0c12      	lsrs	r2, r2, #16
 800365e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003662:	fb05 a202 	mla	r2, r5, r2, sl
 8003666:	b29b      	uxth	r3, r3
 8003668:	ebab 0303 	sub.w	r3, fp, r3
 800366c:	f8de b000 	ldr.w	fp, [lr]
 8003670:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003674:	fa1f fb8b 	uxth.w	fp, fp
 8003678:	445b      	add	r3, fp
 800367a:	fa1f fb82 	uxth.w	fp, r2
 800367e:	f8de 2000 	ldr.w	r2, [lr]
 8003682:	4581      	cmp	r9, r0
 8003684:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003688:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800368c:	b29b      	uxth	r3, r3
 800368e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003692:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003696:	f84e 3b04 	str.w	r3, [lr], #4
 800369a:	d2da      	bcs.n	8003652 <quorem+0x42>
 800369c:	f856 300c 	ldr.w	r3, [r6, ip]
 80036a0:	b933      	cbnz	r3, 80036b0 <quorem+0xa0>
 80036a2:	9b01      	ldr	r3, [sp, #4]
 80036a4:	3b04      	subs	r3, #4
 80036a6:	429e      	cmp	r6, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	d331      	bcc.n	8003710 <quorem+0x100>
 80036ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80036b0:	4640      	mov	r0, r8
 80036b2:	f001 f835 	bl	8004720 <__mcmp>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	db26      	blt.n	8003708 <quorem+0xf8>
 80036ba:	4630      	mov	r0, r6
 80036bc:	f04f 0c00 	mov.w	ip, #0
 80036c0:	3501      	adds	r5, #1
 80036c2:	f857 1b04 	ldr.w	r1, [r7], #4
 80036c6:	f8d0 e000 	ldr.w	lr, [r0]
 80036ca:	b28b      	uxth	r3, r1
 80036cc:	ebac 0303 	sub.w	r3, ip, r3
 80036d0:	fa1f f28e 	uxth.w	r2, lr
 80036d4:	4413      	add	r3, r2
 80036d6:	0c0a      	lsrs	r2, r1, #16
 80036d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80036dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036e6:	45b9      	cmp	r9, r7
 80036e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80036ec:	f840 3b04 	str.w	r3, [r0], #4
 80036f0:	d2e7      	bcs.n	80036c2 <quorem+0xb2>
 80036f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80036f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80036fa:	b92a      	cbnz	r2, 8003708 <quorem+0xf8>
 80036fc:	3b04      	subs	r3, #4
 80036fe:	429e      	cmp	r6, r3
 8003700:	461a      	mov	r2, r3
 8003702:	d30b      	bcc.n	800371c <quorem+0x10c>
 8003704:	f8c8 4010 	str.w	r4, [r8, #16]
 8003708:	4628      	mov	r0, r5
 800370a:	b003      	add	sp, #12
 800370c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	3b04      	subs	r3, #4
 8003714:	2a00      	cmp	r2, #0
 8003716:	d1c9      	bne.n	80036ac <quorem+0x9c>
 8003718:	3c01      	subs	r4, #1
 800371a:	e7c4      	b.n	80036a6 <quorem+0x96>
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	3b04      	subs	r3, #4
 8003720:	2a00      	cmp	r2, #0
 8003722:	d1ef      	bne.n	8003704 <quorem+0xf4>
 8003724:	3c01      	subs	r4, #1
 8003726:	e7ea      	b.n	80036fe <quorem+0xee>
 8003728:	2000      	movs	r0, #0
 800372a:	e7ee      	b.n	800370a <quorem+0xfa>
 800372c:	0000      	movs	r0, r0
	...

08003730 <_dtoa_r>:
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003734:	4616      	mov	r6, r2
 8003736:	461f      	mov	r7, r3
 8003738:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800373a:	b095      	sub	sp, #84	; 0x54
 800373c:	4604      	mov	r4, r0
 800373e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003742:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003746:	b93d      	cbnz	r5, 8003758 <_dtoa_r+0x28>
 8003748:	2010      	movs	r0, #16
 800374a:	f000 fdb3 	bl	80042b4 <malloc>
 800374e:	6260      	str	r0, [r4, #36]	; 0x24
 8003750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003754:	6005      	str	r5, [r0, #0]
 8003756:	60c5      	str	r5, [r0, #12]
 8003758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800375a:	6819      	ldr	r1, [r3, #0]
 800375c:	b151      	cbz	r1, 8003774 <_dtoa_r+0x44>
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	2301      	movs	r3, #1
 8003762:	4093      	lsls	r3, r2
 8003764:	604a      	str	r2, [r1, #4]
 8003766:	608b      	str	r3, [r1, #8]
 8003768:	4620      	mov	r0, r4
 800376a:	f000 fdf8 	bl	800435e <_Bfree>
 800376e:	2200      	movs	r2, #0
 8003770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	1e3b      	subs	r3, r7, #0
 8003776:	bfaf      	iteee	ge
 8003778:	2300      	movge	r3, #0
 800377a:	2201      	movlt	r2, #1
 800377c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003780:	9303      	strlt	r3, [sp, #12]
 8003782:	bfac      	ite	ge
 8003784:	f8c8 3000 	strge.w	r3, [r8]
 8003788:	f8c8 2000 	strlt.w	r2, [r8]
 800378c:	4bae      	ldr	r3, [pc, #696]	; (8003a48 <_dtoa_r+0x318>)
 800378e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003792:	ea33 0308 	bics.w	r3, r3, r8
 8003796:	d11b      	bne.n	80037d0 <_dtoa_r+0xa0>
 8003798:	f242 730f 	movw	r3, #9999	; 0x270f
 800379c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	9b02      	ldr	r3, [sp, #8]
 80037a2:	b923      	cbnz	r3, 80037ae <_dtoa_r+0x7e>
 80037a4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80037a8:	2800      	cmp	r0, #0
 80037aa:	f000 8545 	beq.w	8004238 <_dtoa_r+0xb08>
 80037ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037b0:	b953      	cbnz	r3, 80037c8 <_dtoa_r+0x98>
 80037b2:	4ba6      	ldr	r3, [pc, #664]	; (8003a4c <_dtoa_r+0x31c>)
 80037b4:	e021      	b.n	80037fa <_dtoa_r+0xca>
 80037b6:	4ba6      	ldr	r3, [pc, #664]	; (8003a50 <_dtoa_r+0x320>)
 80037b8:	9306      	str	r3, [sp, #24]
 80037ba:	3308      	adds	r3, #8
 80037bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	9806      	ldr	r0, [sp, #24]
 80037c2:	b015      	add	sp, #84	; 0x54
 80037c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c8:	4ba0      	ldr	r3, [pc, #640]	; (8003a4c <_dtoa_r+0x31c>)
 80037ca:	9306      	str	r3, [sp, #24]
 80037cc:	3303      	adds	r3, #3
 80037ce:	e7f5      	b.n	80037bc <_dtoa_r+0x8c>
 80037d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2300      	movs	r3, #0
 80037d8:	4630      	mov	r0, r6
 80037da:	4639      	mov	r1, r7
 80037dc:	f7fd f8e4 	bl	80009a8 <__aeabi_dcmpeq>
 80037e0:	4682      	mov	sl, r0
 80037e2:	b160      	cbz	r0, 80037fe <_dtoa_r+0xce>
 80037e4:	2301      	movs	r3, #1
 80037e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8520 	beq.w	8004232 <_dtoa_r+0xb02>
 80037f2:	4b98      	ldr	r3, [pc, #608]	; (8003a54 <_dtoa_r+0x324>)
 80037f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	9306      	str	r3, [sp, #24]
 80037fc:	e7e0      	b.n	80037c0 <_dtoa_r+0x90>
 80037fe:	ab12      	add	r3, sp, #72	; 0x48
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	ab13      	add	r3, sp, #76	; 0x4c
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	4632      	mov	r2, r6
 8003808:	463b      	mov	r3, r7
 800380a:	4620      	mov	r0, r4
 800380c:	f001 f800 	bl	8004810 <__d2b>
 8003810:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003814:	4683      	mov	fp, r0
 8003816:	2d00      	cmp	r5, #0
 8003818:	d07d      	beq.n	8003916 <_dtoa_r+0x1e6>
 800381a:	46b0      	mov	r8, r6
 800381c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003820:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003824:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003828:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800382c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003830:	2200      	movs	r2, #0
 8003832:	4b89      	ldr	r3, [pc, #548]	; (8003a58 <_dtoa_r+0x328>)
 8003834:	4640      	mov	r0, r8
 8003836:	4649      	mov	r1, r9
 8003838:	f7fc fc96 	bl	8000168 <__aeabi_dsub>
 800383c:	a37c      	add	r3, pc, #496	; (adr r3, 8003a30 <_dtoa_r+0x300>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f7fc fe49 	bl	80004d8 <__aeabi_dmul>
 8003846:	a37c      	add	r3, pc, #496	; (adr r3, 8003a38 <_dtoa_r+0x308>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	f7fc fc8e 	bl	800016c <__adddf3>
 8003850:	4606      	mov	r6, r0
 8003852:	4628      	mov	r0, r5
 8003854:	460f      	mov	r7, r1
 8003856:	f7fc fdd5 	bl	8000404 <__aeabi_i2d>
 800385a:	a379      	add	r3, pc, #484	; (adr r3, 8003a40 <_dtoa_r+0x310>)
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f7fc fe3a 	bl	80004d8 <__aeabi_dmul>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4630      	mov	r0, r6
 800386a:	4639      	mov	r1, r7
 800386c:	f7fc fc7e 	bl	800016c <__adddf3>
 8003870:	4606      	mov	r6, r0
 8003872:	460f      	mov	r7, r1
 8003874:	f7fd f8e0 	bl	8000a38 <__aeabi_d2iz>
 8003878:	2200      	movs	r2, #0
 800387a:	4682      	mov	sl, r0
 800387c:	2300      	movs	r3, #0
 800387e:	4630      	mov	r0, r6
 8003880:	4639      	mov	r1, r7
 8003882:	f7fd f89b 	bl	80009bc <__aeabi_dcmplt>
 8003886:	b148      	cbz	r0, 800389c <_dtoa_r+0x16c>
 8003888:	4650      	mov	r0, sl
 800388a:	f7fc fdbb 	bl	8000404 <__aeabi_i2d>
 800388e:	4632      	mov	r2, r6
 8003890:	463b      	mov	r3, r7
 8003892:	f7fd f889 	bl	80009a8 <__aeabi_dcmpeq>
 8003896:	b908      	cbnz	r0, 800389c <_dtoa_r+0x16c>
 8003898:	f10a 3aff 	add.w	sl, sl, #4294967295
 800389c:	f1ba 0f16 	cmp.w	sl, #22
 80038a0:	d85a      	bhi.n	8003958 <_dtoa_r+0x228>
 80038a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038a6:	496d      	ldr	r1, [pc, #436]	; (8003a5c <_dtoa_r+0x32c>)
 80038a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80038ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038b0:	f7fd f8a2 	bl	80009f8 <__aeabi_dcmpgt>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d051      	beq.n	800395c <_dtoa_r+0x22c>
 80038b8:	2300      	movs	r3, #0
 80038ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038be:	930d      	str	r3, [sp, #52]	; 0x34
 80038c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038c2:	1b5d      	subs	r5, r3, r5
 80038c4:	1e6b      	subs	r3, r5, #1
 80038c6:	9307      	str	r3, [sp, #28]
 80038c8:	bf43      	ittte	mi
 80038ca:	2300      	movmi	r3, #0
 80038cc:	f1c5 0901 	rsbmi	r9, r5, #1
 80038d0:	9307      	strmi	r3, [sp, #28]
 80038d2:	f04f 0900 	movpl.w	r9, #0
 80038d6:	f1ba 0f00 	cmp.w	sl, #0
 80038da:	db41      	blt.n	8003960 <_dtoa_r+0x230>
 80038dc:	9b07      	ldr	r3, [sp, #28]
 80038de:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80038e2:	4453      	add	r3, sl
 80038e4:	9307      	str	r3, [sp, #28]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9308      	str	r3, [sp, #32]
 80038ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80038ec:	2b09      	cmp	r3, #9
 80038ee:	f200 808f 	bhi.w	8003a10 <_dtoa_r+0x2e0>
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	bfc4      	itt	gt
 80038f6:	3b04      	subgt	r3, #4
 80038f8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80038fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80038fc:	bfc8      	it	gt
 80038fe:	2500      	movgt	r5, #0
 8003900:	f1a3 0302 	sub.w	r3, r3, #2
 8003904:	bfd8      	it	le
 8003906:	2501      	movle	r5, #1
 8003908:	2b03      	cmp	r3, #3
 800390a:	f200 808d 	bhi.w	8003a28 <_dtoa_r+0x2f8>
 800390e:	e8df f003 	tbb	[pc, r3]
 8003912:	7d7b      	.short	0x7d7b
 8003914:	6f2f      	.short	0x6f2f
 8003916:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800391a:	441d      	add	r5, r3
 800391c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003920:	2820      	cmp	r0, #32
 8003922:	dd13      	ble.n	800394c <_dtoa_r+0x21c>
 8003924:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003928:	9b02      	ldr	r3, [sp, #8]
 800392a:	fa08 f800 	lsl.w	r8, r8, r0
 800392e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003932:	fa23 f000 	lsr.w	r0, r3, r0
 8003936:	ea48 0000 	orr.w	r0, r8, r0
 800393a:	f7fc fd53 	bl	80003e4 <__aeabi_ui2d>
 800393e:	2301      	movs	r3, #1
 8003940:	4680      	mov	r8, r0
 8003942:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003946:	3d01      	subs	r5, #1
 8003948:	9310      	str	r3, [sp, #64]	; 0x40
 800394a:	e771      	b.n	8003830 <_dtoa_r+0x100>
 800394c:	9b02      	ldr	r3, [sp, #8]
 800394e:	f1c0 0020 	rsb	r0, r0, #32
 8003952:	fa03 f000 	lsl.w	r0, r3, r0
 8003956:	e7f0      	b.n	800393a <_dtoa_r+0x20a>
 8003958:	2301      	movs	r3, #1
 800395a:	e7b0      	b.n	80038be <_dtoa_r+0x18e>
 800395c:	900d      	str	r0, [sp, #52]	; 0x34
 800395e:	e7af      	b.n	80038c0 <_dtoa_r+0x190>
 8003960:	f1ca 0300 	rsb	r3, sl, #0
 8003964:	9308      	str	r3, [sp, #32]
 8003966:	2300      	movs	r3, #0
 8003968:	eba9 090a 	sub.w	r9, r9, sl
 800396c:	930c      	str	r3, [sp, #48]	; 0x30
 800396e:	e7bc      	b.n	80038ea <_dtoa_r+0x1ba>
 8003970:	2301      	movs	r3, #1
 8003972:	9309      	str	r3, [sp, #36]	; 0x24
 8003974:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003976:	2b00      	cmp	r3, #0
 8003978:	dd74      	ble.n	8003a64 <_dtoa_r+0x334>
 800397a:	4698      	mov	r8, r3
 800397c:	9304      	str	r3, [sp, #16]
 800397e:	2200      	movs	r2, #0
 8003980:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003982:	6072      	str	r2, [r6, #4]
 8003984:	2204      	movs	r2, #4
 8003986:	f102 0014 	add.w	r0, r2, #20
 800398a:	4298      	cmp	r0, r3
 800398c:	6871      	ldr	r1, [r6, #4]
 800398e:	d96e      	bls.n	8003a6e <_dtoa_r+0x33e>
 8003990:	4620      	mov	r0, r4
 8003992:	f000 fcb0 	bl	80042f6 <_Balloc>
 8003996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003998:	6030      	str	r0, [r6, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b8 0f0e 	cmp.w	r8, #14
 80039a0:	9306      	str	r3, [sp, #24]
 80039a2:	f200 80ed 	bhi.w	8003b80 <_dtoa_r+0x450>
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	f000 80ea 	beq.w	8003b80 <_dtoa_r+0x450>
 80039ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039b0:	f1ba 0f00 	cmp.w	sl, #0
 80039b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80039b8:	dd77      	ble.n	8003aaa <_dtoa_r+0x37a>
 80039ba:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <_dtoa_r+0x32c>)
 80039bc:	f00a 030f 	and.w	r3, sl, #15
 80039c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80039c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80039c8:	06f0      	lsls	r0, r6, #27
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80039d2:	d568      	bpl.n	8003aa6 <_dtoa_r+0x376>
 80039d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80039d8:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <_dtoa_r+0x330>)
 80039da:	2503      	movs	r5, #3
 80039dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039e0:	f7fc fea4 	bl	800072c <__aeabi_ddiv>
 80039e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039e8:	f006 060f 	and.w	r6, r6, #15
 80039ec:	4f1c      	ldr	r7, [pc, #112]	; (8003a60 <_dtoa_r+0x330>)
 80039ee:	e04f      	b.n	8003a90 <_dtoa_r+0x360>
 80039f0:	2301      	movs	r3, #1
 80039f2:	9309      	str	r3, [sp, #36]	; 0x24
 80039f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80039f6:	4453      	add	r3, sl
 80039f8:	f103 0801 	add.w	r8, r3, #1
 80039fc:	9304      	str	r3, [sp, #16]
 80039fe:	4643      	mov	r3, r8
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bfb8      	it	lt
 8003a04:	2301      	movlt	r3, #1
 8003a06:	e7ba      	b.n	800397e <_dtoa_r+0x24e>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e7b2      	b.n	8003972 <_dtoa_r+0x242>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e7f0      	b.n	80039f2 <_dtoa_r+0x2c2>
 8003a10:	2501      	movs	r5, #1
 8003a12:	2300      	movs	r3, #0
 8003a14:	9509      	str	r5, [sp, #36]	; 0x24
 8003a16:	931e      	str	r3, [sp, #120]	; 0x78
 8003a18:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	9304      	str	r3, [sp, #16]
 8003a20:	4698      	mov	r8, r3
 8003a22:	2312      	movs	r3, #18
 8003a24:	921f      	str	r2, [sp, #124]	; 0x7c
 8003a26:	e7aa      	b.n	800397e <_dtoa_r+0x24e>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2c:	e7f4      	b.n	8003a18 <_dtoa_r+0x2e8>
 8003a2e:	bf00      	nop
 8003a30:	636f4361 	.word	0x636f4361
 8003a34:	3fd287a7 	.word	0x3fd287a7
 8003a38:	8b60c8b3 	.word	0x8b60c8b3
 8003a3c:	3fc68a28 	.word	0x3fc68a28
 8003a40:	509f79fb 	.word	0x509f79fb
 8003a44:	3fd34413 	.word	0x3fd34413
 8003a48:	7ff00000 	.word	0x7ff00000
 8003a4c:	08004e5d 	.word	0x08004e5d
 8003a50:	08004e54 	.word	0x08004e54
 8003a54:	08004e31 	.word	0x08004e31
 8003a58:	3ff80000 	.word	0x3ff80000
 8003a5c:	08004e90 	.word	0x08004e90
 8003a60:	08004e68 	.word	0x08004e68
 8003a64:	2301      	movs	r3, #1
 8003a66:	9304      	str	r3, [sp, #16]
 8003a68:	4698      	mov	r8, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	e7da      	b.n	8003a24 <_dtoa_r+0x2f4>
 8003a6e:	3101      	adds	r1, #1
 8003a70:	6071      	str	r1, [r6, #4]
 8003a72:	0052      	lsls	r2, r2, #1
 8003a74:	e787      	b.n	8003986 <_dtoa_r+0x256>
 8003a76:	07f1      	lsls	r1, r6, #31
 8003a78:	d508      	bpl.n	8003a8c <_dtoa_r+0x35c>
 8003a7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a82:	f7fc fd29 	bl	80004d8 <__aeabi_dmul>
 8003a86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a8a:	3501      	adds	r5, #1
 8003a8c:	1076      	asrs	r6, r6, #1
 8003a8e:	3708      	adds	r7, #8
 8003a90:	2e00      	cmp	r6, #0
 8003a92:	d1f0      	bne.n	8003a76 <_dtoa_r+0x346>
 8003a94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a9c:	f7fc fe46 	bl	800072c <__aeabi_ddiv>
 8003aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003aa4:	e01b      	b.n	8003ade <_dtoa_r+0x3ae>
 8003aa6:	2502      	movs	r5, #2
 8003aa8:	e7a0      	b.n	80039ec <_dtoa_r+0x2bc>
 8003aaa:	f000 80a4 	beq.w	8003bf6 <_dtoa_r+0x4c6>
 8003aae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003ab2:	f1ca 0600 	rsb	r6, sl, #0
 8003ab6:	4ba0      	ldr	r3, [pc, #640]	; (8003d38 <_dtoa_r+0x608>)
 8003ab8:	f006 020f 	and.w	r2, r6, #15
 8003abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f7fc fd08 	bl	80004d8 <__aeabi_dmul>
 8003ac8:	2502      	movs	r5, #2
 8003aca:	2300      	movs	r3, #0
 8003acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ad0:	4f9a      	ldr	r7, [pc, #616]	; (8003d3c <_dtoa_r+0x60c>)
 8003ad2:	1136      	asrs	r6, r6, #4
 8003ad4:	2e00      	cmp	r6, #0
 8003ad6:	f040 8083 	bne.w	8003be0 <_dtoa_r+0x4b0>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e0      	bne.n	8003aa0 <_dtoa_r+0x370>
 8003ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 808a 	beq.w	8003bfa <_dtoa_r+0x4ca>
 8003ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003af2:	2200      	movs	r2, #0
 8003af4:	4b92      	ldr	r3, [pc, #584]	; (8003d40 <_dtoa_r+0x610>)
 8003af6:	f7fc ff61 	bl	80009bc <__aeabi_dcmplt>
 8003afa:	2800      	cmp	r0, #0
 8003afc:	d07d      	beq.n	8003bfa <_dtoa_r+0x4ca>
 8003afe:	f1b8 0f00 	cmp.w	r8, #0
 8003b02:	d07a      	beq.n	8003bfa <_dtoa_r+0x4ca>
 8003b04:	9b04      	ldr	r3, [sp, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	dd36      	ble.n	8003b78 <_dtoa_r+0x448>
 8003b0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b0e:	2200      	movs	r2, #0
 8003b10:	4b8c      	ldr	r3, [pc, #560]	; (8003d44 <_dtoa_r+0x614>)
 8003b12:	f7fc fce1 	bl	80004d8 <__aeabi_dmul>
 8003b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b1a:	9e04      	ldr	r6, [sp, #16]
 8003b1c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003b20:	3501      	adds	r5, #1
 8003b22:	4628      	mov	r0, r5
 8003b24:	f7fc fc6e 	bl	8000404 <__aeabi_i2d>
 8003b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b2c:	f7fc fcd4 	bl	80004d8 <__aeabi_dmul>
 8003b30:	2200      	movs	r2, #0
 8003b32:	4b85      	ldr	r3, [pc, #532]	; (8003d48 <_dtoa_r+0x618>)
 8003b34:	f7fc fb1a 	bl	800016c <__adddf3>
 8003b38:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003b3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b40:	950b      	str	r5, [sp, #44]	; 0x2c
 8003b42:	2e00      	cmp	r6, #0
 8003b44:	d15c      	bne.n	8003c00 <_dtoa_r+0x4d0>
 8003b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <_dtoa_r+0x61c>)
 8003b4e:	f7fc fb0b 	bl	8000168 <__aeabi_dsub>
 8003b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b54:	462b      	mov	r3, r5
 8003b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b5a:	f7fc ff4d 	bl	80009f8 <__aeabi_dcmpgt>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	f040 8281 	bne.w	8004066 <_dtoa_r+0x936>
 8003b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b6a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003b6e:	f7fc ff25 	bl	80009bc <__aeabi_dcmplt>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f040 8275 	bne.w	8004062 <_dtoa_r+0x932>
 8003b78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003b7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f2c0 814b 	blt.w	8003e1e <_dtoa_r+0x6ee>
 8003b88:	f1ba 0f0e 	cmp.w	sl, #14
 8003b8c:	f300 8147 	bgt.w	8003e1e <_dtoa_r+0x6ee>
 8003b90:	4b69      	ldr	r3, [pc, #420]	; (8003d38 <_dtoa_r+0x608>)
 8003b92:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f280 80d7 	bge.w	8003d54 <_dtoa_r+0x624>
 8003ba6:	f1b8 0f00 	cmp.w	r8, #0
 8003baa:	f300 80d3 	bgt.w	8003d54 <_dtoa_r+0x624>
 8003bae:	f040 8257 	bne.w	8004060 <_dtoa_r+0x930>
 8003bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <_dtoa_r+0x61c>)
 8003bba:	f7fc fc8d 	bl	80004d8 <__aeabi_dmul>
 8003bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bc2:	f7fc ff0f 	bl	80009e4 <__aeabi_dcmpge>
 8003bc6:	4646      	mov	r6, r8
 8003bc8:	4647      	mov	r7, r8
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	f040 822d 	bne.w	800402a <_dtoa_r+0x8fa>
 8003bd0:	9b06      	ldr	r3, [sp, #24]
 8003bd2:	9a06      	ldr	r2, [sp, #24]
 8003bd4:	1c5d      	adds	r5, r3, #1
 8003bd6:	2331      	movs	r3, #49	; 0x31
 8003bd8:	f10a 0a01 	add.w	sl, sl, #1
 8003bdc:	7013      	strb	r3, [r2, #0]
 8003bde:	e228      	b.n	8004032 <_dtoa_r+0x902>
 8003be0:	07f2      	lsls	r2, r6, #31
 8003be2:	d505      	bpl.n	8003bf0 <_dtoa_r+0x4c0>
 8003be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003be8:	f7fc fc76 	bl	80004d8 <__aeabi_dmul>
 8003bec:	2301      	movs	r3, #1
 8003bee:	3501      	adds	r5, #1
 8003bf0:	1076      	asrs	r6, r6, #1
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	e76e      	b.n	8003ad4 <_dtoa_r+0x3a4>
 8003bf6:	2502      	movs	r5, #2
 8003bf8:	e771      	b.n	8003ade <_dtoa_r+0x3ae>
 8003bfa:	4657      	mov	r7, sl
 8003bfc:	4646      	mov	r6, r8
 8003bfe:	e790      	b.n	8003b22 <_dtoa_r+0x3f2>
 8003c00:	4b4d      	ldr	r3, [pc, #308]	; (8003d38 <_dtoa_r+0x608>)
 8003c02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003c06:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d048      	beq.n	8003ca2 <_dtoa_r+0x572>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	2000      	movs	r0, #0
 8003c16:	494e      	ldr	r1, [pc, #312]	; (8003d50 <_dtoa_r+0x620>)
 8003c18:	f7fc fd88 	bl	800072c <__aeabi_ddiv>
 8003c1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c20:	f7fc faa2 	bl	8000168 <__aeabi_dsub>
 8003c24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c28:	9d06      	ldr	r5, [sp, #24]
 8003c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c2e:	f7fc ff03 	bl	8000a38 <__aeabi_d2iz>
 8003c32:	9011      	str	r0, [sp, #68]	; 0x44
 8003c34:	f7fc fbe6 	bl	8000404 <__aeabi_i2d>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c40:	f7fc fa92 	bl	8000168 <__aeabi_dsub>
 8003c44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c4a:	3330      	adds	r3, #48	; 0x30
 8003c4c:	f805 3b01 	strb.w	r3, [r5], #1
 8003c50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c54:	f7fc feb2 	bl	80009bc <__aeabi_dcmplt>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d163      	bne.n	8003d24 <_dtoa_r+0x5f4>
 8003c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c60:	2000      	movs	r0, #0
 8003c62:	4937      	ldr	r1, [pc, #220]	; (8003d40 <_dtoa_r+0x610>)
 8003c64:	f7fc fa80 	bl	8000168 <__aeabi_dsub>
 8003c68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c6c:	f7fc fea6 	bl	80009bc <__aeabi_dcmplt>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	f040 80b5 	bne.w	8003de0 <_dtoa_r+0x6b0>
 8003c76:	9b06      	ldr	r3, [sp, #24]
 8003c78:	1aeb      	subs	r3, r5, r3
 8003c7a:	429e      	cmp	r6, r3
 8003c7c:	f77f af7c 	ble.w	8003b78 <_dtoa_r+0x448>
 8003c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c84:	2200      	movs	r2, #0
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <_dtoa_r+0x614>)
 8003c88:	f7fc fc26 	bl	80004d8 <__aeabi_dmul>
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <_dtoa_r+0x614>)
 8003c98:	f7fc fc1e 	bl	80004d8 <__aeabi_dmul>
 8003c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ca0:	e7c3      	b.n	8003c2a <_dtoa_r+0x4fa>
 8003ca2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ca6:	f7fc fc17 	bl	80004d8 <__aeabi_dmul>
 8003caa:	9b06      	ldr	r3, [sp, #24]
 8003cac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003cb0:	199d      	adds	r5, r3, r6
 8003cb2:	461e      	mov	r6, r3
 8003cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cb8:	f7fc febe 	bl	8000a38 <__aeabi_d2iz>
 8003cbc:	9011      	str	r0, [sp, #68]	; 0x44
 8003cbe:	f7fc fba1 	bl	8000404 <__aeabi_i2d>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cca:	f7fc fa4d 	bl	8000168 <__aeabi_dsub>
 8003cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cd4:	3330      	adds	r3, #48	; 0x30
 8003cd6:	f806 3b01 	strb.w	r3, [r6], #1
 8003cda:	42ae      	cmp	r6, r5
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	d124      	bne.n	8003d2c <_dtoa_r+0x5fc>
 8003ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <_dtoa_r+0x620>)
 8003ce8:	f7fc fa40 	bl	800016c <__adddf3>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cf4:	f7fc fe80 	bl	80009f8 <__aeabi_dcmpgt>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d171      	bne.n	8003de0 <_dtoa_r+0x6b0>
 8003cfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d00:	2000      	movs	r0, #0
 8003d02:	4913      	ldr	r1, [pc, #76]	; (8003d50 <_dtoa_r+0x620>)
 8003d04:	f7fc fa30 	bl	8000168 <__aeabi_dsub>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d10:	f7fc fe54 	bl	80009bc <__aeabi_dcmplt>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f43f af2f 	beq.w	8003b78 <_dtoa_r+0x448>
 8003d1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d1e:	1e6a      	subs	r2, r5, #1
 8003d20:	2b30      	cmp	r3, #48	; 0x30
 8003d22:	d001      	beq.n	8003d28 <_dtoa_r+0x5f8>
 8003d24:	46ba      	mov	sl, r7
 8003d26:	e04a      	b.n	8003dbe <_dtoa_r+0x68e>
 8003d28:	4615      	mov	r5, r2
 8003d2a:	e7f6      	b.n	8003d1a <_dtoa_r+0x5ea>
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <_dtoa_r+0x614>)
 8003d2e:	f7fc fbd3 	bl	80004d8 <__aeabi_dmul>
 8003d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d36:	e7bd      	b.n	8003cb4 <_dtoa_r+0x584>
 8003d38:	08004e90 	.word	0x08004e90
 8003d3c:	08004e68 	.word	0x08004e68
 8003d40:	3ff00000 	.word	0x3ff00000
 8003d44:	40240000 	.word	0x40240000
 8003d48:	401c0000 	.word	0x401c0000
 8003d4c:	40140000 	.word	0x40140000
 8003d50:	3fe00000 	.word	0x3fe00000
 8003d54:	9d06      	ldr	r5, [sp, #24]
 8003d56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d5e:	4630      	mov	r0, r6
 8003d60:	4639      	mov	r1, r7
 8003d62:	f7fc fce3 	bl	800072c <__aeabi_ddiv>
 8003d66:	f7fc fe67 	bl	8000a38 <__aeabi_d2iz>
 8003d6a:	4681      	mov	r9, r0
 8003d6c:	f7fc fb4a 	bl	8000404 <__aeabi_i2d>
 8003d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d74:	f7fc fbb0 	bl	80004d8 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	4639      	mov	r1, r7
 8003d80:	f7fc f9f2 	bl	8000168 <__aeabi_dsub>
 8003d84:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003d88:	f805 6b01 	strb.w	r6, [r5], #1
 8003d8c:	9e06      	ldr	r6, [sp, #24]
 8003d8e:	4602      	mov	r2, r0
 8003d90:	1bae      	subs	r6, r5, r6
 8003d92:	45b0      	cmp	r8, r6
 8003d94:	460b      	mov	r3, r1
 8003d96:	d135      	bne.n	8003e04 <_dtoa_r+0x6d4>
 8003d98:	f7fc f9e8 	bl	800016c <__adddf3>
 8003d9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003da0:	4606      	mov	r6, r0
 8003da2:	460f      	mov	r7, r1
 8003da4:	f7fc fe28 	bl	80009f8 <__aeabi_dcmpgt>
 8003da8:	b9c8      	cbnz	r0, 8003dde <_dtoa_r+0x6ae>
 8003daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dae:	4630      	mov	r0, r6
 8003db0:	4639      	mov	r1, r7
 8003db2:	f7fc fdf9 	bl	80009a8 <__aeabi_dcmpeq>
 8003db6:	b110      	cbz	r0, 8003dbe <_dtoa_r+0x68e>
 8003db8:	f019 0f01 	tst.w	r9, #1
 8003dbc:	d10f      	bne.n	8003dde <_dtoa_r+0x6ae>
 8003dbe:	4659      	mov	r1, fp
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f000 facc 	bl	800435e <_Bfree>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003dca:	702b      	strb	r3, [r5, #0]
 8003dcc:	f10a 0301 	add.w	r3, sl, #1
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f43f acf3 	beq.w	80037c0 <_dtoa_r+0x90>
 8003dda:	601d      	str	r5, [r3, #0]
 8003ddc:	e4f0      	b.n	80037c0 <_dtoa_r+0x90>
 8003dde:	4657      	mov	r7, sl
 8003de0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003de4:	1e6b      	subs	r3, r5, #1
 8003de6:	2a39      	cmp	r2, #57	; 0x39
 8003de8:	d106      	bne.n	8003df8 <_dtoa_r+0x6c8>
 8003dea:	9a06      	ldr	r2, [sp, #24]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d107      	bne.n	8003e00 <_dtoa_r+0x6d0>
 8003df0:	2330      	movs	r3, #48	; 0x30
 8003df2:	7013      	strb	r3, [r2, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	3701      	adds	r7, #1
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	3201      	adds	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
 8003dfe:	e791      	b.n	8003d24 <_dtoa_r+0x5f4>
 8003e00:	461d      	mov	r5, r3
 8003e02:	e7ed      	b.n	8003de0 <_dtoa_r+0x6b0>
 8003e04:	2200      	movs	r2, #0
 8003e06:	4b99      	ldr	r3, [pc, #612]	; (800406c <_dtoa_r+0x93c>)
 8003e08:	f7fc fb66 	bl	80004d8 <__aeabi_dmul>
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2300      	movs	r3, #0
 8003e10:	4606      	mov	r6, r0
 8003e12:	460f      	mov	r7, r1
 8003e14:	f7fc fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d09e      	beq.n	8003d5a <_dtoa_r+0x62a>
 8003e1c:	e7cf      	b.n	8003dbe <_dtoa_r+0x68e>
 8003e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e20:	2a00      	cmp	r2, #0
 8003e22:	f000 8088 	beq.w	8003f36 <_dtoa_r+0x806>
 8003e26:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003e28:	2a01      	cmp	r2, #1
 8003e2a:	dc6d      	bgt.n	8003f08 <_dtoa_r+0x7d8>
 8003e2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e2e:	2a00      	cmp	r2, #0
 8003e30:	d066      	beq.n	8003f00 <_dtoa_r+0x7d0>
 8003e32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003e36:	464d      	mov	r5, r9
 8003e38:	9e08      	ldr	r6, [sp, #32]
 8003e3a:	9a07      	ldr	r2, [sp, #28]
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	441a      	add	r2, r3
 8003e40:	4620      	mov	r0, r4
 8003e42:	4499      	add	r9, r3
 8003e44:	9207      	str	r2, [sp, #28]
 8003e46:	f000 fb2a 	bl	800449e <__i2b>
 8003e4a:	4607      	mov	r7, r0
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	dd0b      	ble.n	8003e68 <_dtoa_r+0x738>
 8003e50:	9b07      	ldr	r3, [sp, #28]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	dd08      	ble.n	8003e68 <_dtoa_r+0x738>
 8003e56:	42ab      	cmp	r3, r5
 8003e58:	bfa8      	it	ge
 8003e5a:	462b      	movge	r3, r5
 8003e5c:	9a07      	ldr	r2, [sp, #28]
 8003e5e:	eba9 0903 	sub.w	r9, r9, r3
 8003e62:	1aed      	subs	r5, r5, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	9307      	str	r3, [sp, #28]
 8003e68:	9b08      	ldr	r3, [sp, #32]
 8003e6a:	b1eb      	cbz	r3, 8003ea8 <_dtoa_r+0x778>
 8003e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d065      	beq.n	8003f3e <_dtoa_r+0x80e>
 8003e72:	b18e      	cbz	r6, 8003e98 <_dtoa_r+0x768>
 8003e74:	4639      	mov	r1, r7
 8003e76:	4632      	mov	r2, r6
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f000 fbaf 	bl	80045dc <__pow5mult>
 8003e7e:	465a      	mov	r2, fp
 8003e80:	4601      	mov	r1, r0
 8003e82:	4607      	mov	r7, r0
 8003e84:	4620      	mov	r0, r4
 8003e86:	f000 fb13 	bl	80044b0 <__multiply>
 8003e8a:	4659      	mov	r1, fp
 8003e8c:	900a      	str	r0, [sp, #40]	; 0x28
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 fa65 	bl	800435e <_Bfree>
 8003e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e96:	469b      	mov	fp, r3
 8003e98:	9b08      	ldr	r3, [sp, #32]
 8003e9a:	1b9a      	subs	r2, r3, r6
 8003e9c:	d004      	beq.n	8003ea8 <_dtoa_r+0x778>
 8003e9e:	4659      	mov	r1, fp
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f000 fb9b 	bl	80045dc <__pow5mult>
 8003ea6:	4683      	mov	fp, r0
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 faf7 	bl	800449e <__i2b>
 8003eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 81c6 	beq.w	8004246 <_dtoa_r+0xb16>
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4601      	mov	r1, r0
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f000 fb8c 	bl	80045dc <__pow5mult>
 8003ec4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	dc3e      	bgt.n	8003f4a <_dtoa_r+0x81a>
 8003ecc:	9b02      	ldr	r3, [sp, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d137      	bne.n	8003f42 <_dtoa_r+0x812>
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d134      	bne.n	8003f46 <_dtoa_r+0x816>
 8003edc:	9b03      	ldr	r3, [sp, #12]
 8003ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ee2:	0d1b      	lsrs	r3, r3, #20
 8003ee4:	051b      	lsls	r3, r3, #20
 8003ee6:	b12b      	cbz	r3, 8003ef4 <_dtoa_r+0x7c4>
 8003ee8:	9b07      	ldr	r3, [sp, #28]
 8003eea:	f109 0901 	add.w	r9, r9, #1
 8003eee:	3301      	adds	r3, #1
 8003ef0:	9307      	str	r3, [sp, #28]
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	9308      	str	r3, [sp, #32]
 8003ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d128      	bne.n	8003f4e <_dtoa_r+0x81e>
 8003efc:	2001      	movs	r0, #1
 8003efe:	e02e      	b.n	8003f5e <_dtoa_r+0x82e>
 8003f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003f06:	e796      	b.n	8003e36 <_dtoa_r+0x706>
 8003f08:	9b08      	ldr	r3, [sp, #32]
 8003f0a:	f108 36ff 	add.w	r6, r8, #4294967295
 8003f0e:	42b3      	cmp	r3, r6
 8003f10:	bfb7      	itett	lt
 8003f12:	9b08      	ldrlt	r3, [sp, #32]
 8003f14:	1b9e      	subge	r6, r3, r6
 8003f16:	1af2      	sublt	r2, r6, r3
 8003f18:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003f1a:	bfbf      	itttt	lt
 8003f1c:	9608      	strlt	r6, [sp, #32]
 8003f1e:	189b      	addlt	r3, r3, r2
 8003f20:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003f22:	2600      	movlt	r6, #0
 8003f24:	f1b8 0f00 	cmp.w	r8, #0
 8003f28:	bfb9      	ittee	lt
 8003f2a:	eba9 0508 	sublt.w	r5, r9, r8
 8003f2e:	2300      	movlt	r3, #0
 8003f30:	464d      	movge	r5, r9
 8003f32:	4643      	movge	r3, r8
 8003f34:	e781      	b.n	8003e3a <_dtoa_r+0x70a>
 8003f36:	9e08      	ldr	r6, [sp, #32]
 8003f38:	464d      	mov	r5, r9
 8003f3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003f3c:	e786      	b.n	8003e4c <_dtoa_r+0x71c>
 8003f3e:	9a08      	ldr	r2, [sp, #32]
 8003f40:	e7ad      	b.n	8003e9e <_dtoa_r+0x76e>
 8003f42:	2300      	movs	r3, #0
 8003f44:	e7d6      	b.n	8003ef4 <_dtoa_r+0x7c4>
 8003f46:	9b02      	ldr	r3, [sp, #8]
 8003f48:	e7d4      	b.n	8003ef4 <_dtoa_r+0x7c4>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9308      	str	r3, [sp, #32]
 8003f4e:	6933      	ldr	r3, [r6, #16]
 8003f50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003f54:	6918      	ldr	r0, [r3, #16]
 8003f56:	f000 fa54 	bl	8004402 <__hi0bits>
 8003f5a:	f1c0 0020 	rsb	r0, r0, #32
 8003f5e:	9b07      	ldr	r3, [sp, #28]
 8003f60:	4418      	add	r0, r3
 8003f62:	f010 001f 	ands.w	r0, r0, #31
 8003f66:	d047      	beq.n	8003ff8 <_dtoa_r+0x8c8>
 8003f68:	f1c0 0320 	rsb	r3, r0, #32
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	dd3b      	ble.n	8003fe8 <_dtoa_r+0x8b8>
 8003f70:	9b07      	ldr	r3, [sp, #28]
 8003f72:	f1c0 001c 	rsb	r0, r0, #28
 8003f76:	4481      	add	r9, r0
 8003f78:	4405      	add	r5, r0
 8003f7a:	4403      	add	r3, r0
 8003f7c:	9307      	str	r3, [sp, #28]
 8003f7e:	f1b9 0f00 	cmp.w	r9, #0
 8003f82:	dd05      	ble.n	8003f90 <_dtoa_r+0x860>
 8003f84:	4659      	mov	r1, fp
 8003f86:	464a      	mov	r2, r9
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f000 fb75 	bl	8004678 <__lshift>
 8003f8e:	4683      	mov	fp, r0
 8003f90:	9b07      	ldr	r3, [sp, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	dd05      	ble.n	8003fa2 <_dtoa_r+0x872>
 8003f96:	4631      	mov	r1, r6
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f000 fb6c 	bl	8004678 <__lshift>
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fa4:	b353      	cbz	r3, 8003ffc <_dtoa_r+0x8cc>
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4658      	mov	r0, fp
 8003faa:	f000 fbb9 	bl	8004720 <__mcmp>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	da24      	bge.n	8003ffc <_dtoa_r+0x8cc>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	220a      	movs	r2, #10
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f000 f9e7 	bl	800438c <__multadd>
 8003fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003fc4:	4683      	mov	fp, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8144 	beq.w	8004254 <_dtoa_r+0xb24>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4639      	mov	r1, r7
 8003fd0:	220a      	movs	r2, #10
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f000 f9da 	bl	800438c <__multadd>
 8003fd8:	9b04      	ldr	r3, [sp, #16]
 8003fda:	4607      	mov	r7, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	dc4d      	bgt.n	800407c <_dtoa_r+0x94c>
 8003fe0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	dd4a      	ble.n	800407c <_dtoa_r+0x94c>
 8003fe6:	e011      	b.n	800400c <_dtoa_r+0x8dc>
 8003fe8:	d0c9      	beq.n	8003f7e <_dtoa_r+0x84e>
 8003fea:	9a07      	ldr	r2, [sp, #28]
 8003fec:	331c      	adds	r3, #28
 8003fee:	441a      	add	r2, r3
 8003ff0:	4499      	add	r9, r3
 8003ff2:	441d      	add	r5, r3
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	e7c1      	b.n	8003f7c <_dtoa_r+0x84c>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	e7f6      	b.n	8003fea <_dtoa_r+0x8ba>
 8003ffc:	f1b8 0f00 	cmp.w	r8, #0
 8004000:	dc36      	bgt.n	8004070 <_dtoa_r+0x940>
 8004002:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004004:	2b02      	cmp	r3, #2
 8004006:	dd33      	ble.n	8004070 <_dtoa_r+0x940>
 8004008:	f8cd 8010 	str.w	r8, [sp, #16]
 800400c:	9b04      	ldr	r3, [sp, #16]
 800400e:	b963      	cbnz	r3, 800402a <_dtoa_r+0x8fa>
 8004010:	4631      	mov	r1, r6
 8004012:	2205      	movs	r2, #5
 8004014:	4620      	mov	r0, r4
 8004016:	f000 f9b9 	bl	800438c <__multadd>
 800401a:	4601      	mov	r1, r0
 800401c:	4606      	mov	r6, r0
 800401e:	4658      	mov	r0, fp
 8004020:	f000 fb7e 	bl	8004720 <__mcmp>
 8004024:	2800      	cmp	r0, #0
 8004026:	f73f add3 	bgt.w	8003bd0 <_dtoa_r+0x4a0>
 800402a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800402c:	9d06      	ldr	r5, [sp, #24]
 800402e:	ea6f 0a03 	mvn.w	sl, r3
 8004032:	f04f 0900 	mov.w	r9, #0
 8004036:	4631      	mov	r1, r6
 8004038:	4620      	mov	r0, r4
 800403a:	f000 f990 	bl	800435e <_Bfree>
 800403e:	2f00      	cmp	r7, #0
 8004040:	f43f aebd 	beq.w	8003dbe <_dtoa_r+0x68e>
 8004044:	f1b9 0f00 	cmp.w	r9, #0
 8004048:	d005      	beq.n	8004056 <_dtoa_r+0x926>
 800404a:	45b9      	cmp	r9, r7
 800404c:	d003      	beq.n	8004056 <_dtoa_r+0x926>
 800404e:	4649      	mov	r1, r9
 8004050:	4620      	mov	r0, r4
 8004052:	f000 f984 	bl	800435e <_Bfree>
 8004056:	4639      	mov	r1, r7
 8004058:	4620      	mov	r0, r4
 800405a:	f000 f980 	bl	800435e <_Bfree>
 800405e:	e6ae      	b.n	8003dbe <_dtoa_r+0x68e>
 8004060:	2600      	movs	r6, #0
 8004062:	4637      	mov	r7, r6
 8004064:	e7e1      	b.n	800402a <_dtoa_r+0x8fa>
 8004066:	46ba      	mov	sl, r7
 8004068:	4637      	mov	r7, r6
 800406a:	e5b1      	b.n	8003bd0 <_dtoa_r+0x4a0>
 800406c:	40240000 	.word	0x40240000
 8004070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004072:	f8cd 8010 	str.w	r8, [sp, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80f3 	beq.w	8004262 <_dtoa_r+0xb32>
 800407c:	2d00      	cmp	r5, #0
 800407e:	dd05      	ble.n	800408c <_dtoa_r+0x95c>
 8004080:	4639      	mov	r1, r7
 8004082:	462a      	mov	r2, r5
 8004084:	4620      	mov	r0, r4
 8004086:	f000 faf7 	bl	8004678 <__lshift>
 800408a:	4607      	mov	r7, r0
 800408c:	9b08      	ldr	r3, [sp, #32]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d04c      	beq.n	800412c <_dtoa_r+0x9fc>
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4620      	mov	r0, r4
 8004096:	f000 f92e 	bl	80042f6 <_Balloc>
 800409a:	4605      	mov	r5, r0
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	f107 010c 	add.w	r1, r7, #12
 80040a2:	3202      	adds	r2, #2
 80040a4:	0092      	lsls	r2, r2, #2
 80040a6:	300c      	adds	r0, #12
 80040a8:	f000 f91a 	bl	80042e0 <memcpy>
 80040ac:	2201      	movs	r2, #1
 80040ae:	4629      	mov	r1, r5
 80040b0:	4620      	mov	r0, r4
 80040b2:	f000 fae1 	bl	8004678 <__lshift>
 80040b6:	46b9      	mov	r9, r7
 80040b8:	4607      	mov	r7, r0
 80040ba:	9b06      	ldr	r3, [sp, #24]
 80040bc:	9307      	str	r3, [sp, #28]
 80040be:	9b02      	ldr	r3, [sp, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	9308      	str	r3, [sp, #32]
 80040c6:	4631      	mov	r1, r6
 80040c8:	4658      	mov	r0, fp
 80040ca:	f7ff faa1 	bl	8003610 <quorem>
 80040ce:	4649      	mov	r1, r9
 80040d0:	4605      	mov	r5, r0
 80040d2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80040d6:	4658      	mov	r0, fp
 80040d8:	f000 fb22 	bl	8004720 <__mcmp>
 80040dc:	463a      	mov	r2, r7
 80040de:	9002      	str	r0, [sp, #8]
 80040e0:	4631      	mov	r1, r6
 80040e2:	4620      	mov	r0, r4
 80040e4:	f000 fb36 	bl	8004754 <__mdiff>
 80040e8:	68c3      	ldr	r3, [r0, #12]
 80040ea:	4602      	mov	r2, r0
 80040ec:	bb03      	cbnz	r3, 8004130 <_dtoa_r+0xa00>
 80040ee:	4601      	mov	r1, r0
 80040f0:	9009      	str	r0, [sp, #36]	; 0x24
 80040f2:	4658      	mov	r0, fp
 80040f4:	f000 fb14 	bl	8004720 <__mcmp>
 80040f8:	4603      	mov	r3, r0
 80040fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040fc:	4611      	mov	r1, r2
 80040fe:	4620      	mov	r0, r4
 8004100:	9309      	str	r3, [sp, #36]	; 0x24
 8004102:	f000 f92c 	bl	800435e <_Bfree>
 8004106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004108:	b9a3      	cbnz	r3, 8004134 <_dtoa_r+0xa04>
 800410a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800410c:	b992      	cbnz	r2, 8004134 <_dtoa_r+0xa04>
 800410e:	9a08      	ldr	r2, [sp, #32]
 8004110:	b982      	cbnz	r2, 8004134 <_dtoa_r+0xa04>
 8004112:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004116:	d029      	beq.n	800416c <_dtoa_r+0xa3c>
 8004118:	9b02      	ldr	r3, [sp, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	dd01      	ble.n	8004122 <_dtoa_r+0x9f2>
 800411e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004122:	9b07      	ldr	r3, [sp, #28]
 8004124:	1c5d      	adds	r5, r3, #1
 8004126:	f883 8000 	strb.w	r8, [r3]
 800412a:	e784      	b.n	8004036 <_dtoa_r+0x906>
 800412c:	4638      	mov	r0, r7
 800412e:	e7c2      	b.n	80040b6 <_dtoa_r+0x986>
 8004130:	2301      	movs	r3, #1
 8004132:	e7e3      	b.n	80040fc <_dtoa_r+0x9cc>
 8004134:	9a02      	ldr	r2, [sp, #8]
 8004136:	2a00      	cmp	r2, #0
 8004138:	db04      	blt.n	8004144 <_dtoa_r+0xa14>
 800413a:	d123      	bne.n	8004184 <_dtoa_r+0xa54>
 800413c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800413e:	bb0a      	cbnz	r2, 8004184 <_dtoa_r+0xa54>
 8004140:	9a08      	ldr	r2, [sp, #32]
 8004142:	b9fa      	cbnz	r2, 8004184 <_dtoa_r+0xa54>
 8004144:	2b00      	cmp	r3, #0
 8004146:	ddec      	ble.n	8004122 <_dtoa_r+0x9f2>
 8004148:	4659      	mov	r1, fp
 800414a:	2201      	movs	r2, #1
 800414c:	4620      	mov	r0, r4
 800414e:	f000 fa93 	bl	8004678 <__lshift>
 8004152:	4631      	mov	r1, r6
 8004154:	4683      	mov	fp, r0
 8004156:	f000 fae3 	bl	8004720 <__mcmp>
 800415a:	2800      	cmp	r0, #0
 800415c:	dc03      	bgt.n	8004166 <_dtoa_r+0xa36>
 800415e:	d1e0      	bne.n	8004122 <_dtoa_r+0x9f2>
 8004160:	f018 0f01 	tst.w	r8, #1
 8004164:	d0dd      	beq.n	8004122 <_dtoa_r+0x9f2>
 8004166:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800416a:	d1d8      	bne.n	800411e <_dtoa_r+0x9ee>
 800416c:	9b07      	ldr	r3, [sp, #28]
 800416e:	9a07      	ldr	r2, [sp, #28]
 8004170:	1c5d      	adds	r5, r3, #1
 8004172:	2339      	movs	r3, #57	; 0x39
 8004174:	7013      	strb	r3, [r2, #0]
 8004176:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800417a:	1e6a      	subs	r2, r5, #1
 800417c:	2b39      	cmp	r3, #57	; 0x39
 800417e:	d04d      	beq.n	800421c <_dtoa_r+0xaec>
 8004180:	3301      	adds	r3, #1
 8004182:	e052      	b.n	800422a <_dtoa_r+0xafa>
 8004184:	9a07      	ldr	r2, [sp, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f102 0501 	add.w	r5, r2, #1
 800418c:	dd06      	ble.n	800419c <_dtoa_r+0xa6c>
 800418e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004192:	d0eb      	beq.n	800416c <_dtoa_r+0xa3c>
 8004194:	f108 0801 	add.w	r8, r8, #1
 8004198:	9b07      	ldr	r3, [sp, #28]
 800419a:	e7c4      	b.n	8004126 <_dtoa_r+0x9f6>
 800419c:	9b06      	ldr	r3, [sp, #24]
 800419e:	9a04      	ldr	r2, [sp, #16]
 80041a0:	1aeb      	subs	r3, r5, r3
 80041a2:	4293      	cmp	r3, r2
 80041a4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80041a8:	d021      	beq.n	80041ee <_dtoa_r+0xabe>
 80041aa:	4659      	mov	r1, fp
 80041ac:	2300      	movs	r3, #0
 80041ae:	220a      	movs	r2, #10
 80041b0:	4620      	mov	r0, r4
 80041b2:	f000 f8eb 	bl	800438c <__multadd>
 80041b6:	45b9      	cmp	r9, r7
 80041b8:	4683      	mov	fp, r0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	f04f 020a 	mov.w	r2, #10
 80041c2:	4649      	mov	r1, r9
 80041c4:	4620      	mov	r0, r4
 80041c6:	d105      	bne.n	80041d4 <_dtoa_r+0xaa4>
 80041c8:	f000 f8e0 	bl	800438c <__multadd>
 80041cc:	4681      	mov	r9, r0
 80041ce:	4607      	mov	r7, r0
 80041d0:	9507      	str	r5, [sp, #28]
 80041d2:	e778      	b.n	80040c6 <_dtoa_r+0x996>
 80041d4:	f000 f8da 	bl	800438c <__multadd>
 80041d8:	4639      	mov	r1, r7
 80041da:	4681      	mov	r9, r0
 80041dc:	2300      	movs	r3, #0
 80041de:	220a      	movs	r2, #10
 80041e0:	4620      	mov	r0, r4
 80041e2:	f000 f8d3 	bl	800438c <__multadd>
 80041e6:	4607      	mov	r7, r0
 80041e8:	e7f2      	b.n	80041d0 <_dtoa_r+0xaa0>
 80041ea:	f04f 0900 	mov.w	r9, #0
 80041ee:	4659      	mov	r1, fp
 80041f0:	2201      	movs	r2, #1
 80041f2:	4620      	mov	r0, r4
 80041f4:	f000 fa40 	bl	8004678 <__lshift>
 80041f8:	4631      	mov	r1, r6
 80041fa:	4683      	mov	fp, r0
 80041fc:	f000 fa90 	bl	8004720 <__mcmp>
 8004200:	2800      	cmp	r0, #0
 8004202:	dcb8      	bgt.n	8004176 <_dtoa_r+0xa46>
 8004204:	d102      	bne.n	800420c <_dtoa_r+0xadc>
 8004206:	f018 0f01 	tst.w	r8, #1
 800420a:	d1b4      	bne.n	8004176 <_dtoa_r+0xa46>
 800420c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004210:	1e6a      	subs	r2, r5, #1
 8004212:	2b30      	cmp	r3, #48	; 0x30
 8004214:	f47f af0f 	bne.w	8004036 <_dtoa_r+0x906>
 8004218:	4615      	mov	r5, r2
 800421a:	e7f7      	b.n	800420c <_dtoa_r+0xadc>
 800421c:	9b06      	ldr	r3, [sp, #24]
 800421e:	4293      	cmp	r3, r2
 8004220:	d105      	bne.n	800422e <_dtoa_r+0xafe>
 8004222:	2331      	movs	r3, #49	; 0x31
 8004224:	9a06      	ldr	r2, [sp, #24]
 8004226:	f10a 0a01 	add.w	sl, sl, #1
 800422a:	7013      	strb	r3, [r2, #0]
 800422c:	e703      	b.n	8004036 <_dtoa_r+0x906>
 800422e:	4615      	mov	r5, r2
 8004230:	e7a1      	b.n	8004176 <_dtoa_r+0xa46>
 8004232:	4b17      	ldr	r3, [pc, #92]	; (8004290 <_dtoa_r+0xb60>)
 8004234:	f7ff bae1 	b.w	80037fa <_dtoa_r+0xca>
 8004238:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800423a:	2b00      	cmp	r3, #0
 800423c:	f47f aabb 	bne.w	80037b6 <_dtoa_r+0x86>
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <_dtoa_r+0xb64>)
 8004242:	f7ff bada 	b.w	80037fa <_dtoa_r+0xca>
 8004246:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004248:	2b01      	cmp	r3, #1
 800424a:	f77f ae3f 	ble.w	8003ecc <_dtoa_r+0x79c>
 800424e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004250:	9308      	str	r3, [sp, #32]
 8004252:	e653      	b.n	8003efc <_dtoa_r+0x7cc>
 8004254:	9b04      	ldr	r3, [sp, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	dc03      	bgt.n	8004262 <_dtoa_r+0xb32>
 800425a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800425c:	2b02      	cmp	r3, #2
 800425e:	f73f aed5 	bgt.w	800400c <_dtoa_r+0x8dc>
 8004262:	9d06      	ldr	r5, [sp, #24]
 8004264:	4631      	mov	r1, r6
 8004266:	4658      	mov	r0, fp
 8004268:	f7ff f9d2 	bl	8003610 <quorem>
 800426c:	9b06      	ldr	r3, [sp, #24]
 800426e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004272:	f805 8b01 	strb.w	r8, [r5], #1
 8004276:	9a04      	ldr	r2, [sp, #16]
 8004278:	1aeb      	subs	r3, r5, r3
 800427a:	429a      	cmp	r2, r3
 800427c:	ddb5      	ble.n	80041ea <_dtoa_r+0xaba>
 800427e:	4659      	mov	r1, fp
 8004280:	2300      	movs	r3, #0
 8004282:	220a      	movs	r2, #10
 8004284:	4620      	mov	r0, r4
 8004286:	f000 f881 	bl	800438c <__multadd>
 800428a:	4683      	mov	fp, r0
 800428c:	e7ea      	b.n	8004264 <_dtoa_r+0xb34>
 800428e:	bf00      	nop
 8004290:	08004e30 	.word	0x08004e30
 8004294:	08004e54 	.word	0x08004e54

08004298 <_localeconv_r>:
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <_localeconv_r+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6a18      	ldr	r0, [r3, #32]
 800429e:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <_localeconv_r+0x18>)
 80042a0:	2800      	cmp	r0, #0
 80042a2:	bf08      	it	eq
 80042a4:	4618      	moveq	r0, r3
 80042a6:	30f0      	adds	r0, #240	; 0xf0
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000010 	.word	0x20000010
 80042b0:	20000074 	.word	0x20000074

080042b4 <malloc>:
 80042b4:	4b02      	ldr	r3, [pc, #8]	; (80042c0 <malloc+0xc>)
 80042b6:	4601      	mov	r1, r0
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	f000 bb53 	b.w	8004964 <_malloc_r>
 80042be:	bf00      	nop
 80042c0:	20000010 	.word	0x20000010

080042c4 <memchr>:
 80042c4:	b510      	push	{r4, lr}
 80042c6:	b2c9      	uxtb	r1, r1
 80042c8:	4402      	add	r2, r0
 80042ca:	4290      	cmp	r0, r2
 80042cc:	4603      	mov	r3, r0
 80042ce:	d101      	bne.n	80042d4 <memchr+0x10>
 80042d0:	2300      	movs	r3, #0
 80042d2:	e003      	b.n	80042dc <memchr+0x18>
 80042d4:	781c      	ldrb	r4, [r3, #0]
 80042d6:	3001      	adds	r0, #1
 80042d8:	428c      	cmp	r4, r1
 80042da:	d1f6      	bne.n	80042ca <memchr+0x6>
 80042dc:	4618      	mov	r0, r3
 80042de:	bd10      	pop	{r4, pc}

080042e0 <memcpy>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	1e43      	subs	r3, r0, #1
 80042e4:	440a      	add	r2, r1
 80042e6:	4291      	cmp	r1, r2
 80042e8:	d100      	bne.n	80042ec <memcpy+0xc>
 80042ea:	bd10      	pop	{r4, pc}
 80042ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042f4:	e7f7      	b.n	80042e6 <memcpy+0x6>

080042f6 <_Balloc>:
 80042f6:	b570      	push	{r4, r5, r6, lr}
 80042f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80042fa:	4604      	mov	r4, r0
 80042fc:	460e      	mov	r6, r1
 80042fe:	b93d      	cbnz	r5, 8004310 <_Balloc+0x1a>
 8004300:	2010      	movs	r0, #16
 8004302:	f7ff ffd7 	bl	80042b4 <malloc>
 8004306:	6260      	str	r0, [r4, #36]	; 0x24
 8004308:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800430c:	6005      	str	r5, [r0, #0]
 800430e:	60c5      	str	r5, [r0, #12]
 8004310:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004312:	68eb      	ldr	r3, [r5, #12]
 8004314:	b183      	cbz	r3, 8004338 <_Balloc+0x42>
 8004316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800431e:	b9b8      	cbnz	r0, 8004350 <_Balloc+0x5a>
 8004320:	2101      	movs	r1, #1
 8004322:	fa01 f506 	lsl.w	r5, r1, r6
 8004326:	1d6a      	adds	r2, r5, #5
 8004328:	0092      	lsls	r2, r2, #2
 800432a:	4620      	mov	r0, r4
 800432c:	f000 fabf 	bl	80048ae <_calloc_r>
 8004330:	b160      	cbz	r0, 800434c <_Balloc+0x56>
 8004332:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004336:	e00e      	b.n	8004356 <_Balloc+0x60>
 8004338:	2221      	movs	r2, #33	; 0x21
 800433a:	2104      	movs	r1, #4
 800433c:	4620      	mov	r0, r4
 800433e:	f000 fab6 	bl	80048ae <_calloc_r>
 8004342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004344:	60e8      	str	r0, [r5, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e4      	bne.n	8004316 <_Balloc+0x20>
 800434c:	2000      	movs	r0, #0
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	6802      	ldr	r2, [r0, #0]
 8004352:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004356:	2300      	movs	r3, #0
 8004358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800435c:	e7f7      	b.n	800434e <_Balloc+0x58>

0800435e <_Bfree>:
 800435e:	b570      	push	{r4, r5, r6, lr}
 8004360:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004362:	4606      	mov	r6, r0
 8004364:	460d      	mov	r5, r1
 8004366:	b93c      	cbnz	r4, 8004378 <_Bfree+0x1a>
 8004368:	2010      	movs	r0, #16
 800436a:	f7ff ffa3 	bl	80042b4 <malloc>
 800436e:	6270      	str	r0, [r6, #36]	; 0x24
 8004370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004374:	6004      	str	r4, [r0, #0]
 8004376:	60c4      	str	r4, [r0, #12]
 8004378:	b13d      	cbz	r5, 800438a <_Bfree+0x2c>
 800437a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800437c:	686a      	ldr	r2, [r5, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004384:	6029      	str	r1, [r5, #0]
 8004386:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800438a:	bd70      	pop	{r4, r5, r6, pc}

0800438c <__multadd>:
 800438c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004390:	461f      	mov	r7, r3
 8004392:	4606      	mov	r6, r0
 8004394:	460c      	mov	r4, r1
 8004396:	2300      	movs	r3, #0
 8004398:	690d      	ldr	r5, [r1, #16]
 800439a:	f101 0c14 	add.w	ip, r1, #20
 800439e:	f8dc 0000 	ldr.w	r0, [ip]
 80043a2:	3301      	adds	r3, #1
 80043a4:	b281      	uxth	r1, r0
 80043a6:	fb02 7101 	mla	r1, r2, r1, r7
 80043aa:	0c00      	lsrs	r0, r0, #16
 80043ac:	0c0f      	lsrs	r7, r1, #16
 80043ae:	fb02 7000 	mla	r0, r2, r0, r7
 80043b2:	b289      	uxth	r1, r1
 80043b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80043b8:	429d      	cmp	r5, r3
 80043ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80043be:	f84c 1b04 	str.w	r1, [ip], #4
 80043c2:	dcec      	bgt.n	800439e <__multadd+0x12>
 80043c4:	b1d7      	cbz	r7, 80043fc <__multadd+0x70>
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	dc12      	bgt.n	80043f2 <__multadd+0x66>
 80043cc:	6861      	ldr	r1, [r4, #4]
 80043ce:	4630      	mov	r0, r6
 80043d0:	3101      	adds	r1, #1
 80043d2:	f7ff ff90 	bl	80042f6 <_Balloc>
 80043d6:	4680      	mov	r8, r0
 80043d8:	6922      	ldr	r2, [r4, #16]
 80043da:	f104 010c 	add.w	r1, r4, #12
 80043de:	3202      	adds	r2, #2
 80043e0:	0092      	lsls	r2, r2, #2
 80043e2:	300c      	adds	r0, #12
 80043e4:	f7ff ff7c 	bl	80042e0 <memcpy>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4630      	mov	r0, r6
 80043ec:	f7ff ffb7 	bl	800435e <_Bfree>
 80043f0:	4644      	mov	r4, r8
 80043f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80043f6:	3501      	adds	r5, #1
 80043f8:	615f      	str	r7, [r3, #20]
 80043fa:	6125      	str	r5, [r4, #16]
 80043fc:	4620      	mov	r0, r4
 80043fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004402 <__hi0bits>:
 8004402:	0c02      	lsrs	r2, r0, #16
 8004404:	0412      	lsls	r2, r2, #16
 8004406:	4603      	mov	r3, r0
 8004408:	b9b2      	cbnz	r2, 8004438 <__hi0bits+0x36>
 800440a:	0403      	lsls	r3, r0, #16
 800440c:	2010      	movs	r0, #16
 800440e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004412:	bf04      	itt	eq
 8004414:	021b      	lsleq	r3, r3, #8
 8004416:	3008      	addeq	r0, #8
 8004418:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800441c:	bf04      	itt	eq
 800441e:	011b      	lsleq	r3, r3, #4
 8004420:	3004      	addeq	r0, #4
 8004422:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004426:	bf04      	itt	eq
 8004428:	009b      	lsleq	r3, r3, #2
 800442a:	3002      	addeq	r0, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	db06      	blt.n	800443e <__hi0bits+0x3c>
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	d503      	bpl.n	800443c <__hi0bits+0x3a>
 8004434:	3001      	adds	r0, #1
 8004436:	4770      	bx	lr
 8004438:	2000      	movs	r0, #0
 800443a:	e7e8      	b.n	800440e <__hi0bits+0xc>
 800443c:	2020      	movs	r0, #32
 800443e:	4770      	bx	lr

08004440 <__lo0bits>:
 8004440:	6803      	ldr	r3, [r0, #0]
 8004442:	4601      	mov	r1, r0
 8004444:	f013 0207 	ands.w	r2, r3, #7
 8004448:	d00b      	beq.n	8004462 <__lo0bits+0x22>
 800444a:	07da      	lsls	r2, r3, #31
 800444c:	d423      	bmi.n	8004496 <__lo0bits+0x56>
 800444e:	0798      	lsls	r0, r3, #30
 8004450:	bf49      	itett	mi
 8004452:	085b      	lsrmi	r3, r3, #1
 8004454:	089b      	lsrpl	r3, r3, #2
 8004456:	2001      	movmi	r0, #1
 8004458:	600b      	strmi	r3, [r1, #0]
 800445a:	bf5c      	itt	pl
 800445c:	600b      	strpl	r3, [r1, #0]
 800445e:	2002      	movpl	r0, #2
 8004460:	4770      	bx	lr
 8004462:	b298      	uxth	r0, r3
 8004464:	b9a8      	cbnz	r0, 8004492 <__lo0bits+0x52>
 8004466:	2010      	movs	r0, #16
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800446e:	bf04      	itt	eq
 8004470:	0a1b      	lsreq	r3, r3, #8
 8004472:	3008      	addeq	r0, #8
 8004474:	071a      	lsls	r2, r3, #28
 8004476:	bf04      	itt	eq
 8004478:	091b      	lsreq	r3, r3, #4
 800447a:	3004      	addeq	r0, #4
 800447c:	079a      	lsls	r2, r3, #30
 800447e:	bf04      	itt	eq
 8004480:	089b      	lsreq	r3, r3, #2
 8004482:	3002      	addeq	r0, #2
 8004484:	07da      	lsls	r2, r3, #31
 8004486:	d402      	bmi.n	800448e <__lo0bits+0x4e>
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	d006      	beq.n	800449a <__lo0bits+0x5a>
 800448c:	3001      	adds	r0, #1
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	4770      	bx	lr
 8004492:	4610      	mov	r0, r2
 8004494:	e7e9      	b.n	800446a <__lo0bits+0x2a>
 8004496:	2000      	movs	r0, #0
 8004498:	4770      	bx	lr
 800449a:	2020      	movs	r0, #32
 800449c:	4770      	bx	lr

0800449e <__i2b>:
 800449e:	b510      	push	{r4, lr}
 80044a0:	460c      	mov	r4, r1
 80044a2:	2101      	movs	r1, #1
 80044a4:	f7ff ff27 	bl	80042f6 <_Balloc>
 80044a8:	2201      	movs	r2, #1
 80044aa:	6144      	str	r4, [r0, #20]
 80044ac:	6102      	str	r2, [r0, #16]
 80044ae:	bd10      	pop	{r4, pc}

080044b0 <__multiply>:
 80044b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	4614      	mov	r4, r2
 80044b6:	690a      	ldr	r2, [r1, #16]
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	4688      	mov	r8, r1
 80044bc:	429a      	cmp	r2, r3
 80044be:	bfbe      	ittt	lt
 80044c0:	460b      	movlt	r3, r1
 80044c2:	46a0      	movlt	r8, r4
 80044c4:	461c      	movlt	r4, r3
 80044c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80044ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80044ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80044d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80044d6:	eb07 0609 	add.w	r6, r7, r9
 80044da:	42b3      	cmp	r3, r6
 80044dc:	bfb8      	it	lt
 80044de:	3101      	addlt	r1, #1
 80044e0:	f7ff ff09 	bl	80042f6 <_Balloc>
 80044e4:	f100 0514 	add.w	r5, r0, #20
 80044e8:	462b      	mov	r3, r5
 80044ea:	2200      	movs	r2, #0
 80044ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80044f0:	4573      	cmp	r3, lr
 80044f2:	d316      	bcc.n	8004522 <__multiply+0x72>
 80044f4:	f104 0214 	add.w	r2, r4, #20
 80044f8:	f108 0114 	add.w	r1, r8, #20
 80044fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004500:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	9b00      	ldr	r3, [sp, #0]
 8004508:	9201      	str	r2, [sp, #4]
 800450a:	4293      	cmp	r3, r2
 800450c:	d80c      	bhi.n	8004528 <__multiply+0x78>
 800450e:	2e00      	cmp	r6, #0
 8004510:	dd03      	ble.n	800451a <__multiply+0x6a>
 8004512:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004516:	2b00      	cmp	r3, #0
 8004518:	d05d      	beq.n	80045d6 <__multiply+0x126>
 800451a:	6106      	str	r6, [r0, #16]
 800451c:	b003      	add	sp, #12
 800451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004522:	f843 2b04 	str.w	r2, [r3], #4
 8004526:	e7e3      	b.n	80044f0 <__multiply+0x40>
 8004528:	f8b2 b000 	ldrh.w	fp, [r2]
 800452c:	f1bb 0f00 	cmp.w	fp, #0
 8004530:	d023      	beq.n	800457a <__multiply+0xca>
 8004532:	4689      	mov	r9, r1
 8004534:	46ac      	mov	ip, r5
 8004536:	f04f 0800 	mov.w	r8, #0
 800453a:	f859 4b04 	ldr.w	r4, [r9], #4
 800453e:	f8dc a000 	ldr.w	sl, [ip]
 8004542:	b2a3      	uxth	r3, r4
 8004544:	fa1f fa8a 	uxth.w	sl, sl
 8004548:	fb0b a303 	mla	r3, fp, r3, sl
 800454c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004550:	f8dc 4000 	ldr.w	r4, [ip]
 8004554:	4443      	add	r3, r8
 8004556:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800455a:	fb0b 840a 	mla	r4, fp, sl, r8
 800455e:	46e2      	mov	sl, ip
 8004560:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004564:	b29b      	uxth	r3, r3
 8004566:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800456a:	454f      	cmp	r7, r9
 800456c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004570:	f84a 3b04 	str.w	r3, [sl], #4
 8004574:	d82b      	bhi.n	80045ce <__multiply+0x11e>
 8004576:	f8cc 8004 	str.w	r8, [ip, #4]
 800457a:	9b01      	ldr	r3, [sp, #4]
 800457c:	3204      	adds	r2, #4
 800457e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004582:	f1ba 0f00 	cmp.w	sl, #0
 8004586:	d020      	beq.n	80045ca <__multiply+0x11a>
 8004588:	4689      	mov	r9, r1
 800458a:	46a8      	mov	r8, r5
 800458c:	f04f 0b00 	mov.w	fp, #0
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	f8b9 c000 	ldrh.w	ip, [r9]
 8004596:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800459a:	b29b      	uxth	r3, r3
 800459c:	fb0a 440c 	mla	r4, sl, ip, r4
 80045a0:	46c4      	mov	ip, r8
 80045a2:	445c      	add	r4, fp
 80045a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80045a8:	f84c 3b04 	str.w	r3, [ip], #4
 80045ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80045b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	fb0a b303 	mla	r3, sl, r3, fp
 80045ba:	454f      	cmp	r7, r9
 80045bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80045c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80045c4:	d805      	bhi.n	80045d2 <__multiply+0x122>
 80045c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80045ca:	3504      	adds	r5, #4
 80045cc:	e79b      	b.n	8004506 <__multiply+0x56>
 80045ce:	46d4      	mov	ip, sl
 80045d0:	e7b3      	b.n	800453a <__multiply+0x8a>
 80045d2:	46e0      	mov	r8, ip
 80045d4:	e7dd      	b.n	8004592 <__multiply+0xe2>
 80045d6:	3e01      	subs	r6, #1
 80045d8:	e799      	b.n	800450e <__multiply+0x5e>
	...

080045dc <__pow5mult>:
 80045dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e0:	4615      	mov	r5, r2
 80045e2:	f012 0203 	ands.w	r2, r2, #3
 80045e6:	4606      	mov	r6, r0
 80045e8:	460f      	mov	r7, r1
 80045ea:	d007      	beq.n	80045fc <__pow5mult+0x20>
 80045ec:	4c21      	ldr	r4, [pc, #132]	; (8004674 <__pow5mult+0x98>)
 80045ee:	3a01      	subs	r2, #1
 80045f0:	2300      	movs	r3, #0
 80045f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80045f6:	f7ff fec9 	bl	800438c <__multadd>
 80045fa:	4607      	mov	r7, r0
 80045fc:	10ad      	asrs	r5, r5, #2
 80045fe:	d035      	beq.n	800466c <__pow5mult+0x90>
 8004600:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004602:	b93c      	cbnz	r4, 8004614 <__pow5mult+0x38>
 8004604:	2010      	movs	r0, #16
 8004606:	f7ff fe55 	bl	80042b4 <malloc>
 800460a:	6270      	str	r0, [r6, #36]	; 0x24
 800460c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004610:	6004      	str	r4, [r0, #0]
 8004612:	60c4      	str	r4, [r0, #12]
 8004614:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800461c:	b94c      	cbnz	r4, 8004632 <__pow5mult+0x56>
 800461e:	f240 2171 	movw	r1, #625	; 0x271
 8004622:	4630      	mov	r0, r6
 8004624:	f7ff ff3b 	bl	800449e <__i2b>
 8004628:	2300      	movs	r3, #0
 800462a:	4604      	mov	r4, r0
 800462c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004630:	6003      	str	r3, [r0, #0]
 8004632:	f04f 0800 	mov.w	r8, #0
 8004636:	07eb      	lsls	r3, r5, #31
 8004638:	d50a      	bpl.n	8004650 <__pow5mult+0x74>
 800463a:	4639      	mov	r1, r7
 800463c:	4622      	mov	r2, r4
 800463e:	4630      	mov	r0, r6
 8004640:	f7ff ff36 	bl	80044b0 <__multiply>
 8004644:	4681      	mov	r9, r0
 8004646:	4639      	mov	r1, r7
 8004648:	4630      	mov	r0, r6
 800464a:	f7ff fe88 	bl	800435e <_Bfree>
 800464e:	464f      	mov	r7, r9
 8004650:	106d      	asrs	r5, r5, #1
 8004652:	d00b      	beq.n	800466c <__pow5mult+0x90>
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	b938      	cbnz	r0, 8004668 <__pow5mult+0x8c>
 8004658:	4622      	mov	r2, r4
 800465a:	4621      	mov	r1, r4
 800465c:	4630      	mov	r0, r6
 800465e:	f7ff ff27 	bl	80044b0 <__multiply>
 8004662:	6020      	str	r0, [r4, #0]
 8004664:	f8c0 8000 	str.w	r8, [r0]
 8004668:	4604      	mov	r4, r0
 800466a:	e7e4      	b.n	8004636 <__pow5mult+0x5a>
 800466c:	4638      	mov	r0, r7
 800466e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004672:	bf00      	nop
 8004674:	08004f58 	.word	0x08004f58

08004678 <__lshift>:
 8004678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	460c      	mov	r4, r1
 800467e:	4607      	mov	r7, r0
 8004680:	4616      	mov	r6, r2
 8004682:	6923      	ldr	r3, [r4, #16]
 8004684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004688:	eb0a 0903 	add.w	r9, sl, r3
 800468c:	6849      	ldr	r1, [r1, #4]
 800468e:	68a3      	ldr	r3, [r4, #8]
 8004690:	f109 0501 	add.w	r5, r9, #1
 8004694:	42ab      	cmp	r3, r5
 8004696:	db32      	blt.n	80046fe <__lshift+0x86>
 8004698:	4638      	mov	r0, r7
 800469a:	f7ff fe2c 	bl	80042f6 <_Balloc>
 800469e:	2300      	movs	r3, #0
 80046a0:	4680      	mov	r8, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	f100 0114 	add.w	r1, r0, #20
 80046a8:	4553      	cmp	r3, sl
 80046aa:	db2b      	blt.n	8004704 <__lshift+0x8c>
 80046ac:	6920      	ldr	r0, [r4, #16]
 80046ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80046b2:	f104 0314 	add.w	r3, r4, #20
 80046b6:	f016 021f 	ands.w	r2, r6, #31
 80046ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80046be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80046c2:	d025      	beq.n	8004710 <__lshift+0x98>
 80046c4:	2000      	movs	r0, #0
 80046c6:	f1c2 0e20 	rsb	lr, r2, #32
 80046ca:	468a      	mov	sl, r1
 80046cc:	681e      	ldr	r6, [r3, #0]
 80046ce:	4096      	lsls	r6, r2
 80046d0:	4330      	orrs	r0, r6
 80046d2:	f84a 0b04 	str.w	r0, [sl], #4
 80046d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80046da:	459c      	cmp	ip, r3
 80046dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80046e0:	d814      	bhi.n	800470c <__lshift+0x94>
 80046e2:	6048      	str	r0, [r1, #4]
 80046e4:	b108      	cbz	r0, 80046ea <__lshift+0x72>
 80046e6:	f109 0502 	add.w	r5, r9, #2
 80046ea:	3d01      	subs	r5, #1
 80046ec:	4638      	mov	r0, r7
 80046ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80046f2:	4621      	mov	r1, r4
 80046f4:	f7ff fe33 	bl	800435e <_Bfree>
 80046f8:	4640      	mov	r0, r8
 80046fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fe:	3101      	adds	r1, #1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	e7c7      	b.n	8004694 <__lshift+0x1c>
 8004704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004708:	3301      	adds	r3, #1
 800470a:	e7cd      	b.n	80046a8 <__lshift+0x30>
 800470c:	4651      	mov	r1, sl
 800470e:	e7dc      	b.n	80046ca <__lshift+0x52>
 8004710:	3904      	subs	r1, #4
 8004712:	f853 2b04 	ldr.w	r2, [r3], #4
 8004716:	459c      	cmp	ip, r3
 8004718:	f841 2f04 	str.w	r2, [r1, #4]!
 800471c:	d8f9      	bhi.n	8004712 <__lshift+0x9a>
 800471e:	e7e4      	b.n	80046ea <__lshift+0x72>

08004720 <__mcmp>:
 8004720:	6903      	ldr	r3, [r0, #16]
 8004722:	690a      	ldr	r2, [r1, #16]
 8004724:	b530      	push	{r4, r5, lr}
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	d10c      	bne.n	8004744 <__mcmp+0x24>
 800472a:	0092      	lsls	r2, r2, #2
 800472c:	3014      	adds	r0, #20
 800472e:	3114      	adds	r1, #20
 8004730:	1884      	adds	r4, r0, r2
 8004732:	4411      	add	r1, r2
 8004734:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004738:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800473c:	4295      	cmp	r5, r2
 800473e:	d003      	beq.n	8004748 <__mcmp+0x28>
 8004740:	d305      	bcc.n	800474e <__mcmp+0x2e>
 8004742:	2301      	movs	r3, #1
 8004744:	4618      	mov	r0, r3
 8004746:	bd30      	pop	{r4, r5, pc}
 8004748:	42a0      	cmp	r0, r4
 800474a:	d3f3      	bcc.n	8004734 <__mcmp+0x14>
 800474c:	e7fa      	b.n	8004744 <__mcmp+0x24>
 800474e:	f04f 33ff 	mov.w	r3, #4294967295
 8004752:	e7f7      	b.n	8004744 <__mcmp+0x24>

08004754 <__mdiff>:
 8004754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	460d      	mov	r5, r1
 800475a:	4607      	mov	r7, r0
 800475c:	4611      	mov	r1, r2
 800475e:	4628      	mov	r0, r5
 8004760:	4614      	mov	r4, r2
 8004762:	f7ff ffdd 	bl	8004720 <__mcmp>
 8004766:	1e06      	subs	r6, r0, #0
 8004768:	d108      	bne.n	800477c <__mdiff+0x28>
 800476a:	4631      	mov	r1, r6
 800476c:	4638      	mov	r0, r7
 800476e:	f7ff fdc2 	bl	80042f6 <_Balloc>
 8004772:	2301      	movs	r3, #1
 8004774:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477c:	bfa4      	itt	ge
 800477e:	4623      	movge	r3, r4
 8004780:	462c      	movge	r4, r5
 8004782:	4638      	mov	r0, r7
 8004784:	6861      	ldr	r1, [r4, #4]
 8004786:	bfa6      	itte	ge
 8004788:	461d      	movge	r5, r3
 800478a:	2600      	movge	r6, #0
 800478c:	2601      	movlt	r6, #1
 800478e:	f7ff fdb2 	bl	80042f6 <_Balloc>
 8004792:	f04f 0e00 	mov.w	lr, #0
 8004796:	60c6      	str	r6, [r0, #12]
 8004798:	692b      	ldr	r3, [r5, #16]
 800479a:	6926      	ldr	r6, [r4, #16]
 800479c:	f104 0214 	add.w	r2, r4, #20
 80047a0:	f105 0914 	add.w	r9, r5, #20
 80047a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80047a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80047ac:	f100 0114 	add.w	r1, r0, #20
 80047b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80047b4:	f859 5b04 	ldr.w	r5, [r9], #4
 80047b8:	fa1f f38a 	uxth.w	r3, sl
 80047bc:	4473      	add	r3, lr
 80047be:	b2ac      	uxth	r4, r5
 80047c0:	1b1b      	subs	r3, r3, r4
 80047c2:	0c2c      	lsrs	r4, r5, #16
 80047c4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80047c8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80047d2:	45c8      	cmp	r8, r9
 80047d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80047d8:	4694      	mov	ip, r2
 80047da:	f841 4b04 	str.w	r4, [r1], #4
 80047de:	d8e7      	bhi.n	80047b0 <__mdiff+0x5c>
 80047e0:	45bc      	cmp	ip, r7
 80047e2:	d304      	bcc.n	80047ee <__mdiff+0x9a>
 80047e4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80047e8:	b183      	cbz	r3, 800480c <__mdiff+0xb8>
 80047ea:	6106      	str	r6, [r0, #16]
 80047ec:	e7c4      	b.n	8004778 <__mdiff+0x24>
 80047ee:	f85c 4b04 	ldr.w	r4, [ip], #4
 80047f2:	b2a2      	uxth	r2, r4
 80047f4:	4472      	add	r2, lr
 80047f6:	1413      	asrs	r3, r2, #16
 80047f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80047fc:	b292      	uxth	r2, r2
 80047fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004802:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004806:	f841 2b04 	str.w	r2, [r1], #4
 800480a:	e7e9      	b.n	80047e0 <__mdiff+0x8c>
 800480c:	3e01      	subs	r6, #1
 800480e:	e7e9      	b.n	80047e4 <__mdiff+0x90>

08004810 <__d2b>:
 8004810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004814:	461c      	mov	r4, r3
 8004816:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800481a:	2101      	movs	r1, #1
 800481c:	4690      	mov	r8, r2
 800481e:	f7ff fd6a 	bl	80042f6 <_Balloc>
 8004822:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004826:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800482a:	4607      	mov	r7, r0
 800482c:	bb34      	cbnz	r4, 800487c <__d2b+0x6c>
 800482e:	9201      	str	r2, [sp, #4]
 8004830:	f1b8 0200 	subs.w	r2, r8, #0
 8004834:	d027      	beq.n	8004886 <__d2b+0x76>
 8004836:	a802      	add	r0, sp, #8
 8004838:	f840 2d08 	str.w	r2, [r0, #-8]!
 800483c:	f7ff fe00 	bl	8004440 <__lo0bits>
 8004840:	9900      	ldr	r1, [sp, #0]
 8004842:	b1f0      	cbz	r0, 8004882 <__d2b+0x72>
 8004844:	9a01      	ldr	r2, [sp, #4]
 8004846:	f1c0 0320 	rsb	r3, r0, #32
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	430b      	orrs	r3, r1
 8004850:	40c2      	lsrs	r2, r0
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	9201      	str	r2, [sp, #4]
 8004856:	9b01      	ldr	r3, [sp, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf14      	ite	ne
 800485c:	2102      	movne	r1, #2
 800485e:	2101      	moveq	r1, #1
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	6139      	str	r1, [r7, #16]
 8004864:	b1c4      	cbz	r4, 8004898 <__d2b+0x88>
 8004866:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800486a:	4404      	add	r4, r0
 800486c:	6034      	str	r4, [r6, #0]
 800486e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004872:	6028      	str	r0, [r5, #0]
 8004874:	4638      	mov	r0, r7
 8004876:	b002      	add	sp, #8
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004880:	e7d5      	b.n	800482e <__d2b+0x1e>
 8004882:	6179      	str	r1, [r7, #20]
 8004884:	e7e7      	b.n	8004856 <__d2b+0x46>
 8004886:	a801      	add	r0, sp, #4
 8004888:	f7ff fdda 	bl	8004440 <__lo0bits>
 800488c:	2101      	movs	r1, #1
 800488e:	9b01      	ldr	r3, [sp, #4]
 8004890:	6139      	str	r1, [r7, #16]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	3020      	adds	r0, #32
 8004896:	e7e5      	b.n	8004864 <__d2b+0x54>
 8004898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800489c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80048a0:	6030      	str	r0, [r6, #0]
 80048a2:	6918      	ldr	r0, [r3, #16]
 80048a4:	f7ff fdad 	bl	8004402 <__hi0bits>
 80048a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80048ac:	e7e1      	b.n	8004872 <__d2b+0x62>

080048ae <_calloc_r>:
 80048ae:	b538      	push	{r3, r4, r5, lr}
 80048b0:	fb02 f401 	mul.w	r4, r2, r1
 80048b4:	4621      	mov	r1, r4
 80048b6:	f000 f855 	bl	8004964 <_malloc_r>
 80048ba:	4605      	mov	r5, r0
 80048bc:	b118      	cbz	r0, 80048c6 <_calloc_r+0x18>
 80048be:	4622      	mov	r2, r4
 80048c0:	2100      	movs	r1, #0
 80048c2:	f7fe fa2d 	bl	8002d20 <memset>
 80048c6:	4628      	mov	r0, r5
 80048c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080048cc <_free_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4605      	mov	r5, r0
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d043      	beq.n	800495c <_free_r+0x90>
 80048d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d8:	1f0c      	subs	r4, r1, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfb8      	it	lt
 80048de:	18e4      	addlt	r4, r4, r3
 80048e0:	f000 fa27 	bl	8004d32 <__malloc_lock>
 80048e4:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <_free_r+0x94>)
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	4610      	mov	r0, r2
 80048ea:	b933      	cbnz	r3, 80048fa <_free_r+0x2e>
 80048ec:	6063      	str	r3, [r4, #4]
 80048ee:	6014      	str	r4, [r2, #0]
 80048f0:	4628      	mov	r0, r5
 80048f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f6:	f000 ba1d 	b.w	8004d34 <__malloc_unlock>
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d90b      	bls.n	8004916 <_free_r+0x4a>
 80048fe:	6821      	ldr	r1, [r4, #0]
 8004900:	1862      	adds	r2, r4, r1
 8004902:	4293      	cmp	r3, r2
 8004904:	bf01      	itttt	eq
 8004906:	681a      	ldreq	r2, [r3, #0]
 8004908:	685b      	ldreq	r3, [r3, #4]
 800490a:	1852      	addeq	r2, r2, r1
 800490c:	6022      	streq	r2, [r4, #0]
 800490e:	6063      	str	r3, [r4, #4]
 8004910:	6004      	str	r4, [r0, #0]
 8004912:	e7ed      	b.n	80048f0 <_free_r+0x24>
 8004914:	4613      	mov	r3, r2
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	b10a      	cbz	r2, 800491e <_free_r+0x52>
 800491a:	42a2      	cmp	r2, r4
 800491c:	d9fa      	bls.n	8004914 <_free_r+0x48>
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	1858      	adds	r0, r3, r1
 8004922:	42a0      	cmp	r0, r4
 8004924:	d10b      	bne.n	800493e <_free_r+0x72>
 8004926:	6820      	ldr	r0, [r4, #0]
 8004928:	4401      	add	r1, r0
 800492a:	1858      	adds	r0, r3, r1
 800492c:	4282      	cmp	r2, r0
 800492e:	6019      	str	r1, [r3, #0]
 8004930:	d1de      	bne.n	80048f0 <_free_r+0x24>
 8004932:	6810      	ldr	r0, [r2, #0]
 8004934:	6852      	ldr	r2, [r2, #4]
 8004936:	4401      	add	r1, r0
 8004938:	6019      	str	r1, [r3, #0]
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	e7d8      	b.n	80048f0 <_free_r+0x24>
 800493e:	d902      	bls.n	8004946 <_free_r+0x7a>
 8004940:	230c      	movs	r3, #12
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	e7d4      	b.n	80048f0 <_free_r+0x24>
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	1821      	adds	r1, r4, r0
 800494a:	428a      	cmp	r2, r1
 800494c:	bf01      	itttt	eq
 800494e:	6811      	ldreq	r1, [r2, #0]
 8004950:	6852      	ldreq	r2, [r2, #4]
 8004952:	1809      	addeq	r1, r1, r0
 8004954:	6021      	streq	r1, [r4, #0]
 8004956:	6062      	str	r2, [r4, #4]
 8004958:	605c      	str	r4, [r3, #4]
 800495a:	e7c9      	b.n	80048f0 <_free_r+0x24>
 800495c:	bd38      	pop	{r3, r4, r5, pc}
 800495e:	bf00      	nop
 8004960:	2000020c 	.word	0x2000020c

08004964 <_malloc_r>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	1ccd      	adds	r5, r1, #3
 8004968:	f025 0503 	bic.w	r5, r5, #3
 800496c:	3508      	adds	r5, #8
 800496e:	2d0c      	cmp	r5, #12
 8004970:	bf38      	it	cc
 8004972:	250c      	movcc	r5, #12
 8004974:	2d00      	cmp	r5, #0
 8004976:	4606      	mov	r6, r0
 8004978:	db01      	blt.n	800497e <_malloc_r+0x1a>
 800497a:	42a9      	cmp	r1, r5
 800497c:	d903      	bls.n	8004986 <_malloc_r+0x22>
 800497e:	230c      	movs	r3, #12
 8004980:	6033      	str	r3, [r6, #0]
 8004982:	2000      	movs	r0, #0
 8004984:	bd70      	pop	{r4, r5, r6, pc}
 8004986:	f000 f9d4 	bl	8004d32 <__malloc_lock>
 800498a:	4a21      	ldr	r2, [pc, #132]	; (8004a10 <_malloc_r+0xac>)
 800498c:	6814      	ldr	r4, [r2, #0]
 800498e:	4621      	mov	r1, r4
 8004990:	b991      	cbnz	r1, 80049b8 <_malloc_r+0x54>
 8004992:	4c20      	ldr	r4, [pc, #128]	; (8004a14 <_malloc_r+0xb0>)
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	b91b      	cbnz	r3, 80049a0 <_malloc_r+0x3c>
 8004998:	4630      	mov	r0, r6
 800499a:	f000 f98f 	bl	8004cbc <_sbrk_r>
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	4629      	mov	r1, r5
 80049a2:	4630      	mov	r0, r6
 80049a4:	f000 f98a 	bl	8004cbc <_sbrk_r>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d124      	bne.n	80049f6 <_malloc_r+0x92>
 80049ac:	230c      	movs	r3, #12
 80049ae:	4630      	mov	r0, r6
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	f000 f9bf 	bl	8004d34 <__malloc_unlock>
 80049b6:	e7e4      	b.n	8004982 <_malloc_r+0x1e>
 80049b8:	680b      	ldr	r3, [r1, #0]
 80049ba:	1b5b      	subs	r3, r3, r5
 80049bc:	d418      	bmi.n	80049f0 <_malloc_r+0x8c>
 80049be:	2b0b      	cmp	r3, #11
 80049c0:	d90f      	bls.n	80049e2 <_malloc_r+0x7e>
 80049c2:	600b      	str	r3, [r1, #0]
 80049c4:	18cc      	adds	r4, r1, r3
 80049c6:	50cd      	str	r5, [r1, r3]
 80049c8:	4630      	mov	r0, r6
 80049ca:	f000 f9b3 	bl	8004d34 <__malloc_unlock>
 80049ce:	f104 000b 	add.w	r0, r4, #11
 80049d2:	1d23      	adds	r3, r4, #4
 80049d4:	f020 0007 	bic.w	r0, r0, #7
 80049d8:	1ac3      	subs	r3, r0, r3
 80049da:	d0d3      	beq.n	8004984 <_malloc_r+0x20>
 80049dc:	425a      	negs	r2, r3
 80049de:	50e2      	str	r2, [r4, r3]
 80049e0:	e7d0      	b.n	8004984 <_malloc_r+0x20>
 80049e2:	684b      	ldr	r3, [r1, #4]
 80049e4:	428c      	cmp	r4, r1
 80049e6:	bf16      	itet	ne
 80049e8:	6063      	strne	r3, [r4, #4]
 80049ea:	6013      	streq	r3, [r2, #0]
 80049ec:	460c      	movne	r4, r1
 80049ee:	e7eb      	b.n	80049c8 <_malloc_r+0x64>
 80049f0:	460c      	mov	r4, r1
 80049f2:	6849      	ldr	r1, [r1, #4]
 80049f4:	e7cc      	b.n	8004990 <_malloc_r+0x2c>
 80049f6:	1cc4      	adds	r4, r0, #3
 80049f8:	f024 0403 	bic.w	r4, r4, #3
 80049fc:	42a0      	cmp	r0, r4
 80049fe:	d005      	beq.n	8004a0c <_malloc_r+0xa8>
 8004a00:	1a21      	subs	r1, r4, r0
 8004a02:	4630      	mov	r0, r6
 8004a04:	f000 f95a 	bl	8004cbc <_sbrk_r>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d0cf      	beq.n	80049ac <_malloc_r+0x48>
 8004a0c:	6025      	str	r5, [r4, #0]
 8004a0e:	e7db      	b.n	80049c8 <_malloc_r+0x64>
 8004a10:	2000020c 	.word	0x2000020c
 8004a14:	20000210 	.word	0x20000210

08004a18 <__ssputs_r>:
 8004a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	688e      	ldr	r6, [r1, #8]
 8004a1e:	4682      	mov	sl, r0
 8004a20:	429e      	cmp	r6, r3
 8004a22:	460c      	mov	r4, r1
 8004a24:	4690      	mov	r8, r2
 8004a26:	4699      	mov	r9, r3
 8004a28:	d837      	bhi.n	8004a9a <__ssputs_r+0x82>
 8004a2a:	898a      	ldrh	r2, [r1, #12]
 8004a2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a30:	d031      	beq.n	8004a96 <__ssputs_r+0x7e>
 8004a32:	2302      	movs	r3, #2
 8004a34:	6825      	ldr	r5, [r4, #0]
 8004a36:	6909      	ldr	r1, [r1, #16]
 8004a38:	1a6f      	subs	r7, r5, r1
 8004a3a:	6965      	ldr	r5, [r4, #20]
 8004a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a40:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a44:	f109 0301 	add.w	r3, r9, #1
 8004a48:	443b      	add	r3, r7
 8004a4a:	429d      	cmp	r5, r3
 8004a4c:	bf38      	it	cc
 8004a4e:	461d      	movcc	r5, r3
 8004a50:	0553      	lsls	r3, r2, #21
 8004a52:	d530      	bpl.n	8004ab6 <__ssputs_r+0x9e>
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7ff ff85 	bl	8004964 <_malloc_r>
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	b950      	cbnz	r0, 8004a74 <__ssputs_r+0x5c>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	f8ca 3000 	str.w	r3, [sl]
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a6e:	81a3      	strh	r3, [r4, #12]
 8004a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a74:	463a      	mov	r2, r7
 8004a76:	6921      	ldr	r1, [r4, #16]
 8004a78:	f7ff fc32 	bl	80042e0 <memcpy>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a86:	81a3      	strh	r3, [r4, #12]
 8004a88:	6126      	str	r6, [r4, #16]
 8004a8a:	443e      	add	r6, r7
 8004a8c:	6026      	str	r6, [r4, #0]
 8004a8e:	464e      	mov	r6, r9
 8004a90:	6165      	str	r5, [r4, #20]
 8004a92:	1bed      	subs	r5, r5, r7
 8004a94:	60a5      	str	r5, [r4, #8]
 8004a96:	454e      	cmp	r6, r9
 8004a98:	d900      	bls.n	8004a9c <__ssputs_r+0x84>
 8004a9a:	464e      	mov	r6, r9
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	6820      	ldr	r0, [r4, #0]
 8004aa2:	f000 f92d 	bl	8004d00 <memmove>
 8004aa6:	68a3      	ldr	r3, [r4, #8]
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	1b9b      	subs	r3, r3, r6
 8004aac:	60a3      	str	r3, [r4, #8]
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	441e      	add	r6, r3
 8004ab2:	6026      	str	r6, [r4, #0]
 8004ab4:	e7dc      	b.n	8004a70 <__ssputs_r+0x58>
 8004ab6:	462a      	mov	r2, r5
 8004ab8:	f000 f93d 	bl	8004d36 <_realloc_r>
 8004abc:	4606      	mov	r6, r0
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d1e2      	bne.n	8004a88 <__ssputs_r+0x70>
 8004ac2:	6921      	ldr	r1, [r4, #16]
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	f7ff ff01 	bl	80048cc <_free_r>
 8004aca:	e7c8      	b.n	8004a5e <__ssputs_r+0x46>

08004acc <_svfiprintf_r>:
 8004acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad0:	461d      	mov	r5, r3
 8004ad2:	898b      	ldrh	r3, [r1, #12]
 8004ad4:	b09d      	sub	sp, #116	; 0x74
 8004ad6:	061f      	lsls	r7, r3, #24
 8004ad8:	4680      	mov	r8, r0
 8004ada:	460c      	mov	r4, r1
 8004adc:	4616      	mov	r6, r2
 8004ade:	d50f      	bpl.n	8004b00 <_svfiprintf_r+0x34>
 8004ae0:	690b      	ldr	r3, [r1, #16]
 8004ae2:	b96b      	cbnz	r3, 8004b00 <_svfiprintf_r+0x34>
 8004ae4:	2140      	movs	r1, #64	; 0x40
 8004ae6:	f7ff ff3d 	bl	8004964 <_malloc_r>
 8004aea:	6020      	str	r0, [r4, #0]
 8004aec:	6120      	str	r0, [r4, #16]
 8004aee:	b928      	cbnz	r0, 8004afc <_svfiprintf_r+0x30>
 8004af0:	230c      	movs	r3, #12
 8004af2:	f8c8 3000 	str.w	r3, [r8]
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	e0c8      	b.n	8004c8e <_svfiprintf_r+0x1c2>
 8004afc:	2340      	movs	r3, #64	; 0x40
 8004afe:	6163      	str	r3, [r4, #20]
 8004b00:	2300      	movs	r3, #0
 8004b02:	9309      	str	r3, [sp, #36]	; 0x24
 8004b04:	2320      	movs	r3, #32
 8004b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b0a:	2330      	movs	r3, #48	; 0x30
 8004b0c:	f04f 0b01 	mov.w	fp, #1
 8004b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b14:	9503      	str	r5, [sp, #12]
 8004b16:	4637      	mov	r7, r6
 8004b18:	463d      	mov	r5, r7
 8004b1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b1e:	b10b      	cbz	r3, 8004b24 <_svfiprintf_r+0x58>
 8004b20:	2b25      	cmp	r3, #37	; 0x25
 8004b22:	d13e      	bne.n	8004ba2 <_svfiprintf_r+0xd6>
 8004b24:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b28:	d00b      	beq.n	8004b42 <_svfiprintf_r+0x76>
 8004b2a:	4653      	mov	r3, sl
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4640      	mov	r0, r8
 8004b32:	f7ff ff71 	bl	8004a18 <__ssputs_r>
 8004b36:	3001      	adds	r0, #1
 8004b38:	f000 80a4 	beq.w	8004c84 <_svfiprintf_r+0x1b8>
 8004b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3e:	4453      	add	r3, sl
 8004b40:	9309      	str	r3, [sp, #36]	; 0x24
 8004b42:	783b      	ldrb	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 809d 	beq.w	8004c84 <_svfiprintf_r+0x1b8>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b54:	9304      	str	r3, [sp, #16]
 8004b56:	9307      	str	r3, [sp, #28]
 8004b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b5e:	462f      	mov	r7, r5
 8004b60:	2205      	movs	r2, #5
 8004b62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b66:	4850      	ldr	r0, [pc, #320]	; (8004ca8 <_svfiprintf_r+0x1dc>)
 8004b68:	f7ff fbac 	bl	80042c4 <memchr>
 8004b6c:	9b04      	ldr	r3, [sp, #16]
 8004b6e:	b9d0      	cbnz	r0, 8004ba6 <_svfiprintf_r+0xda>
 8004b70:	06d9      	lsls	r1, r3, #27
 8004b72:	bf44      	itt	mi
 8004b74:	2220      	movmi	r2, #32
 8004b76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b7a:	071a      	lsls	r2, r3, #28
 8004b7c:	bf44      	itt	mi
 8004b7e:	222b      	movmi	r2, #43	; 0x2b
 8004b80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b84:	782a      	ldrb	r2, [r5, #0]
 8004b86:	2a2a      	cmp	r2, #42	; 0x2a
 8004b88:	d015      	beq.n	8004bb6 <_svfiprintf_r+0xea>
 8004b8a:	462f      	mov	r7, r5
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	250a      	movs	r5, #10
 8004b90:	9a07      	ldr	r2, [sp, #28]
 8004b92:	4639      	mov	r1, r7
 8004b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b98:	3b30      	subs	r3, #48	; 0x30
 8004b9a:	2b09      	cmp	r3, #9
 8004b9c:	d94d      	bls.n	8004c3a <_svfiprintf_r+0x16e>
 8004b9e:	b1b8      	cbz	r0, 8004bd0 <_svfiprintf_r+0x104>
 8004ba0:	e00f      	b.n	8004bc2 <_svfiprintf_r+0xf6>
 8004ba2:	462f      	mov	r7, r5
 8004ba4:	e7b8      	b.n	8004b18 <_svfiprintf_r+0x4c>
 8004ba6:	4a40      	ldr	r2, [pc, #256]	; (8004ca8 <_svfiprintf_r+0x1dc>)
 8004ba8:	463d      	mov	r5, r7
 8004baa:	1a80      	subs	r0, r0, r2
 8004bac:	fa0b f000 	lsl.w	r0, fp, r0
 8004bb0:	4318      	orrs	r0, r3
 8004bb2:	9004      	str	r0, [sp, #16]
 8004bb4:	e7d3      	b.n	8004b5e <_svfiprintf_r+0x92>
 8004bb6:	9a03      	ldr	r2, [sp, #12]
 8004bb8:	1d11      	adds	r1, r2, #4
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	9103      	str	r1, [sp, #12]
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	db01      	blt.n	8004bc6 <_svfiprintf_r+0xfa>
 8004bc2:	9207      	str	r2, [sp, #28]
 8004bc4:	e004      	b.n	8004bd0 <_svfiprintf_r+0x104>
 8004bc6:	4252      	negs	r2, r2
 8004bc8:	f043 0302 	orr.w	r3, r3, #2
 8004bcc:	9207      	str	r2, [sp, #28]
 8004bce:	9304      	str	r3, [sp, #16]
 8004bd0:	783b      	ldrb	r3, [r7, #0]
 8004bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8004bd4:	d10c      	bne.n	8004bf0 <_svfiprintf_r+0x124>
 8004bd6:	787b      	ldrb	r3, [r7, #1]
 8004bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bda:	d133      	bne.n	8004c44 <_svfiprintf_r+0x178>
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	3702      	adds	r7, #2
 8004be0:	1d1a      	adds	r2, r3, #4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	9203      	str	r2, [sp, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bfb8      	it	lt
 8004bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bee:	9305      	str	r3, [sp, #20]
 8004bf0:	4d2e      	ldr	r5, [pc, #184]	; (8004cac <_svfiprintf_r+0x1e0>)
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	7839      	ldrb	r1, [r7, #0]
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f7ff fb64 	bl	80042c4 <memchr>
 8004bfc:	b138      	cbz	r0, 8004c0e <_svfiprintf_r+0x142>
 8004bfe:	2340      	movs	r3, #64	; 0x40
 8004c00:	1b40      	subs	r0, r0, r5
 8004c02:	fa03 f000 	lsl.w	r0, r3, r0
 8004c06:	9b04      	ldr	r3, [sp, #16]
 8004c08:	3701      	adds	r7, #1
 8004c0a:	4303      	orrs	r3, r0
 8004c0c:	9304      	str	r3, [sp, #16]
 8004c0e:	7839      	ldrb	r1, [r7, #0]
 8004c10:	2206      	movs	r2, #6
 8004c12:	4827      	ldr	r0, [pc, #156]	; (8004cb0 <_svfiprintf_r+0x1e4>)
 8004c14:	1c7e      	adds	r6, r7, #1
 8004c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c1a:	f7ff fb53 	bl	80042c4 <memchr>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d038      	beq.n	8004c94 <_svfiprintf_r+0x1c8>
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <_svfiprintf_r+0x1e8>)
 8004c24:	bb13      	cbnz	r3, 8004c6c <_svfiprintf_r+0x1a0>
 8004c26:	9b03      	ldr	r3, [sp, #12]
 8004c28:	3307      	adds	r3, #7
 8004c2a:	f023 0307 	bic.w	r3, r3, #7
 8004c2e:	3308      	adds	r3, #8
 8004c30:	9303      	str	r3, [sp, #12]
 8004c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c34:	444b      	add	r3, r9
 8004c36:	9309      	str	r3, [sp, #36]	; 0x24
 8004c38:	e76d      	b.n	8004b16 <_svfiprintf_r+0x4a>
 8004c3a:	fb05 3202 	mla	r2, r5, r2, r3
 8004c3e:	2001      	movs	r0, #1
 8004c40:	460f      	mov	r7, r1
 8004c42:	e7a6      	b.n	8004b92 <_svfiprintf_r+0xc6>
 8004c44:	2300      	movs	r3, #0
 8004c46:	250a      	movs	r5, #10
 8004c48:	4619      	mov	r1, r3
 8004c4a:	3701      	adds	r7, #1
 8004c4c:	9305      	str	r3, [sp, #20]
 8004c4e:	4638      	mov	r0, r7
 8004c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c54:	3a30      	subs	r2, #48	; 0x30
 8004c56:	2a09      	cmp	r2, #9
 8004c58:	d903      	bls.n	8004c62 <_svfiprintf_r+0x196>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0c8      	beq.n	8004bf0 <_svfiprintf_r+0x124>
 8004c5e:	9105      	str	r1, [sp, #20]
 8004c60:	e7c6      	b.n	8004bf0 <_svfiprintf_r+0x124>
 8004c62:	fb05 2101 	mla	r1, r5, r1, r2
 8004c66:	2301      	movs	r3, #1
 8004c68:	4607      	mov	r7, r0
 8004c6a:	e7f0      	b.n	8004c4e <_svfiprintf_r+0x182>
 8004c6c:	ab03      	add	r3, sp, #12
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	4622      	mov	r2, r4
 8004c72:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <_svfiprintf_r+0x1ec>)
 8004c74:	a904      	add	r1, sp, #16
 8004c76:	4640      	mov	r0, r8
 8004c78:	f7fe f8ec 	bl	8002e54 <_printf_float>
 8004c7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c80:	4681      	mov	r9, r0
 8004c82:	d1d6      	bne.n	8004c32 <_svfiprintf_r+0x166>
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	065b      	lsls	r3, r3, #25
 8004c88:	f53f af35 	bmi.w	8004af6 <_svfiprintf_r+0x2a>
 8004c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c8e:	b01d      	add	sp, #116	; 0x74
 8004c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c94:	ab03      	add	r3, sp, #12
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	4622      	mov	r2, r4
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <_svfiprintf_r+0x1ec>)
 8004c9c:	a904      	add	r1, sp, #16
 8004c9e:	4640      	mov	r0, r8
 8004ca0:	f7fe fb84 	bl	80033ac <_printf_i>
 8004ca4:	e7ea      	b.n	8004c7c <_svfiprintf_r+0x1b0>
 8004ca6:	bf00      	nop
 8004ca8:	08004f64 	.word	0x08004f64
 8004cac:	08004f6a 	.word	0x08004f6a
 8004cb0:	08004f6e 	.word	0x08004f6e
 8004cb4:	08002e55 	.word	0x08002e55
 8004cb8:	08004a19 	.word	0x08004a19

08004cbc <_sbrk_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	4c05      	ldr	r4, [pc, #20]	; (8004cd8 <_sbrk_r+0x1c>)
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	f7fc f9fa 	bl	80010c0 <_sbrk>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	d102      	bne.n	8004cd6 <_sbrk_r+0x1a>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	b103      	cbz	r3, 8004cd6 <_sbrk_r+0x1a>
 8004cd4:	602b      	str	r3, [r5, #0]
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	2000033c 	.word	0x2000033c

08004cdc <__ascii_mbtowc>:
 8004cdc:	b082      	sub	sp, #8
 8004cde:	b901      	cbnz	r1, 8004ce2 <__ascii_mbtowc+0x6>
 8004ce0:	a901      	add	r1, sp, #4
 8004ce2:	b142      	cbz	r2, 8004cf6 <__ascii_mbtowc+0x1a>
 8004ce4:	b14b      	cbz	r3, 8004cfa <__ascii_mbtowc+0x1e>
 8004ce6:	7813      	ldrb	r3, [r2, #0]
 8004ce8:	600b      	str	r3, [r1, #0]
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	1c10      	adds	r0, r2, #0
 8004cee:	bf18      	it	ne
 8004cf0:	2001      	movne	r0, #1
 8004cf2:	b002      	add	sp, #8
 8004cf4:	4770      	bx	lr
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	e7fb      	b.n	8004cf2 <__ascii_mbtowc+0x16>
 8004cfa:	f06f 0001 	mvn.w	r0, #1
 8004cfe:	e7f8      	b.n	8004cf2 <__ascii_mbtowc+0x16>

08004d00 <memmove>:
 8004d00:	4288      	cmp	r0, r1
 8004d02:	b510      	push	{r4, lr}
 8004d04:	eb01 0302 	add.w	r3, r1, r2
 8004d08:	d807      	bhi.n	8004d1a <memmove+0x1a>
 8004d0a:	1e42      	subs	r2, r0, #1
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	d00a      	beq.n	8004d26 <memmove+0x26>
 8004d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d14:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d18:	e7f8      	b.n	8004d0c <memmove+0xc>
 8004d1a:	4283      	cmp	r3, r0
 8004d1c:	d9f5      	bls.n	8004d0a <memmove+0xa>
 8004d1e:	1881      	adds	r1, r0, r2
 8004d20:	1ad2      	subs	r2, r2, r3
 8004d22:	42d3      	cmn	r3, r2
 8004d24:	d100      	bne.n	8004d28 <memmove+0x28>
 8004d26:	bd10      	pop	{r4, pc}
 8004d28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d30:	e7f7      	b.n	8004d22 <memmove+0x22>

08004d32 <__malloc_lock>:
 8004d32:	4770      	bx	lr

08004d34 <__malloc_unlock>:
 8004d34:	4770      	bx	lr

08004d36 <_realloc_r>:
 8004d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d38:	4607      	mov	r7, r0
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	460e      	mov	r6, r1
 8004d3e:	b921      	cbnz	r1, 8004d4a <_realloc_r+0x14>
 8004d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d44:	4611      	mov	r1, r2
 8004d46:	f7ff be0d 	b.w	8004964 <_malloc_r>
 8004d4a:	b922      	cbnz	r2, 8004d56 <_realloc_r+0x20>
 8004d4c:	f7ff fdbe 	bl	80048cc <_free_r>
 8004d50:	4625      	mov	r5, r4
 8004d52:	4628      	mov	r0, r5
 8004d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d56:	f000 f821 	bl	8004d9c <_malloc_usable_size_r>
 8004d5a:	42a0      	cmp	r0, r4
 8004d5c:	d20f      	bcs.n	8004d7e <_realloc_r+0x48>
 8004d5e:	4621      	mov	r1, r4
 8004d60:	4638      	mov	r0, r7
 8004d62:	f7ff fdff 	bl	8004964 <_malloc_r>
 8004d66:	4605      	mov	r5, r0
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d0f2      	beq.n	8004d52 <_realloc_r+0x1c>
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4622      	mov	r2, r4
 8004d70:	f7ff fab6 	bl	80042e0 <memcpy>
 8004d74:	4631      	mov	r1, r6
 8004d76:	4638      	mov	r0, r7
 8004d78:	f7ff fda8 	bl	80048cc <_free_r>
 8004d7c:	e7e9      	b.n	8004d52 <_realloc_r+0x1c>
 8004d7e:	4635      	mov	r5, r6
 8004d80:	e7e7      	b.n	8004d52 <_realloc_r+0x1c>

08004d82 <__ascii_wctomb>:
 8004d82:	b149      	cbz	r1, 8004d98 <__ascii_wctomb+0x16>
 8004d84:	2aff      	cmp	r2, #255	; 0xff
 8004d86:	bf8b      	itete	hi
 8004d88:	238a      	movhi	r3, #138	; 0x8a
 8004d8a:	700a      	strbls	r2, [r1, #0]
 8004d8c:	6003      	strhi	r3, [r0, #0]
 8004d8e:	2001      	movls	r0, #1
 8004d90:	bf88      	it	hi
 8004d92:	f04f 30ff 	movhi.w	r0, #4294967295
 8004d96:	4770      	bx	lr
 8004d98:	4608      	mov	r0, r1
 8004d9a:	4770      	bx	lr

08004d9c <_malloc_usable_size_r>:
 8004d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da0:	1f18      	subs	r0, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bfbc      	itt	lt
 8004da6:	580b      	ldrlt	r3, [r1, r0]
 8004da8:	18c0      	addlt	r0, r0, r3
 8004daa:	4770      	bx	lr

08004dac <_init>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr

08004db8 <_fini>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr
