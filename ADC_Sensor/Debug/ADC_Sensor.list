
ADC_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004958  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08004af8  08004af8  00014af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d80  08004d80  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d88  08004d88  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200001dc  08004f6c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004f6c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b73  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000150d  00000000  00000000  00027d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a0  00000000  00000000  00029290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  00029930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f4f  00000000  00000000  00029f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062ac  00000000  00000000  0003fe67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088c56  00000000  00000000  00046113  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ced69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002418  00000000  00000000  000cede4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ae0 	.word	0x08004ae0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08004ae0 	.word	0x08004ae0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
void Error_Handler(void);

UART_HandleTypeDef huart2;
ADC_HandleTypeDef hadc1;

int main(void){
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b08b      	sub	sp, #44	; 0x2c
 8000ebc:	af00      	add	r7, sp, #0

	HAL_Init();
 8000ebe:	f000 fa13 	bl	80012e8 <HAL_Init>
	SystemClockConfig();
 8000ec2:	f000 f87b 	bl	8000fbc <SystemClockConfig>

	ADC1_Init();
 8000ec6:	f000 f881 	bl	8000fcc <ADC1_Init>

	HAL_ADC_Start(&hadc1);
 8000eca:	4833      	ldr	r0, [pc, #204]	; (8000f98 <main+0xe0>)
 8000ecc:	f000 fac2 	bl	8001454 <HAL_ADC_Start>

	UART2_Init();
 8000ed0:	f000 f8c6 	bl	8001060 <UART2_Init>

		char msg[20];
		uint16_t rawValue;
		double temp;

		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);	// Polling mode
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	482f      	ldr	r0, [pc, #188]	; (8000f98 <main+0xe0>)
 8000eda:	f000 fb61 	bl	80015a0 <HAL_ADC_PollForConversion>

		rawValue = HAL_ADC_GetValue(&hadc1);	// Get ADC raw value after conversion
 8000ede:	482e      	ldr	r0, [pc, #184]	; (8000f98 <main+0xe0>)
 8000ee0:	f000 fbe2 	bl	80016a8 <HAL_ADC_GetValue>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	84fb      	strh	r3, [r7, #38]	; 0x26
		temp = ((float)rawValue) / 4095 * 3300;	// Just simulating a temperature sensor with a formula
 8000ee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000f9c <main+0xe4>
 8000ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000efa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000fa0 <main+0xe8>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	ee17 0a90 	vmov	r0, s15
 8000f06:	f7ff fb27 	bl	8000558 <__aeabi_f2d>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460c      	mov	r4, r1
 8000f0e:	e9c7 3406 	strd	r3, r4, [r7, #24]
		temp = ((temp - 760.0) / 2.5) + 25;
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <main+0xec>)
 8000f18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f1c:	f7ff f9bc 	bl	8000298 <__aeabi_dsub>
 8000f20:	4603      	mov	r3, r0
 8000f22:	460c      	mov	r4, r1
 8000f24:	4618      	mov	r0, r3
 8000f26:	4621      	mov	r1, r4
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <main+0xf0>)
 8000f2e:	f7ff fc95 	bl	800085c <__aeabi_ddiv>
 8000f32:	4603      	mov	r3, r0
 8000f34:	460c      	mov	r4, r1
 8000f36:	4618      	mov	r0, r3
 8000f38:	4621      	mov	r1, r4
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <main+0xf4>)
 8000f40:	f7ff f9ac 	bl	800029c <__adddf3>
 8000f44:	4603      	mov	r3, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	e9c7 3406 	strd	r3, r4, [r7, #24]

		sprintf(msg, "rawValue: %hu\r\n", rawValue);	// Print raw value in UART
 8000f4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4917      	ldr	r1, [pc, #92]	; (8000fb0 <main+0xf8>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 f9e2 	bl	800331c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f940 	bl	80001e0 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	1d39      	adds	r1, r7, #4
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <main+0xfc>)
 8000f6c:	f001 f8e9 	bl	8002142 <HAL_UART_Transmit>

		// Put the command "-u _printf_float" in MCU GCC Linker (Miscellaneous)
		sprintf(msg, "Temperature: %.2f\r\n", temp);	// Print temperature value in UART
 8000f70:	1d38      	adds	r0, r7, #4
 8000f72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f76:	4910      	ldr	r1, [pc, #64]	; (8000fb8 <main+0x100>)
 8000f78:	f002 f9d0 	bl	800331c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f92e 	bl	80001e0 <strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	1d39      	adds	r1, r7, #4
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <main+0xfc>)
 8000f90:	f001 f8d7 	bl	8002142 <HAL_UART_Transmit>
	while(1){
 8000f94:	e79e      	b.n	8000ed4 <main+0x1c>
 8000f96:	bf00      	nop
 8000f98:	20000204 	.word	0x20000204
 8000f9c:	457ff000 	.word	0x457ff000
 8000fa0:	454e4000 	.word	0x454e4000
 8000fa4:	4087c000 	.word	0x4087c000
 8000fa8:	40040000 	.word	0x40040000
 8000fac:	40390000 	.word	0x40390000
 8000fb0:	08004af8 	.word	0x08004af8
 8000fb4:	2000024c 	.word	0x2000024c
 8000fb8:	08004b08 	.word	0x08004b08

08000fbc <SystemClockConfig>:

	return 0;

}

void SystemClockConfig(void){
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <ADC1_Init>:

/* ADC1 init function */
void ADC1_Init(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

	/* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
	hadc1.Instance = ADC1;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <ADC1_Init+0x8c>)
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	; (800105c <ADC1_Init+0x90>)
 8000fe2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;	/* The clock of the analog part of the ADC is the half of the PCLK frequency*/
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <ADC1_Init+0x8c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;	/* MAX Resolution of ADC Channel */
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <ADC1_Init+0x8c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <ADC1_Init+0x8c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;	/* We can repeatedly poll for a conversion without stopping and then restarting the ADC */
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <ADC1_Init+0x8c>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <ADC1_Init+0x8c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;	/* Specifies the data align of the converted result. ADC data register is implemented as half-word register. */
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <ADC1_Init+0x8c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;	/* Meaningless. Single conversion mode automatically assumes that the number of sampled channels is equal to 1. */
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <ADC1_Init+0x8c>)
 800100c:	2201      	movs	r2, #1
 800100e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;	/* No DMA for now */
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <ADC1_Init+0x8c>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;	/* End Of Conversion (EOC) for continuous conversion */
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <ADC1_Init+0x8c>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]

	if(HAL_ADC_Init(&hadc1) != HAL_OK){
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <ADC1_Init+0x8c>)
 8001020:	f000 f9d4 	bl	80013cc <HAL_ADC_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <ADC1_Init+0x62>
		Error_Handler();
 800102a:	f000 f83f 	bl	80010ac <Error_Handler>
	}

	/* Configure for the selected ADC regular channel its corresponding rank in the sequence and its sample time */
	sConfig.Channel = ADC_CHANNEL_1;	/* PA1 pin */
 800102e:	2301      	movs	r3, #1
 8001030:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
	/* FCLK = 16MHz
	 * ADCCLK = 8MHz
	 * T_ADCCLK = 12.5us
	 * ADC_SAMPLETIME_3CYCLES
	 * We have that an A/D conversion is performed every 37.5μs*/
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]

	/* Put reference to ADC Channel with VREF+ or VREF- */
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <ADC1_Init+0x8c>)
 8001040:	f000 fb40 	bl	80016c4 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <ADC1_Init+0x82>
		Error_Handler();
 800104a:	f000 f82f 	bl	80010ac <Error_Handler>
	}
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000204 	.word	0x20000204
 800105c:	40012000 	.word	0x40012000

08001060 <UART2_Init>:

/* High level initialization */
void UART2_Init(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <UART2_Init+0x44>)
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <UART2_Init+0x48>)
 8001068:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <UART2_Init+0x44>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <UART2_Init+0x44>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <UART2_Init+0x44>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <UART2_Init+0x44>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <UART2_Init+0x44>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <UART2_Init+0x44>)
 800108c:	2208      	movs	r2, #8
 800108e:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <UART2_Init+0x44>)
 8001092:	f001 f809 	bl	80020a8 <HAL_UART_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <UART2_Init+0x40>
		//There is a problem
		Error_Handler();
 800109c:	f000 f806 	bl	80010ac <Error_Handler>
	}
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000024c 	.word	0x2000024c
 80010a8:	40004400 	.word	0x40004400

080010ac <Error_Handler>:

void Error_Handler(void){
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	while(1);
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x4>
	...

080010b4 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

    //Here will do low level processor specific inits.

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 fdf1 	bl	8001ca0 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x40>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <HAL_MspInit+0x40>)
 80010c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80010c8:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	f06f 000b 	mvn.w	r0, #11
 80010d2:	f000 fdf0 	bl	8001cb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	f06f 000a 	mvn.w	r0, #10
 80010de:	f000 fdea 	bl	8001cb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	f06f 0009 	mvn.w	r0, #9
 80010ea:	f000 fde4 	bl	8001cb6 <HAL_NVIC_SetPriority>

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	__HAL_RCC_ADC1_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_ADC_MspInit+0x70>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_ADC_MspInit+0x70>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6453      	str	r3, [r2, #68]	; 0x44
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_ADC_MspInit+0x70>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_ADC_MspInit+0x70>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <HAL_ADC_MspInit+0x70>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_ADC_MspInit+0x70>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
	/**ADC1 GPIO Configuration
	 PA1     ------> ADC1_IN1
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001148:	2302      	movs	r3, #2
 800114a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114c:	2303      	movs	r3, #3
 800114e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <HAL_ADC_MspInit+0x74>)
 800115c:	f000 fdee 	bl	8001d3c <HAL_GPIO_Init>

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000

08001170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_UART_MspInit+0x88>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_UART_MspInit+0x88>)
 8001182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_UART_MspInit+0x88>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_UART_MspInit+0x88>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <HAL_UART_MspInit+0x88>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6313      	str	r3, [r2, #48]	; 0x30
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 80011b0:	2304      	movs	r3, #4
 80011b2:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80011c0:	2307      	movs	r3, #7
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	480c      	ldr	r0, [pc, #48]	; (80011fc <HAL_UART_MspInit+0x8c>)
 80011cc:	f000 fdb6 	bl	8001d3c <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80011d0:	2308      	movs	r3, #8
 80011d2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4808      	ldr	r0, [pc, #32]	; (80011fc <HAL_UART_MspInit+0x8c>)
 80011dc:	f000 fdae 	bl	8001d3c <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011e0:	2026      	movs	r0, #38	; 0x26
 80011e2:	f000 fd84 	bl	8001cee <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	210f      	movs	r1, #15
 80011ea:	2026      	movs	r0, #38	; 0x26
 80011ec:	f000 fd63 	bl	8001cb6 <HAL_NVIC_SetPriority>
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000

08001200 <SysTick_Handler>:

#include "main.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8001204:	f000 f8c2 	bl	800138c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001208:	f000 fd8b 	bl	8001d22 <HAL_SYSTICK_IRQHandler>

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x50>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x16>
		heap_end = &end;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <_sbrk+0x50>)
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <_sbrk+0x54>)
 8001224:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <_sbrk+0x50>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <_sbrk+0x50>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4413      	add	r3, r2
 8001234:	466a      	mov	r2, sp
 8001236:	4293      	cmp	r3, r2
 8001238:	d907      	bls.n	800124a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800123a:	f001 fbe1 	bl	8002a00 <__errno>
 800123e:	4602      	mov	r2, r0
 8001240:	230c      	movs	r3, #12
 8001242:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	e006      	b.n	8001258 <_sbrk+0x48>
	}

	heap_end += incr;
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <_sbrk+0x50>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a03      	ldr	r2, [pc, #12]	; (8001260 <_sbrk+0x50>)
 8001254:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200001f8 	.word	0x200001f8
 8001264:	20000298 	.word	0x20000298

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <SystemInit+0x28>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <SystemInit+0x28>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SystemInit+0x28>)
 800127e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001282:	609a      	str	r2, [r3, #8]
#endif
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800129a:	e003      	b.n	80012a4 <LoopCopyDataInit>

0800129c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800129e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012a2:	3104      	adds	r1, #4

080012a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012ac:	d3f6      	bcc.n	800129c <CopyDataInit>
  ldr  r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012b0:	e002      	b.n	80012b8 <LoopFillZerobss>

080012b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012b4:	f842 3b04 	str.w	r3, [r2], #4

080012b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012bc:	d3f9      	bcc.n	80012b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012be:	f7ff ffd3 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f001 fba3 	bl	8002a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff fdf7 	bl	8000eb8 <main>
  bx  lr    
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012cc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80012d0:	08004d90 	.word	0x08004d90
  ldr  r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012d8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80012dc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80012e0:	20000294 	.word	0x20000294

080012e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_Init+0x40>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_Init+0x40>)
 80012fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_Init+0x40>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 fcc5 	bl	8001ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001316:	2000      	movs	r0, #0
 8001318:	f000 f808 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f7ff feca 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023c00 	.word	0x40023c00

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x54>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x58>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fcdd 	bl	8001d0a <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 fca5 	bl	8001cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_InitTick+0x5c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000000 	.word	0x20000000
 8001384:	20000008 	.word	0x20000008
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	2000028c 	.word	0x2000028c

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000028c 	.word	0x2000028c

080013cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e033      	b.n	800144a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fe84 	bl	80010f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d118      	bne.n	800143c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001412:	f023 0302 	bic.w	r3, r3, #2
 8001416:	f043 0202 	orr.w	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fa72 	bl	8001908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	641a      	str	r2, [r3, #64]	; 0x40
 800143a:	e001      	b.n	8001440 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_ADC_Start+0x1a>
 800146a:	2302      	movs	r3, #2
 800146c:	e08a      	b.n	8001584 <HAL_ADC_Start+0x130>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d018      	beq.n	80014b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001494:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <HAL_ADC_Start+0x13c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a3e      	ldr	r2, [pc, #248]	; (8001594 <HAL_ADC_Start+0x140>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9a      	lsrs	r2, r3, #18
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d15e      	bne.n	8001582 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001502:	d106      	bne.n	8001512 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f023 0206 	bic.w	r2, r3, #6
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
 8001510:	e002      	b.n	8001518 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_ADC_Start+0x144>)
 8001522:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800152c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11c      	bne.n	8001582 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	e013      	b.n	8001582 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_ADC_Start+0x148>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d10e      	bne.n	8001582 <HAL_ADC_Start+0x12e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001580:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000000 	.word	0x20000000
 8001594:	431bde83 	.word	0x431bde83
 8001598:	40012300 	.word	0x40012300
 800159c:	40012000 	.word	0x40012000

080015a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015bc:	d113      	bne.n	80015e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015cc:	d10b      	bne.n	80015e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f043 0220 	orr.w	r2, r3, #32
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e05c      	b.n	80016a0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015e6:	f7ff fee5 	bl	80013b4 <HAL_GetTick>
 80015ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015ec:	e01a      	b.n	8001624 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d016      	beq.n	8001624 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_ADC_PollForConversion+0x6c>
 80015fc:	f7ff feda 	bl	80013b4 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d20b      	bcs.n	8001624 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f043 0204 	orr.w	r2, r3, #4
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e03d      	b.n	80016a0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b02      	cmp	r3, #2
 8001630:	d1dd      	bne.n	80015ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f06f 0212 	mvn.w	r2, #18
 800163a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d123      	bne.n	800169e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800165a:	2b00      	cmp	r3, #0
 800165c:	d11f      	bne.n	800169e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001676:	2b00      	cmp	r3, #0
 8001678:	d111      	bne.n	800169e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x1c>
 80016dc:	2302      	movs	r3, #2
 80016de:	e105      	b.n	80018ec <HAL_ADC_ConfigChannel+0x228>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b09      	cmp	r3, #9
 80016ee:	d925      	bls.n	800173c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68d9      	ldr	r1, [r3, #12]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	3b1e      	subs	r3, #30
 8001706:	2207      	movs	r2, #7
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43da      	mvns	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	400a      	ands	r2, r1
 8001714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68d9      	ldr	r1, [r3, #12]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	4603      	mov	r3, r0
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4403      	add	r3, r0
 800172e:	3b1e      	subs	r3, #30
 8001730:	409a      	lsls	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	e022      	b.n	8001782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6919      	ldr	r1, [r3, #16]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b29b      	uxth	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	2207      	movs	r2, #7
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	400a      	ands	r2, r1
 800175e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6919      	ldr	r1, [r3, #16]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	4603      	mov	r3, r0
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4403      	add	r3, r0
 8001778:	409a      	lsls	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b06      	cmp	r3, #6
 8001788:	d824      	bhi.n	80017d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	3b05      	subs	r3, #5
 800179c:	221f      	movs	r2, #31
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	400a      	ands	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b05      	subs	r3, #5
 80017c6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
 80017d2:	e04c      	b.n	800186e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	d824      	bhi.n	8001826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3b23      	subs	r3, #35	; 0x23
 80017ee:	221f      	movs	r2, #31
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43da      	mvns	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	400a      	ands	r2, r1
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	4618      	mov	r0, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b23      	subs	r3, #35	; 0x23
 8001818:	fa00 f203 	lsl.w	r2, r0, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	631a      	str	r2, [r3, #48]	; 0x30
 8001824:	e023      	b.n	800186e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	3b41      	subs	r3, #65	; 0x41
 8001838:	221f      	movs	r2, #31
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	400a      	ands	r2, r1
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	3b41      	subs	r3, #65	; 0x41
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_ADC_ConfigChannel+0x234>)
 8001870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a21      	ldr	r2, [pc, #132]	; (80018fc <HAL_ADC_ConfigChannel+0x238>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d109      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1cc>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b12      	cmp	r3, #18
 8001882:	d105      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_ADC_ConfigChannel+0x238>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d123      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x21e>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d003      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x1e6>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b11      	cmp	r3, #17
 80018a8:	d11b      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d111      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_ADC_ConfigChannel+0x23c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_ADC_ConfigChannel+0x240>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	0c9a      	lsrs	r2, r3, #18
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d4:	e002      	b.n	80018dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40012300 	.word	0x40012300
 80018fc:	40012000 	.word	0x40012000
 8001900:	20000000 	.word	0x20000000
 8001904:	431bde83 	.word	0x431bde83

08001908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001910:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <ADC_Init+0x1f0>)
 8001912:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	431a      	orrs	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800193c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	021a      	lsls	r2, r3, #8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6899      	ldr	r1, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	4a58      	ldr	r2, [pc, #352]	; (8001afc <ADC_Init+0x1f4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d022      	beq.n	80019e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e00f      	b.n	8001a06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0202 	bic.w	r2, r2, #2
 8001a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6899      	ldr	r1, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7e1b      	ldrb	r3, [r3, #24]
 8001a20:	005a      	lsls	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01b      	beq.n	8001a6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6859      	ldr	r1, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	035a      	lsls	r2, r3, #13
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	e007      	b.n	8001a7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	051a      	lsls	r2, r3, #20
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001abe:	025a      	lsls	r2, r3, #9
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6899      	ldr	r1, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	029a      	lsls	r2, r3, #10
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40012300 	.word	0x40012300
 8001afc:	0f000001 	.word	0x0f000001

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4907      	ldr	r1, [pc, #28]	; (8001b9c <__NVIC_EnableIRQ+0x38>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	; (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f1c3 0307 	rsb	r3, r3, #7
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	bf28      	it	cs
 8001c12:	2304      	movcs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d902      	bls.n	8001c24 <NVIC_EncodePriority+0x30>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b03      	subs	r3, #3
 8001c22:	e000      	b.n	8001c26 <NVIC_EncodePriority+0x32>
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	4313      	orrs	r3, r2
         );
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c6c:	d301      	bcc.n	8001c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00f      	b.n	8001c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <SysTick_Config+0x40>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f7ff ff8e 	bl	8001ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <SysTick_Config+0x40>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <SysTick_Config+0x40>)
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	e000e010 	.word	0xe000e010

08001ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ff29 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc8:	f7ff ff3e 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff ff8e 	bl	8001bf4 <NVIC_EncodePriority>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff5d 	bl	8001ba0 <__NVIC_SetPriority>
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff31 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffa2 	bl	8001c5c <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001d26:	f000 f802 	bl	8001d2e <HAL_SYSTICK_Callback>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e159      	b.n	800200c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8148 	bne.w	8002006 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d00b      	beq.n	8001d96 <HAL_GPIO_Init+0x5a>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d007      	beq.n	8001d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d8a:	2b11      	cmp	r3, #17
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d130      	bne.n	8001df8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0xfc>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b12      	cmp	r3, #18
 8001e36:	d123      	bne.n	8001e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a2 	beq.w	8002006 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b56      	ldr	r3, [pc, #344]	; (8002020 <HAL_GPIO_Init+0x2e4>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a55      	ldr	r2, [pc, #340]	; (8002020 <HAL_GPIO_Init+0x2e4>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_GPIO_Init+0x2e4>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a51      	ldr	r2, [pc, #324]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a48      	ldr	r2, [pc, #288]	; (8002028 <HAL_GPIO_Init+0x2ec>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d019      	beq.n	8001f3e <HAL_GPIO_Init+0x202>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a47      	ldr	r2, [pc, #284]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_GPIO_Init+0x1fe>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a46      	ldr	r2, [pc, #280]	; (8002030 <HAL_GPIO_Init+0x2f4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00d      	beq.n	8001f36 <HAL_GPIO_Init+0x1fa>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a45      	ldr	r2, [pc, #276]	; (8002034 <HAL_GPIO_Init+0x2f8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d007      	beq.n	8001f32 <HAL_GPIO_Init+0x1f6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a44      	ldr	r2, [pc, #272]	; (8002038 <HAL_GPIO_Init+0x2fc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_GPIO_Init+0x1f2>
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	e008      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f2e:	2307      	movs	r3, #7
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f32:	2303      	movs	r3, #3
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x204>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f50:	4934      	ldr	r1, [pc, #208]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_GPIO_Init+0x300>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f82:	4a2e      	ldr	r2, [pc, #184]	; (800203c <HAL_GPIO_Init+0x300>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f88:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_GPIO_Init+0x300>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <HAL_GPIO_Init+0x300>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_GPIO_Init+0x300>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd6:	4a19      	ldr	r2, [pc, #100]	; (800203c <HAL_GPIO_Init+0x300>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_GPIO_Init+0x300>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_GPIO_Init+0x300>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	f67f aea2 	bls.w	8001d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002014:	bf00      	nop
 8002016:	3724      	adds	r7, #36	; 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40023800 	.word	0x40023800
 8002024:	40013800 	.word	0x40013800
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40021000 	.word	0x40021000
 800203c:	40013c00 	.word	0x40013c00

08002040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_RCC_GetHCLKFreq+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000

08002058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800205c:	f7ff fff0 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002060:	4601      	mov	r1, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0a9b      	lsrs	r3, r3, #10
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_RCC_GetPCLK1Freq+0x24>)
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	08004b1c 	.word	0x08004b1c

08002080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002084:	f7ff ffdc 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002088:	4601      	mov	r1, r0
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0b5b      	lsrs	r3, r3, #13
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4a03      	ldr	r2, [pc, #12]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	fa21 f303 	lsr.w	r3, r1, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08004b1c 	.word	0x08004b1c

080020a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e03f      	b.n	800213a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff f84e 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f90b 	bl	8002308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b088      	sub	sp, #32
 8002146:	af02      	add	r7, sp, #8
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b20      	cmp	r3, #32
 8002160:	f040 8083 	bne.w	800226a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_UART_Transmit+0x2e>
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e07b      	b.n	800226c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_UART_Transmit+0x40>
 800217e:	2302      	movs	r3, #2
 8002180:	e074      	b.n	800226c <HAL_UART_Transmit+0x12a>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2221      	movs	r2, #33	; 0x21
 8002194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002198:	f7ff f90c 	bl	80013b4 <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80021b2:	e042      	b.n	800223a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	d122      	bne.n	8002212 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2200      	movs	r2, #0
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f84c 	bl	8002274 <UART_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e042      	b.n	800226c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3302      	adds	r3, #2
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	e017      	b.n	800223a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3301      	adds	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	e013      	b.n	800223a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2200      	movs	r2, #0
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f829 	bl	8002274 <UART_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e01f      	b.n	800226c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	60ba      	str	r2, [r7, #8]
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1b7      	bne.n	80021b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2200      	movs	r2, #0
 800224c:	2140      	movs	r1, #64	; 0x40
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f810 	bl	8002274 <UART_WaitOnFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e006      	b.n	800226c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
  }
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002284:	e02c      	b.n	80022e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d028      	beq.n	80022e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002294:	f7ff f88e 	bl	80013b4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d21d      	bcs.n	80022e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e00f      	b.n	8002300 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d0c3      	beq.n	8002286 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800234a:	f023 030c 	bic.w	r3, r3, #12
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	430b      	orrs	r3, r1
 8002356:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002376:	f040 818b 	bne.w	8002690 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4ac1      	ldr	r2, [pc, #772]	; (8002684 <UART_SetConfig+0x37c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d005      	beq.n	8002390 <UART_SetConfig+0x88>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4abf      	ldr	r2, [pc, #764]	; (8002688 <UART_SetConfig+0x380>)
 800238a:	4293      	cmp	r3, r2
 800238c:	f040 80bd 	bne.w	800250a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002390:	f7ff fe76 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8002394:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	461d      	mov	r5, r3
 800239a:	f04f 0600 	mov.w	r6, #0
 800239e:	46a8      	mov	r8, r5
 80023a0:	46b1      	mov	r9, r6
 80023a2:	eb18 0308 	adds.w	r3, r8, r8
 80023a6:	eb49 0409 	adc.w	r4, r9, r9
 80023aa:	4698      	mov	r8, r3
 80023ac:	46a1      	mov	r9, r4
 80023ae:	eb18 0805 	adds.w	r8, r8, r5
 80023b2:	eb49 0906 	adc.w	r9, r9, r6
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023ca:	4688      	mov	r8, r1
 80023cc:	4691      	mov	r9, r2
 80023ce:	eb18 0005 	adds.w	r0, r8, r5
 80023d2:	eb49 0106 	adc.w	r1, r9, r6
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	461d      	mov	r5, r3
 80023dc:	f04f 0600 	mov.w	r6, #0
 80023e0:	196b      	adds	r3, r5, r5
 80023e2:	eb46 0406 	adc.w	r4, r6, r6
 80023e6:	461a      	mov	r2, r3
 80023e8:	4623      	mov	r3, r4
 80023ea:	f7fe fbe5 	bl	8000bb8 <__aeabi_uldivmod>
 80023ee:	4603      	mov	r3, r0
 80023f0:	460c      	mov	r4, r1
 80023f2:	461a      	mov	r2, r3
 80023f4:	4ba5      	ldr	r3, [pc, #660]	; (800268c <UART_SetConfig+0x384>)
 80023f6:	fba3 2302 	umull	r2, r3, r3, r2
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	461d      	mov	r5, r3
 8002404:	f04f 0600 	mov.w	r6, #0
 8002408:	46a9      	mov	r9, r5
 800240a:	46b2      	mov	sl, r6
 800240c:	eb19 0309 	adds.w	r3, r9, r9
 8002410:	eb4a 040a 	adc.w	r4, sl, sl
 8002414:	4699      	mov	r9, r3
 8002416:	46a2      	mov	sl, r4
 8002418:	eb19 0905 	adds.w	r9, r9, r5
 800241c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800242c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002430:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002434:	4689      	mov	r9, r1
 8002436:	4692      	mov	sl, r2
 8002438:	eb19 0005 	adds.w	r0, r9, r5
 800243c:	eb4a 0106 	adc.w	r1, sl, r6
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	461d      	mov	r5, r3
 8002446:	f04f 0600 	mov.w	r6, #0
 800244a:	196b      	adds	r3, r5, r5
 800244c:	eb46 0406 	adc.w	r4, r6, r6
 8002450:	461a      	mov	r2, r3
 8002452:	4623      	mov	r3, r4
 8002454:	f7fe fbb0 	bl	8000bb8 <__aeabi_uldivmod>
 8002458:	4603      	mov	r3, r0
 800245a:	460c      	mov	r4, r1
 800245c:	461a      	mov	r2, r3
 800245e:	4b8b      	ldr	r3, [pc, #556]	; (800268c <UART_SetConfig+0x384>)
 8002460:	fba3 1302 	umull	r1, r3, r3, r2
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	2164      	movs	r1, #100	; 0x64
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	3332      	adds	r3, #50	; 0x32
 8002472:	4a86      	ldr	r2, [pc, #536]	; (800268c <UART_SetConfig+0x384>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002480:	4498      	add	r8, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	461d      	mov	r5, r3
 8002486:	f04f 0600 	mov.w	r6, #0
 800248a:	46a9      	mov	r9, r5
 800248c:	46b2      	mov	sl, r6
 800248e:	eb19 0309 	adds.w	r3, r9, r9
 8002492:	eb4a 040a 	adc.w	r4, sl, sl
 8002496:	4699      	mov	r9, r3
 8002498:	46a2      	mov	sl, r4
 800249a:	eb19 0905 	adds.w	r9, r9, r5
 800249e:	eb4a 0a06 	adc.w	sl, sl, r6
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024b6:	4689      	mov	r9, r1
 80024b8:	4692      	mov	sl, r2
 80024ba:	eb19 0005 	adds.w	r0, r9, r5
 80024be:	eb4a 0106 	adc.w	r1, sl, r6
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	461d      	mov	r5, r3
 80024c8:	f04f 0600 	mov.w	r6, #0
 80024cc:	196b      	adds	r3, r5, r5
 80024ce:	eb46 0406 	adc.w	r4, r6, r6
 80024d2:	461a      	mov	r2, r3
 80024d4:	4623      	mov	r3, r4
 80024d6:	f7fe fb6f 	bl	8000bb8 <__aeabi_uldivmod>
 80024da:	4603      	mov	r3, r0
 80024dc:	460c      	mov	r4, r1
 80024de:	461a      	mov	r2, r3
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <UART_SetConfig+0x384>)
 80024e2:	fba3 1302 	umull	r1, r3, r3, r2
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2164      	movs	r1, #100	; 0x64
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	3332      	adds	r3, #50	; 0x32
 80024f4:	4a65      	ldr	r2, [pc, #404]	; (800268c <UART_SetConfig+0x384>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	f003 0207 	and.w	r2, r3, #7
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4442      	add	r2, r8
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e26f      	b.n	80029ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800250a:	f7ff fda5 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 800250e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	461d      	mov	r5, r3
 8002514:	f04f 0600 	mov.w	r6, #0
 8002518:	46a8      	mov	r8, r5
 800251a:	46b1      	mov	r9, r6
 800251c:	eb18 0308 	adds.w	r3, r8, r8
 8002520:	eb49 0409 	adc.w	r4, r9, r9
 8002524:	4698      	mov	r8, r3
 8002526:	46a1      	mov	r9, r4
 8002528:	eb18 0805 	adds.w	r8, r8, r5
 800252c:	eb49 0906 	adc.w	r9, r9, r6
 8002530:	f04f 0100 	mov.w	r1, #0
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800253c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002540:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002544:	4688      	mov	r8, r1
 8002546:	4691      	mov	r9, r2
 8002548:	eb18 0005 	adds.w	r0, r8, r5
 800254c:	eb49 0106 	adc.w	r1, r9, r6
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	461d      	mov	r5, r3
 8002556:	f04f 0600 	mov.w	r6, #0
 800255a:	196b      	adds	r3, r5, r5
 800255c:	eb46 0406 	adc.w	r4, r6, r6
 8002560:	461a      	mov	r2, r3
 8002562:	4623      	mov	r3, r4
 8002564:	f7fe fb28 	bl	8000bb8 <__aeabi_uldivmod>
 8002568:	4603      	mov	r3, r0
 800256a:	460c      	mov	r4, r1
 800256c:	461a      	mov	r2, r3
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <UART_SetConfig+0x384>)
 8002570:	fba3 2302 	umull	r2, r3, r3, r2
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	461d      	mov	r5, r3
 800257e:	f04f 0600 	mov.w	r6, #0
 8002582:	46a9      	mov	r9, r5
 8002584:	46b2      	mov	sl, r6
 8002586:	eb19 0309 	adds.w	r3, r9, r9
 800258a:	eb4a 040a 	adc.w	r4, sl, sl
 800258e:	4699      	mov	r9, r3
 8002590:	46a2      	mov	sl, r4
 8002592:	eb19 0905 	adds.w	r9, r9, r5
 8002596:	eb4a 0a06 	adc.w	sl, sl, r6
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025ae:	4689      	mov	r9, r1
 80025b0:	4692      	mov	sl, r2
 80025b2:	eb19 0005 	adds.w	r0, r9, r5
 80025b6:	eb4a 0106 	adc.w	r1, sl, r6
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	461d      	mov	r5, r3
 80025c0:	f04f 0600 	mov.w	r6, #0
 80025c4:	196b      	adds	r3, r5, r5
 80025c6:	eb46 0406 	adc.w	r4, r6, r6
 80025ca:	461a      	mov	r2, r3
 80025cc:	4623      	mov	r3, r4
 80025ce:	f7fe faf3 	bl	8000bb8 <__aeabi_uldivmod>
 80025d2:	4603      	mov	r3, r0
 80025d4:	460c      	mov	r4, r1
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b2c      	ldr	r3, [pc, #176]	; (800268c <UART_SetConfig+0x384>)
 80025da:	fba3 1302 	umull	r1, r3, r3, r2
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2164      	movs	r1, #100	; 0x64
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	3332      	adds	r3, #50	; 0x32
 80025ec:	4a27      	ldr	r2, [pc, #156]	; (800268c <UART_SetConfig+0x384>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025fa:	4498      	add	r8, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	461d      	mov	r5, r3
 8002600:	f04f 0600 	mov.w	r6, #0
 8002604:	46a9      	mov	r9, r5
 8002606:	46b2      	mov	sl, r6
 8002608:	eb19 0309 	adds.w	r3, r9, r9
 800260c:	eb4a 040a 	adc.w	r4, sl, sl
 8002610:	4699      	mov	r9, r3
 8002612:	46a2      	mov	sl, r4
 8002614:	eb19 0905 	adds.w	r9, r9, r5
 8002618:	eb4a 0a06 	adc.w	sl, sl, r6
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800262c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002630:	4689      	mov	r9, r1
 8002632:	4692      	mov	sl, r2
 8002634:	eb19 0005 	adds.w	r0, r9, r5
 8002638:	eb4a 0106 	adc.w	r1, sl, r6
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	461d      	mov	r5, r3
 8002642:	f04f 0600 	mov.w	r6, #0
 8002646:	196b      	adds	r3, r5, r5
 8002648:	eb46 0406 	adc.w	r4, r6, r6
 800264c:	461a      	mov	r2, r3
 800264e:	4623      	mov	r3, r4
 8002650:	f7fe fab2 	bl	8000bb8 <__aeabi_uldivmod>
 8002654:	4603      	mov	r3, r0
 8002656:	460c      	mov	r4, r1
 8002658:	461a      	mov	r2, r3
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <UART_SetConfig+0x384>)
 800265c:	fba3 1302 	umull	r1, r3, r3, r2
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	2164      	movs	r1, #100	; 0x64
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3332      	adds	r3, #50	; 0x32
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <UART_SetConfig+0x384>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	f003 0207 	and.w	r2, r3, #7
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4442      	add	r2, r8
 8002680:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002682:	e1b2      	b.n	80029ea <UART_SetConfig+0x6e2>
 8002684:	40011000 	.word	0x40011000
 8002688:	40011400 	.word	0x40011400
 800268c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4ad7      	ldr	r2, [pc, #860]	; (80029f4 <UART_SetConfig+0x6ec>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d005      	beq.n	80026a6 <UART_SetConfig+0x39e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4ad6      	ldr	r2, [pc, #856]	; (80029f8 <UART_SetConfig+0x6f0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	f040 80d1 	bne.w	8002848 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80026a6:	f7ff fceb 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 80026aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	469a      	mov	sl, r3
 80026b0:	f04f 0b00 	mov.w	fp, #0
 80026b4:	46d0      	mov	r8, sl
 80026b6:	46d9      	mov	r9, fp
 80026b8:	eb18 0308 	adds.w	r3, r8, r8
 80026bc:	eb49 0409 	adc.w	r4, r9, r9
 80026c0:	4698      	mov	r8, r3
 80026c2:	46a1      	mov	r9, r4
 80026c4:	eb18 080a 	adds.w	r8, r8, sl
 80026c8:	eb49 090b 	adc.w	r9, r9, fp
 80026cc:	f04f 0100 	mov.w	r1, #0
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026e0:	4688      	mov	r8, r1
 80026e2:	4691      	mov	r9, r2
 80026e4:	eb1a 0508 	adds.w	r5, sl, r8
 80026e8:	eb4b 0609 	adc.w	r6, fp, r9
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	f04f 0400 	mov.w	r4, #0
 80026fe:	0094      	lsls	r4, r2, #2
 8002700:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002704:	008b      	lsls	r3, r1, #2
 8002706:	461a      	mov	r2, r3
 8002708:	4623      	mov	r3, r4
 800270a:	4628      	mov	r0, r5
 800270c:	4631      	mov	r1, r6
 800270e:	f7fe fa53 	bl	8000bb8 <__aeabi_uldivmod>
 8002712:	4603      	mov	r3, r0
 8002714:	460c      	mov	r4, r1
 8002716:	461a      	mov	r2, r3
 8002718:	4bb8      	ldr	r3, [pc, #736]	; (80029fc <UART_SetConfig+0x6f4>)
 800271a:	fba3 2302 	umull	r2, r3, r3, r2
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	469b      	mov	fp, r3
 8002728:	f04f 0c00 	mov.w	ip, #0
 800272c:	46d9      	mov	r9, fp
 800272e:	46e2      	mov	sl, ip
 8002730:	eb19 0309 	adds.w	r3, r9, r9
 8002734:	eb4a 040a 	adc.w	r4, sl, sl
 8002738:	4699      	mov	r9, r3
 800273a:	46a2      	mov	sl, r4
 800273c:	eb19 090b 	adds.w	r9, r9, fp
 8002740:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002758:	4689      	mov	r9, r1
 800275a:	4692      	mov	sl, r2
 800275c:	eb1b 0509 	adds.w	r5, fp, r9
 8002760:	eb4c 060a 	adc.w	r6, ip, sl
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	f04f 0400 	mov.w	r4, #0
 8002776:	0094      	lsls	r4, r2, #2
 8002778:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800277c:	008b      	lsls	r3, r1, #2
 800277e:	461a      	mov	r2, r3
 8002780:	4623      	mov	r3, r4
 8002782:	4628      	mov	r0, r5
 8002784:	4631      	mov	r1, r6
 8002786:	f7fe fa17 	bl	8000bb8 <__aeabi_uldivmod>
 800278a:	4603      	mov	r3, r0
 800278c:	460c      	mov	r4, r1
 800278e:	461a      	mov	r2, r3
 8002790:	4b9a      	ldr	r3, [pc, #616]	; (80029fc <UART_SetConfig+0x6f4>)
 8002792:	fba3 1302 	umull	r1, r3, r3, r2
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2164      	movs	r1, #100	; 0x64
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	3332      	adds	r3, #50	; 0x32
 80027a4:	4a95      	ldr	r2, [pc, #596]	; (80029fc <UART_SetConfig+0x6f4>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b0:	4498      	add	r8, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	469b      	mov	fp, r3
 80027b6:	f04f 0c00 	mov.w	ip, #0
 80027ba:	46d9      	mov	r9, fp
 80027bc:	46e2      	mov	sl, ip
 80027be:	eb19 0309 	adds.w	r3, r9, r9
 80027c2:	eb4a 040a 	adc.w	r4, sl, sl
 80027c6:	4699      	mov	r9, r3
 80027c8:	46a2      	mov	sl, r4
 80027ca:	eb19 090b 	adds.w	r9, r9, fp
 80027ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027d2:	f04f 0100 	mov.w	r1, #0
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027e6:	4689      	mov	r9, r1
 80027e8:	4692      	mov	sl, r2
 80027ea:	eb1b 0509 	adds.w	r5, fp, r9
 80027ee:	eb4c 060a 	adc.w	r6, ip, sl
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4619      	mov	r1, r3
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	f04f 0400 	mov.w	r4, #0
 8002804:	0094      	lsls	r4, r2, #2
 8002806:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800280a:	008b      	lsls	r3, r1, #2
 800280c:	461a      	mov	r2, r3
 800280e:	4623      	mov	r3, r4
 8002810:	4628      	mov	r0, r5
 8002812:	4631      	mov	r1, r6
 8002814:	f7fe f9d0 	bl	8000bb8 <__aeabi_uldivmod>
 8002818:	4603      	mov	r3, r0
 800281a:	460c      	mov	r4, r1
 800281c:	461a      	mov	r2, r3
 800281e:	4b77      	ldr	r3, [pc, #476]	; (80029fc <UART_SetConfig+0x6f4>)
 8002820:	fba3 1302 	umull	r1, r3, r3, r2
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	2164      	movs	r1, #100	; 0x64
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	3332      	adds	r3, #50	; 0x32
 8002832:	4a72      	ldr	r2, [pc, #456]	; (80029fc <UART_SetConfig+0x6f4>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	f003 020f 	and.w	r2, r3, #15
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4442      	add	r2, r8
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	e0d0      	b.n	80029ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002848:	f7ff fc06 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 800284c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	469a      	mov	sl, r3
 8002852:	f04f 0b00 	mov.w	fp, #0
 8002856:	46d0      	mov	r8, sl
 8002858:	46d9      	mov	r9, fp
 800285a:	eb18 0308 	adds.w	r3, r8, r8
 800285e:	eb49 0409 	adc.w	r4, r9, r9
 8002862:	4698      	mov	r8, r3
 8002864:	46a1      	mov	r9, r4
 8002866:	eb18 080a 	adds.w	r8, r8, sl
 800286a:	eb49 090b 	adc.w	r9, r9, fp
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800287a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800287e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002882:	4688      	mov	r8, r1
 8002884:	4691      	mov	r9, r2
 8002886:	eb1a 0508 	adds.w	r5, sl, r8
 800288a:	eb4b 0609 	adc.w	r6, fp, r9
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	f04f 0400 	mov.w	r4, #0
 80028a0:	0094      	lsls	r4, r2, #2
 80028a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028a6:	008b      	lsls	r3, r1, #2
 80028a8:	461a      	mov	r2, r3
 80028aa:	4623      	mov	r3, r4
 80028ac:	4628      	mov	r0, r5
 80028ae:	4631      	mov	r1, r6
 80028b0:	f7fe f982 	bl	8000bb8 <__aeabi_uldivmod>
 80028b4:	4603      	mov	r3, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b50      	ldr	r3, [pc, #320]	; (80029fc <UART_SetConfig+0x6f4>)
 80028bc:	fba3 2302 	umull	r2, r3, r3, r2
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	469b      	mov	fp, r3
 80028ca:	f04f 0c00 	mov.w	ip, #0
 80028ce:	46d9      	mov	r9, fp
 80028d0:	46e2      	mov	sl, ip
 80028d2:	eb19 0309 	adds.w	r3, r9, r9
 80028d6:	eb4a 040a 	adc.w	r4, sl, sl
 80028da:	4699      	mov	r9, r3
 80028dc:	46a2      	mov	sl, r4
 80028de:	eb19 090b 	adds.w	r9, r9, fp
 80028e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028fa:	4689      	mov	r9, r1
 80028fc:	4692      	mov	sl, r2
 80028fe:	eb1b 0509 	adds.w	r5, fp, r9
 8002902:	eb4c 060a 	adc.w	r6, ip, sl
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4619      	mov	r1, r3
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f04f 0400 	mov.w	r4, #0
 8002918:	0094      	lsls	r4, r2, #2
 800291a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800291e:	008b      	lsls	r3, r1, #2
 8002920:	461a      	mov	r2, r3
 8002922:	4623      	mov	r3, r4
 8002924:	4628      	mov	r0, r5
 8002926:	4631      	mov	r1, r6
 8002928:	f7fe f946 	bl	8000bb8 <__aeabi_uldivmod>
 800292c:	4603      	mov	r3, r0
 800292e:	460c      	mov	r4, r1
 8002930:	461a      	mov	r2, r3
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <UART_SetConfig+0x6f4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	3332      	adds	r3, #50	; 0x32
 8002946:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <UART_SetConfig+0x6f4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002952:	4498      	add	r8, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	469b      	mov	fp, r3
 8002958:	f04f 0c00 	mov.w	ip, #0
 800295c:	46d9      	mov	r9, fp
 800295e:	46e2      	mov	sl, ip
 8002960:	eb19 0309 	adds.w	r3, r9, r9
 8002964:	eb4a 040a 	adc.w	r4, sl, sl
 8002968:	4699      	mov	r9, r3
 800296a:	46a2      	mov	sl, r4
 800296c:	eb19 090b 	adds.w	r9, r9, fp
 8002970:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002974:	f04f 0100 	mov.w	r1, #0
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002980:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002984:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002988:	4689      	mov	r9, r1
 800298a:	4692      	mov	sl, r2
 800298c:	eb1b 0509 	adds.w	r5, fp, r9
 8002990:	eb4c 060a 	adc.w	r6, ip, sl
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4619      	mov	r1, r3
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f04f 0400 	mov.w	r4, #0
 80029a6:	0094      	lsls	r4, r2, #2
 80029a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029ac:	008b      	lsls	r3, r1, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	4623      	mov	r3, r4
 80029b2:	4628      	mov	r0, r5
 80029b4:	4631      	mov	r1, r6
 80029b6:	f7fe f8ff 	bl	8000bb8 <__aeabi_uldivmod>
 80029ba:	4603      	mov	r3, r0
 80029bc:	460c      	mov	r4, r1
 80029be:	461a      	mov	r2, r3
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <UART_SetConfig+0x6f4>)
 80029c2:	fba3 1302 	umull	r1, r3, r3, r2
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2164      	movs	r1, #100	; 0x64
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	3332      	adds	r3, #50	; 0x32
 80029d4:	4a09      	ldr	r2, [pc, #36]	; (80029fc <UART_SetConfig+0x6f4>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4442      	add	r2, r8
 80029e6:	609a      	str	r2, [r3, #8]
}
 80029e8:	e7ff      	b.n	80029ea <UART_SetConfig+0x6e2>
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f4:	40011000 	.word	0x40011000
 80029f8:	40011400 	.word	0x40011400
 80029fc:	51eb851f 	.word	0x51eb851f

08002a00 <__errno>:
 8002a00:	4b01      	ldr	r3, [pc, #4]	; (8002a08 <__errno+0x8>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	2000000c 	.word	0x2000000c

08002a0c <__libc_init_array>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	4e0d      	ldr	r6, [pc, #52]	; (8002a44 <__libc_init_array+0x38>)
 8002a10:	4c0d      	ldr	r4, [pc, #52]	; (8002a48 <__libc_init_array+0x3c>)
 8002a12:	1ba4      	subs	r4, r4, r6
 8002a14:	10a4      	asrs	r4, r4, #2
 8002a16:	2500      	movs	r5, #0
 8002a18:	42a5      	cmp	r5, r4
 8002a1a:	d109      	bne.n	8002a30 <__libc_init_array+0x24>
 8002a1c:	4e0b      	ldr	r6, [pc, #44]	; (8002a4c <__libc_init_array+0x40>)
 8002a1e:	4c0c      	ldr	r4, [pc, #48]	; (8002a50 <__libc_init_array+0x44>)
 8002a20:	f002 f85e 	bl	8004ae0 <_init>
 8002a24:	1ba4      	subs	r4, r4, r6
 8002a26:	10a4      	asrs	r4, r4, #2
 8002a28:	2500      	movs	r5, #0
 8002a2a:	42a5      	cmp	r5, r4
 8002a2c:	d105      	bne.n	8002a3a <__libc_init_array+0x2e>
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a34:	4798      	blx	r3
 8002a36:	3501      	adds	r5, #1
 8002a38:	e7ee      	b.n	8002a18 <__libc_init_array+0xc>
 8002a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a3e:	4798      	blx	r3
 8002a40:	3501      	adds	r5, #1
 8002a42:	e7f2      	b.n	8002a2a <__libc_init_array+0x1e>
 8002a44:	08004d88 	.word	0x08004d88
 8002a48:	08004d88 	.word	0x08004d88
 8002a4c:	08004d88 	.word	0x08004d88
 8002a50:	08004d8c 	.word	0x08004d8c

08002a54 <memset>:
 8002a54:	4402      	add	r2, r0
 8002a56:	4603      	mov	r3, r0
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <memset+0xa>
 8002a5c:	4770      	bx	lr
 8002a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a62:	e7f9      	b.n	8002a58 <memset+0x4>

08002a64 <__cvt>:
 8002a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a68:	ec55 4b10 	vmov	r4, r5, d0
 8002a6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002a6e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002a72:	2d00      	cmp	r5, #0
 8002a74:	460e      	mov	r6, r1
 8002a76:	4691      	mov	r9, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	bfb8      	it	lt
 8002a7c:	4622      	movlt	r2, r4
 8002a7e:	462b      	mov	r3, r5
 8002a80:	f027 0720 	bic.w	r7, r7, #32
 8002a84:	bfbb      	ittet	lt
 8002a86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002a8a:	461d      	movlt	r5, r3
 8002a8c:	2300      	movge	r3, #0
 8002a8e:	232d      	movlt	r3, #45	; 0x2d
 8002a90:	bfb8      	it	lt
 8002a92:	4614      	movlt	r4, r2
 8002a94:	2f46      	cmp	r7, #70	; 0x46
 8002a96:	700b      	strb	r3, [r1, #0]
 8002a98:	d004      	beq.n	8002aa4 <__cvt+0x40>
 8002a9a:	2f45      	cmp	r7, #69	; 0x45
 8002a9c:	d100      	bne.n	8002aa0 <__cvt+0x3c>
 8002a9e:	3601      	adds	r6, #1
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	e000      	b.n	8002aa6 <__cvt+0x42>
 8002aa4:	2103      	movs	r1, #3
 8002aa6:	ab03      	add	r3, sp, #12
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	ab02      	add	r3, sp, #8
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4632      	mov	r2, r6
 8002ab0:	4653      	mov	r3, sl
 8002ab2:	ec45 4b10 	vmov	d0, r4, r5
 8002ab6:	f000 fcdf 	bl	8003478 <_dtoa_r>
 8002aba:	2f47      	cmp	r7, #71	; 0x47
 8002abc:	4680      	mov	r8, r0
 8002abe:	d102      	bne.n	8002ac6 <__cvt+0x62>
 8002ac0:	f019 0f01 	tst.w	r9, #1
 8002ac4:	d026      	beq.n	8002b14 <__cvt+0xb0>
 8002ac6:	2f46      	cmp	r7, #70	; 0x46
 8002ac8:	eb08 0906 	add.w	r9, r8, r6
 8002acc:	d111      	bne.n	8002af2 <__cvt+0x8e>
 8002ace:	f898 3000 	ldrb.w	r3, [r8]
 8002ad2:	2b30      	cmp	r3, #48	; 0x30
 8002ad4:	d10a      	bne.n	8002aec <__cvt+0x88>
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2300      	movs	r3, #0
 8002ada:	4620      	mov	r0, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	f7fd fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ae2:	b918      	cbnz	r0, 8002aec <__cvt+0x88>
 8002ae4:	f1c6 0601 	rsb	r6, r6, #1
 8002ae8:	f8ca 6000 	str.w	r6, [sl]
 8002aec:	f8da 3000 	ldr.w	r3, [sl]
 8002af0:	4499      	add	r9, r3
 8002af2:	2200      	movs	r2, #0
 8002af4:	2300      	movs	r3, #0
 8002af6:	4620      	mov	r0, r4
 8002af8:	4629      	mov	r1, r5
 8002afa:	f7fd ffed 	bl	8000ad8 <__aeabi_dcmpeq>
 8002afe:	b938      	cbnz	r0, 8002b10 <__cvt+0xac>
 8002b00:	2230      	movs	r2, #48	; 0x30
 8002b02:	9b03      	ldr	r3, [sp, #12]
 8002b04:	454b      	cmp	r3, r9
 8002b06:	d205      	bcs.n	8002b14 <__cvt+0xb0>
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	9103      	str	r1, [sp, #12]
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e7f8      	b.n	8002b02 <__cvt+0x9e>
 8002b10:	f8cd 900c 	str.w	r9, [sp, #12]
 8002b14:	9b03      	ldr	r3, [sp, #12]
 8002b16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b18:	eba3 0308 	sub.w	r3, r3, r8
 8002b1c:	4640      	mov	r0, r8
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	b004      	add	sp, #16
 8002b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b26 <__exponent>:
 8002b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	bfba      	itte	lt
 8002b2e:	4249      	neglt	r1, r1
 8002b30:	232d      	movlt	r3, #45	; 0x2d
 8002b32:	232b      	movge	r3, #43	; 0x2b
 8002b34:	2909      	cmp	r1, #9
 8002b36:	f804 2b02 	strb.w	r2, [r4], #2
 8002b3a:	7043      	strb	r3, [r0, #1]
 8002b3c:	dd20      	ble.n	8002b80 <__exponent+0x5a>
 8002b3e:	f10d 0307 	add.w	r3, sp, #7
 8002b42:	461f      	mov	r7, r3
 8002b44:	260a      	movs	r6, #10
 8002b46:	fb91 f5f6 	sdiv	r5, r1, r6
 8002b4a:	fb06 1115 	mls	r1, r6, r5, r1
 8002b4e:	3130      	adds	r1, #48	; 0x30
 8002b50:	2d09      	cmp	r5, #9
 8002b52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002b56:	f103 32ff 	add.w	r2, r3, #4294967295
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	dc09      	bgt.n	8002b72 <__exponent+0x4c>
 8002b5e:	3130      	adds	r1, #48	; 0x30
 8002b60:	3b02      	subs	r3, #2
 8002b62:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002b66:	42bb      	cmp	r3, r7
 8002b68:	4622      	mov	r2, r4
 8002b6a:	d304      	bcc.n	8002b76 <__exponent+0x50>
 8002b6c:	1a10      	subs	r0, r2, r0
 8002b6e:	b003      	add	sp, #12
 8002b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b72:	4613      	mov	r3, r2
 8002b74:	e7e7      	b.n	8002b46 <__exponent+0x20>
 8002b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b7a:	f804 2b01 	strb.w	r2, [r4], #1
 8002b7e:	e7f2      	b.n	8002b66 <__exponent+0x40>
 8002b80:	2330      	movs	r3, #48	; 0x30
 8002b82:	4419      	add	r1, r3
 8002b84:	7083      	strb	r3, [r0, #2]
 8002b86:	1d02      	adds	r2, r0, #4
 8002b88:	70c1      	strb	r1, [r0, #3]
 8002b8a:	e7ef      	b.n	8002b6c <__exponent+0x46>

08002b8c <_printf_float>:
 8002b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b90:	b08d      	sub	sp, #52	; 0x34
 8002b92:	460c      	mov	r4, r1
 8002b94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002b98:	4616      	mov	r6, r2
 8002b9a:	461f      	mov	r7, r3
 8002b9c:	4605      	mov	r5, r0
 8002b9e:	f001 fa23 	bl	8003fe8 <_localeconv_r>
 8002ba2:	6803      	ldr	r3, [r0, #0]
 8002ba4:	9304      	str	r3, [sp, #16]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fb1a 	bl	80001e0 <strlen>
 8002bac:	2300      	movs	r3, #0
 8002bae:	930a      	str	r3, [sp, #40]	; 0x28
 8002bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8002bb4:	9005      	str	r0, [sp, #20]
 8002bb6:	3307      	adds	r3, #7
 8002bb8:	f023 0307 	bic.w	r3, r3, #7
 8002bbc:	f103 0208 	add.w	r2, r3, #8
 8002bc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002bc4:	f8d4 b000 	ldr.w	fp, [r4]
 8002bc8:	f8c8 2000 	str.w	r2, [r8]
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002bd4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002bd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002bdc:	9307      	str	r3, [sp, #28]
 8002bde:	f8cd 8018 	str.w	r8, [sp, #24]
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295
 8002be6:	4ba7      	ldr	r3, [pc, #668]	; (8002e84 <_printf_float+0x2f8>)
 8002be8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bec:	f7fd ffa6 	bl	8000b3c <__aeabi_dcmpun>
 8002bf0:	bb70      	cbnz	r0, 8002c50 <_printf_float+0xc4>
 8002bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf6:	4ba3      	ldr	r3, [pc, #652]	; (8002e84 <_printf_float+0x2f8>)
 8002bf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bfc:	f7fd ff80 	bl	8000b00 <__aeabi_dcmple>
 8002c00:	bb30      	cbnz	r0, 8002c50 <_printf_float+0xc4>
 8002c02:	2200      	movs	r2, #0
 8002c04:	2300      	movs	r3, #0
 8002c06:	4640      	mov	r0, r8
 8002c08:	4649      	mov	r1, r9
 8002c0a:	f7fd ff6f 	bl	8000aec <__aeabi_dcmplt>
 8002c0e:	b110      	cbz	r0, 8002c16 <_printf_float+0x8a>
 8002c10:	232d      	movs	r3, #45	; 0x2d
 8002c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c16:	4a9c      	ldr	r2, [pc, #624]	; (8002e88 <_printf_float+0x2fc>)
 8002c18:	4b9c      	ldr	r3, [pc, #624]	; (8002e8c <_printf_float+0x300>)
 8002c1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002c1e:	bf8c      	ite	hi
 8002c20:	4690      	movhi	r8, r2
 8002c22:	4698      	movls	r8, r3
 8002c24:	2303      	movs	r3, #3
 8002c26:	f02b 0204 	bic.w	r2, fp, #4
 8002c2a:	6123      	str	r3, [r4, #16]
 8002c2c:	6022      	str	r2, [r4, #0]
 8002c2e:	f04f 0900 	mov.w	r9, #0
 8002c32:	9700      	str	r7, [sp, #0]
 8002c34:	4633      	mov	r3, r6
 8002c36:	aa0b      	add	r2, sp, #44	; 0x2c
 8002c38:	4621      	mov	r1, r4
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f000 f9e6 	bl	800300c <_printf_common>
 8002c40:	3001      	adds	r0, #1
 8002c42:	f040 808d 	bne.w	8002d60 <_printf_float+0x1d4>
 8002c46:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4a:	b00d      	add	sp, #52	; 0x34
 8002c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c50:	4642      	mov	r2, r8
 8002c52:	464b      	mov	r3, r9
 8002c54:	4640      	mov	r0, r8
 8002c56:	4649      	mov	r1, r9
 8002c58:	f7fd ff70 	bl	8000b3c <__aeabi_dcmpun>
 8002c5c:	b110      	cbz	r0, 8002c64 <_printf_float+0xd8>
 8002c5e:	4a8c      	ldr	r2, [pc, #560]	; (8002e90 <_printf_float+0x304>)
 8002c60:	4b8c      	ldr	r3, [pc, #560]	; (8002e94 <_printf_float+0x308>)
 8002c62:	e7da      	b.n	8002c1a <_printf_float+0x8e>
 8002c64:	6861      	ldr	r1, [r4, #4]
 8002c66:	1c4b      	adds	r3, r1, #1
 8002c68:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002c6c:	a80a      	add	r0, sp, #40	; 0x28
 8002c6e:	d13e      	bne.n	8002cee <_printf_float+0x162>
 8002c70:	2306      	movs	r3, #6
 8002c72:	6063      	str	r3, [r4, #4]
 8002c74:	2300      	movs	r3, #0
 8002c76:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002c7a:	ab09      	add	r3, sp, #36	; 0x24
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	ec49 8b10 	vmov	d0, r8, r9
 8002c82:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002c86:	6022      	str	r2, [r4, #0]
 8002c88:	f8cd a004 	str.w	sl, [sp, #4]
 8002c8c:	6861      	ldr	r1, [r4, #4]
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f7ff fee8 	bl	8002a64 <__cvt>
 8002c94:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002c98:	2b47      	cmp	r3, #71	; 0x47
 8002c9a:	4680      	mov	r8, r0
 8002c9c:	d109      	bne.n	8002cb2 <_printf_float+0x126>
 8002c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ca0:	1cd8      	adds	r0, r3, #3
 8002ca2:	db02      	blt.n	8002caa <_printf_float+0x11e>
 8002ca4:	6862      	ldr	r2, [r4, #4]
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	dd47      	ble.n	8002d3a <_printf_float+0x1ae>
 8002caa:	f1aa 0a02 	sub.w	sl, sl, #2
 8002cae:	fa5f fa8a 	uxtb.w	sl, sl
 8002cb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002cb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cb8:	d824      	bhi.n	8002d04 <_printf_float+0x178>
 8002cba:	3901      	subs	r1, #1
 8002cbc:	4652      	mov	r2, sl
 8002cbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002cc2:	9109      	str	r1, [sp, #36]	; 0x24
 8002cc4:	f7ff ff2f 	bl	8002b26 <__exponent>
 8002cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cca:	1813      	adds	r3, r2, r0
 8002ccc:	2a01      	cmp	r2, #1
 8002cce:	4681      	mov	r9, r0
 8002cd0:	6123      	str	r3, [r4, #16]
 8002cd2:	dc02      	bgt.n	8002cda <_printf_float+0x14e>
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	07d1      	lsls	r1, r2, #31
 8002cd8:	d501      	bpl.n	8002cde <_printf_float+0x152>
 8002cda:	3301      	adds	r3, #1
 8002cdc:	6123      	str	r3, [r4, #16]
 8002cde:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0a5      	beq.n	8002c32 <_printf_float+0xa6>
 8002ce6:	232d      	movs	r3, #45	; 0x2d
 8002ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cec:	e7a1      	b.n	8002c32 <_printf_float+0xa6>
 8002cee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002cf2:	f000 8177 	beq.w	8002fe4 <_printf_float+0x458>
 8002cf6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002cfa:	d1bb      	bne.n	8002c74 <_printf_float+0xe8>
 8002cfc:	2900      	cmp	r1, #0
 8002cfe:	d1b9      	bne.n	8002c74 <_printf_float+0xe8>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e7b6      	b.n	8002c72 <_printf_float+0xe6>
 8002d04:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002d08:	d119      	bne.n	8002d3e <_printf_float+0x1b2>
 8002d0a:	2900      	cmp	r1, #0
 8002d0c:	6863      	ldr	r3, [r4, #4]
 8002d0e:	dd0c      	ble.n	8002d2a <_printf_float+0x19e>
 8002d10:	6121      	str	r1, [r4, #16]
 8002d12:	b913      	cbnz	r3, 8002d1a <_printf_float+0x18e>
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	07d2      	lsls	r2, r2, #31
 8002d18:	d502      	bpl.n	8002d20 <_printf_float+0x194>
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	440b      	add	r3, r1
 8002d1e:	6123      	str	r3, [r4, #16]
 8002d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d22:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d24:	f04f 0900 	mov.w	r9, #0
 8002d28:	e7d9      	b.n	8002cde <_printf_float+0x152>
 8002d2a:	b913      	cbnz	r3, 8002d32 <_printf_float+0x1a6>
 8002d2c:	6822      	ldr	r2, [r4, #0]
 8002d2e:	07d0      	lsls	r0, r2, #31
 8002d30:	d501      	bpl.n	8002d36 <_printf_float+0x1aa>
 8002d32:	3302      	adds	r3, #2
 8002d34:	e7f3      	b.n	8002d1e <_printf_float+0x192>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e7f1      	b.n	8002d1e <_printf_float+0x192>
 8002d3a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002d3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002d42:	4293      	cmp	r3, r2
 8002d44:	db05      	blt.n	8002d52 <_printf_float+0x1c6>
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	6123      	str	r3, [r4, #16]
 8002d4a:	07d1      	lsls	r1, r2, #31
 8002d4c:	d5e8      	bpl.n	8002d20 <_printf_float+0x194>
 8002d4e:	3301      	adds	r3, #1
 8002d50:	e7e5      	b.n	8002d1e <_printf_float+0x192>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bfd4      	ite	le
 8002d56:	f1c3 0302 	rsble	r3, r3, #2
 8002d5a:	2301      	movgt	r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	e7de      	b.n	8002d1e <_printf_float+0x192>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	055a      	lsls	r2, r3, #21
 8002d64:	d407      	bmi.n	8002d76 <_printf_float+0x1ea>
 8002d66:	6923      	ldr	r3, [r4, #16]
 8002d68:	4642      	mov	r2, r8
 8002d6a:	4631      	mov	r1, r6
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	47b8      	blx	r7
 8002d70:	3001      	adds	r0, #1
 8002d72:	d12b      	bne.n	8002dcc <_printf_float+0x240>
 8002d74:	e767      	b.n	8002c46 <_printf_float+0xba>
 8002d76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002d7a:	f240 80dc 	bls.w	8002f36 <_printf_float+0x3aa>
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2300      	movs	r3, #0
 8002d82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d86:	f7fd fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d033      	beq.n	8002df6 <_printf_float+0x26a>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	4a41      	ldr	r2, [pc, #260]	; (8002e98 <_printf_float+0x30c>)
 8002d92:	4631      	mov	r1, r6
 8002d94:	4628      	mov	r0, r5
 8002d96:	47b8      	blx	r7
 8002d98:	3001      	adds	r0, #1
 8002d9a:	f43f af54 	beq.w	8002c46 <_printf_float+0xba>
 8002d9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002da2:	429a      	cmp	r2, r3
 8002da4:	db02      	blt.n	8002dac <_printf_float+0x220>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	07d8      	lsls	r0, r3, #31
 8002daa:	d50f      	bpl.n	8002dcc <_printf_float+0x240>
 8002dac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002db0:	4631      	mov	r1, r6
 8002db2:	4628      	mov	r0, r5
 8002db4:	47b8      	blx	r7
 8002db6:	3001      	adds	r0, #1
 8002db8:	f43f af45 	beq.w	8002c46 <_printf_float+0xba>
 8002dbc:	f04f 0800 	mov.w	r8, #0
 8002dc0:	f104 091a 	add.w	r9, r4, #26
 8002dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	4543      	cmp	r3, r8
 8002dca:	dc09      	bgt.n	8002de0 <_printf_float+0x254>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	079b      	lsls	r3, r3, #30
 8002dd0:	f100 8103 	bmi.w	8002fda <_printf_float+0x44e>
 8002dd4:	68e0      	ldr	r0, [r4, #12]
 8002dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002dd8:	4298      	cmp	r0, r3
 8002dda:	bfb8      	it	lt
 8002ddc:	4618      	movlt	r0, r3
 8002dde:	e734      	b.n	8002c4a <_printf_float+0xbe>
 8002de0:	2301      	movs	r3, #1
 8002de2:	464a      	mov	r2, r9
 8002de4:	4631      	mov	r1, r6
 8002de6:	4628      	mov	r0, r5
 8002de8:	47b8      	blx	r7
 8002dea:	3001      	adds	r0, #1
 8002dec:	f43f af2b 	beq.w	8002c46 <_printf_float+0xba>
 8002df0:	f108 0801 	add.w	r8, r8, #1
 8002df4:	e7e6      	b.n	8002dc4 <_printf_float+0x238>
 8002df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	dc2b      	bgt.n	8002e54 <_printf_float+0x2c8>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <_printf_float+0x30c>)
 8002e00:	4631      	mov	r1, r6
 8002e02:	4628      	mov	r0, r5
 8002e04:	47b8      	blx	r7
 8002e06:	3001      	adds	r0, #1
 8002e08:	f43f af1d 	beq.w	8002c46 <_printf_float+0xba>
 8002e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e0e:	b923      	cbnz	r3, 8002e1a <_printf_float+0x28e>
 8002e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e12:	b913      	cbnz	r3, 8002e1a <_printf_float+0x28e>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	07d9      	lsls	r1, r3, #31
 8002e18:	d5d8      	bpl.n	8002dcc <_printf_float+0x240>
 8002e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e1e:	4631      	mov	r1, r6
 8002e20:	4628      	mov	r0, r5
 8002e22:	47b8      	blx	r7
 8002e24:	3001      	adds	r0, #1
 8002e26:	f43f af0e 	beq.w	8002c46 <_printf_float+0xba>
 8002e2a:	f04f 0900 	mov.w	r9, #0
 8002e2e:	f104 0a1a 	add.w	sl, r4, #26
 8002e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e34:	425b      	negs	r3, r3
 8002e36:	454b      	cmp	r3, r9
 8002e38:	dc01      	bgt.n	8002e3e <_printf_float+0x2b2>
 8002e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e3c:	e794      	b.n	8002d68 <_printf_float+0x1dc>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	4652      	mov	r2, sl
 8002e42:	4631      	mov	r1, r6
 8002e44:	4628      	mov	r0, r5
 8002e46:	47b8      	blx	r7
 8002e48:	3001      	adds	r0, #1
 8002e4a:	f43f aefc 	beq.w	8002c46 <_printf_float+0xba>
 8002e4e:	f109 0901 	add.w	r9, r9, #1
 8002e52:	e7ee      	b.n	8002e32 <_printf_float+0x2a6>
 8002e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	bfa8      	it	ge
 8002e5c:	461a      	movge	r2, r3
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	4691      	mov	r9, r2
 8002e62:	dd07      	ble.n	8002e74 <_printf_float+0x2e8>
 8002e64:	4613      	mov	r3, r2
 8002e66:	4631      	mov	r1, r6
 8002e68:	4642      	mov	r2, r8
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	47b8      	blx	r7
 8002e6e:	3001      	adds	r0, #1
 8002e70:	f43f aee9 	beq.w	8002c46 <_printf_float+0xba>
 8002e74:	f104 031a 	add.w	r3, r4, #26
 8002e78:	f04f 0b00 	mov.w	fp, #0
 8002e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e80:	9306      	str	r3, [sp, #24]
 8002e82:	e015      	b.n	8002eb0 <_printf_float+0x324>
 8002e84:	7fefffff 	.word	0x7fefffff
 8002e88:	08004b28 	.word	0x08004b28
 8002e8c:	08004b24 	.word	0x08004b24
 8002e90:	08004b30 	.word	0x08004b30
 8002e94:	08004b2c 	.word	0x08004b2c
 8002e98:	08004b34 	.word	0x08004b34
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	9a06      	ldr	r2, [sp, #24]
 8002ea0:	4631      	mov	r1, r6
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	47b8      	blx	r7
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	f43f aecd 	beq.w	8002c46 <_printf_float+0xba>
 8002eac:	f10b 0b01 	add.w	fp, fp, #1
 8002eb0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002eb4:	ebaa 0309 	sub.w	r3, sl, r9
 8002eb8:	455b      	cmp	r3, fp
 8002eba:	dcef      	bgt.n	8002e9c <_printf_float+0x310>
 8002ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	44d0      	add	r8, sl
 8002ec4:	db15      	blt.n	8002ef2 <_printf_float+0x366>
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	07da      	lsls	r2, r3, #31
 8002eca:	d412      	bmi.n	8002ef2 <_printf_float+0x366>
 8002ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ed0:	eba3 020a 	sub.w	r2, r3, sl
 8002ed4:	eba3 0a01 	sub.w	sl, r3, r1
 8002ed8:	4592      	cmp	sl, r2
 8002eda:	bfa8      	it	ge
 8002edc:	4692      	movge	sl, r2
 8002ede:	f1ba 0f00 	cmp.w	sl, #0
 8002ee2:	dc0e      	bgt.n	8002f02 <_printf_float+0x376>
 8002ee4:	f04f 0800 	mov.w	r8, #0
 8002ee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002eec:	f104 091a 	add.w	r9, r4, #26
 8002ef0:	e019      	b.n	8002f26 <_printf_float+0x39a>
 8002ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ef6:	4631      	mov	r1, r6
 8002ef8:	4628      	mov	r0, r5
 8002efa:	47b8      	blx	r7
 8002efc:	3001      	adds	r0, #1
 8002efe:	d1e5      	bne.n	8002ecc <_printf_float+0x340>
 8002f00:	e6a1      	b.n	8002c46 <_printf_float+0xba>
 8002f02:	4653      	mov	r3, sl
 8002f04:	4642      	mov	r2, r8
 8002f06:	4631      	mov	r1, r6
 8002f08:	4628      	mov	r0, r5
 8002f0a:	47b8      	blx	r7
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	d1e9      	bne.n	8002ee4 <_printf_float+0x358>
 8002f10:	e699      	b.n	8002c46 <_printf_float+0xba>
 8002f12:	2301      	movs	r3, #1
 8002f14:	464a      	mov	r2, r9
 8002f16:	4631      	mov	r1, r6
 8002f18:	4628      	mov	r0, r5
 8002f1a:	47b8      	blx	r7
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	f43f ae92 	beq.w	8002c46 <_printf_float+0xba>
 8002f22:	f108 0801 	add.w	r8, r8, #1
 8002f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	eba3 030a 	sub.w	r3, r3, sl
 8002f30:	4543      	cmp	r3, r8
 8002f32:	dcee      	bgt.n	8002f12 <_printf_float+0x386>
 8002f34:	e74a      	b.n	8002dcc <_printf_float+0x240>
 8002f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f38:	2a01      	cmp	r2, #1
 8002f3a:	dc01      	bgt.n	8002f40 <_printf_float+0x3b4>
 8002f3c:	07db      	lsls	r3, r3, #31
 8002f3e:	d53a      	bpl.n	8002fb6 <_printf_float+0x42a>
 8002f40:	2301      	movs	r3, #1
 8002f42:	4642      	mov	r2, r8
 8002f44:	4631      	mov	r1, r6
 8002f46:	4628      	mov	r0, r5
 8002f48:	47b8      	blx	r7
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	f43f ae7b 	beq.w	8002c46 <_printf_float+0xba>
 8002f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f54:	4631      	mov	r1, r6
 8002f56:	4628      	mov	r0, r5
 8002f58:	47b8      	blx	r7
 8002f5a:	3001      	adds	r0, #1
 8002f5c:	f108 0801 	add.w	r8, r8, #1
 8002f60:	f43f ae71 	beq.w	8002c46 <_printf_float+0xba>
 8002f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f66:	2200      	movs	r2, #0
 8002f68:	f103 3aff 	add.w	sl, r3, #4294967295
 8002f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f70:	2300      	movs	r3, #0
 8002f72:	f7fd fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f76:	b9c8      	cbnz	r0, 8002fac <_printf_float+0x420>
 8002f78:	4653      	mov	r3, sl
 8002f7a:	4642      	mov	r2, r8
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	4628      	mov	r0, r5
 8002f80:	47b8      	blx	r7
 8002f82:	3001      	adds	r0, #1
 8002f84:	d10e      	bne.n	8002fa4 <_printf_float+0x418>
 8002f86:	e65e      	b.n	8002c46 <_printf_float+0xba>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	4652      	mov	r2, sl
 8002f8c:	4631      	mov	r1, r6
 8002f8e:	4628      	mov	r0, r5
 8002f90:	47b8      	blx	r7
 8002f92:	3001      	adds	r0, #1
 8002f94:	f43f ae57 	beq.w	8002c46 <_printf_float+0xba>
 8002f98:	f108 0801 	add.w	r8, r8, #1
 8002f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	4543      	cmp	r3, r8
 8002fa2:	dcf1      	bgt.n	8002f88 <_printf_float+0x3fc>
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002faa:	e6de      	b.n	8002d6a <_printf_float+0x1de>
 8002fac:	f04f 0800 	mov.w	r8, #0
 8002fb0:	f104 0a1a 	add.w	sl, r4, #26
 8002fb4:	e7f2      	b.n	8002f9c <_printf_float+0x410>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e7df      	b.n	8002f7a <_printf_float+0x3ee>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	464a      	mov	r2, r9
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	47b8      	blx	r7
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	f43f ae3e 	beq.w	8002c46 <_printf_float+0xba>
 8002fca:	f108 0801 	add.w	r8, r8, #1
 8002fce:	68e3      	ldr	r3, [r4, #12]
 8002fd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	4543      	cmp	r3, r8
 8002fd6:	dcf0      	bgt.n	8002fba <_printf_float+0x42e>
 8002fd8:	e6fc      	b.n	8002dd4 <_printf_float+0x248>
 8002fda:	f04f 0800 	mov.w	r8, #0
 8002fde:	f104 0919 	add.w	r9, r4, #25
 8002fe2:	e7f4      	b.n	8002fce <_printf_float+0x442>
 8002fe4:	2900      	cmp	r1, #0
 8002fe6:	f43f ae8b 	beq.w	8002d00 <_printf_float+0x174>
 8002fea:	2300      	movs	r3, #0
 8002fec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002ff0:	ab09      	add	r3, sp, #36	; 0x24
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	ec49 8b10 	vmov	d0, r8, r9
 8002ff8:	6022      	str	r2, [r4, #0]
 8002ffa:	f8cd a004 	str.w	sl, [sp, #4]
 8002ffe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003002:	4628      	mov	r0, r5
 8003004:	f7ff fd2e 	bl	8002a64 <__cvt>
 8003008:	4680      	mov	r8, r0
 800300a:	e648      	b.n	8002c9e <_printf_float+0x112>

0800300c <_printf_common>:
 800300c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003010:	4691      	mov	r9, r2
 8003012:	461f      	mov	r7, r3
 8003014:	688a      	ldr	r2, [r1, #8]
 8003016:	690b      	ldr	r3, [r1, #16]
 8003018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800301c:	4293      	cmp	r3, r2
 800301e:	bfb8      	it	lt
 8003020:	4613      	movlt	r3, r2
 8003022:	f8c9 3000 	str.w	r3, [r9]
 8003026:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800302a:	4606      	mov	r6, r0
 800302c:	460c      	mov	r4, r1
 800302e:	b112      	cbz	r2, 8003036 <_printf_common+0x2a>
 8003030:	3301      	adds	r3, #1
 8003032:	f8c9 3000 	str.w	r3, [r9]
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	0699      	lsls	r1, r3, #26
 800303a:	bf42      	ittt	mi
 800303c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003040:	3302      	addmi	r3, #2
 8003042:	f8c9 3000 	strmi.w	r3, [r9]
 8003046:	6825      	ldr	r5, [r4, #0]
 8003048:	f015 0506 	ands.w	r5, r5, #6
 800304c:	d107      	bne.n	800305e <_printf_common+0x52>
 800304e:	f104 0a19 	add.w	sl, r4, #25
 8003052:	68e3      	ldr	r3, [r4, #12]
 8003054:	f8d9 2000 	ldr.w	r2, [r9]
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	42ab      	cmp	r3, r5
 800305c:	dc28      	bgt.n	80030b0 <_printf_common+0xa4>
 800305e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003062:	6822      	ldr	r2, [r4, #0]
 8003064:	3300      	adds	r3, #0
 8003066:	bf18      	it	ne
 8003068:	2301      	movne	r3, #1
 800306a:	0692      	lsls	r2, r2, #26
 800306c:	d42d      	bmi.n	80030ca <_printf_common+0xbe>
 800306e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003072:	4639      	mov	r1, r7
 8003074:	4630      	mov	r0, r6
 8003076:	47c0      	blx	r8
 8003078:	3001      	adds	r0, #1
 800307a:	d020      	beq.n	80030be <_printf_common+0xb2>
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	68e5      	ldr	r5, [r4, #12]
 8003080:	f8d9 2000 	ldr.w	r2, [r9]
 8003084:	f003 0306 	and.w	r3, r3, #6
 8003088:	2b04      	cmp	r3, #4
 800308a:	bf08      	it	eq
 800308c:	1aad      	subeq	r5, r5, r2
 800308e:	68a3      	ldr	r3, [r4, #8]
 8003090:	6922      	ldr	r2, [r4, #16]
 8003092:	bf0c      	ite	eq
 8003094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003098:	2500      	movne	r5, #0
 800309a:	4293      	cmp	r3, r2
 800309c:	bfc4      	itt	gt
 800309e:	1a9b      	subgt	r3, r3, r2
 80030a0:	18ed      	addgt	r5, r5, r3
 80030a2:	f04f 0900 	mov.w	r9, #0
 80030a6:	341a      	adds	r4, #26
 80030a8:	454d      	cmp	r5, r9
 80030aa:	d11a      	bne.n	80030e2 <_printf_common+0xd6>
 80030ac:	2000      	movs	r0, #0
 80030ae:	e008      	b.n	80030c2 <_printf_common+0xb6>
 80030b0:	2301      	movs	r3, #1
 80030b2:	4652      	mov	r2, sl
 80030b4:	4639      	mov	r1, r7
 80030b6:	4630      	mov	r0, r6
 80030b8:	47c0      	blx	r8
 80030ba:	3001      	adds	r0, #1
 80030bc:	d103      	bne.n	80030c6 <_printf_common+0xba>
 80030be:	f04f 30ff 	mov.w	r0, #4294967295
 80030c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c6:	3501      	adds	r5, #1
 80030c8:	e7c3      	b.n	8003052 <_printf_common+0x46>
 80030ca:	18e1      	adds	r1, r4, r3
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	2030      	movs	r0, #48	; 0x30
 80030d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030d4:	4422      	add	r2, r4
 80030d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030de:	3302      	adds	r3, #2
 80030e0:	e7c5      	b.n	800306e <_printf_common+0x62>
 80030e2:	2301      	movs	r3, #1
 80030e4:	4622      	mov	r2, r4
 80030e6:	4639      	mov	r1, r7
 80030e8:	4630      	mov	r0, r6
 80030ea:	47c0      	blx	r8
 80030ec:	3001      	adds	r0, #1
 80030ee:	d0e6      	beq.n	80030be <_printf_common+0xb2>
 80030f0:	f109 0901 	add.w	r9, r9, #1
 80030f4:	e7d8      	b.n	80030a8 <_printf_common+0x9c>
	...

080030f8 <_printf_i>:
 80030f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003100:	460c      	mov	r4, r1
 8003102:	7e09      	ldrb	r1, [r1, #24]
 8003104:	b085      	sub	sp, #20
 8003106:	296e      	cmp	r1, #110	; 0x6e
 8003108:	4617      	mov	r7, r2
 800310a:	4606      	mov	r6, r0
 800310c:	4698      	mov	r8, r3
 800310e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003110:	f000 80b3 	beq.w	800327a <_printf_i+0x182>
 8003114:	d822      	bhi.n	800315c <_printf_i+0x64>
 8003116:	2963      	cmp	r1, #99	; 0x63
 8003118:	d036      	beq.n	8003188 <_printf_i+0x90>
 800311a:	d80a      	bhi.n	8003132 <_printf_i+0x3a>
 800311c:	2900      	cmp	r1, #0
 800311e:	f000 80b9 	beq.w	8003294 <_printf_i+0x19c>
 8003122:	2958      	cmp	r1, #88	; 0x58
 8003124:	f000 8083 	beq.w	800322e <_printf_i+0x136>
 8003128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800312c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003130:	e032      	b.n	8003198 <_printf_i+0xa0>
 8003132:	2964      	cmp	r1, #100	; 0x64
 8003134:	d001      	beq.n	800313a <_printf_i+0x42>
 8003136:	2969      	cmp	r1, #105	; 0x69
 8003138:	d1f6      	bne.n	8003128 <_printf_i+0x30>
 800313a:	6820      	ldr	r0, [r4, #0]
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	0605      	lsls	r5, r0, #24
 8003140:	f103 0104 	add.w	r1, r3, #4
 8003144:	d52a      	bpl.n	800319c <_printf_i+0xa4>
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6011      	str	r1, [r2, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	da03      	bge.n	8003156 <_printf_i+0x5e>
 800314e:	222d      	movs	r2, #45	; 0x2d
 8003150:	425b      	negs	r3, r3
 8003152:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003156:	486f      	ldr	r0, [pc, #444]	; (8003314 <_printf_i+0x21c>)
 8003158:	220a      	movs	r2, #10
 800315a:	e039      	b.n	80031d0 <_printf_i+0xd8>
 800315c:	2973      	cmp	r1, #115	; 0x73
 800315e:	f000 809d 	beq.w	800329c <_printf_i+0x1a4>
 8003162:	d808      	bhi.n	8003176 <_printf_i+0x7e>
 8003164:	296f      	cmp	r1, #111	; 0x6f
 8003166:	d020      	beq.n	80031aa <_printf_i+0xb2>
 8003168:	2970      	cmp	r1, #112	; 0x70
 800316a:	d1dd      	bne.n	8003128 <_printf_i+0x30>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	f043 0320 	orr.w	r3, r3, #32
 8003172:	6023      	str	r3, [r4, #0]
 8003174:	e003      	b.n	800317e <_printf_i+0x86>
 8003176:	2975      	cmp	r1, #117	; 0x75
 8003178:	d017      	beq.n	80031aa <_printf_i+0xb2>
 800317a:	2978      	cmp	r1, #120	; 0x78
 800317c:	d1d4      	bne.n	8003128 <_printf_i+0x30>
 800317e:	2378      	movs	r3, #120	; 0x78
 8003180:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003184:	4864      	ldr	r0, [pc, #400]	; (8003318 <_printf_i+0x220>)
 8003186:	e055      	b.n	8003234 <_printf_i+0x13c>
 8003188:	6813      	ldr	r3, [r2, #0]
 800318a:	1d19      	adds	r1, r3, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6011      	str	r1, [r2, #0]
 8003190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003198:	2301      	movs	r3, #1
 800319a:	e08c      	b.n	80032b6 <_printf_i+0x1be>
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6011      	str	r1, [r2, #0]
 80031a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031a4:	bf18      	it	ne
 80031a6:	b21b      	sxthne	r3, r3
 80031a8:	e7cf      	b.n	800314a <_printf_i+0x52>
 80031aa:	6813      	ldr	r3, [r2, #0]
 80031ac:	6825      	ldr	r5, [r4, #0]
 80031ae:	1d18      	adds	r0, r3, #4
 80031b0:	6010      	str	r0, [r2, #0]
 80031b2:	0628      	lsls	r0, r5, #24
 80031b4:	d501      	bpl.n	80031ba <_printf_i+0xc2>
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	e002      	b.n	80031c0 <_printf_i+0xc8>
 80031ba:	0668      	lsls	r0, r5, #25
 80031bc:	d5fb      	bpl.n	80031b6 <_printf_i+0xbe>
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	4854      	ldr	r0, [pc, #336]	; (8003314 <_printf_i+0x21c>)
 80031c2:	296f      	cmp	r1, #111	; 0x6f
 80031c4:	bf14      	ite	ne
 80031c6:	220a      	movne	r2, #10
 80031c8:	2208      	moveq	r2, #8
 80031ca:	2100      	movs	r1, #0
 80031cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031d0:	6865      	ldr	r5, [r4, #4]
 80031d2:	60a5      	str	r5, [r4, #8]
 80031d4:	2d00      	cmp	r5, #0
 80031d6:	f2c0 8095 	blt.w	8003304 <_printf_i+0x20c>
 80031da:	6821      	ldr	r1, [r4, #0]
 80031dc:	f021 0104 	bic.w	r1, r1, #4
 80031e0:	6021      	str	r1, [r4, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d13d      	bne.n	8003262 <_printf_i+0x16a>
 80031e6:	2d00      	cmp	r5, #0
 80031e8:	f040 808e 	bne.w	8003308 <_printf_i+0x210>
 80031ec:	4665      	mov	r5, ip
 80031ee:	2a08      	cmp	r2, #8
 80031f0:	d10b      	bne.n	800320a <_printf_i+0x112>
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	07db      	lsls	r3, r3, #31
 80031f6:	d508      	bpl.n	800320a <_printf_i+0x112>
 80031f8:	6923      	ldr	r3, [r4, #16]
 80031fa:	6862      	ldr	r2, [r4, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	bfde      	ittt	le
 8003200:	2330      	movle	r3, #48	; 0x30
 8003202:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003206:	f105 35ff 	addle.w	r5, r5, #4294967295
 800320a:	ebac 0305 	sub.w	r3, ip, r5
 800320e:	6123      	str	r3, [r4, #16]
 8003210:	f8cd 8000 	str.w	r8, [sp]
 8003214:	463b      	mov	r3, r7
 8003216:	aa03      	add	r2, sp, #12
 8003218:	4621      	mov	r1, r4
 800321a:	4630      	mov	r0, r6
 800321c:	f7ff fef6 	bl	800300c <_printf_common>
 8003220:	3001      	adds	r0, #1
 8003222:	d14d      	bne.n	80032c0 <_printf_i+0x1c8>
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	b005      	add	sp, #20
 800322a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800322e:	4839      	ldr	r0, [pc, #228]	; (8003314 <_printf_i+0x21c>)
 8003230:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003234:	6813      	ldr	r3, [r2, #0]
 8003236:	6821      	ldr	r1, [r4, #0]
 8003238:	1d1d      	adds	r5, r3, #4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6015      	str	r5, [r2, #0]
 800323e:	060a      	lsls	r2, r1, #24
 8003240:	d50b      	bpl.n	800325a <_printf_i+0x162>
 8003242:	07ca      	lsls	r2, r1, #31
 8003244:	bf44      	itt	mi
 8003246:	f041 0120 	orrmi.w	r1, r1, #32
 800324a:	6021      	strmi	r1, [r4, #0]
 800324c:	b91b      	cbnz	r3, 8003256 <_printf_i+0x15e>
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	f022 0220 	bic.w	r2, r2, #32
 8003254:	6022      	str	r2, [r4, #0]
 8003256:	2210      	movs	r2, #16
 8003258:	e7b7      	b.n	80031ca <_printf_i+0xd2>
 800325a:	064d      	lsls	r5, r1, #25
 800325c:	bf48      	it	mi
 800325e:	b29b      	uxthmi	r3, r3
 8003260:	e7ef      	b.n	8003242 <_printf_i+0x14a>
 8003262:	4665      	mov	r5, ip
 8003264:	fbb3 f1f2 	udiv	r1, r3, r2
 8003268:	fb02 3311 	mls	r3, r2, r1, r3
 800326c:	5cc3      	ldrb	r3, [r0, r3]
 800326e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003272:	460b      	mov	r3, r1
 8003274:	2900      	cmp	r1, #0
 8003276:	d1f5      	bne.n	8003264 <_printf_i+0x16c>
 8003278:	e7b9      	b.n	80031ee <_printf_i+0xf6>
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	6825      	ldr	r5, [r4, #0]
 800327e:	6961      	ldr	r1, [r4, #20]
 8003280:	1d18      	adds	r0, r3, #4
 8003282:	6010      	str	r0, [r2, #0]
 8003284:	0628      	lsls	r0, r5, #24
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	d501      	bpl.n	800328e <_printf_i+0x196>
 800328a:	6019      	str	r1, [r3, #0]
 800328c:	e002      	b.n	8003294 <_printf_i+0x19c>
 800328e:	066a      	lsls	r2, r5, #25
 8003290:	d5fb      	bpl.n	800328a <_printf_i+0x192>
 8003292:	8019      	strh	r1, [r3, #0]
 8003294:	2300      	movs	r3, #0
 8003296:	6123      	str	r3, [r4, #16]
 8003298:	4665      	mov	r5, ip
 800329a:	e7b9      	b.n	8003210 <_printf_i+0x118>
 800329c:	6813      	ldr	r3, [r2, #0]
 800329e:	1d19      	adds	r1, r3, #4
 80032a0:	6011      	str	r1, [r2, #0]
 80032a2:	681d      	ldr	r5, [r3, #0]
 80032a4:	6862      	ldr	r2, [r4, #4]
 80032a6:	2100      	movs	r1, #0
 80032a8:	4628      	mov	r0, r5
 80032aa:	f7fc ffa1 	bl	80001f0 <memchr>
 80032ae:	b108      	cbz	r0, 80032b4 <_printf_i+0x1bc>
 80032b0:	1b40      	subs	r0, r0, r5
 80032b2:	6060      	str	r0, [r4, #4]
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	6123      	str	r3, [r4, #16]
 80032b8:	2300      	movs	r3, #0
 80032ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032be:	e7a7      	b.n	8003210 <_printf_i+0x118>
 80032c0:	6923      	ldr	r3, [r4, #16]
 80032c2:	462a      	mov	r2, r5
 80032c4:	4639      	mov	r1, r7
 80032c6:	4630      	mov	r0, r6
 80032c8:	47c0      	blx	r8
 80032ca:	3001      	adds	r0, #1
 80032cc:	d0aa      	beq.n	8003224 <_printf_i+0x12c>
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	079b      	lsls	r3, r3, #30
 80032d2:	d413      	bmi.n	80032fc <_printf_i+0x204>
 80032d4:	68e0      	ldr	r0, [r4, #12]
 80032d6:	9b03      	ldr	r3, [sp, #12]
 80032d8:	4298      	cmp	r0, r3
 80032da:	bfb8      	it	lt
 80032dc:	4618      	movlt	r0, r3
 80032de:	e7a3      	b.n	8003228 <_printf_i+0x130>
 80032e0:	2301      	movs	r3, #1
 80032e2:	464a      	mov	r2, r9
 80032e4:	4639      	mov	r1, r7
 80032e6:	4630      	mov	r0, r6
 80032e8:	47c0      	blx	r8
 80032ea:	3001      	adds	r0, #1
 80032ec:	d09a      	beq.n	8003224 <_printf_i+0x12c>
 80032ee:	3501      	adds	r5, #1
 80032f0:	68e3      	ldr	r3, [r4, #12]
 80032f2:	9a03      	ldr	r2, [sp, #12]
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	42ab      	cmp	r3, r5
 80032f8:	dcf2      	bgt.n	80032e0 <_printf_i+0x1e8>
 80032fa:	e7eb      	b.n	80032d4 <_printf_i+0x1dc>
 80032fc:	2500      	movs	r5, #0
 80032fe:	f104 0919 	add.w	r9, r4, #25
 8003302:	e7f5      	b.n	80032f0 <_printf_i+0x1f8>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ac      	bne.n	8003262 <_printf_i+0x16a>
 8003308:	7803      	ldrb	r3, [r0, #0]
 800330a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800330e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003312:	e76c      	b.n	80031ee <_printf_i+0xf6>
 8003314:	08004b36 	.word	0x08004b36
 8003318:	08004b47 	.word	0x08004b47

0800331c <siprintf>:
 800331c:	b40e      	push	{r1, r2, r3}
 800331e:	b500      	push	{lr}
 8003320:	b09c      	sub	sp, #112	; 0x70
 8003322:	ab1d      	add	r3, sp, #116	; 0x74
 8003324:	9002      	str	r0, [sp, #8]
 8003326:	9006      	str	r0, [sp, #24]
 8003328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800332c:	4809      	ldr	r0, [pc, #36]	; (8003354 <siprintf+0x38>)
 800332e:	9107      	str	r1, [sp, #28]
 8003330:	9104      	str	r1, [sp, #16]
 8003332:	4909      	ldr	r1, [pc, #36]	; (8003358 <siprintf+0x3c>)
 8003334:	f853 2b04 	ldr.w	r2, [r3], #4
 8003338:	9105      	str	r1, [sp, #20]
 800333a:	6800      	ldr	r0, [r0, #0]
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	a902      	add	r1, sp, #8
 8003340:	f001 fa5e 	bl	8004800 <_svfiprintf_r>
 8003344:	9b02      	ldr	r3, [sp, #8]
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	b01c      	add	sp, #112	; 0x70
 800334c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003350:	b003      	add	sp, #12
 8003352:	4770      	bx	lr
 8003354:	2000000c 	.word	0x2000000c
 8003358:	ffff0208 	.word	0xffff0208

0800335c <quorem>:
 800335c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003360:	6903      	ldr	r3, [r0, #16]
 8003362:	690c      	ldr	r4, [r1, #16]
 8003364:	42a3      	cmp	r3, r4
 8003366:	4680      	mov	r8, r0
 8003368:	f2c0 8082 	blt.w	8003470 <quorem+0x114>
 800336c:	3c01      	subs	r4, #1
 800336e:	f101 0714 	add.w	r7, r1, #20
 8003372:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003376:	f100 0614 	add.w	r6, r0, #20
 800337a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800337e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003382:	eb06 030c 	add.w	r3, r6, ip
 8003386:	3501      	adds	r5, #1
 8003388:	eb07 090c 	add.w	r9, r7, ip
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003392:	b395      	cbz	r5, 80033fa <quorem+0x9e>
 8003394:	f04f 0a00 	mov.w	sl, #0
 8003398:	4638      	mov	r0, r7
 800339a:	46b6      	mov	lr, r6
 800339c:	46d3      	mov	fp, sl
 800339e:	f850 2b04 	ldr.w	r2, [r0], #4
 80033a2:	b293      	uxth	r3, r2
 80033a4:	fb05 a303 	mla	r3, r5, r3, sl
 80033a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	ebab 0303 	sub.w	r3, fp, r3
 80033b2:	0c12      	lsrs	r2, r2, #16
 80033b4:	f8de b000 	ldr.w	fp, [lr]
 80033b8:	fb05 a202 	mla	r2, r5, r2, sl
 80033bc:	fa13 f38b 	uxtah	r3, r3, fp
 80033c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80033c4:	fa1f fb82 	uxth.w	fp, r2
 80033c8:	f8de 2000 	ldr.w	r2, [lr]
 80033cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80033d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033da:	4581      	cmp	r9, r0
 80033dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80033e0:	f84e 3b04 	str.w	r3, [lr], #4
 80033e4:	d2db      	bcs.n	800339e <quorem+0x42>
 80033e6:	f856 300c 	ldr.w	r3, [r6, ip]
 80033ea:	b933      	cbnz	r3, 80033fa <quorem+0x9e>
 80033ec:	9b01      	ldr	r3, [sp, #4]
 80033ee:	3b04      	subs	r3, #4
 80033f0:	429e      	cmp	r6, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	d330      	bcc.n	8003458 <quorem+0xfc>
 80033f6:	f8c8 4010 	str.w	r4, [r8, #16]
 80033fa:	4640      	mov	r0, r8
 80033fc:	f001 f82a 	bl	8004454 <__mcmp>
 8003400:	2800      	cmp	r0, #0
 8003402:	db25      	blt.n	8003450 <quorem+0xf4>
 8003404:	3501      	adds	r5, #1
 8003406:	4630      	mov	r0, r6
 8003408:	f04f 0c00 	mov.w	ip, #0
 800340c:	f857 2b04 	ldr.w	r2, [r7], #4
 8003410:	f8d0 e000 	ldr.w	lr, [r0]
 8003414:	b293      	uxth	r3, r2
 8003416:	ebac 0303 	sub.w	r3, ip, r3
 800341a:	0c12      	lsrs	r2, r2, #16
 800341c:	fa13 f38e 	uxtah	r3, r3, lr
 8003420:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003428:	b29b      	uxth	r3, r3
 800342a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800342e:	45b9      	cmp	r9, r7
 8003430:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003434:	f840 3b04 	str.w	r3, [r0], #4
 8003438:	d2e8      	bcs.n	800340c <quorem+0xb0>
 800343a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800343e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003442:	b92a      	cbnz	r2, 8003450 <quorem+0xf4>
 8003444:	3b04      	subs	r3, #4
 8003446:	429e      	cmp	r6, r3
 8003448:	461a      	mov	r2, r3
 800344a:	d30b      	bcc.n	8003464 <quorem+0x108>
 800344c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003450:	4628      	mov	r0, r5
 8003452:	b003      	add	sp, #12
 8003454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	3b04      	subs	r3, #4
 800345c:	2a00      	cmp	r2, #0
 800345e:	d1ca      	bne.n	80033f6 <quorem+0x9a>
 8003460:	3c01      	subs	r4, #1
 8003462:	e7c5      	b.n	80033f0 <quorem+0x94>
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	3b04      	subs	r3, #4
 8003468:	2a00      	cmp	r2, #0
 800346a:	d1ef      	bne.n	800344c <quorem+0xf0>
 800346c:	3c01      	subs	r4, #1
 800346e:	e7ea      	b.n	8003446 <quorem+0xea>
 8003470:	2000      	movs	r0, #0
 8003472:	e7ee      	b.n	8003452 <quorem+0xf6>
 8003474:	0000      	movs	r0, r0
	...

08003478 <_dtoa_r>:
 8003478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347c:	ec57 6b10 	vmov	r6, r7, d0
 8003480:	b097      	sub	sp, #92	; 0x5c
 8003482:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003484:	9106      	str	r1, [sp, #24]
 8003486:	4604      	mov	r4, r0
 8003488:	920b      	str	r2, [sp, #44]	; 0x2c
 800348a:	9312      	str	r3, [sp, #72]	; 0x48
 800348c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003490:	e9cd 6700 	strd	r6, r7, [sp]
 8003494:	b93d      	cbnz	r5, 80034a6 <_dtoa_r+0x2e>
 8003496:	2010      	movs	r0, #16
 8003498:	f000 fdb4 	bl	8004004 <malloc>
 800349c:	6260      	str	r0, [r4, #36]	; 0x24
 800349e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80034a2:	6005      	str	r5, [r0, #0]
 80034a4:	60c5      	str	r5, [r0, #12]
 80034a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034a8:	6819      	ldr	r1, [r3, #0]
 80034aa:	b151      	cbz	r1, 80034c2 <_dtoa_r+0x4a>
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	604a      	str	r2, [r1, #4]
 80034b0:	2301      	movs	r3, #1
 80034b2:	4093      	lsls	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
 80034b6:	4620      	mov	r0, r4
 80034b8:	f000 fdeb 	bl	8004092 <_Bfree>
 80034bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	1e3b      	subs	r3, r7, #0
 80034c4:	bfbb      	ittet	lt
 80034c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80034ca:	9301      	strlt	r3, [sp, #4]
 80034cc:	2300      	movge	r3, #0
 80034ce:	2201      	movlt	r2, #1
 80034d0:	bfac      	ite	ge
 80034d2:	f8c8 3000 	strge.w	r3, [r8]
 80034d6:	f8c8 2000 	strlt.w	r2, [r8]
 80034da:	4baf      	ldr	r3, [pc, #700]	; (8003798 <_dtoa_r+0x320>)
 80034dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80034e0:	ea33 0308 	bics.w	r3, r3, r8
 80034e4:	d114      	bne.n	8003510 <_dtoa_r+0x98>
 80034e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	9b00      	ldr	r3, [sp, #0]
 80034f0:	b923      	cbnz	r3, 80034fc <_dtoa_r+0x84>
 80034f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80034f6:	2800      	cmp	r0, #0
 80034f8:	f000 8542 	beq.w	8003f80 <_dtoa_r+0xb08>
 80034fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80037ac <_dtoa_r+0x334>
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8544 	beq.w	8003f90 <_dtoa_r+0xb18>
 8003508:	f10b 0303 	add.w	r3, fp, #3
 800350c:	f000 bd3e 	b.w	8003f8c <_dtoa_r+0xb14>
 8003510:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003514:	2200      	movs	r2, #0
 8003516:	2300      	movs	r3, #0
 8003518:	4630      	mov	r0, r6
 800351a:	4639      	mov	r1, r7
 800351c:	f7fd fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 8003520:	4681      	mov	r9, r0
 8003522:	b168      	cbz	r0, 8003540 <_dtoa_r+0xc8>
 8003524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003526:	2301      	movs	r3, #1
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8524 	beq.w	8003f7a <_dtoa_r+0xb02>
 8003532:	4b9a      	ldr	r3, [pc, #616]	; (800379c <_dtoa_r+0x324>)
 8003534:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003536:	f103 3bff 	add.w	fp, r3, #4294967295
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	f000 bd28 	b.w	8003f90 <_dtoa_r+0xb18>
 8003540:	aa14      	add	r2, sp, #80	; 0x50
 8003542:	a915      	add	r1, sp, #84	; 0x54
 8003544:	ec47 6b10 	vmov	d0, r6, r7
 8003548:	4620      	mov	r0, r4
 800354a:	f000 fffa 	bl	8004542 <__d2b>
 800354e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003552:	9004      	str	r0, [sp, #16]
 8003554:	2d00      	cmp	r5, #0
 8003556:	d07c      	beq.n	8003652 <_dtoa_r+0x1da>
 8003558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800355c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003560:	46b2      	mov	sl, r6
 8003562:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003566:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800356a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800356e:	2200      	movs	r2, #0
 8003570:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <_dtoa_r+0x328>)
 8003572:	4650      	mov	r0, sl
 8003574:	4659      	mov	r1, fp
 8003576:	f7fc fe8f 	bl	8000298 <__aeabi_dsub>
 800357a:	a381      	add	r3, pc, #516	; (adr r3, 8003780 <_dtoa_r+0x308>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fd f842 	bl	8000608 <__aeabi_dmul>
 8003584:	a380      	add	r3, pc, #512	; (adr r3, 8003788 <_dtoa_r+0x310>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc fe87 	bl	800029c <__adddf3>
 800358e:	4606      	mov	r6, r0
 8003590:	4628      	mov	r0, r5
 8003592:	460f      	mov	r7, r1
 8003594:	f7fc ffce 	bl	8000534 <__aeabi_i2d>
 8003598:	a37d      	add	r3, pc, #500	; (adr r3, 8003790 <_dtoa_r+0x318>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f7fd f833 	bl	8000608 <__aeabi_dmul>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4630      	mov	r0, r6
 80035a8:	4639      	mov	r1, r7
 80035aa:	f7fc fe77 	bl	800029c <__adddf3>
 80035ae:	4606      	mov	r6, r0
 80035b0:	460f      	mov	r7, r1
 80035b2:	f7fd fad9 	bl	8000b68 <__aeabi_d2iz>
 80035b6:	2200      	movs	r2, #0
 80035b8:	4682      	mov	sl, r0
 80035ba:	2300      	movs	r3, #0
 80035bc:	4630      	mov	r0, r6
 80035be:	4639      	mov	r1, r7
 80035c0:	f7fd fa94 	bl	8000aec <__aeabi_dcmplt>
 80035c4:	b148      	cbz	r0, 80035da <_dtoa_r+0x162>
 80035c6:	4650      	mov	r0, sl
 80035c8:	f7fc ffb4 	bl	8000534 <__aeabi_i2d>
 80035cc:	4632      	mov	r2, r6
 80035ce:	463b      	mov	r3, r7
 80035d0:	f7fd fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 80035d4:	b908      	cbnz	r0, 80035da <_dtoa_r+0x162>
 80035d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035da:	f1ba 0f16 	cmp.w	sl, #22
 80035de:	d859      	bhi.n	8003694 <_dtoa_r+0x21c>
 80035e0:	4970      	ldr	r1, [pc, #448]	; (80037a4 <_dtoa_r+0x32c>)
 80035e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80035e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035ee:	f7fd fa9b 	bl	8000b28 <__aeabi_dcmpgt>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d050      	beq.n	8003698 <_dtoa_r+0x220>
 80035f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035fa:	2300      	movs	r3, #0
 80035fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80035fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003600:	1b5d      	subs	r5, r3, r5
 8003602:	f1b5 0801 	subs.w	r8, r5, #1
 8003606:	bf49      	itett	mi
 8003608:	f1c5 0301 	rsbmi	r3, r5, #1
 800360c:	2300      	movpl	r3, #0
 800360e:	9305      	strmi	r3, [sp, #20]
 8003610:	f04f 0800 	movmi.w	r8, #0
 8003614:	bf58      	it	pl
 8003616:	9305      	strpl	r3, [sp, #20]
 8003618:	f1ba 0f00 	cmp.w	sl, #0
 800361c:	db3e      	blt.n	800369c <_dtoa_r+0x224>
 800361e:	2300      	movs	r3, #0
 8003620:	44d0      	add	r8, sl
 8003622:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003626:	9307      	str	r3, [sp, #28]
 8003628:	9b06      	ldr	r3, [sp, #24]
 800362a:	2b09      	cmp	r3, #9
 800362c:	f200 8090 	bhi.w	8003750 <_dtoa_r+0x2d8>
 8003630:	2b05      	cmp	r3, #5
 8003632:	bfc4      	itt	gt
 8003634:	3b04      	subgt	r3, #4
 8003636:	9306      	strgt	r3, [sp, #24]
 8003638:	9b06      	ldr	r3, [sp, #24]
 800363a:	f1a3 0302 	sub.w	r3, r3, #2
 800363e:	bfcc      	ite	gt
 8003640:	2500      	movgt	r5, #0
 8003642:	2501      	movle	r5, #1
 8003644:	2b03      	cmp	r3, #3
 8003646:	f200 808f 	bhi.w	8003768 <_dtoa_r+0x2f0>
 800364a:	e8df f003 	tbb	[pc, r3]
 800364e:	7f7d      	.short	0x7f7d
 8003650:	7131      	.short	0x7131
 8003652:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003656:	441d      	add	r5, r3
 8003658:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800365c:	2820      	cmp	r0, #32
 800365e:	dd13      	ble.n	8003688 <_dtoa_r+0x210>
 8003660:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003664:	9b00      	ldr	r3, [sp, #0]
 8003666:	fa08 f800 	lsl.w	r8, r8, r0
 800366a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800366e:	fa23 f000 	lsr.w	r0, r3, r0
 8003672:	ea48 0000 	orr.w	r0, r8, r0
 8003676:	f7fc ff4d 	bl	8000514 <__aeabi_ui2d>
 800367a:	2301      	movs	r3, #1
 800367c:	4682      	mov	sl, r0
 800367e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003682:	3d01      	subs	r5, #1
 8003684:	9313      	str	r3, [sp, #76]	; 0x4c
 8003686:	e772      	b.n	800356e <_dtoa_r+0xf6>
 8003688:	9b00      	ldr	r3, [sp, #0]
 800368a:	f1c0 0020 	rsb	r0, r0, #32
 800368e:	fa03 f000 	lsl.w	r0, r3, r0
 8003692:	e7f0      	b.n	8003676 <_dtoa_r+0x1fe>
 8003694:	2301      	movs	r3, #1
 8003696:	e7b1      	b.n	80035fc <_dtoa_r+0x184>
 8003698:	900f      	str	r0, [sp, #60]	; 0x3c
 800369a:	e7b0      	b.n	80035fe <_dtoa_r+0x186>
 800369c:	9b05      	ldr	r3, [sp, #20]
 800369e:	eba3 030a 	sub.w	r3, r3, sl
 80036a2:	9305      	str	r3, [sp, #20]
 80036a4:	f1ca 0300 	rsb	r3, sl, #0
 80036a8:	9307      	str	r3, [sp, #28]
 80036aa:	2300      	movs	r3, #0
 80036ac:	930e      	str	r3, [sp, #56]	; 0x38
 80036ae:	e7bb      	b.n	8003628 <_dtoa_r+0x1b0>
 80036b0:	2301      	movs	r3, #1
 80036b2:	930a      	str	r3, [sp, #40]	; 0x28
 80036b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	dd59      	ble.n	800376e <_dtoa_r+0x2f6>
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	4699      	mov	r9, r3
 80036be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80036c0:	2200      	movs	r2, #0
 80036c2:	6072      	str	r2, [r6, #4]
 80036c4:	2204      	movs	r2, #4
 80036c6:	f102 0014 	add.w	r0, r2, #20
 80036ca:	4298      	cmp	r0, r3
 80036cc:	6871      	ldr	r1, [r6, #4]
 80036ce:	d953      	bls.n	8003778 <_dtoa_r+0x300>
 80036d0:	4620      	mov	r0, r4
 80036d2:	f000 fcaa 	bl	800402a <_Balloc>
 80036d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d8:	6030      	str	r0, [r6, #0]
 80036da:	f1b9 0f0e 	cmp.w	r9, #14
 80036de:	f8d3 b000 	ldr.w	fp, [r3]
 80036e2:	f200 80e6 	bhi.w	80038b2 <_dtoa_r+0x43a>
 80036e6:	2d00      	cmp	r5, #0
 80036e8:	f000 80e3 	beq.w	80038b2 <_dtoa_r+0x43a>
 80036ec:	ed9d 7b00 	vldr	d7, [sp]
 80036f0:	f1ba 0f00 	cmp.w	sl, #0
 80036f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80036f8:	dd74      	ble.n	80037e4 <_dtoa_r+0x36c>
 80036fa:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <_dtoa_r+0x32c>)
 80036fc:	f00a 030f 	and.w	r3, sl, #15
 8003700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003704:	ed93 7b00 	vldr	d7, [r3]
 8003708:	ea4f 162a 	mov.w	r6, sl, asr #4
 800370c:	06f0      	lsls	r0, r6, #27
 800370e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003712:	d565      	bpl.n	80037e0 <_dtoa_r+0x368>
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <_dtoa_r+0x330>)
 8003716:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800371a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800371e:	f7fd f89d 	bl	800085c <__aeabi_ddiv>
 8003722:	e9cd 0100 	strd	r0, r1, [sp]
 8003726:	f006 060f 	and.w	r6, r6, #15
 800372a:	2503      	movs	r5, #3
 800372c:	4f1e      	ldr	r7, [pc, #120]	; (80037a8 <_dtoa_r+0x330>)
 800372e:	e04c      	b.n	80037ca <_dtoa_r+0x352>
 8003730:	2301      	movs	r3, #1
 8003732:	930a      	str	r3, [sp, #40]	; 0x28
 8003734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003736:	4453      	add	r3, sl
 8003738:	f103 0901 	add.w	r9, r3, #1
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	464b      	mov	r3, r9
 8003740:	2b01      	cmp	r3, #1
 8003742:	bfb8      	it	lt
 8003744:	2301      	movlt	r3, #1
 8003746:	e7ba      	b.n	80036be <_dtoa_r+0x246>
 8003748:	2300      	movs	r3, #0
 800374a:	e7b2      	b.n	80036b2 <_dtoa_r+0x23a>
 800374c:	2300      	movs	r3, #0
 800374e:	e7f0      	b.n	8003732 <_dtoa_r+0x2ba>
 8003750:	2501      	movs	r5, #1
 8003752:	2300      	movs	r3, #0
 8003754:	9306      	str	r3, [sp, #24]
 8003756:	950a      	str	r5, [sp, #40]	; 0x28
 8003758:	f04f 33ff 	mov.w	r3, #4294967295
 800375c:	9302      	str	r3, [sp, #8]
 800375e:	4699      	mov	r9, r3
 8003760:	2200      	movs	r2, #0
 8003762:	2312      	movs	r3, #18
 8003764:	920b      	str	r2, [sp, #44]	; 0x2c
 8003766:	e7aa      	b.n	80036be <_dtoa_r+0x246>
 8003768:	2301      	movs	r3, #1
 800376a:	930a      	str	r3, [sp, #40]	; 0x28
 800376c:	e7f4      	b.n	8003758 <_dtoa_r+0x2e0>
 800376e:	2301      	movs	r3, #1
 8003770:	9302      	str	r3, [sp, #8]
 8003772:	4699      	mov	r9, r3
 8003774:	461a      	mov	r2, r3
 8003776:	e7f5      	b.n	8003764 <_dtoa_r+0x2ec>
 8003778:	3101      	adds	r1, #1
 800377a:	6071      	str	r1, [r6, #4]
 800377c:	0052      	lsls	r2, r2, #1
 800377e:	e7a2      	b.n	80036c6 <_dtoa_r+0x24e>
 8003780:	636f4361 	.word	0x636f4361
 8003784:	3fd287a7 	.word	0x3fd287a7
 8003788:	8b60c8b3 	.word	0x8b60c8b3
 800378c:	3fc68a28 	.word	0x3fc68a28
 8003790:	509f79fb 	.word	0x509f79fb
 8003794:	3fd34413 	.word	0x3fd34413
 8003798:	7ff00000 	.word	0x7ff00000
 800379c:	08004b35 	.word	0x08004b35
 80037a0:	3ff80000 	.word	0x3ff80000
 80037a4:	08004b90 	.word	0x08004b90
 80037a8:	08004b68 	.word	0x08004b68
 80037ac:	08004b61 	.word	0x08004b61
 80037b0:	07f1      	lsls	r1, r6, #31
 80037b2:	d508      	bpl.n	80037c6 <_dtoa_r+0x34e>
 80037b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80037b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037bc:	f7fc ff24 	bl	8000608 <__aeabi_dmul>
 80037c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80037c4:	3501      	adds	r5, #1
 80037c6:	1076      	asrs	r6, r6, #1
 80037c8:	3708      	adds	r7, #8
 80037ca:	2e00      	cmp	r6, #0
 80037cc:	d1f0      	bne.n	80037b0 <_dtoa_r+0x338>
 80037ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037d6:	f7fd f841 	bl	800085c <__aeabi_ddiv>
 80037da:	e9cd 0100 	strd	r0, r1, [sp]
 80037de:	e01a      	b.n	8003816 <_dtoa_r+0x39e>
 80037e0:	2502      	movs	r5, #2
 80037e2:	e7a3      	b.n	800372c <_dtoa_r+0x2b4>
 80037e4:	f000 80a0 	beq.w	8003928 <_dtoa_r+0x4b0>
 80037e8:	f1ca 0600 	rsb	r6, sl, #0
 80037ec:	4b9f      	ldr	r3, [pc, #636]	; (8003a6c <_dtoa_r+0x5f4>)
 80037ee:	4fa0      	ldr	r7, [pc, #640]	; (8003a70 <_dtoa_r+0x5f8>)
 80037f0:	f006 020f 	and.w	r2, r6, #15
 80037f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003800:	f7fc ff02 	bl	8000608 <__aeabi_dmul>
 8003804:	e9cd 0100 	strd	r0, r1, [sp]
 8003808:	1136      	asrs	r6, r6, #4
 800380a:	2300      	movs	r3, #0
 800380c:	2502      	movs	r5, #2
 800380e:	2e00      	cmp	r6, #0
 8003810:	d17f      	bne.n	8003912 <_dtoa_r+0x49a>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e1      	bne.n	80037da <_dtoa_r+0x362>
 8003816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8087 	beq.w	800392c <_dtoa_r+0x4b4>
 800381e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003822:	2200      	movs	r2, #0
 8003824:	4b93      	ldr	r3, [pc, #588]	; (8003a74 <_dtoa_r+0x5fc>)
 8003826:	4630      	mov	r0, r6
 8003828:	4639      	mov	r1, r7
 800382a:	f7fd f95f 	bl	8000aec <__aeabi_dcmplt>
 800382e:	2800      	cmp	r0, #0
 8003830:	d07c      	beq.n	800392c <_dtoa_r+0x4b4>
 8003832:	f1b9 0f00 	cmp.w	r9, #0
 8003836:	d079      	beq.n	800392c <_dtoa_r+0x4b4>
 8003838:	9b02      	ldr	r3, [sp, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	dd35      	ble.n	80038aa <_dtoa_r+0x432>
 800383e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003842:	9308      	str	r3, [sp, #32]
 8003844:	4639      	mov	r1, r7
 8003846:	2200      	movs	r2, #0
 8003848:	4b8b      	ldr	r3, [pc, #556]	; (8003a78 <_dtoa_r+0x600>)
 800384a:	4630      	mov	r0, r6
 800384c:	f7fc fedc 	bl	8000608 <__aeabi_dmul>
 8003850:	e9cd 0100 	strd	r0, r1, [sp]
 8003854:	9f02      	ldr	r7, [sp, #8]
 8003856:	3501      	adds	r5, #1
 8003858:	4628      	mov	r0, r5
 800385a:	f7fc fe6b 	bl	8000534 <__aeabi_i2d>
 800385e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003862:	f7fc fed1 	bl	8000608 <__aeabi_dmul>
 8003866:	2200      	movs	r2, #0
 8003868:	4b84      	ldr	r3, [pc, #528]	; (8003a7c <_dtoa_r+0x604>)
 800386a:	f7fc fd17 	bl	800029c <__adddf3>
 800386e:	4605      	mov	r5, r0
 8003870:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003874:	2f00      	cmp	r7, #0
 8003876:	d15d      	bne.n	8003934 <_dtoa_r+0x4bc>
 8003878:	2200      	movs	r2, #0
 800387a:	4b81      	ldr	r3, [pc, #516]	; (8003a80 <_dtoa_r+0x608>)
 800387c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003880:	f7fc fd0a 	bl	8000298 <__aeabi_dsub>
 8003884:	462a      	mov	r2, r5
 8003886:	4633      	mov	r3, r6
 8003888:	e9cd 0100 	strd	r0, r1, [sp]
 800388c:	f7fd f94c 	bl	8000b28 <__aeabi_dcmpgt>
 8003890:	2800      	cmp	r0, #0
 8003892:	f040 8288 	bne.w	8003da6 <_dtoa_r+0x92e>
 8003896:	462a      	mov	r2, r5
 8003898:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800389c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038a0:	f7fd f924 	bl	8000aec <__aeabi_dcmplt>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	f040 827c 	bne.w	8003da2 <_dtoa_r+0x92a>
 80038aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80038ae:	e9cd 2300 	strd	r2, r3, [sp]
 80038b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f2c0 8150 	blt.w	8003b5a <_dtoa_r+0x6e2>
 80038ba:	f1ba 0f0e 	cmp.w	sl, #14
 80038be:	f300 814c 	bgt.w	8003b5a <_dtoa_r+0x6e2>
 80038c2:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <_dtoa_r+0x5f4>)
 80038c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80038c8:	ed93 7b00 	vldr	d7, [r3]
 80038cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80038d4:	f280 80d8 	bge.w	8003a88 <_dtoa_r+0x610>
 80038d8:	f1b9 0f00 	cmp.w	r9, #0
 80038dc:	f300 80d4 	bgt.w	8003a88 <_dtoa_r+0x610>
 80038e0:	f040 825e 	bne.w	8003da0 <_dtoa_r+0x928>
 80038e4:	2200      	movs	r2, #0
 80038e6:	4b66      	ldr	r3, [pc, #408]	; (8003a80 <_dtoa_r+0x608>)
 80038e8:	ec51 0b17 	vmov	r0, r1, d7
 80038ec:	f7fc fe8c 	bl	8000608 <__aeabi_dmul>
 80038f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038f4:	f7fd f90e 	bl	8000b14 <__aeabi_dcmpge>
 80038f8:	464f      	mov	r7, r9
 80038fa:	464e      	mov	r6, r9
 80038fc:	2800      	cmp	r0, #0
 80038fe:	f040 8234 	bne.w	8003d6a <_dtoa_r+0x8f2>
 8003902:	2331      	movs	r3, #49	; 0x31
 8003904:	f10b 0501 	add.w	r5, fp, #1
 8003908:	f88b 3000 	strb.w	r3, [fp]
 800390c:	f10a 0a01 	add.w	sl, sl, #1
 8003910:	e22f      	b.n	8003d72 <_dtoa_r+0x8fa>
 8003912:	07f2      	lsls	r2, r6, #31
 8003914:	d505      	bpl.n	8003922 <_dtoa_r+0x4aa>
 8003916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800391a:	f7fc fe75 	bl	8000608 <__aeabi_dmul>
 800391e:	3501      	adds	r5, #1
 8003920:	2301      	movs	r3, #1
 8003922:	1076      	asrs	r6, r6, #1
 8003924:	3708      	adds	r7, #8
 8003926:	e772      	b.n	800380e <_dtoa_r+0x396>
 8003928:	2502      	movs	r5, #2
 800392a:	e774      	b.n	8003816 <_dtoa_r+0x39e>
 800392c:	f8cd a020 	str.w	sl, [sp, #32]
 8003930:	464f      	mov	r7, r9
 8003932:	e791      	b.n	8003858 <_dtoa_r+0x3e0>
 8003934:	4b4d      	ldr	r3, [pc, #308]	; (8003a6c <_dtoa_r+0x5f4>)
 8003936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800393a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800393e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d047      	beq.n	80039d4 <_dtoa_r+0x55c>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	2000      	movs	r0, #0
 800394a:	494e      	ldr	r1, [pc, #312]	; (8003a84 <_dtoa_r+0x60c>)
 800394c:	f7fc ff86 	bl	800085c <__aeabi_ddiv>
 8003950:	462a      	mov	r2, r5
 8003952:	4633      	mov	r3, r6
 8003954:	f7fc fca0 	bl	8000298 <__aeabi_dsub>
 8003958:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800395c:	465d      	mov	r5, fp
 800395e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003962:	f7fd f901 	bl	8000b68 <__aeabi_d2iz>
 8003966:	4606      	mov	r6, r0
 8003968:	f7fc fde4 	bl	8000534 <__aeabi_i2d>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003974:	f7fc fc90 	bl	8000298 <__aeabi_dsub>
 8003978:	3630      	adds	r6, #48	; 0x30
 800397a:	f805 6b01 	strb.w	r6, [r5], #1
 800397e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003982:	e9cd 0100 	strd	r0, r1, [sp]
 8003986:	f7fd f8b1 	bl	8000aec <__aeabi_dcmplt>
 800398a:	2800      	cmp	r0, #0
 800398c:	d163      	bne.n	8003a56 <_dtoa_r+0x5de>
 800398e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003992:	2000      	movs	r0, #0
 8003994:	4937      	ldr	r1, [pc, #220]	; (8003a74 <_dtoa_r+0x5fc>)
 8003996:	f7fc fc7f 	bl	8000298 <__aeabi_dsub>
 800399a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800399e:	f7fd f8a5 	bl	8000aec <__aeabi_dcmplt>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	f040 80b7 	bne.w	8003b16 <_dtoa_r+0x69e>
 80039a8:	eba5 030b 	sub.w	r3, r5, fp
 80039ac:	429f      	cmp	r7, r3
 80039ae:	f77f af7c 	ble.w	80038aa <_dtoa_r+0x432>
 80039b2:	2200      	movs	r2, #0
 80039b4:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <_dtoa_r+0x600>)
 80039b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039ba:	f7fc fe25 	bl	8000608 <__aeabi_dmul>
 80039be:	2200      	movs	r2, #0
 80039c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80039c4:	4b2c      	ldr	r3, [pc, #176]	; (8003a78 <_dtoa_r+0x600>)
 80039c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039ca:	f7fc fe1d 	bl	8000608 <__aeabi_dmul>
 80039ce:	e9cd 0100 	strd	r0, r1, [sp]
 80039d2:	e7c4      	b.n	800395e <_dtoa_r+0x4e6>
 80039d4:	462a      	mov	r2, r5
 80039d6:	4633      	mov	r3, r6
 80039d8:	f7fc fe16 	bl	8000608 <__aeabi_dmul>
 80039dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80039e0:	eb0b 0507 	add.w	r5, fp, r7
 80039e4:	465e      	mov	r6, fp
 80039e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039ea:	f7fd f8bd 	bl	8000b68 <__aeabi_d2iz>
 80039ee:	4607      	mov	r7, r0
 80039f0:	f7fc fda0 	bl	8000534 <__aeabi_i2d>
 80039f4:	3730      	adds	r7, #48	; 0x30
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039fe:	f7fc fc4b 	bl	8000298 <__aeabi_dsub>
 8003a02:	f806 7b01 	strb.w	r7, [r6], #1
 8003a06:	42ae      	cmp	r6, r5
 8003a08:	e9cd 0100 	strd	r0, r1, [sp]
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	d126      	bne.n	8003a60 <_dtoa_r+0x5e8>
 8003a12:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <_dtoa_r+0x60c>)
 8003a14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a18:	f7fc fc40 	bl	800029c <__adddf3>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a24:	f7fd f880 	bl	8000b28 <__aeabi_dcmpgt>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d174      	bne.n	8003b16 <_dtoa_r+0x69e>
 8003a2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003a30:	2000      	movs	r0, #0
 8003a32:	4914      	ldr	r1, [pc, #80]	; (8003a84 <_dtoa_r+0x60c>)
 8003a34:	f7fc fc30 	bl	8000298 <__aeabi_dsub>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a40:	f7fd f854 	bl	8000aec <__aeabi_dcmplt>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f43f af30 	beq.w	80038aa <_dtoa_r+0x432>
 8003a4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a4e:	2b30      	cmp	r3, #48	; 0x30
 8003a50:	f105 32ff 	add.w	r2, r5, #4294967295
 8003a54:	d002      	beq.n	8003a5c <_dtoa_r+0x5e4>
 8003a56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003a5a:	e04a      	b.n	8003af2 <_dtoa_r+0x67a>
 8003a5c:	4615      	mov	r5, r2
 8003a5e:	e7f4      	b.n	8003a4a <_dtoa_r+0x5d2>
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <_dtoa_r+0x600>)
 8003a62:	f7fc fdd1 	bl	8000608 <__aeabi_dmul>
 8003a66:	e9cd 0100 	strd	r0, r1, [sp]
 8003a6a:	e7bc      	b.n	80039e6 <_dtoa_r+0x56e>
 8003a6c:	08004b90 	.word	0x08004b90
 8003a70:	08004b68 	.word	0x08004b68
 8003a74:	3ff00000 	.word	0x3ff00000
 8003a78:	40240000 	.word	0x40240000
 8003a7c:	401c0000 	.word	0x401c0000
 8003a80:	40140000 	.word	0x40140000
 8003a84:	3fe00000 	.word	0x3fe00000
 8003a88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a8c:	465d      	mov	r5, fp
 8003a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a92:	4630      	mov	r0, r6
 8003a94:	4639      	mov	r1, r7
 8003a96:	f7fc fee1 	bl	800085c <__aeabi_ddiv>
 8003a9a:	f7fd f865 	bl	8000b68 <__aeabi_d2iz>
 8003a9e:	4680      	mov	r8, r0
 8003aa0:	f7fc fd48 	bl	8000534 <__aeabi_i2d>
 8003aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aa8:	f7fc fdae 	bl	8000608 <__aeabi_dmul>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003ab8:	f7fc fbee 	bl	8000298 <__aeabi_dsub>
 8003abc:	f805 6b01 	strb.w	r6, [r5], #1
 8003ac0:	eba5 060b 	sub.w	r6, r5, fp
 8003ac4:	45b1      	cmp	r9, r6
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	d139      	bne.n	8003b40 <_dtoa_r+0x6c8>
 8003acc:	f7fc fbe6 	bl	800029c <__adddf3>
 8003ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	460f      	mov	r7, r1
 8003ad8:	f7fd f826 	bl	8000b28 <__aeabi_dcmpgt>
 8003adc:	b9c8      	cbnz	r0, 8003b12 <_dtoa_r+0x69a>
 8003ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	4639      	mov	r1, r7
 8003ae6:	f7fc fff7 	bl	8000ad8 <__aeabi_dcmpeq>
 8003aea:	b110      	cbz	r0, 8003af2 <_dtoa_r+0x67a>
 8003aec:	f018 0f01 	tst.w	r8, #1
 8003af0:	d10f      	bne.n	8003b12 <_dtoa_r+0x69a>
 8003af2:	9904      	ldr	r1, [sp, #16]
 8003af4:	4620      	mov	r0, r4
 8003af6:	f000 facc 	bl	8004092 <_Bfree>
 8003afa:	2300      	movs	r3, #0
 8003afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003afe:	702b      	strb	r3, [r5, #0]
 8003b00:	f10a 0301 	add.w	r3, sl, #1
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8241 	beq.w	8003f90 <_dtoa_r+0xb18>
 8003b0e:	601d      	str	r5, [r3, #0]
 8003b10:	e23e      	b.n	8003f90 <_dtoa_r+0xb18>
 8003b12:	f8cd a020 	str.w	sl, [sp, #32]
 8003b16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003b1a:	2a39      	cmp	r2, #57	; 0x39
 8003b1c:	f105 33ff 	add.w	r3, r5, #4294967295
 8003b20:	d108      	bne.n	8003b34 <_dtoa_r+0x6bc>
 8003b22:	459b      	cmp	fp, r3
 8003b24:	d10a      	bne.n	8003b3c <_dtoa_r+0x6c4>
 8003b26:	9b08      	ldr	r3, [sp, #32]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	9308      	str	r3, [sp, #32]
 8003b2c:	2330      	movs	r3, #48	; 0x30
 8003b2e:	f88b 3000 	strb.w	r3, [fp]
 8003b32:	465b      	mov	r3, fp
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	3201      	adds	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e78c      	b.n	8003a56 <_dtoa_r+0x5de>
 8003b3c:	461d      	mov	r5, r3
 8003b3e:	e7ea      	b.n	8003b16 <_dtoa_r+0x69e>
 8003b40:	2200      	movs	r2, #0
 8003b42:	4b9b      	ldr	r3, [pc, #620]	; (8003db0 <_dtoa_r+0x938>)
 8003b44:	f7fc fd60 	bl	8000608 <__aeabi_dmul>
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	4606      	mov	r6, r0
 8003b4e:	460f      	mov	r7, r1
 8003b50:	f7fc ffc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d09a      	beq.n	8003a8e <_dtoa_r+0x616>
 8003b58:	e7cb      	b.n	8003af2 <_dtoa_r+0x67a>
 8003b5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	f000 808b 	beq.w	8003c78 <_dtoa_r+0x800>
 8003b62:	9a06      	ldr	r2, [sp, #24]
 8003b64:	2a01      	cmp	r2, #1
 8003b66:	dc6e      	bgt.n	8003c46 <_dtoa_r+0x7ce>
 8003b68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b6a:	2a00      	cmp	r2, #0
 8003b6c:	d067      	beq.n	8003c3e <_dtoa_r+0x7c6>
 8003b6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003b72:	9f07      	ldr	r7, [sp, #28]
 8003b74:	9d05      	ldr	r5, [sp, #20]
 8003b76:	9a05      	ldr	r2, [sp, #20]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	441a      	add	r2, r3
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	9205      	str	r2, [sp, #20]
 8003b80:	4498      	add	r8, r3
 8003b82:	f000 fb26 	bl	80041d2 <__i2b>
 8003b86:	4606      	mov	r6, r0
 8003b88:	2d00      	cmp	r5, #0
 8003b8a:	dd0c      	ble.n	8003ba6 <_dtoa_r+0x72e>
 8003b8c:	f1b8 0f00 	cmp.w	r8, #0
 8003b90:	dd09      	ble.n	8003ba6 <_dtoa_r+0x72e>
 8003b92:	4545      	cmp	r5, r8
 8003b94:	9a05      	ldr	r2, [sp, #20]
 8003b96:	462b      	mov	r3, r5
 8003b98:	bfa8      	it	ge
 8003b9a:	4643      	movge	r3, r8
 8003b9c:	1ad2      	subs	r2, r2, r3
 8003b9e:	9205      	str	r2, [sp, #20]
 8003ba0:	1aed      	subs	r5, r5, r3
 8003ba2:	eba8 0803 	sub.w	r8, r8, r3
 8003ba6:	9b07      	ldr	r3, [sp, #28]
 8003ba8:	b1eb      	cbz	r3, 8003be6 <_dtoa_r+0x76e>
 8003baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d067      	beq.n	8003c80 <_dtoa_r+0x808>
 8003bb0:	b18f      	cbz	r7, 8003bd6 <_dtoa_r+0x75e>
 8003bb2:	4631      	mov	r1, r6
 8003bb4:	463a      	mov	r2, r7
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f000 fbaa 	bl	8004310 <__pow5mult>
 8003bbc:	9a04      	ldr	r2, [sp, #16]
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f000 fb0e 	bl	80041e4 <__multiply>
 8003bc8:	9904      	ldr	r1, [sp, #16]
 8003bca:	9008      	str	r0, [sp, #32]
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f000 fa60 	bl	8004092 <_Bfree>
 8003bd2:	9b08      	ldr	r3, [sp, #32]
 8003bd4:	9304      	str	r3, [sp, #16]
 8003bd6:	9b07      	ldr	r3, [sp, #28]
 8003bd8:	1bda      	subs	r2, r3, r7
 8003bda:	d004      	beq.n	8003be6 <_dtoa_r+0x76e>
 8003bdc:	9904      	ldr	r1, [sp, #16]
 8003bde:	4620      	mov	r0, r4
 8003be0:	f000 fb96 	bl	8004310 <__pow5mult>
 8003be4:	9004      	str	r0, [sp, #16]
 8003be6:	2101      	movs	r1, #1
 8003be8:	4620      	mov	r0, r4
 8003bea:	f000 faf2 	bl	80041d2 <__i2b>
 8003bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 81d0 	beq.w	8003f98 <_dtoa_r+0xb20>
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f000 fb87 	bl	8004310 <__pow5mult>
 8003c02:	9b06      	ldr	r3, [sp, #24]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	4607      	mov	r7, r0
 8003c08:	dc40      	bgt.n	8003c8c <_dtoa_r+0x814>
 8003c0a:	9b00      	ldr	r3, [sp, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d139      	bne.n	8003c84 <_dtoa_r+0x80c>
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d136      	bne.n	8003c88 <_dtoa_r+0x810>
 8003c1a:	9b01      	ldr	r3, [sp, #4]
 8003c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c20:	0d1b      	lsrs	r3, r3, #20
 8003c22:	051b      	lsls	r3, r3, #20
 8003c24:	b12b      	cbz	r3, 8003c32 <_dtoa_r+0x7ba>
 8003c26:	9b05      	ldr	r3, [sp, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	9305      	str	r3, [sp, #20]
 8003c2c:	f108 0801 	add.w	r8, r8, #1
 8003c30:	2301      	movs	r3, #1
 8003c32:	9307      	str	r3, [sp, #28]
 8003c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d12a      	bne.n	8003c90 <_dtoa_r+0x818>
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	e030      	b.n	8003ca0 <_dtoa_r+0x828>
 8003c3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003c44:	e795      	b.n	8003b72 <_dtoa_r+0x6fa>
 8003c46:	9b07      	ldr	r3, [sp, #28]
 8003c48:	f109 37ff 	add.w	r7, r9, #4294967295
 8003c4c:	42bb      	cmp	r3, r7
 8003c4e:	bfbf      	itttt	lt
 8003c50:	9b07      	ldrlt	r3, [sp, #28]
 8003c52:	9707      	strlt	r7, [sp, #28]
 8003c54:	1afa      	sublt	r2, r7, r3
 8003c56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003c58:	bfbb      	ittet	lt
 8003c5a:	189b      	addlt	r3, r3, r2
 8003c5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003c5e:	1bdf      	subge	r7, r3, r7
 8003c60:	2700      	movlt	r7, #0
 8003c62:	f1b9 0f00 	cmp.w	r9, #0
 8003c66:	bfb5      	itete	lt
 8003c68:	9b05      	ldrlt	r3, [sp, #20]
 8003c6a:	9d05      	ldrge	r5, [sp, #20]
 8003c6c:	eba3 0509 	sublt.w	r5, r3, r9
 8003c70:	464b      	movge	r3, r9
 8003c72:	bfb8      	it	lt
 8003c74:	2300      	movlt	r3, #0
 8003c76:	e77e      	b.n	8003b76 <_dtoa_r+0x6fe>
 8003c78:	9f07      	ldr	r7, [sp, #28]
 8003c7a:	9d05      	ldr	r5, [sp, #20]
 8003c7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003c7e:	e783      	b.n	8003b88 <_dtoa_r+0x710>
 8003c80:	9a07      	ldr	r2, [sp, #28]
 8003c82:	e7ab      	b.n	8003bdc <_dtoa_r+0x764>
 8003c84:	2300      	movs	r3, #0
 8003c86:	e7d4      	b.n	8003c32 <_dtoa_r+0x7ba>
 8003c88:	9b00      	ldr	r3, [sp, #0]
 8003c8a:	e7d2      	b.n	8003c32 <_dtoa_r+0x7ba>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	9307      	str	r3, [sp, #28]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003c96:	6918      	ldr	r0, [r3, #16]
 8003c98:	f000 fa4d 	bl	8004136 <__hi0bits>
 8003c9c:	f1c0 0020 	rsb	r0, r0, #32
 8003ca0:	4440      	add	r0, r8
 8003ca2:	f010 001f 	ands.w	r0, r0, #31
 8003ca6:	d047      	beq.n	8003d38 <_dtoa_r+0x8c0>
 8003ca8:	f1c0 0320 	rsb	r3, r0, #32
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	dd3b      	ble.n	8003d28 <_dtoa_r+0x8b0>
 8003cb0:	9b05      	ldr	r3, [sp, #20]
 8003cb2:	f1c0 001c 	rsb	r0, r0, #28
 8003cb6:	4403      	add	r3, r0
 8003cb8:	9305      	str	r3, [sp, #20]
 8003cba:	4405      	add	r5, r0
 8003cbc:	4480      	add	r8, r0
 8003cbe:	9b05      	ldr	r3, [sp, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	dd05      	ble.n	8003cd0 <_dtoa_r+0x858>
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	9904      	ldr	r1, [sp, #16]
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 fb6f 	bl	80043ac <__lshift>
 8003cce:	9004      	str	r0, [sp, #16]
 8003cd0:	f1b8 0f00 	cmp.w	r8, #0
 8003cd4:	dd05      	ble.n	8003ce2 <_dtoa_r+0x86a>
 8003cd6:	4639      	mov	r1, r7
 8003cd8:	4642      	mov	r2, r8
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f000 fb66 	bl	80043ac <__lshift>
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ce4:	b353      	cbz	r3, 8003d3c <_dtoa_r+0x8c4>
 8003ce6:	4639      	mov	r1, r7
 8003ce8:	9804      	ldr	r0, [sp, #16]
 8003cea:	f000 fbb3 	bl	8004454 <__mcmp>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	da24      	bge.n	8003d3c <_dtoa_r+0x8c4>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	220a      	movs	r2, #10
 8003cf6:	9904      	ldr	r1, [sp, #16]
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f000 f9e1 	bl	80040c0 <__multadd>
 8003cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d00:	9004      	str	r0, [sp, #16]
 8003d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 814d 	beq.w	8003fa6 <_dtoa_r+0xb2e>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4631      	mov	r1, r6
 8003d10:	220a      	movs	r2, #10
 8003d12:	4620      	mov	r0, r4
 8003d14:	f000 f9d4 	bl	80040c0 <__multadd>
 8003d18:	9b02      	ldr	r3, [sp, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	dc4f      	bgt.n	8003dc0 <_dtoa_r+0x948>
 8003d20:	9b06      	ldr	r3, [sp, #24]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	dd4c      	ble.n	8003dc0 <_dtoa_r+0x948>
 8003d26:	e011      	b.n	8003d4c <_dtoa_r+0x8d4>
 8003d28:	d0c9      	beq.n	8003cbe <_dtoa_r+0x846>
 8003d2a:	9a05      	ldr	r2, [sp, #20]
 8003d2c:	331c      	adds	r3, #28
 8003d2e:	441a      	add	r2, r3
 8003d30:	9205      	str	r2, [sp, #20]
 8003d32:	441d      	add	r5, r3
 8003d34:	4498      	add	r8, r3
 8003d36:	e7c2      	b.n	8003cbe <_dtoa_r+0x846>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	e7f6      	b.n	8003d2a <_dtoa_r+0x8b2>
 8003d3c:	f1b9 0f00 	cmp.w	r9, #0
 8003d40:	dc38      	bgt.n	8003db4 <_dtoa_r+0x93c>
 8003d42:	9b06      	ldr	r3, [sp, #24]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	dd35      	ble.n	8003db4 <_dtoa_r+0x93c>
 8003d48:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d4c:	9b02      	ldr	r3, [sp, #8]
 8003d4e:	b963      	cbnz	r3, 8003d6a <_dtoa_r+0x8f2>
 8003d50:	4639      	mov	r1, r7
 8003d52:	2205      	movs	r2, #5
 8003d54:	4620      	mov	r0, r4
 8003d56:	f000 f9b3 	bl	80040c0 <__multadd>
 8003d5a:	4601      	mov	r1, r0
 8003d5c:	4607      	mov	r7, r0
 8003d5e:	9804      	ldr	r0, [sp, #16]
 8003d60:	f000 fb78 	bl	8004454 <__mcmp>
 8003d64:	2800      	cmp	r0, #0
 8003d66:	f73f adcc 	bgt.w	8003902 <_dtoa_r+0x48a>
 8003d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d6c:	465d      	mov	r5, fp
 8003d6e:	ea6f 0a03 	mvn.w	sl, r3
 8003d72:	f04f 0900 	mov.w	r9, #0
 8003d76:	4639      	mov	r1, r7
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f000 f98a 	bl	8004092 <_Bfree>
 8003d7e:	2e00      	cmp	r6, #0
 8003d80:	f43f aeb7 	beq.w	8003af2 <_dtoa_r+0x67a>
 8003d84:	f1b9 0f00 	cmp.w	r9, #0
 8003d88:	d005      	beq.n	8003d96 <_dtoa_r+0x91e>
 8003d8a:	45b1      	cmp	r9, r6
 8003d8c:	d003      	beq.n	8003d96 <_dtoa_r+0x91e>
 8003d8e:	4649      	mov	r1, r9
 8003d90:	4620      	mov	r0, r4
 8003d92:	f000 f97e 	bl	8004092 <_Bfree>
 8003d96:	4631      	mov	r1, r6
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 f97a 	bl	8004092 <_Bfree>
 8003d9e:	e6a8      	b.n	8003af2 <_dtoa_r+0x67a>
 8003da0:	2700      	movs	r7, #0
 8003da2:	463e      	mov	r6, r7
 8003da4:	e7e1      	b.n	8003d6a <_dtoa_r+0x8f2>
 8003da6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003daa:	463e      	mov	r6, r7
 8003dac:	e5a9      	b.n	8003902 <_dtoa_r+0x48a>
 8003dae:	bf00      	nop
 8003db0:	40240000 	.word	0x40240000
 8003db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003db6:	f8cd 9008 	str.w	r9, [sp, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80fa 	beq.w	8003fb4 <_dtoa_r+0xb3c>
 8003dc0:	2d00      	cmp	r5, #0
 8003dc2:	dd05      	ble.n	8003dd0 <_dtoa_r+0x958>
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	462a      	mov	r2, r5
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f000 faef 	bl	80043ac <__lshift>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	9b07      	ldr	r3, [sp, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d04c      	beq.n	8003e70 <_dtoa_r+0x9f8>
 8003dd6:	6871      	ldr	r1, [r6, #4]
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f000 f926 	bl	800402a <_Balloc>
 8003dde:	6932      	ldr	r2, [r6, #16]
 8003de0:	3202      	adds	r2, #2
 8003de2:	4605      	mov	r5, r0
 8003de4:	0092      	lsls	r2, r2, #2
 8003de6:	f106 010c 	add.w	r1, r6, #12
 8003dea:	300c      	adds	r0, #12
 8003dec:	f000 f912 	bl	8004014 <memcpy>
 8003df0:	2201      	movs	r2, #1
 8003df2:	4629      	mov	r1, r5
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 fad9 	bl	80043ac <__lshift>
 8003dfa:	9b00      	ldr	r3, [sp, #0]
 8003dfc:	f8cd b014 	str.w	fp, [sp, #20]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	46b1      	mov	r9, r6
 8003e06:	9307      	str	r3, [sp, #28]
 8003e08:	4606      	mov	r6, r0
 8003e0a:	4639      	mov	r1, r7
 8003e0c:	9804      	ldr	r0, [sp, #16]
 8003e0e:	f7ff faa5 	bl	800335c <quorem>
 8003e12:	4649      	mov	r1, r9
 8003e14:	4605      	mov	r5, r0
 8003e16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003e1a:	9804      	ldr	r0, [sp, #16]
 8003e1c:	f000 fb1a 	bl	8004454 <__mcmp>
 8003e20:	4632      	mov	r2, r6
 8003e22:	9000      	str	r0, [sp, #0]
 8003e24:	4639      	mov	r1, r7
 8003e26:	4620      	mov	r0, r4
 8003e28:	f000 fb2e 	bl	8004488 <__mdiff>
 8003e2c:	68c3      	ldr	r3, [r0, #12]
 8003e2e:	4602      	mov	r2, r0
 8003e30:	bb03      	cbnz	r3, 8003e74 <_dtoa_r+0x9fc>
 8003e32:	4601      	mov	r1, r0
 8003e34:	9008      	str	r0, [sp, #32]
 8003e36:	9804      	ldr	r0, [sp, #16]
 8003e38:	f000 fb0c 	bl	8004454 <__mcmp>
 8003e3c:	9a08      	ldr	r2, [sp, #32]
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4611      	mov	r1, r2
 8003e42:	4620      	mov	r0, r4
 8003e44:	9308      	str	r3, [sp, #32]
 8003e46:	f000 f924 	bl	8004092 <_Bfree>
 8003e4a:	9b08      	ldr	r3, [sp, #32]
 8003e4c:	b9a3      	cbnz	r3, 8003e78 <_dtoa_r+0xa00>
 8003e4e:	9a06      	ldr	r2, [sp, #24]
 8003e50:	b992      	cbnz	r2, 8003e78 <_dtoa_r+0xa00>
 8003e52:	9a07      	ldr	r2, [sp, #28]
 8003e54:	b982      	cbnz	r2, 8003e78 <_dtoa_r+0xa00>
 8003e56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003e5a:	d029      	beq.n	8003eb0 <_dtoa_r+0xa38>
 8003e5c:	9b00      	ldr	r3, [sp, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	dd01      	ble.n	8003e66 <_dtoa_r+0x9ee>
 8003e62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003e66:	9b05      	ldr	r3, [sp, #20]
 8003e68:	1c5d      	adds	r5, r3, #1
 8003e6a:	f883 8000 	strb.w	r8, [r3]
 8003e6e:	e782      	b.n	8003d76 <_dtoa_r+0x8fe>
 8003e70:	4630      	mov	r0, r6
 8003e72:	e7c2      	b.n	8003dfa <_dtoa_r+0x982>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e7e3      	b.n	8003e40 <_dtoa_r+0x9c8>
 8003e78:	9a00      	ldr	r2, [sp, #0]
 8003e7a:	2a00      	cmp	r2, #0
 8003e7c:	db04      	blt.n	8003e88 <_dtoa_r+0xa10>
 8003e7e:	d125      	bne.n	8003ecc <_dtoa_r+0xa54>
 8003e80:	9a06      	ldr	r2, [sp, #24]
 8003e82:	bb1a      	cbnz	r2, 8003ecc <_dtoa_r+0xa54>
 8003e84:	9a07      	ldr	r2, [sp, #28]
 8003e86:	bb0a      	cbnz	r2, 8003ecc <_dtoa_r+0xa54>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	ddec      	ble.n	8003e66 <_dtoa_r+0x9ee>
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	9904      	ldr	r1, [sp, #16]
 8003e90:	4620      	mov	r0, r4
 8003e92:	f000 fa8b 	bl	80043ac <__lshift>
 8003e96:	4639      	mov	r1, r7
 8003e98:	9004      	str	r0, [sp, #16]
 8003e9a:	f000 fadb 	bl	8004454 <__mcmp>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	dc03      	bgt.n	8003eaa <_dtoa_r+0xa32>
 8003ea2:	d1e0      	bne.n	8003e66 <_dtoa_r+0x9ee>
 8003ea4:	f018 0f01 	tst.w	r8, #1
 8003ea8:	d0dd      	beq.n	8003e66 <_dtoa_r+0x9ee>
 8003eaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003eae:	d1d8      	bne.n	8003e62 <_dtoa_r+0x9ea>
 8003eb0:	9b05      	ldr	r3, [sp, #20]
 8003eb2:	9a05      	ldr	r2, [sp, #20]
 8003eb4:	1c5d      	adds	r5, r3, #1
 8003eb6:	2339      	movs	r3, #57	; 0x39
 8003eb8:	7013      	strb	r3, [r2, #0]
 8003eba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ebe:	2b39      	cmp	r3, #57	; 0x39
 8003ec0:	f105 32ff 	add.w	r2, r5, #4294967295
 8003ec4:	d04f      	beq.n	8003f66 <_dtoa_r+0xaee>
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	7013      	strb	r3, [r2, #0]
 8003eca:	e754      	b.n	8003d76 <_dtoa_r+0x8fe>
 8003ecc:	9a05      	ldr	r2, [sp, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f102 0501 	add.w	r5, r2, #1
 8003ed4:	dd06      	ble.n	8003ee4 <_dtoa_r+0xa6c>
 8003ed6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003eda:	d0e9      	beq.n	8003eb0 <_dtoa_r+0xa38>
 8003edc:	f108 0801 	add.w	r8, r8, #1
 8003ee0:	9b05      	ldr	r3, [sp, #20]
 8003ee2:	e7c2      	b.n	8003e6a <_dtoa_r+0x9f2>
 8003ee4:	9a02      	ldr	r2, [sp, #8]
 8003ee6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003eea:	eba5 030b 	sub.w	r3, r5, fp
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d021      	beq.n	8003f36 <_dtoa_r+0xabe>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	220a      	movs	r2, #10
 8003ef6:	9904      	ldr	r1, [sp, #16]
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f000 f8e1 	bl	80040c0 <__multadd>
 8003efe:	45b1      	cmp	r9, r6
 8003f00:	9004      	str	r0, [sp, #16]
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f04f 020a 	mov.w	r2, #10
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	d105      	bne.n	8003f1c <_dtoa_r+0xaa4>
 8003f10:	f000 f8d6 	bl	80040c0 <__multadd>
 8003f14:	4681      	mov	r9, r0
 8003f16:	4606      	mov	r6, r0
 8003f18:	9505      	str	r5, [sp, #20]
 8003f1a:	e776      	b.n	8003e0a <_dtoa_r+0x992>
 8003f1c:	f000 f8d0 	bl	80040c0 <__multadd>
 8003f20:	4631      	mov	r1, r6
 8003f22:	4681      	mov	r9, r0
 8003f24:	2300      	movs	r3, #0
 8003f26:	220a      	movs	r2, #10
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f000 f8c9 	bl	80040c0 <__multadd>
 8003f2e:	4606      	mov	r6, r0
 8003f30:	e7f2      	b.n	8003f18 <_dtoa_r+0xaa0>
 8003f32:	f04f 0900 	mov.w	r9, #0
 8003f36:	2201      	movs	r2, #1
 8003f38:	9904      	ldr	r1, [sp, #16]
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f000 fa36 	bl	80043ac <__lshift>
 8003f40:	4639      	mov	r1, r7
 8003f42:	9004      	str	r0, [sp, #16]
 8003f44:	f000 fa86 	bl	8004454 <__mcmp>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	dcb6      	bgt.n	8003eba <_dtoa_r+0xa42>
 8003f4c:	d102      	bne.n	8003f54 <_dtoa_r+0xadc>
 8003f4e:	f018 0f01 	tst.w	r8, #1
 8003f52:	d1b2      	bne.n	8003eba <_dtoa_r+0xa42>
 8003f54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f58:	2b30      	cmp	r3, #48	; 0x30
 8003f5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8003f5e:	f47f af0a 	bne.w	8003d76 <_dtoa_r+0x8fe>
 8003f62:	4615      	mov	r5, r2
 8003f64:	e7f6      	b.n	8003f54 <_dtoa_r+0xadc>
 8003f66:	4593      	cmp	fp, r2
 8003f68:	d105      	bne.n	8003f76 <_dtoa_r+0xafe>
 8003f6a:	2331      	movs	r3, #49	; 0x31
 8003f6c:	f10a 0a01 	add.w	sl, sl, #1
 8003f70:	f88b 3000 	strb.w	r3, [fp]
 8003f74:	e6ff      	b.n	8003d76 <_dtoa_r+0x8fe>
 8003f76:	4615      	mov	r5, r2
 8003f78:	e79f      	b.n	8003eba <_dtoa_r+0xa42>
 8003f7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8003fe0 <_dtoa_r+0xb68>
 8003f7e:	e007      	b.n	8003f90 <_dtoa_r+0xb18>
 8003f80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8003fe4 <_dtoa_r+0xb6c>
 8003f86:	b11b      	cbz	r3, 8003f90 <_dtoa_r+0xb18>
 8003f88:	f10b 0308 	add.w	r3, fp, #8
 8003f8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4658      	mov	r0, fp
 8003f92:	b017      	add	sp, #92	; 0x5c
 8003f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f98:	9b06      	ldr	r3, [sp, #24]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	f77f ae35 	ble.w	8003c0a <_dtoa_r+0x792>
 8003fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fa2:	9307      	str	r3, [sp, #28]
 8003fa4:	e649      	b.n	8003c3a <_dtoa_r+0x7c2>
 8003fa6:	9b02      	ldr	r3, [sp, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	dc03      	bgt.n	8003fb4 <_dtoa_r+0xb3c>
 8003fac:	9b06      	ldr	r3, [sp, #24]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	f73f aecc 	bgt.w	8003d4c <_dtoa_r+0x8d4>
 8003fb4:	465d      	mov	r5, fp
 8003fb6:	4639      	mov	r1, r7
 8003fb8:	9804      	ldr	r0, [sp, #16]
 8003fba:	f7ff f9cf 	bl	800335c <quorem>
 8003fbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003fc2:	f805 8b01 	strb.w	r8, [r5], #1
 8003fc6:	9a02      	ldr	r2, [sp, #8]
 8003fc8:	eba5 030b 	sub.w	r3, r5, fp
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	ddb0      	ble.n	8003f32 <_dtoa_r+0xaba>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	220a      	movs	r2, #10
 8003fd4:	9904      	ldr	r1, [sp, #16]
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f000 f872 	bl	80040c0 <__multadd>
 8003fdc:	9004      	str	r0, [sp, #16]
 8003fde:	e7ea      	b.n	8003fb6 <_dtoa_r+0xb3e>
 8003fe0:	08004b34 	.word	0x08004b34
 8003fe4:	08004b58 	.word	0x08004b58

08003fe8 <_localeconv_r>:
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <_localeconv_r+0x14>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a18      	ldr	r0, [r3, #32]
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <_localeconv_r+0x18>)
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	bf08      	it	eq
 8003ff4:	4618      	moveq	r0, r3
 8003ff6:	30f0      	adds	r0, #240	; 0xf0
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	2000000c 	.word	0x2000000c
 8004000:	20000070 	.word	0x20000070

08004004 <malloc>:
 8004004:	4b02      	ldr	r3, [pc, #8]	; (8004010 <malloc+0xc>)
 8004006:	4601      	mov	r1, r0
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	f000 bb45 	b.w	8004698 <_malloc_r>
 800400e:	bf00      	nop
 8004010:	2000000c 	.word	0x2000000c

08004014 <memcpy>:
 8004014:	b510      	push	{r4, lr}
 8004016:	1e43      	subs	r3, r0, #1
 8004018:	440a      	add	r2, r1
 800401a:	4291      	cmp	r1, r2
 800401c:	d100      	bne.n	8004020 <memcpy+0xc>
 800401e:	bd10      	pop	{r4, pc}
 8004020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004028:	e7f7      	b.n	800401a <memcpy+0x6>

0800402a <_Balloc>:
 800402a:	b570      	push	{r4, r5, r6, lr}
 800402c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800402e:	4604      	mov	r4, r0
 8004030:	460e      	mov	r6, r1
 8004032:	b93d      	cbnz	r5, 8004044 <_Balloc+0x1a>
 8004034:	2010      	movs	r0, #16
 8004036:	f7ff ffe5 	bl	8004004 <malloc>
 800403a:	6260      	str	r0, [r4, #36]	; 0x24
 800403c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004040:	6005      	str	r5, [r0, #0]
 8004042:	60c5      	str	r5, [r0, #12]
 8004044:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004046:	68eb      	ldr	r3, [r5, #12]
 8004048:	b183      	cbz	r3, 800406c <_Balloc+0x42>
 800404a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004052:	b9b8      	cbnz	r0, 8004084 <_Balloc+0x5a>
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f506 	lsl.w	r5, r1, r6
 800405a:	1d6a      	adds	r2, r5, #5
 800405c:	0092      	lsls	r2, r2, #2
 800405e:	4620      	mov	r0, r4
 8004060:	f000 fabe 	bl	80045e0 <_calloc_r>
 8004064:	b160      	cbz	r0, 8004080 <_Balloc+0x56>
 8004066:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800406a:	e00e      	b.n	800408a <_Balloc+0x60>
 800406c:	2221      	movs	r2, #33	; 0x21
 800406e:	2104      	movs	r1, #4
 8004070:	4620      	mov	r0, r4
 8004072:	f000 fab5 	bl	80045e0 <_calloc_r>
 8004076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004078:	60e8      	str	r0, [r5, #12]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e4      	bne.n	800404a <_Balloc+0x20>
 8004080:	2000      	movs	r0, #0
 8004082:	bd70      	pop	{r4, r5, r6, pc}
 8004084:	6802      	ldr	r2, [r0, #0]
 8004086:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800408a:	2300      	movs	r3, #0
 800408c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004090:	e7f7      	b.n	8004082 <_Balloc+0x58>

08004092 <_Bfree>:
 8004092:	b570      	push	{r4, r5, r6, lr}
 8004094:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004096:	4606      	mov	r6, r0
 8004098:	460d      	mov	r5, r1
 800409a:	b93c      	cbnz	r4, 80040ac <_Bfree+0x1a>
 800409c:	2010      	movs	r0, #16
 800409e:	f7ff ffb1 	bl	8004004 <malloc>
 80040a2:	6270      	str	r0, [r6, #36]	; 0x24
 80040a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80040a8:	6004      	str	r4, [r0, #0]
 80040aa:	60c4      	str	r4, [r0, #12]
 80040ac:	b13d      	cbz	r5, 80040be <_Bfree+0x2c>
 80040ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80040b0:	686a      	ldr	r2, [r5, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040b8:	6029      	str	r1, [r5, #0]
 80040ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80040be:	bd70      	pop	{r4, r5, r6, pc}

080040c0 <__multadd>:
 80040c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c4:	690d      	ldr	r5, [r1, #16]
 80040c6:	461f      	mov	r7, r3
 80040c8:	4606      	mov	r6, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	f101 0c14 	add.w	ip, r1, #20
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8dc 0000 	ldr.w	r0, [ip]
 80040d6:	b281      	uxth	r1, r0
 80040d8:	fb02 7101 	mla	r1, r2, r1, r7
 80040dc:	0c0f      	lsrs	r7, r1, #16
 80040de:	0c00      	lsrs	r0, r0, #16
 80040e0:	fb02 7000 	mla	r0, r2, r0, r7
 80040e4:	b289      	uxth	r1, r1
 80040e6:	3301      	adds	r3, #1
 80040e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80040ec:	429d      	cmp	r5, r3
 80040ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80040f2:	f84c 1b04 	str.w	r1, [ip], #4
 80040f6:	dcec      	bgt.n	80040d2 <__multadd+0x12>
 80040f8:	b1d7      	cbz	r7, 8004130 <__multadd+0x70>
 80040fa:	68a3      	ldr	r3, [r4, #8]
 80040fc:	42ab      	cmp	r3, r5
 80040fe:	dc12      	bgt.n	8004126 <__multadd+0x66>
 8004100:	6861      	ldr	r1, [r4, #4]
 8004102:	4630      	mov	r0, r6
 8004104:	3101      	adds	r1, #1
 8004106:	f7ff ff90 	bl	800402a <_Balloc>
 800410a:	6922      	ldr	r2, [r4, #16]
 800410c:	3202      	adds	r2, #2
 800410e:	f104 010c 	add.w	r1, r4, #12
 8004112:	4680      	mov	r8, r0
 8004114:	0092      	lsls	r2, r2, #2
 8004116:	300c      	adds	r0, #12
 8004118:	f7ff ff7c 	bl	8004014 <memcpy>
 800411c:	4621      	mov	r1, r4
 800411e:	4630      	mov	r0, r6
 8004120:	f7ff ffb7 	bl	8004092 <_Bfree>
 8004124:	4644      	mov	r4, r8
 8004126:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800412a:	3501      	adds	r5, #1
 800412c:	615f      	str	r7, [r3, #20]
 800412e:	6125      	str	r5, [r4, #16]
 8004130:	4620      	mov	r0, r4
 8004132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004136 <__hi0bits>:
 8004136:	0c02      	lsrs	r2, r0, #16
 8004138:	0412      	lsls	r2, r2, #16
 800413a:	4603      	mov	r3, r0
 800413c:	b9b2      	cbnz	r2, 800416c <__hi0bits+0x36>
 800413e:	0403      	lsls	r3, r0, #16
 8004140:	2010      	movs	r0, #16
 8004142:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004146:	bf04      	itt	eq
 8004148:	021b      	lsleq	r3, r3, #8
 800414a:	3008      	addeq	r0, #8
 800414c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004150:	bf04      	itt	eq
 8004152:	011b      	lsleq	r3, r3, #4
 8004154:	3004      	addeq	r0, #4
 8004156:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800415a:	bf04      	itt	eq
 800415c:	009b      	lsleq	r3, r3, #2
 800415e:	3002      	addeq	r0, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	db06      	blt.n	8004172 <__hi0bits+0x3c>
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	d503      	bpl.n	8004170 <__hi0bits+0x3a>
 8004168:	3001      	adds	r0, #1
 800416a:	4770      	bx	lr
 800416c:	2000      	movs	r0, #0
 800416e:	e7e8      	b.n	8004142 <__hi0bits+0xc>
 8004170:	2020      	movs	r0, #32
 8004172:	4770      	bx	lr

08004174 <__lo0bits>:
 8004174:	6803      	ldr	r3, [r0, #0]
 8004176:	f013 0207 	ands.w	r2, r3, #7
 800417a:	4601      	mov	r1, r0
 800417c:	d00b      	beq.n	8004196 <__lo0bits+0x22>
 800417e:	07da      	lsls	r2, r3, #31
 8004180:	d423      	bmi.n	80041ca <__lo0bits+0x56>
 8004182:	0798      	lsls	r0, r3, #30
 8004184:	bf49      	itett	mi
 8004186:	085b      	lsrmi	r3, r3, #1
 8004188:	089b      	lsrpl	r3, r3, #2
 800418a:	2001      	movmi	r0, #1
 800418c:	600b      	strmi	r3, [r1, #0]
 800418e:	bf5c      	itt	pl
 8004190:	600b      	strpl	r3, [r1, #0]
 8004192:	2002      	movpl	r0, #2
 8004194:	4770      	bx	lr
 8004196:	b298      	uxth	r0, r3
 8004198:	b9a8      	cbnz	r0, 80041c6 <__lo0bits+0x52>
 800419a:	0c1b      	lsrs	r3, r3, #16
 800419c:	2010      	movs	r0, #16
 800419e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80041a2:	bf04      	itt	eq
 80041a4:	0a1b      	lsreq	r3, r3, #8
 80041a6:	3008      	addeq	r0, #8
 80041a8:	071a      	lsls	r2, r3, #28
 80041aa:	bf04      	itt	eq
 80041ac:	091b      	lsreq	r3, r3, #4
 80041ae:	3004      	addeq	r0, #4
 80041b0:	079a      	lsls	r2, r3, #30
 80041b2:	bf04      	itt	eq
 80041b4:	089b      	lsreq	r3, r3, #2
 80041b6:	3002      	addeq	r0, #2
 80041b8:	07da      	lsls	r2, r3, #31
 80041ba:	d402      	bmi.n	80041c2 <__lo0bits+0x4e>
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	d006      	beq.n	80041ce <__lo0bits+0x5a>
 80041c0:	3001      	adds	r0, #1
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	4770      	bx	lr
 80041c6:	4610      	mov	r0, r2
 80041c8:	e7e9      	b.n	800419e <__lo0bits+0x2a>
 80041ca:	2000      	movs	r0, #0
 80041cc:	4770      	bx	lr
 80041ce:	2020      	movs	r0, #32
 80041d0:	4770      	bx	lr

080041d2 <__i2b>:
 80041d2:	b510      	push	{r4, lr}
 80041d4:	460c      	mov	r4, r1
 80041d6:	2101      	movs	r1, #1
 80041d8:	f7ff ff27 	bl	800402a <_Balloc>
 80041dc:	2201      	movs	r2, #1
 80041de:	6144      	str	r4, [r0, #20]
 80041e0:	6102      	str	r2, [r0, #16]
 80041e2:	bd10      	pop	{r4, pc}

080041e4 <__multiply>:
 80041e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	4614      	mov	r4, r2
 80041ea:	690a      	ldr	r2, [r1, #16]
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	bfb8      	it	lt
 80041f2:	460b      	movlt	r3, r1
 80041f4:	4688      	mov	r8, r1
 80041f6:	bfbc      	itt	lt
 80041f8:	46a0      	movlt	r8, r4
 80041fa:	461c      	movlt	r4, r3
 80041fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004200:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004204:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004208:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800420c:	eb07 0609 	add.w	r6, r7, r9
 8004210:	42b3      	cmp	r3, r6
 8004212:	bfb8      	it	lt
 8004214:	3101      	addlt	r1, #1
 8004216:	f7ff ff08 	bl	800402a <_Balloc>
 800421a:	f100 0514 	add.w	r5, r0, #20
 800421e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004222:	462b      	mov	r3, r5
 8004224:	2200      	movs	r2, #0
 8004226:	4573      	cmp	r3, lr
 8004228:	d316      	bcc.n	8004258 <__multiply+0x74>
 800422a:	f104 0214 	add.w	r2, r4, #20
 800422e:	f108 0114 	add.w	r1, r8, #20
 8004232:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004236:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	9b00      	ldr	r3, [sp, #0]
 800423e:	9201      	str	r2, [sp, #4]
 8004240:	4293      	cmp	r3, r2
 8004242:	d80c      	bhi.n	800425e <__multiply+0x7a>
 8004244:	2e00      	cmp	r6, #0
 8004246:	dd03      	ble.n	8004250 <__multiply+0x6c>
 8004248:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05d      	beq.n	800430c <__multiply+0x128>
 8004250:	6106      	str	r6, [r0, #16]
 8004252:	b003      	add	sp, #12
 8004254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004258:	f843 2b04 	str.w	r2, [r3], #4
 800425c:	e7e3      	b.n	8004226 <__multiply+0x42>
 800425e:	f8b2 b000 	ldrh.w	fp, [r2]
 8004262:	f1bb 0f00 	cmp.w	fp, #0
 8004266:	d023      	beq.n	80042b0 <__multiply+0xcc>
 8004268:	4689      	mov	r9, r1
 800426a:	46ac      	mov	ip, r5
 800426c:	f04f 0800 	mov.w	r8, #0
 8004270:	f859 4b04 	ldr.w	r4, [r9], #4
 8004274:	f8dc a000 	ldr.w	sl, [ip]
 8004278:	b2a3      	uxth	r3, r4
 800427a:	fa1f fa8a 	uxth.w	sl, sl
 800427e:	fb0b a303 	mla	r3, fp, r3, sl
 8004282:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004286:	f8dc 4000 	ldr.w	r4, [ip]
 800428a:	4443      	add	r3, r8
 800428c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004290:	fb0b 840a 	mla	r4, fp, sl, r8
 8004294:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004298:	46e2      	mov	sl, ip
 800429a:	b29b      	uxth	r3, r3
 800429c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80042a0:	454f      	cmp	r7, r9
 80042a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80042a6:	f84a 3b04 	str.w	r3, [sl], #4
 80042aa:	d82b      	bhi.n	8004304 <__multiply+0x120>
 80042ac:	f8cc 8004 	str.w	r8, [ip, #4]
 80042b0:	9b01      	ldr	r3, [sp, #4]
 80042b2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80042b6:	3204      	adds	r2, #4
 80042b8:	f1ba 0f00 	cmp.w	sl, #0
 80042bc:	d020      	beq.n	8004300 <__multiply+0x11c>
 80042be:	682b      	ldr	r3, [r5, #0]
 80042c0:	4689      	mov	r9, r1
 80042c2:	46a8      	mov	r8, r5
 80042c4:	f04f 0b00 	mov.w	fp, #0
 80042c8:	f8b9 c000 	ldrh.w	ip, [r9]
 80042cc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80042d0:	fb0a 440c 	mla	r4, sl, ip, r4
 80042d4:	445c      	add	r4, fp
 80042d6:	46c4      	mov	ip, r8
 80042d8:	b29b      	uxth	r3, r3
 80042da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80042de:	f84c 3b04 	str.w	r3, [ip], #4
 80042e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80042e6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	fb0a b303 	mla	r3, sl, r3, fp
 80042f0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80042f4:	454f      	cmp	r7, r9
 80042f6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80042fa:	d805      	bhi.n	8004308 <__multiply+0x124>
 80042fc:	f8c8 3004 	str.w	r3, [r8, #4]
 8004300:	3504      	adds	r5, #4
 8004302:	e79b      	b.n	800423c <__multiply+0x58>
 8004304:	46d4      	mov	ip, sl
 8004306:	e7b3      	b.n	8004270 <__multiply+0x8c>
 8004308:	46e0      	mov	r8, ip
 800430a:	e7dd      	b.n	80042c8 <__multiply+0xe4>
 800430c:	3e01      	subs	r6, #1
 800430e:	e799      	b.n	8004244 <__multiply+0x60>

08004310 <__pow5mult>:
 8004310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004314:	4615      	mov	r5, r2
 8004316:	f012 0203 	ands.w	r2, r2, #3
 800431a:	4606      	mov	r6, r0
 800431c:	460f      	mov	r7, r1
 800431e:	d007      	beq.n	8004330 <__pow5mult+0x20>
 8004320:	3a01      	subs	r2, #1
 8004322:	4c21      	ldr	r4, [pc, #132]	; (80043a8 <__pow5mult+0x98>)
 8004324:	2300      	movs	r3, #0
 8004326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800432a:	f7ff fec9 	bl	80040c0 <__multadd>
 800432e:	4607      	mov	r7, r0
 8004330:	10ad      	asrs	r5, r5, #2
 8004332:	d035      	beq.n	80043a0 <__pow5mult+0x90>
 8004334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004336:	b93c      	cbnz	r4, 8004348 <__pow5mult+0x38>
 8004338:	2010      	movs	r0, #16
 800433a:	f7ff fe63 	bl	8004004 <malloc>
 800433e:	6270      	str	r0, [r6, #36]	; 0x24
 8004340:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004344:	6004      	str	r4, [r0, #0]
 8004346:	60c4      	str	r4, [r0, #12]
 8004348:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800434c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004350:	b94c      	cbnz	r4, 8004366 <__pow5mult+0x56>
 8004352:	f240 2171 	movw	r1, #625	; 0x271
 8004356:	4630      	mov	r0, r6
 8004358:	f7ff ff3b 	bl	80041d2 <__i2b>
 800435c:	2300      	movs	r3, #0
 800435e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004362:	4604      	mov	r4, r0
 8004364:	6003      	str	r3, [r0, #0]
 8004366:	f04f 0800 	mov.w	r8, #0
 800436a:	07eb      	lsls	r3, r5, #31
 800436c:	d50a      	bpl.n	8004384 <__pow5mult+0x74>
 800436e:	4639      	mov	r1, r7
 8004370:	4622      	mov	r2, r4
 8004372:	4630      	mov	r0, r6
 8004374:	f7ff ff36 	bl	80041e4 <__multiply>
 8004378:	4639      	mov	r1, r7
 800437a:	4681      	mov	r9, r0
 800437c:	4630      	mov	r0, r6
 800437e:	f7ff fe88 	bl	8004092 <_Bfree>
 8004382:	464f      	mov	r7, r9
 8004384:	106d      	asrs	r5, r5, #1
 8004386:	d00b      	beq.n	80043a0 <__pow5mult+0x90>
 8004388:	6820      	ldr	r0, [r4, #0]
 800438a:	b938      	cbnz	r0, 800439c <__pow5mult+0x8c>
 800438c:	4622      	mov	r2, r4
 800438e:	4621      	mov	r1, r4
 8004390:	4630      	mov	r0, r6
 8004392:	f7ff ff27 	bl	80041e4 <__multiply>
 8004396:	6020      	str	r0, [r4, #0]
 8004398:	f8c0 8000 	str.w	r8, [r0]
 800439c:	4604      	mov	r4, r0
 800439e:	e7e4      	b.n	800436a <__pow5mult+0x5a>
 80043a0:	4638      	mov	r0, r7
 80043a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043a6:	bf00      	nop
 80043a8:	08004c58 	.word	0x08004c58

080043ac <__lshift>:
 80043ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b0:	460c      	mov	r4, r1
 80043b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	6849      	ldr	r1, [r1, #4]
 80043ba:	eb0a 0903 	add.w	r9, sl, r3
 80043be:	68a3      	ldr	r3, [r4, #8]
 80043c0:	4607      	mov	r7, r0
 80043c2:	4616      	mov	r6, r2
 80043c4:	f109 0501 	add.w	r5, r9, #1
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	db32      	blt.n	8004432 <__lshift+0x86>
 80043cc:	4638      	mov	r0, r7
 80043ce:	f7ff fe2c 	bl	800402a <_Balloc>
 80043d2:	2300      	movs	r3, #0
 80043d4:	4680      	mov	r8, r0
 80043d6:	f100 0114 	add.w	r1, r0, #20
 80043da:	461a      	mov	r2, r3
 80043dc:	4553      	cmp	r3, sl
 80043de:	db2b      	blt.n	8004438 <__lshift+0x8c>
 80043e0:	6920      	ldr	r0, [r4, #16]
 80043e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80043e6:	f104 0314 	add.w	r3, r4, #20
 80043ea:	f016 021f 	ands.w	r2, r6, #31
 80043ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80043f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80043f6:	d025      	beq.n	8004444 <__lshift+0x98>
 80043f8:	f1c2 0e20 	rsb	lr, r2, #32
 80043fc:	2000      	movs	r0, #0
 80043fe:	681e      	ldr	r6, [r3, #0]
 8004400:	468a      	mov	sl, r1
 8004402:	4096      	lsls	r6, r2
 8004404:	4330      	orrs	r0, r6
 8004406:	f84a 0b04 	str.w	r0, [sl], #4
 800440a:	f853 0b04 	ldr.w	r0, [r3], #4
 800440e:	459c      	cmp	ip, r3
 8004410:	fa20 f00e 	lsr.w	r0, r0, lr
 8004414:	d814      	bhi.n	8004440 <__lshift+0x94>
 8004416:	6048      	str	r0, [r1, #4]
 8004418:	b108      	cbz	r0, 800441e <__lshift+0x72>
 800441a:	f109 0502 	add.w	r5, r9, #2
 800441e:	3d01      	subs	r5, #1
 8004420:	4638      	mov	r0, r7
 8004422:	f8c8 5010 	str.w	r5, [r8, #16]
 8004426:	4621      	mov	r1, r4
 8004428:	f7ff fe33 	bl	8004092 <_Bfree>
 800442c:	4640      	mov	r0, r8
 800442e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004432:	3101      	adds	r1, #1
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	e7c7      	b.n	80043c8 <__lshift+0x1c>
 8004438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800443c:	3301      	adds	r3, #1
 800443e:	e7cd      	b.n	80043dc <__lshift+0x30>
 8004440:	4651      	mov	r1, sl
 8004442:	e7dc      	b.n	80043fe <__lshift+0x52>
 8004444:	3904      	subs	r1, #4
 8004446:	f853 2b04 	ldr.w	r2, [r3], #4
 800444a:	f841 2f04 	str.w	r2, [r1, #4]!
 800444e:	459c      	cmp	ip, r3
 8004450:	d8f9      	bhi.n	8004446 <__lshift+0x9a>
 8004452:	e7e4      	b.n	800441e <__lshift+0x72>

08004454 <__mcmp>:
 8004454:	6903      	ldr	r3, [r0, #16]
 8004456:	690a      	ldr	r2, [r1, #16]
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	b530      	push	{r4, r5, lr}
 800445c:	d10c      	bne.n	8004478 <__mcmp+0x24>
 800445e:	0092      	lsls	r2, r2, #2
 8004460:	3014      	adds	r0, #20
 8004462:	3114      	adds	r1, #20
 8004464:	1884      	adds	r4, r0, r2
 8004466:	4411      	add	r1, r2
 8004468:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800446c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004470:	4295      	cmp	r5, r2
 8004472:	d003      	beq.n	800447c <__mcmp+0x28>
 8004474:	d305      	bcc.n	8004482 <__mcmp+0x2e>
 8004476:	2301      	movs	r3, #1
 8004478:	4618      	mov	r0, r3
 800447a:	bd30      	pop	{r4, r5, pc}
 800447c:	42a0      	cmp	r0, r4
 800447e:	d3f3      	bcc.n	8004468 <__mcmp+0x14>
 8004480:	e7fa      	b.n	8004478 <__mcmp+0x24>
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	e7f7      	b.n	8004478 <__mcmp+0x24>

08004488 <__mdiff>:
 8004488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800448c:	460d      	mov	r5, r1
 800448e:	4607      	mov	r7, r0
 8004490:	4611      	mov	r1, r2
 8004492:	4628      	mov	r0, r5
 8004494:	4614      	mov	r4, r2
 8004496:	f7ff ffdd 	bl	8004454 <__mcmp>
 800449a:	1e06      	subs	r6, r0, #0
 800449c:	d108      	bne.n	80044b0 <__mdiff+0x28>
 800449e:	4631      	mov	r1, r6
 80044a0:	4638      	mov	r0, r7
 80044a2:	f7ff fdc2 	bl	800402a <_Balloc>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80044ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b0:	bfa4      	itt	ge
 80044b2:	4623      	movge	r3, r4
 80044b4:	462c      	movge	r4, r5
 80044b6:	4638      	mov	r0, r7
 80044b8:	6861      	ldr	r1, [r4, #4]
 80044ba:	bfa6      	itte	ge
 80044bc:	461d      	movge	r5, r3
 80044be:	2600      	movge	r6, #0
 80044c0:	2601      	movlt	r6, #1
 80044c2:	f7ff fdb2 	bl	800402a <_Balloc>
 80044c6:	692b      	ldr	r3, [r5, #16]
 80044c8:	60c6      	str	r6, [r0, #12]
 80044ca:	6926      	ldr	r6, [r4, #16]
 80044cc:	f105 0914 	add.w	r9, r5, #20
 80044d0:	f104 0214 	add.w	r2, r4, #20
 80044d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80044d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80044dc:	f100 0514 	add.w	r5, r0, #20
 80044e0:	f04f 0e00 	mov.w	lr, #0
 80044e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80044e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80044ec:	fa1e f18a 	uxtah	r1, lr, sl
 80044f0:	b2a3      	uxth	r3, r4
 80044f2:	1ac9      	subs	r1, r1, r3
 80044f4:	0c23      	lsrs	r3, r4, #16
 80044f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80044fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80044fe:	b289      	uxth	r1, r1
 8004500:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004504:	45c8      	cmp	r8, r9
 8004506:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800450a:	4694      	mov	ip, r2
 800450c:	f845 3b04 	str.w	r3, [r5], #4
 8004510:	d8e8      	bhi.n	80044e4 <__mdiff+0x5c>
 8004512:	45bc      	cmp	ip, r7
 8004514:	d304      	bcc.n	8004520 <__mdiff+0x98>
 8004516:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800451a:	b183      	cbz	r3, 800453e <__mdiff+0xb6>
 800451c:	6106      	str	r6, [r0, #16]
 800451e:	e7c5      	b.n	80044ac <__mdiff+0x24>
 8004520:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004524:	fa1e f381 	uxtah	r3, lr, r1
 8004528:	141a      	asrs	r2, r3, #16
 800452a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800452e:	b29b      	uxth	r3, r3
 8004530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004534:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004538:	f845 3b04 	str.w	r3, [r5], #4
 800453c:	e7e9      	b.n	8004512 <__mdiff+0x8a>
 800453e:	3e01      	subs	r6, #1
 8004540:	e7e9      	b.n	8004516 <__mdiff+0x8e>

08004542 <__d2b>:
 8004542:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004546:	460e      	mov	r6, r1
 8004548:	2101      	movs	r1, #1
 800454a:	ec59 8b10 	vmov	r8, r9, d0
 800454e:	4615      	mov	r5, r2
 8004550:	f7ff fd6b 	bl	800402a <_Balloc>
 8004554:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004558:	4607      	mov	r7, r0
 800455a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800455e:	bb34      	cbnz	r4, 80045ae <__d2b+0x6c>
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	f1b8 0300 	subs.w	r3, r8, #0
 8004566:	d027      	beq.n	80045b8 <__d2b+0x76>
 8004568:	a802      	add	r0, sp, #8
 800456a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800456e:	f7ff fe01 	bl	8004174 <__lo0bits>
 8004572:	9900      	ldr	r1, [sp, #0]
 8004574:	b1f0      	cbz	r0, 80045b4 <__d2b+0x72>
 8004576:	9a01      	ldr	r2, [sp, #4]
 8004578:	f1c0 0320 	rsb	r3, r0, #32
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	430b      	orrs	r3, r1
 8004582:	40c2      	lsrs	r2, r0
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	9201      	str	r2, [sp, #4]
 8004588:	9b01      	ldr	r3, [sp, #4]
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2102      	movne	r1, #2
 8004592:	2101      	moveq	r1, #1
 8004594:	6139      	str	r1, [r7, #16]
 8004596:	b1c4      	cbz	r4, 80045ca <__d2b+0x88>
 8004598:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800459c:	4404      	add	r4, r0
 800459e:	6034      	str	r4, [r6, #0]
 80045a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80045a4:	6028      	str	r0, [r5, #0]
 80045a6:	4638      	mov	r0, r7
 80045a8:	b003      	add	sp, #12
 80045aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b2:	e7d5      	b.n	8004560 <__d2b+0x1e>
 80045b4:	6179      	str	r1, [r7, #20]
 80045b6:	e7e7      	b.n	8004588 <__d2b+0x46>
 80045b8:	a801      	add	r0, sp, #4
 80045ba:	f7ff fddb 	bl	8004174 <__lo0bits>
 80045be:	9b01      	ldr	r3, [sp, #4]
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	2101      	movs	r1, #1
 80045c4:	6139      	str	r1, [r7, #16]
 80045c6:	3020      	adds	r0, #32
 80045c8:	e7e5      	b.n	8004596 <__d2b+0x54>
 80045ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80045ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80045d2:	6030      	str	r0, [r6, #0]
 80045d4:	6918      	ldr	r0, [r3, #16]
 80045d6:	f7ff fdae 	bl	8004136 <__hi0bits>
 80045da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80045de:	e7e1      	b.n	80045a4 <__d2b+0x62>

080045e0 <_calloc_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	fb02 f401 	mul.w	r4, r2, r1
 80045e6:	4621      	mov	r1, r4
 80045e8:	f000 f856 	bl	8004698 <_malloc_r>
 80045ec:	4605      	mov	r5, r0
 80045ee:	b118      	cbz	r0, 80045f8 <_calloc_r+0x18>
 80045f0:	4622      	mov	r2, r4
 80045f2:	2100      	movs	r1, #0
 80045f4:	f7fe fa2e 	bl	8002a54 <memset>
 80045f8:	4628      	mov	r0, r5
 80045fa:	bd38      	pop	{r3, r4, r5, pc}

080045fc <_free_r>:
 80045fc:	b538      	push	{r3, r4, r5, lr}
 80045fe:	4605      	mov	r5, r0
 8004600:	2900      	cmp	r1, #0
 8004602:	d045      	beq.n	8004690 <_free_r+0x94>
 8004604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004608:	1f0c      	subs	r4, r1, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	bfb8      	it	lt
 800460e:	18e4      	addlt	r4, r4, r3
 8004610:	f000 fa29 	bl	8004a66 <__malloc_lock>
 8004614:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <_free_r+0x98>)
 8004616:	6813      	ldr	r3, [r2, #0]
 8004618:	4610      	mov	r0, r2
 800461a:	b933      	cbnz	r3, 800462a <_free_r+0x2e>
 800461c:	6063      	str	r3, [r4, #4]
 800461e:	6014      	str	r4, [r2, #0]
 8004620:	4628      	mov	r0, r5
 8004622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004626:	f000 ba1f 	b.w	8004a68 <__malloc_unlock>
 800462a:	42a3      	cmp	r3, r4
 800462c:	d90c      	bls.n	8004648 <_free_r+0x4c>
 800462e:	6821      	ldr	r1, [r4, #0]
 8004630:	1862      	adds	r2, r4, r1
 8004632:	4293      	cmp	r3, r2
 8004634:	bf04      	itt	eq
 8004636:	681a      	ldreq	r2, [r3, #0]
 8004638:	685b      	ldreq	r3, [r3, #4]
 800463a:	6063      	str	r3, [r4, #4]
 800463c:	bf04      	itt	eq
 800463e:	1852      	addeq	r2, r2, r1
 8004640:	6022      	streq	r2, [r4, #0]
 8004642:	6004      	str	r4, [r0, #0]
 8004644:	e7ec      	b.n	8004620 <_free_r+0x24>
 8004646:	4613      	mov	r3, r2
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	b10a      	cbz	r2, 8004650 <_free_r+0x54>
 800464c:	42a2      	cmp	r2, r4
 800464e:	d9fa      	bls.n	8004646 <_free_r+0x4a>
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	1858      	adds	r0, r3, r1
 8004654:	42a0      	cmp	r0, r4
 8004656:	d10b      	bne.n	8004670 <_free_r+0x74>
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	4401      	add	r1, r0
 800465c:	1858      	adds	r0, r3, r1
 800465e:	4282      	cmp	r2, r0
 8004660:	6019      	str	r1, [r3, #0]
 8004662:	d1dd      	bne.n	8004620 <_free_r+0x24>
 8004664:	6810      	ldr	r0, [r2, #0]
 8004666:	6852      	ldr	r2, [r2, #4]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	4401      	add	r1, r0
 800466c:	6019      	str	r1, [r3, #0]
 800466e:	e7d7      	b.n	8004620 <_free_r+0x24>
 8004670:	d902      	bls.n	8004678 <_free_r+0x7c>
 8004672:	230c      	movs	r3, #12
 8004674:	602b      	str	r3, [r5, #0]
 8004676:	e7d3      	b.n	8004620 <_free_r+0x24>
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	1821      	adds	r1, r4, r0
 800467c:	428a      	cmp	r2, r1
 800467e:	bf04      	itt	eq
 8004680:	6811      	ldreq	r1, [r2, #0]
 8004682:	6852      	ldreq	r2, [r2, #4]
 8004684:	6062      	str	r2, [r4, #4]
 8004686:	bf04      	itt	eq
 8004688:	1809      	addeq	r1, r1, r0
 800468a:	6021      	streq	r1, [r4, #0]
 800468c:	605c      	str	r4, [r3, #4]
 800468e:	e7c7      	b.n	8004620 <_free_r+0x24>
 8004690:	bd38      	pop	{r3, r4, r5, pc}
 8004692:	bf00      	nop
 8004694:	200001fc 	.word	0x200001fc

08004698 <_malloc_r>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	1ccd      	adds	r5, r1, #3
 800469c:	f025 0503 	bic.w	r5, r5, #3
 80046a0:	3508      	adds	r5, #8
 80046a2:	2d0c      	cmp	r5, #12
 80046a4:	bf38      	it	cc
 80046a6:	250c      	movcc	r5, #12
 80046a8:	2d00      	cmp	r5, #0
 80046aa:	4606      	mov	r6, r0
 80046ac:	db01      	blt.n	80046b2 <_malloc_r+0x1a>
 80046ae:	42a9      	cmp	r1, r5
 80046b0:	d903      	bls.n	80046ba <_malloc_r+0x22>
 80046b2:	230c      	movs	r3, #12
 80046b4:	6033      	str	r3, [r6, #0]
 80046b6:	2000      	movs	r0, #0
 80046b8:	bd70      	pop	{r4, r5, r6, pc}
 80046ba:	f000 f9d4 	bl	8004a66 <__malloc_lock>
 80046be:	4a21      	ldr	r2, [pc, #132]	; (8004744 <_malloc_r+0xac>)
 80046c0:	6814      	ldr	r4, [r2, #0]
 80046c2:	4621      	mov	r1, r4
 80046c4:	b991      	cbnz	r1, 80046ec <_malloc_r+0x54>
 80046c6:	4c20      	ldr	r4, [pc, #128]	; (8004748 <_malloc_r+0xb0>)
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	b91b      	cbnz	r3, 80046d4 <_malloc_r+0x3c>
 80046cc:	4630      	mov	r0, r6
 80046ce:	f000 f98f 	bl	80049f0 <_sbrk_r>
 80046d2:	6020      	str	r0, [r4, #0]
 80046d4:	4629      	mov	r1, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 f98a 	bl	80049f0 <_sbrk_r>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d124      	bne.n	800472a <_malloc_r+0x92>
 80046e0:	230c      	movs	r3, #12
 80046e2:	6033      	str	r3, [r6, #0]
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 f9bf 	bl	8004a68 <__malloc_unlock>
 80046ea:	e7e4      	b.n	80046b6 <_malloc_r+0x1e>
 80046ec:	680b      	ldr	r3, [r1, #0]
 80046ee:	1b5b      	subs	r3, r3, r5
 80046f0:	d418      	bmi.n	8004724 <_malloc_r+0x8c>
 80046f2:	2b0b      	cmp	r3, #11
 80046f4:	d90f      	bls.n	8004716 <_malloc_r+0x7e>
 80046f6:	600b      	str	r3, [r1, #0]
 80046f8:	50cd      	str	r5, [r1, r3]
 80046fa:	18cc      	adds	r4, r1, r3
 80046fc:	4630      	mov	r0, r6
 80046fe:	f000 f9b3 	bl	8004a68 <__malloc_unlock>
 8004702:	f104 000b 	add.w	r0, r4, #11
 8004706:	1d23      	adds	r3, r4, #4
 8004708:	f020 0007 	bic.w	r0, r0, #7
 800470c:	1ac3      	subs	r3, r0, r3
 800470e:	d0d3      	beq.n	80046b8 <_malloc_r+0x20>
 8004710:	425a      	negs	r2, r3
 8004712:	50e2      	str	r2, [r4, r3]
 8004714:	e7d0      	b.n	80046b8 <_malloc_r+0x20>
 8004716:	428c      	cmp	r4, r1
 8004718:	684b      	ldr	r3, [r1, #4]
 800471a:	bf16      	itet	ne
 800471c:	6063      	strne	r3, [r4, #4]
 800471e:	6013      	streq	r3, [r2, #0]
 8004720:	460c      	movne	r4, r1
 8004722:	e7eb      	b.n	80046fc <_malloc_r+0x64>
 8004724:	460c      	mov	r4, r1
 8004726:	6849      	ldr	r1, [r1, #4]
 8004728:	e7cc      	b.n	80046c4 <_malloc_r+0x2c>
 800472a:	1cc4      	adds	r4, r0, #3
 800472c:	f024 0403 	bic.w	r4, r4, #3
 8004730:	42a0      	cmp	r0, r4
 8004732:	d005      	beq.n	8004740 <_malloc_r+0xa8>
 8004734:	1a21      	subs	r1, r4, r0
 8004736:	4630      	mov	r0, r6
 8004738:	f000 f95a 	bl	80049f0 <_sbrk_r>
 800473c:	3001      	adds	r0, #1
 800473e:	d0cf      	beq.n	80046e0 <_malloc_r+0x48>
 8004740:	6025      	str	r5, [r4, #0]
 8004742:	e7db      	b.n	80046fc <_malloc_r+0x64>
 8004744:	200001fc 	.word	0x200001fc
 8004748:	20000200 	.word	0x20000200

0800474c <__ssputs_r>:
 800474c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	688e      	ldr	r6, [r1, #8]
 8004752:	429e      	cmp	r6, r3
 8004754:	4682      	mov	sl, r0
 8004756:	460c      	mov	r4, r1
 8004758:	4690      	mov	r8, r2
 800475a:	4699      	mov	r9, r3
 800475c:	d837      	bhi.n	80047ce <__ssputs_r+0x82>
 800475e:	898a      	ldrh	r2, [r1, #12]
 8004760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004764:	d031      	beq.n	80047ca <__ssputs_r+0x7e>
 8004766:	6825      	ldr	r5, [r4, #0]
 8004768:	6909      	ldr	r1, [r1, #16]
 800476a:	1a6f      	subs	r7, r5, r1
 800476c:	6965      	ldr	r5, [r4, #20]
 800476e:	2302      	movs	r3, #2
 8004770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004774:	fb95 f5f3 	sdiv	r5, r5, r3
 8004778:	f109 0301 	add.w	r3, r9, #1
 800477c:	443b      	add	r3, r7
 800477e:	429d      	cmp	r5, r3
 8004780:	bf38      	it	cc
 8004782:	461d      	movcc	r5, r3
 8004784:	0553      	lsls	r3, r2, #21
 8004786:	d530      	bpl.n	80047ea <__ssputs_r+0x9e>
 8004788:	4629      	mov	r1, r5
 800478a:	f7ff ff85 	bl	8004698 <_malloc_r>
 800478e:	4606      	mov	r6, r0
 8004790:	b950      	cbnz	r0, 80047a8 <__ssputs_r+0x5c>
 8004792:	230c      	movs	r3, #12
 8004794:	f8ca 3000 	str.w	r3, [sl]
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a8:	463a      	mov	r2, r7
 80047aa:	6921      	ldr	r1, [r4, #16]
 80047ac:	f7ff fc32 	bl	8004014 <memcpy>
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ba:	81a3      	strh	r3, [r4, #12]
 80047bc:	6126      	str	r6, [r4, #16]
 80047be:	6165      	str	r5, [r4, #20]
 80047c0:	443e      	add	r6, r7
 80047c2:	1bed      	subs	r5, r5, r7
 80047c4:	6026      	str	r6, [r4, #0]
 80047c6:	60a5      	str	r5, [r4, #8]
 80047c8:	464e      	mov	r6, r9
 80047ca:	454e      	cmp	r6, r9
 80047cc:	d900      	bls.n	80047d0 <__ssputs_r+0x84>
 80047ce:	464e      	mov	r6, r9
 80047d0:	4632      	mov	r2, r6
 80047d2:	4641      	mov	r1, r8
 80047d4:	6820      	ldr	r0, [r4, #0]
 80047d6:	f000 f92d 	bl	8004a34 <memmove>
 80047da:	68a3      	ldr	r3, [r4, #8]
 80047dc:	1b9b      	subs	r3, r3, r6
 80047de:	60a3      	str	r3, [r4, #8]
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	441e      	add	r6, r3
 80047e4:	6026      	str	r6, [r4, #0]
 80047e6:	2000      	movs	r0, #0
 80047e8:	e7dc      	b.n	80047a4 <__ssputs_r+0x58>
 80047ea:	462a      	mov	r2, r5
 80047ec:	f000 f93d 	bl	8004a6a <_realloc_r>
 80047f0:	4606      	mov	r6, r0
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d1e2      	bne.n	80047bc <__ssputs_r+0x70>
 80047f6:	6921      	ldr	r1, [r4, #16]
 80047f8:	4650      	mov	r0, sl
 80047fa:	f7ff feff 	bl	80045fc <_free_r>
 80047fe:	e7c8      	b.n	8004792 <__ssputs_r+0x46>

08004800 <_svfiprintf_r>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	461d      	mov	r5, r3
 8004806:	898b      	ldrh	r3, [r1, #12]
 8004808:	061f      	lsls	r7, r3, #24
 800480a:	b09d      	sub	sp, #116	; 0x74
 800480c:	4680      	mov	r8, r0
 800480e:	460c      	mov	r4, r1
 8004810:	4616      	mov	r6, r2
 8004812:	d50f      	bpl.n	8004834 <_svfiprintf_r+0x34>
 8004814:	690b      	ldr	r3, [r1, #16]
 8004816:	b96b      	cbnz	r3, 8004834 <_svfiprintf_r+0x34>
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	f7ff ff3d 	bl	8004698 <_malloc_r>
 800481e:	6020      	str	r0, [r4, #0]
 8004820:	6120      	str	r0, [r4, #16]
 8004822:	b928      	cbnz	r0, 8004830 <_svfiprintf_r+0x30>
 8004824:	230c      	movs	r3, #12
 8004826:	f8c8 3000 	str.w	r3, [r8]
 800482a:	f04f 30ff 	mov.w	r0, #4294967295
 800482e:	e0c8      	b.n	80049c2 <_svfiprintf_r+0x1c2>
 8004830:	2340      	movs	r3, #64	; 0x40
 8004832:	6163      	str	r3, [r4, #20]
 8004834:	2300      	movs	r3, #0
 8004836:	9309      	str	r3, [sp, #36]	; 0x24
 8004838:	2320      	movs	r3, #32
 800483a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800483e:	2330      	movs	r3, #48	; 0x30
 8004840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004844:	9503      	str	r5, [sp, #12]
 8004846:	f04f 0b01 	mov.w	fp, #1
 800484a:	4637      	mov	r7, r6
 800484c:	463d      	mov	r5, r7
 800484e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004852:	b10b      	cbz	r3, 8004858 <_svfiprintf_r+0x58>
 8004854:	2b25      	cmp	r3, #37	; 0x25
 8004856:	d13e      	bne.n	80048d6 <_svfiprintf_r+0xd6>
 8004858:	ebb7 0a06 	subs.w	sl, r7, r6
 800485c:	d00b      	beq.n	8004876 <_svfiprintf_r+0x76>
 800485e:	4653      	mov	r3, sl
 8004860:	4632      	mov	r2, r6
 8004862:	4621      	mov	r1, r4
 8004864:	4640      	mov	r0, r8
 8004866:	f7ff ff71 	bl	800474c <__ssputs_r>
 800486a:	3001      	adds	r0, #1
 800486c:	f000 80a4 	beq.w	80049b8 <_svfiprintf_r+0x1b8>
 8004870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004872:	4453      	add	r3, sl
 8004874:	9309      	str	r3, [sp, #36]	; 0x24
 8004876:	783b      	ldrb	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 809d 	beq.w	80049b8 <_svfiprintf_r+0x1b8>
 800487e:	2300      	movs	r3, #0
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	9307      	str	r3, [sp, #28]
 800488c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004890:	931a      	str	r3, [sp, #104]	; 0x68
 8004892:	462f      	mov	r7, r5
 8004894:	2205      	movs	r2, #5
 8004896:	f817 1b01 	ldrb.w	r1, [r7], #1
 800489a:	4850      	ldr	r0, [pc, #320]	; (80049dc <_svfiprintf_r+0x1dc>)
 800489c:	f7fb fca8 	bl	80001f0 <memchr>
 80048a0:	9b04      	ldr	r3, [sp, #16]
 80048a2:	b9d0      	cbnz	r0, 80048da <_svfiprintf_r+0xda>
 80048a4:	06d9      	lsls	r1, r3, #27
 80048a6:	bf44      	itt	mi
 80048a8:	2220      	movmi	r2, #32
 80048aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048ae:	071a      	lsls	r2, r3, #28
 80048b0:	bf44      	itt	mi
 80048b2:	222b      	movmi	r2, #43	; 0x2b
 80048b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048b8:	782a      	ldrb	r2, [r5, #0]
 80048ba:	2a2a      	cmp	r2, #42	; 0x2a
 80048bc:	d015      	beq.n	80048ea <_svfiprintf_r+0xea>
 80048be:	9a07      	ldr	r2, [sp, #28]
 80048c0:	462f      	mov	r7, r5
 80048c2:	2000      	movs	r0, #0
 80048c4:	250a      	movs	r5, #10
 80048c6:	4639      	mov	r1, r7
 80048c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048cc:	3b30      	subs	r3, #48	; 0x30
 80048ce:	2b09      	cmp	r3, #9
 80048d0:	d94d      	bls.n	800496e <_svfiprintf_r+0x16e>
 80048d2:	b1b8      	cbz	r0, 8004904 <_svfiprintf_r+0x104>
 80048d4:	e00f      	b.n	80048f6 <_svfiprintf_r+0xf6>
 80048d6:	462f      	mov	r7, r5
 80048d8:	e7b8      	b.n	800484c <_svfiprintf_r+0x4c>
 80048da:	4a40      	ldr	r2, [pc, #256]	; (80049dc <_svfiprintf_r+0x1dc>)
 80048dc:	1a80      	subs	r0, r0, r2
 80048de:	fa0b f000 	lsl.w	r0, fp, r0
 80048e2:	4318      	orrs	r0, r3
 80048e4:	9004      	str	r0, [sp, #16]
 80048e6:	463d      	mov	r5, r7
 80048e8:	e7d3      	b.n	8004892 <_svfiprintf_r+0x92>
 80048ea:	9a03      	ldr	r2, [sp, #12]
 80048ec:	1d11      	adds	r1, r2, #4
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	9103      	str	r1, [sp, #12]
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	db01      	blt.n	80048fa <_svfiprintf_r+0xfa>
 80048f6:	9207      	str	r2, [sp, #28]
 80048f8:	e004      	b.n	8004904 <_svfiprintf_r+0x104>
 80048fa:	4252      	negs	r2, r2
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	9207      	str	r2, [sp, #28]
 8004902:	9304      	str	r3, [sp, #16]
 8004904:	783b      	ldrb	r3, [r7, #0]
 8004906:	2b2e      	cmp	r3, #46	; 0x2e
 8004908:	d10c      	bne.n	8004924 <_svfiprintf_r+0x124>
 800490a:	787b      	ldrb	r3, [r7, #1]
 800490c:	2b2a      	cmp	r3, #42	; 0x2a
 800490e:	d133      	bne.n	8004978 <_svfiprintf_r+0x178>
 8004910:	9b03      	ldr	r3, [sp, #12]
 8004912:	1d1a      	adds	r2, r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	9203      	str	r2, [sp, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	bfb8      	it	lt
 800491c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004920:	3702      	adds	r7, #2
 8004922:	9305      	str	r3, [sp, #20]
 8004924:	4d2e      	ldr	r5, [pc, #184]	; (80049e0 <_svfiprintf_r+0x1e0>)
 8004926:	7839      	ldrb	r1, [r7, #0]
 8004928:	2203      	movs	r2, #3
 800492a:	4628      	mov	r0, r5
 800492c:	f7fb fc60 	bl	80001f0 <memchr>
 8004930:	b138      	cbz	r0, 8004942 <_svfiprintf_r+0x142>
 8004932:	2340      	movs	r3, #64	; 0x40
 8004934:	1b40      	subs	r0, r0, r5
 8004936:	fa03 f000 	lsl.w	r0, r3, r0
 800493a:	9b04      	ldr	r3, [sp, #16]
 800493c:	4303      	orrs	r3, r0
 800493e:	3701      	adds	r7, #1
 8004940:	9304      	str	r3, [sp, #16]
 8004942:	7839      	ldrb	r1, [r7, #0]
 8004944:	4827      	ldr	r0, [pc, #156]	; (80049e4 <_svfiprintf_r+0x1e4>)
 8004946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800494a:	2206      	movs	r2, #6
 800494c:	1c7e      	adds	r6, r7, #1
 800494e:	f7fb fc4f 	bl	80001f0 <memchr>
 8004952:	2800      	cmp	r0, #0
 8004954:	d038      	beq.n	80049c8 <_svfiprintf_r+0x1c8>
 8004956:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <_svfiprintf_r+0x1e8>)
 8004958:	bb13      	cbnz	r3, 80049a0 <_svfiprintf_r+0x1a0>
 800495a:	9b03      	ldr	r3, [sp, #12]
 800495c:	3307      	adds	r3, #7
 800495e:	f023 0307 	bic.w	r3, r3, #7
 8004962:	3308      	adds	r3, #8
 8004964:	9303      	str	r3, [sp, #12]
 8004966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004968:	444b      	add	r3, r9
 800496a:	9309      	str	r3, [sp, #36]	; 0x24
 800496c:	e76d      	b.n	800484a <_svfiprintf_r+0x4a>
 800496e:	fb05 3202 	mla	r2, r5, r2, r3
 8004972:	2001      	movs	r0, #1
 8004974:	460f      	mov	r7, r1
 8004976:	e7a6      	b.n	80048c6 <_svfiprintf_r+0xc6>
 8004978:	2300      	movs	r3, #0
 800497a:	3701      	adds	r7, #1
 800497c:	9305      	str	r3, [sp, #20]
 800497e:	4619      	mov	r1, r3
 8004980:	250a      	movs	r5, #10
 8004982:	4638      	mov	r0, r7
 8004984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004988:	3a30      	subs	r2, #48	; 0x30
 800498a:	2a09      	cmp	r2, #9
 800498c:	d903      	bls.n	8004996 <_svfiprintf_r+0x196>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0c8      	beq.n	8004924 <_svfiprintf_r+0x124>
 8004992:	9105      	str	r1, [sp, #20]
 8004994:	e7c6      	b.n	8004924 <_svfiprintf_r+0x124>
 8004996:	fb05 2101 	mla	r1, r5, r1, r2
 800499a:	2301      	movs	r3, #1
 800499c:	4607      	mov	r7, r0
 800499e:	e7f0      	b.n	8004982 <_svfiprintf_r+0x182>
 80049a0:	ab03      	add	r3, sp, #12
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4622      	mov	r2, r4
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <_svfiprintf_r+0x1ec>)
 80049a8:	a904      	add	r1, sp, #16
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7fe f8ee 	bl	8002b8c <_printf_float>
 80049b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049b4:	4681      	mov	r9, r0
 80049b6:	d1d6      	bne.n	8004966 <_svfiprintf_r+0x166>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	065b      	lsls	r3, r3, #25
 80049bc:	f53f af35 	bmi.w	800482a <_svfiprintf_r+0x2a>
 80049c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049c2:	b01d      	add	sp, #116	; 0x74
 80049c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c8:	ab03      	add	r3, sp, #12
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	4622      	mov	r2, r4
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <_svfiprintf_r+0x1ec>)
 80049d0:	a904      	add	r1, sp, #16
 80049d2:	4640      	mov	r0, r8
 80049d4:	f7fe fb90 	bl	80030f8 <_printf_i>
 80049d8:	e7ea      	b.n	80049b0 <_svfiprintf_r+0x1b0>
 80049da:	bf00      	nop
 80049dc:	08004c64 	.word	0x08004c64
 80049e0:	08004c6a 	.word	0x08004c6a
 80049e4:	08004c6e 	.word	0x08004c6e
 80049e8:	08002b8d 	.word	0x08002b8d
 80049ec:	0800474d 	.word	0x0800474d

080049f0 <_sbrk_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4c06      	ldr	r4, [pc, #24]	; (8004a0c <_sbrk_r+0x1c>)
 80049f4:	2300      	movs	r3, #0
 80049f6:	4605      	mov	r5, r0
 80049f8:	4608      	mov	r0, r1
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	f7fc fc08 	bl	8001210 <_sbrk>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d102      	bne.n	8004a0a <_sbrk_r+0x1a>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	b103      	cbz	r3, 8004a0a <_sbrk_r+0x1a>
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	20000290 	.word	0x20000290

08004a10 <__ascii_mbtowc>:
 8004a10:	b082      	sub	sp, #8
 8004a12:	b901      	cbnz	r1, 8004a16 <__ascii_mbtowc+0x6>
 8004a14:	a901      	add	r1, sp, #4
 8004a16:	b142      	cbz	r2, 8004a2a <__ascii_mbtowc+0x1a>
 8004a18:	b14b      	cbz	r3, 8004a2e <__ascii_mbtowc+0x1e>
 8004a1a:	7813      	ldrb	r3, [r2, #0]
 8004a1c:	600b      	str	r3, [r1, #0]
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	1c10      	adds	r0, r2, #0
 8004a22:	bf18      	it	ne
 8004a24:	2001      	movne	r0, #1
 8004a26:	b002      	add	sp, #8
 8004a28:	4770      	bx	lr
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	e7fb      	b.n	8004a26 <__ascii_mbtowc+0x16>
 8004a2e:	f06f 0001 	mvn.w	r0, #1
 8004a32:	e7f8      	b.n	8004a26 <__ascii_mbtowc+0x16>

08004a34 <memmove>:
 8004a34:	4288      	cmp	r0, r1
 8004a36:	b510      	push	{r4, lr}
 8004a38:	eb01 0302 	add.w	r3, r1, r2
 8004a3c:	d807      	bhi.n	8004a4e <memmove+0x1a>
 8004a3e:	1e42      	subs	r2, r0, #1
 8004a40:	4299      	cmp	r1, r3
 8004a42:	d00a      	beq.n	8004a5a <memmove+0x26>
 8004a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a48:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a4c:	e7f8      	b.n	8004a40 <memmove+0xc>
 8004a4e:	4283      	cmp	r3, r0
 8004a50:	d9f5      	bls.n	8004a3e <memmove+0xa>
 8004a52:	1881      	adds	r1, r0, r2
 8004a54:	1ad2      	subs	r2, r2, r3
 8004a56:	42d3      	cmn	r3, r2
 8004a58:	d100      	bne.n	8004a5c <memmove+0x28>
 8004a5a:	bd10      	pop	{r4, pc}
 8004a5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a60:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a64:	e7f7      	b.n	8004a56 <memmove+0x22>

08004a66 <__malloc_lock>:
 8004a66:	4770      	bx	lr

08004a68 <__malloc_unlock>:
 8004a68:	4770      	bx	lr

08004a6a <_realloc_r>:
 8004a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	4614      	mov	r4, r2
 8004a70:	460e      	mov	r6, r1
 8004a72:	b921      	cbnz	r1, 8004a7e <_realloc_r+0x14>
 8004a74:	4611      	mov	r1, r2
 8004a76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a7a:	f7ff be0d 	b.w	8004698 <_malloc_r>
 8004a7e:	b922      	cbnz	r2, 8004a8a <_realloc_r+0x20>
 8004a80:	f7ff fdbc 	bl	80045fc <_free_r>
 8004a84:	4625      	mov	r5, r4
 8004a86:	4628      	mov	r0, r5
 8004a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8a:	f000 f821 	bl	8004ad0 <_malloc_usable_size_r>
 8004a8e:	42a0      	cmp	r0, r4
 8004a90:	d20f      	bcs.n	8004ab2 <_realloc_r+0x48>
 8004a92:	4621      	mov	r1, r4
 8004a94:	4638      	mov	r0, r7
 8004a96:	f7ff fdff 	bl	8004698 <_malloc_r>
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d0f2      	beq.n	8004a86 <_realloc_r+0x1c>
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	f7ff fab6 	bl	8004014 <memcpy>
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4638      	mov	r0, r7
 8004aac:	f7ff fda6 	bl	80045fc <_free_r>
 8004ab0:	e7e9      	b.n	8004a86 <_realloc_r+0x1c>
 8004ab2:	4635      	mov	r5, r6
 8004ab4:	e7e7      	b.n	8004a86 <_realloc_r+0x1c>

08004ab6 <__ascii_wctomb>:
 8004ab6:	b149      	cbz	r1, 8004acc <__ascii_wctomb+0x16>
 8004ab8:	2aff      	cmp	r2, #255	; 0xff
 8004aba:	bf85      	ittet	hi
 8004abc:	238a      	movhi	r3, #138	; 0x8a
 8004abe:	6003      	strhi	r3, [r0, #0]
 8004ac0:	700a      	strbls	r2, [r1, #0]
 8004ac2:	f04f 30ff 	movhi.w	r0, #4294967295
 8004ac6:	bf98      	it	ls
 8004ac8:	2001      	movls	r0, #1
 8004aca:	4770      	bx	lr
 8004acc:	4608      	mov	r0, r1
 8004ace:	4770      	bx	lr

08004ad0 <_malloc_usable_size_r>:
 8004ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad4:	1f18      	subs	r0, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bfbc      	itt	lt
 8004ada:	580b      	ldrlt	r3, [r1, r0]
 8004adc:	18c0      	addlt	r0, r0, r3
 8004ade:	4770      	bx	lr

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
