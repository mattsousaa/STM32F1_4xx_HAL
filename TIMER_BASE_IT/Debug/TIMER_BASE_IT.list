
TIMER_BASE_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000de0  08000de0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000de0  08000de0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000de0  08000de0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000de0  08000de0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000de0  08000de0  00010de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000de4  08000de4  00010de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08000df4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000df4  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a25  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010a4  00000000  00000000  00026a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  00027b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000780  00000000  00000000  00028318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012a80  00000000  00000000  00028a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000551b  00000000  00000000  0003b518  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068cb2  00000000  00000000  00040a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a96e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002134  00000000  00000000  000a9760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000dc8 	.word	0x08000dc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000dc8 	.word	0x08000dc8

0800014c <main>:

/* TIMER3 can be used for basic timer
 * See STM32 cross-series timer overview document for more details */
TIM_HandleTypeDef htimer3;

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000150:	f000 f91a 	bl	8000388 <HAL_Init>
	SystemClockConfig();
 8000154:	f000 f81c 	bl	8000190 <SystemClockConfig>
	GPIO_Init();
 8000158:	f000 f820 	bl	800019c <GPIO_Init>
	TIMER3_Init();
 800015c:	f000 f848 	bl	80001f0 <TIMER3_Init>

	HAL_TIM_Base_Start(&htimer3);
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <main+0x24>)
 8000162:	f000 fc30 	bl	80009c6 <HAL_TIM_Base_Start>

	//Lets start timer in IT mode
	HAL_TIM_Base_Start_IT(&htimer3);
 8000166:	4802      	ldr	r0, [pc, #8]	; (8000170 <main+0x24>)
 8000168:	f000 fc50 	bl	8000a0c <HAL_TIM_Base_Start_IT>

	while(1);
 800016c:	e7fe      	b.n	800016c <main+0x20>
 800016e:	bf00      	nop
 8000170:	20000028 	.word	0x20000028

08000174 <HAL_TIM_PeriodElapsedCallback>:

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800017c:	2104      	movs	r1, #4
 800017e:	4803      	ldr	r0, [pc, #12]	; (800018c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000180:	f000 fbde 	bl	8000940 <HAL_GPIO_TogglePin>

}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	40010800 	.word	0x40010800

08000190 <SystemClockConfig>:

void SystemClockConfig(void){
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0


}
 8000194:	bf00      	nop
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <GPIO_Init>:

void GPIO_Init(void){
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef ledgpio;

	/* GPIOA clock enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a2:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <GPIO_Init+0x4c>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a10      	ldr	r2, [pc, #64]	; (80001e8 <GPIO_Init+0x4c>)
 80001a8:	f043 0304 	orr.w	r3, r3, #4
 80001ac:	6193      	str	r3, [r2, #24]
 80001ae:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <GPIO_Init+0x4c>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	f003 0304 	and.w	r3, r3, #4
 80001b6:	607b      	str	r3, [r7, #4]
 80001b8:	687b      	ldr	r3, [r7, #4]

    /* High Level GPIO Initialization */
	ledgpio.Pin = GPIO_PIN_2;
 80001ba:	2304      	movs	r3, #4
 80001bc:	60bb      	str	r3, [r7, #8]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80001be:	2301      	movs	r3, #1
 80001c0:	60fb      	str	r3, [r7, #12]
	ledgpio.Pull = GPIO_NOPULL;
 80001c2:	2300      	movs	r3, #0
 80001c4:	613b      	str	r3, [r7, #16]
	ledgpio.Speed = GPIO_SPEED_FREQ_LOW;
 80001c6:	2302      	movs	r3, #2
 80001c8:	617b      	str	r3, [r7, #20]

	/* Init GPIO */
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80001ca:	f107 0308 	add.w	r3, r7, #8
 80001ce:	4619      	mov	r1, r3
 80001d0:	4806      	ldr	r0, [pc, #24]	; (80001ec <GPIO_Init+0x50>)
 80001d2:	f000 fa4b 	bl	800066c <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2104      	movs	r1, #4
 80001da:	4804      	ldr	r0, [pc, #16]	; (80001ec <GPIO_Init+0x50>)
 80001dc:	f000 fb98 	bl	8000910 <HAL_GPIO_WritePin>
}
 80001e0:	bf00      	nop
 80001e2:	3718      	adds	r7, #24
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40010800 	.word	0x40010800

080001f0 <TIMER3_Init>:

void TIMER3_Init(void){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
 	 * This math results in 1600000 and should be placed in TIMx_ARR register, but this value is greater than 65535;
 	 * That's why you should increase or decrease the prescaler value.
 	 * */

	/* Create a time base for 1s with SYSCLK = 8MHz */
	htimer3.Instance = TIM3;
 80001f4:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <TIMER3_Init+0x30>)
 80001f6:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <TIMER3_Init+0x34>)
 80001f8:	601a      	str	r2, [r3, #0]
	htimer3.Init.Prescaler = 300;
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <TIMER3_Init+0x30>)
 80001fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000200:	605a      	str	r2, [r3, #4]
	htimer3.Init.Period = 26578-1;	// The update event happens after one time gap or one time period
 8000202:	4b07      	ldr	r3, [pc, #28]	; (8000220 <TIMER3_Init+0x30>)
 8000204:	f246 72d1 	movw	r2, #26577	; 0x67d1
 8000208:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer3) != HAL_OK){
 800020a:	4805      	ldr	r0, [pc, #20]	; (8000220 <TIMER3_Init+0x30>)
 800020c:	f000 fbb0 	bl	8000970 <HAL_TIM_Base_Init>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <TIMER3_Init+0x2a>
		Error_Handler();
 8000216:	f000 f807 	bl	8000228 <Error_Handler>
	}

}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	20000028 	.word	0x20000028
 8000224:	40000400 	.word	0x40000400

08000228 <Error_Handler>:


void Error_Handler(void){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <Error_Handler+0x4>
	...

08000230 <HAL_MspInit>:
#include "main.h"
#include "stm32f1xx_hal_tim.h"

void HAL_MspInit(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

	//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f9cb 	bl	80005d0 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800023a:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <HAL_MspInit+0x40>)
 800023c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023e:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <HAL_MspInit+0x40>)
 8000240:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000244:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	f06f 000b 	mvn.w	r0, #11
 800024e:	f000 f9ca 	bl	80005e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000252:	2200      	movs	r2, #0
 8000254:	2100      	movs	r1, #0
 8000256:	f06f 000a 	mvn.w	r0, #10
 800025a:	f000 f9c4 	bl	80005e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	f06f 0009 	mvn.w	r0, #9
 8000266:	f000 f9be 	bl	80005e6 <HAL_NVIC_SetPriority>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer){
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM3_CLK_ENABLE();
 800027c:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <HAL_TIM_Base_MspInit+0x38>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <HAL_TIM_Base_MspInit+0x38>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	61d3      	str	r3, [r2, #28]
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <HAL_TIM_Base_MspInit+0x38>)
 800028a:	69db      	ldr	r3, [r3, #28]
 800028c:	f003 0302 	and.w	r3, r3, #2
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000294:	201d      	movs	r0, #29
 8000296:	f000 f9c2 	bl	800061e <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	210f      	movs	r1, #15
 800029e:	201d      	movs	r0, #29
 80002a0:	f000 f9a1 	bl	80005e6 <HAL_NVIC_SetPriority>

}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40021000 	.word	0x40021000

080002b0 <SysTick_Handler>:
#include "main.h"
#include "stm32f1xx_it.h"

extern TIM_HandleTypeDef htimer3;

void SysTick_Handler (void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80002b4:	f000 f8ae 	bl	8000414 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80002b8:	f000 f9cb 	bl	8000652 <HAL_SYSTICK_IRQHandler>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}

080002c0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&htimer3);
 80002c4:	4802      	ldr	r0, [pc, #8]	; (80002d0 <TIM3_IRQHandler+0x10>)
 80002c6:	f000 fbc4 	bl	8000a52 <HAL_TIM_IRQHandler>

}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000028 	.word	0x20000028

080002d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <SystemInit+0x5c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a14      	ldr	r2, [pc, #80]	; (8000330 <SystemInit+0x5c>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <SystemInit+0x5c>)
 80002e6:	685a      	ldr	r2, [r3, #4]
 80002e8:	4911      	ldr	r1, [pc, #68]	; (8000330 <SystemInit+0x5c>)
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <SystemInit+0x60>)
 80002ec:	4013      	ands	r3, r2
 80002ee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <SystemInit+0x5c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <SystemInit+0x5c>)
 80002f6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002fe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000300:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemInit+0x5c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <SystemInit+0x5c>)
 8000306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800030a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <SystemInit+0x5c>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a07      	ldr	r2, [pc, #28]	; (8000330 <SystemInit+0x5c>)
 8000312:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000316:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <SystemInit+0x5c>)
 800031a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800031e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <SystemInit+0x64>)
 8000322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000326:	609a      	str	r2, [r3, #8]
#endif 
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40021000 	.word	0x40021000
 8000334:	f8ff0000 	.word	0xf8ff0000
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800033c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800033e:	e003      	b.n	8000348 <LoopCopyDataInit>

08000340 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000342:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000344:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000346:	3104      	adds	r1, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000348:	480a      	ldr	r0, [pc, #40]	; (8000374 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800034c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800034e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000350:	d3f6      	bcc.n	8000340 <CopyDataInit>
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000354:	e002      	b.n	800035c <LoopFillZerobss>

08000356 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000358:	f842 3b04 	str.w	r3, [r2], #4

0800035c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800035e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000360:	d3f9      	bcc.n	8000356 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000362:	f7ff ffb7 	bl	80002d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000366:	f000 fd0b 	bl	8000d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff feef 	bl	800014c <main>
  bx lr
 800036e:	4770      	bx	lr
  ldr r3, =_sidata
 8000370:	08000de8 	.word	0x08000de8
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000378:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800037c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000380:	2000006c 	.word	0x2000006c

08000384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC1_2_IRQHandler>
	...

08000388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <HAL_Init+0x28>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <HAL_Init+0x28>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000398:	2003      	movs	r0, #3
 800039a:	f000 f919 	bl	80005d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 f808 	bl	80003b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003a4:	f7ff ff44 	bl	8000230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40022000 	.word	0x40022000

080003b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <HAL_InitTick+0x54>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_InitTick+0x58>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4619      	mov	r1, r3
 80003c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 f931 	bl	800063a <HAL_SYSTICK_Config>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003de:	2301      	movs	r3, #1
 80003e0:	e00e      	b.n	8000400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b0f      	cmp	r3, #15
 80003e6:	d80a      	bhi.n	80003fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003e8:	2200      	movs	r2, #0
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	f04f 30ff 	mov.w	r0, #4294967295
 80003f0:	f000 f8f9 	bl	80005e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <HAL_InitTick+0x5c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003fa:	2300      	movs	r3, #0
 80003fc:	e000      	b.n	8000400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000000 	.word	0x20000000
 800040c:	20000008 	.word	0x20000008
 8000410:	20000004 	.word	0x20000004

08000414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_IncTick+0x1c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <HAL_IncTick+0x20>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a03      	ldr	r2, [pc, #12]	; (8000434 <HAL_IncTick+0x20>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000008 	.word	0x20000008
 8000434:	20000068 	.word	0x20000068

08000438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f003 0307 	and.w	r3, r3, #7
 8000446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <__NVIC_SetPriorityGrouping+0x44>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800044e:	68ba      	ldr	r2, [r7, #8]
 8000450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000454:	4013      	ands	r3, r2
 8000456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800046a:	4a04      	ldr	r2, [pc, #16]	; (800047c <__NVIC_SetPriorityGrouping+0x44>)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	60d3      	str	r3, [r2, #12]
}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	e000ed00 	.word	0xe000ed00

08000480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <__NVIC_GetPriorityGrouping+0x18>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	0a1b      	lsrs	r3, r3, #8
 800048a:	f003 0307 	and.w	r3, r3, #7
}
 800048e:	4618      	mov	r0, r3
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	db0b      	blt.n	80004c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f003 021f 	and.w	r2, r3, #31
 80004b4:	4906      	ldr	r1, [pc, #24]	; (80004d0 <__NVIC_EnableIRQ+0x34>)
 80004b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ba:	095b      	lsrs	r3, r3, #5
 80004bc:	2001      	movs	r0, #1
 80004be:	fa00 f202 	lsl.w	r2, r0, r2
 80004c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	e000e100 	.word	0xe000e100

080004d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	6039      	str	r1, [r7, #0]
 80004de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	db0a      	blt.n	80004fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	490c      	ldr	r1, [pc, #48]	; (8000520 <__NVIC_SetPriority+0x4c>)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	0112      	lsls	r2, r2, #4
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	440b      	add	r3, r1
 80004f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004fc:	e00a      	b.n	8000514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4908      	ldr	r1, [pc, #32]	; (8000524 <__NVIC_SetPriority+0x50>)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	f003 030f 	and.w	r3, r3, #15
 800050a:	3b04      	subs	r3, #4
 800050c:	0112      	lsls	r2, r2, #4
 800050e:	b2d2      	uxtb	r2, r2
 8000510:	440b      	add	r3, r1
 8000512:	761a      	strb	r2, [r3, #24]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000e100 	.word	0xe000e100
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000528:	b480      	push	{r7}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f003 0307 	and.w	r3, r3, #7
 800053a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	f1c3 0307 	rsb	r3, r3, #7
 8000542:	2b04      	cmp	r3, #4
 8000544:	bf28      	it	cs
 8000546:	2304      	movcs	r3, #4
 8000548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	3304      	adds	r3, #4
 800054e:	2b06      	cmp	r3, #6
 8000550:	d902      	bls.n	8000558 <NVIC_EncodePriority+0x30>
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	3b03      	subs	r3, #3
 8000556:	e000      	b.n	800055a <NVIC_EncodePriority+0x32>
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800055c:	f04f 32ff 	mov.w	r2, #4294967295
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	43da      	mvns	r2, r3
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	401a      	ands	r2, r3
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000570:	f04f 31ff 	mov.w	r1, #4294967295
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fa01 f303 	lsl.w	r3, r1, r3
 800057a:	43d9      	mvns	r1, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000580:	4313      	orrs	r3, r2
         );
}
 8000582:	4618      	mov	r0, r3
 8000584:	3724      	adds	r7, #36	; 0x24
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3b01      	subs	r3, #1
 8000598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800059c:	d301      	bcc.n	80005a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800059e:	2301      	movs	r3, #1
 80005a0:	e00f      	b.n	80005c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <SysTick_Config+0x40>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005aa:	210f      	movs	r1, #15
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f7ff ff90 	bl	80004d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <SysTick_Config+0x40>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <SysTick_Config+0x40>)
 80005bc:	2207      	movs	r2, #7
 80005be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	e000e010 	.word	0xe000e010

080005d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ff2d 	bl	8000438 <__NVIC_SetPriorityGrouping>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	4603      	mov	r3, r0
 80005ee:	60b9      	str	r1, [r7, #8]
 80005f0:	607a      	str	r2, [r7, #4]
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005f8:	f7ff ff42 	bl	8000480 <__NVIC_GetPriorityGrouping>
 80005fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	68b9      	ldr	r1, [r7, #8]
 8000602:	6978      	ldr	r0, [r7, #20]
 8000604:	f7ff ff90 	bl	8000528 <NVIC_EncodePriority>
 8000608:	4602      	mov	r2, r0
 800060a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800060e:	4611      	mov	r1, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff5f 	bl	80004d4 <__NVIC_SetPriority>
}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	4603      	mov	r3, r0
 8000626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff35 	bl	800049c <__NVIC_EnableIRQ>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ffa2 	bl	800058c <SysTick_Config>
 8000648:	4603      	mov	r3, r0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000656:	f000 f802 	bl	800065e <HAL_SYSTICK_Callback>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}

0800065e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
	...

0800066c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800066c:	b480      	push	{r7}
 800066e:	b08b      	sub	sp, #44	; 0x2c
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800067e:	e121      	b.n	80008c4 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000680:	2201      	movs	r2, #1
 8000682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	69fa      	ldr	r2, [r7, #28]
 8000690:	4013      	ands	r3, r2
 8000692:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000694:	69ba      	ldr	r2, [r7, #24]
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	429a      	cmp	r2, r3
 800069a:	f040 8110 	bne.w	80008be <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	2b12      	cmp	r3, #18
 80006a4:	d034      	beq.n	8000710 <HAL_GPIO_Init+0xa4>
 80006a6:	2b12      	cmp	r3, #18
 80006a8:	d80d      	bhi.n	80006c6 <HAL_GPIO_Init+0x5a>
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d02b      	beq.n	8000706 <HAL_GPIO_Init+0x9a>
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d804      	bhi.n	80006bc <HAL_GPIO_Init+0x50>
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d031      	beq.n	800071a <HAL_GPIO_Init+0xae>
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d01c      	beq.n	80006f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80006ba:	e048      	b.n	800074e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d043      	beq.n	8000748 <HAL_GPIO_Init+0xdc>
 80006c0:	2b11      	cmp	r3, #17
 80006c2:	d01b      	beq.n	80006fc <HAL_GPIO_Init+0x90>
          break;
 80006c4:	e043      	b.n	800074e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80006c6:	4a86      	ldr	r2, [pc, #536]	; (80008e0 <HAL_GPIO_Init+0x274>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d026      	beq.n	800071a <HAL_GPIO_Init+0xae>
 80006cc:	4a84      	ldr	r2, [pc, #528]	; (80008e0 <HAL_GPIO_Init+0x274>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d806      	bhi.n	80006e0 <HAL_GPIO_Init+0x74>
 80006d2:	4a84      	ldr	r2, [pc, #528]	; (80008e4 <HAL_GPIO_Init+0x278>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d020      	beq.n	800071a <HAL_GPIO_Init+0xae>
 80006d8:	4a83      	ldr	r2, [pc, #524]	; (80008e8 <HAL_GPIO_Init+0x27c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d01d      	beq.n	800071a <HAL_GPIO_Init+0xae>
          break;
 80006de:	e036      	b.n	800074e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80006e0:	4a82      	ldr	r2, [pc, #520]	; (80008ec <HAL_GPIO_Init+0x280>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d019      	beq.n	800071a <HAL_GPIO_Init+0xae>
 80006e6:	4a82      	ldr	r2, [pc, #520]	; (80008f0 <HAL_GPIO_Init+0x284>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d016      	beq.n	800071a <HAL_GPIO_Init+0xae>
 80006ec:	4a81      	ldr	r2, [pc, #516]	; (80008f4 <HAL_GPIO_Init+0x288>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d013      	beq.n	800071a <HAL_GPIO_Init+0xae>
          break;
 80006f2:	e02c      	b.n	800074e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	623b      	str	r3, [r7, #32]
          break;
 80006fa:	e028      	b.n	800074e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	3304      	adds	r3, #4
 8000702:	623b      	str	r3, [r7, #32]
          break;
 8000704:	e023      	b.n	800074e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	3308      	adds	r3, #8
 800070c:	623b      	str	r3, [r7, #32]
          break;
 800070e:	e01e      	b.n	800074e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	330c      	adds	r3, #12
 8000716:	623b      	str	r3, [r7, #32]
          break;
 8000718:	e019      	b.n	800074e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d102      	bne.n	8000728 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000722:	2304      	movs	r3, #4
 8000724:	623b      	str	r3, [r7, #32]
          break;
 8000726:	e012      	b.n	800074e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d105      	bne.n	800073c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000730:	2308      	movs	r3, #8
 8000732:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	69fa      	ldr	r2, [r7, #28]
 8000738:	611a      	str	r2, [r3, #16]
          break;
 800073a:	e008      	b.n	800074e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800073c:	2308      	movs	r3, #8
 800073e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	69fa      	ldr	r2, [r7, #28]
 8000744:	615a      	str	r2, [r3, #20]
          break;
 8000746:	e002      	b.n	800074e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
          break;
 800074c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	2bff      	cmp	r3, #255	; 0xff
 8000752:	d801      	bhi.n	8000758 <HAL_GPIO_Init+0xec>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	e001      	b.n	800075c <HAL_GPIO_Init+0xf0>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3304      	adds	r3, #4
 800075c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	2bff      	cmp	r3, #255	; 0xff
 8000762:	d802      	bhi.n	800076a <HAL_GPIO_Init+0xfe>
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	e002      	b.n	8000770 <HAL_GPIO_Init+0x104>
 800076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076c:	3b08      	subs	r3, #8
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	210f      	movs	r1, #15
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43db      	mvns	r3, r3
 8000780:	401a      	ands	r2, r3
 8000782:	6a39      	ldr	r1, [r7, #32]
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	431a      	orrs	r2, r3
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000798:	2b00      	cmp	r3, #0
 800079a:	f000 8090 	beq.w	80008be <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800079e:	4b56      	ldr	r3, [pc, #344]	; (80008f8 <HAL_GPIO_Init+0x28c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a55      	ldr	r2, [pc, #340]	; (80008f8 <HAL_GPIO_Init+0x28c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <HAL_GPIO_Init+0x28c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80007b6:	4a51      	ldr	r2, [pc, #324]	; (80008fc <HAL_GPIO_Init+0x290>)
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	089b      	lsrs	r3, r3, #2
 80007bc:	3302      	adds	r3, #2
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	220f      	movs	r2, #15
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43db      	mvns	r3, r3
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a48      	ldr	r2, [pc, #288]	; (8000900 <HAL_GPIO_Init+0x294>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d00d      	beq.n	80007fe <HAL_GPIO_Init+0x192>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a47      	ldr	r2, [pc, #284]	; (8000904 <HAL_GPIO_Init+0x298>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d007      	beq.n	80007fa <HAL_GPIO_Init+0x18e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a46      	ldr	r2, [pc, #280]	; (8000908 <HAL_GPIO_Init+0x29c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_GPIO_Init+0x18a>
 80007f2:	2302      	movs	r3, #2
 80007f4:	e004      	b.n	8000800 <HAL_GPIO_Init+0x194>
 80007f6:	2303      	movs	r3, #3
 80007f8:	e002      	b.n	8000800 <HAL_GPIO_Init+0x194>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <HAL_GPIO_Init+0x194>
 80007fe:	2300      	movs	r3, #0
 8000800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000802:	f002 0203 	and.w	r2, r2, #3
 8000806:	0092      	lsls	r2, r2, #2
 8000808:	4093      	lsls	r3, r2
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	4313      	orrs	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000810:	493a      	ldr	r1, [pc, #232]	; (80008fc <HAL_GPIO_Init+0x290>)
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	3302      	adds	r3, #2
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d006      	beq.n	8000838 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800082a:	4b38      	ldr	r3, [pc, #224]	; (800090c <HAL_GPIO_Init+0x2a0>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4937      	ldr	r1, [pc, #220]	; (800090c <HAL_GPIO_Init+0x2a0>)
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	4313      	orrs	r3, r2
 8000834:	600b      	str	r3, [r1, #0]
 8000836:	e006      	b.n	8000846 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000838:	4b34      	ldr	r3, [pc, #208]	; (800090c <HAL_GPIO_Init+0x2a0>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	43db      	mvns	r3, r3
 8000840:	4932      	ldr	r1, [pc, #200]	; (800090c <HAL_GPIO_Init+0x2a0>)
 8000842:	4013      	ands	r3, r2
 8000844:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <HAL_GPIO_Init+0x2a0>)
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	492d      	ldr	r1, [pc, #180]	; (800090c <HAL_GPIO_Init+0x2a0>)
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	4313      	orrs	r3, r2
 800085c:	604b      	str	r3, [r1, #4]
 800085e:	e006      	b.n	800086e <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <HAL_GPIO_Init+0x2a0>)
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	43db      	mvns	r3, r3
 8000868:	4928      	ldr	r1, [pc, #160]	; (800090c <HAL_GPIO_Init+0x2a0>)
 800086a:	4013      	ands	r3, r2
 800086c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000876:	2b00      	cmp	r3, #0
 8000878:	d006      	beq.n	8000888 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <HAL_GPIO_Init+0x2a0>)
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	4923      	ldr	r1, [pc, #140]	; (800090c <HAL_GPIO_Init+0x2a0>)
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	4313      	orrs	r3, r2
 8000884:	608b      	str	r3, [r1, #8]
 8000886:	e006      	b.n	8000896 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_GPIO_Init+0x2a0>)
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	43db      	mvns	r3, r3
 8000890:	491e      	ldr	r1, [pc, #120]	; (800090c <HAL_GPIO_Init+0x2a0>)
 8000892:	4013      	ands	r3, r2
 8000894:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d006      	beq.n	80008b0 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <HAL_GPIO_Init+0x2a0>)
 80008a4:	68da      	ldr	r2, [r3, #12]
 80008a6:	4919      	ldr	r1, [pc, #100]	; (800090c <HAL_GPIO_Init+0x2a0>)
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60cb      	str	r3, [r1, #12]
 80008ae:	e006      	b.n	80008be <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_GPIO_Init+0x2a0>)
 80008b2:	68da      	ldr	r2, [r3, #12]
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	43db      	mvns	r3, r3
 80008b8:	4914      	ldr	r1, [pc, #80]	; (800090c <HAL_GPIO_Init+0x2a0>)
 80008ba:	4013      	ands	r3, r2
 80008bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	3301      	adds	r3, #1
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ca:	fa22 f303 	lsr.w	r3, r2, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f47f aed6 	bne.w	8000680 <HAL_GPIO_Init+0x14>
  }
}
 80008d4:	bf00      	nop
 80008d6:	372c      	adds	r7, #44	; 0x2c
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	10210000 	.word	0x10210000
 80008e4:	10110000 	.word	0x10110000
 80008e8:	10120000 	.word	0x10120000
 80008ec:	10310000 	.word	0x10310000
 80008f0:	10320000 	.word	0x10320000
 80008f4:	10220000 	.word	0x10220000
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010000 	.word	0x40010000
 8000900:	40010800 	.word	0x40010800
 8000904:	40010c00 	.word	0x40010c00
 8000908:	40011000 	.word	0x40011000
 800090c:	40010400 	.word	0x40010400

08000910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	807b      	strh	r3, [r7, #2]
 800091c:	4613      	mov	r3, r2
 800091e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000920:	787b      	ldrb	r3, [r7, #1]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d003      	beq.n	800092e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000926:	887a      	ldrh	r2, [r7, #2]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800092c:	e003      	b.n	8000936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800092e:	887b      	ldrh	r3, [r7, #2]
 8000930:	041a      	lsls	r2, r3, #16
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	611a      	str	r2, [r3, #16]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	887b      	ldrh	r3, [r7, #2]
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d003      	beq.n	8000960 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000958:	887a      	ldrh	r2, [r7, #2]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800095e:	e002      	b.n	8000966 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000960:	887a      	ldrh	r2, [r7, #2]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	611a      	str	r2, [r3, #16]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e01d      	b.n	80009be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d106      	bne.n	800099c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fc6c 	bl	8000274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2202      	movs	r2, #2
 80009a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3304      	adds	r3, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4610      	mov	r0, r2
 80009b0:	f000 f97c 	bl	8000cac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2201      	movs	r2, #1
 80009b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b085      	sub	sp, #20
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2202      	movs	r2, #2
 80009d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f003 0307 	and.w	r3, r3, #7
 80009e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b06      	cmp	r3, #6
 80009e6:	d007      	beq.n	80009f8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0201 	orr.w	r2, r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2201      	movs	r2, #1
 80009fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0201 	orr.w	r2, r2, #1
 8000a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d007      	beq.n	8000a46 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f042 0201 	orr.w	r2, r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d122      	bne.n	8000aae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d11b      	bne.n	8000aae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f06f 0202 	mvn.w	r2, #2
 8000a7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f8ed 	bl	8000c74 <HAL_TIM_IC_CaptureCallback>
 8000a9a:	e005      	b.n	8000aa8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f8e0 	bl	8000c62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f8ef 	bl	8000c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d122      	bne.n	8000b02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d11b      	bne.n	8000b02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f06f 0204 	mvn.w	r2, #4
 8000ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f8c3 	bl	8000c74 <HAL_TIM_IC_CaptureCallback>
 8000aee:	e005      	b.n	8000afc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f8b6 	bl	8000c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f8c5 	bl	8000c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	2b08      	cmp	r3, #8
 8000b0e:	d122      	bne.n	8000b56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	2b08      	cmp	r3, #8
 8000b1c:	d11b      	bne.n	8000b56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f06f 0208 	mvn.w	r2, #8
 8000b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f899 	bl	8000c74 <HAL_TIM_IC_CaptureCallback>
 8000b42:	e005      	b.n	8000b50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f88c 	bl	8000c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f89b 	bl	8000c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	f003 0310 	and.w	r3, r3, #16
 8000b60:	2b10      	cmp	r3, #16
 8000b62:	d122      	bne.n	8000baa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	2b10      	cmp	r3, #16
 8000b70:	d11b      	bne.n	8000baa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f06f 0210 	mvn.w	r2, #16
 8000b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2208      	movs	r2, #8
 8000b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f86f 	bl	8000c74 <HAL_TIM_IC_CaptureCallback>
 8000b96:	e005      	b.n	8000ba4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f000 f862 	bl	8000c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 f871 	bl	8000c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d10e      	bne.n	8000bd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d107      	bne.n	8000bd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f06f 0201 	mvn.w	r2, #1
 8000bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff facf 	bl	8000174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be0:	2b80      	cmp	r3, #128	; 0x80
 8000be2:	d10e      	bne.n	8000c02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bee:	2b80      	cmp	r3, #128	; 0x80
 8000bf0:	d107      	bne.n	8000c02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f8b6 	bl	8000d6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0c:	2b40      	cmp	r3, #64	; 0x40
 8000c0e:	d10e      	bne.n	8000c2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1a:	2b40      	cmp	r3, #64	; 0x40
 8000c1c:	d107      	bne.n	8000c2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f835 	bl	8000c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	f003 0320 	and.w	r3, r3, #32
 8000c38:	2b20      	cmp	r3, #32
 8000c3a:	d10e      	bne.n	8000c5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	f003 0320 	and.w	r3, r3, #32
 8000c46:	2b20      	cmp	r3, #32
 8000c48:	d107      	bne.n	8000c5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f06f 0220 	mvn.w	r2, #32
 8000c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 f881 	bl	8000d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
	...

08000cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a25      	ldr	r2, [pc, #148]	; (8000d54 <TIM_Base_SetConfig+0xa8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d007      	beq.n	8000cd4 <TIM_Base_SetConfig+0x28>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cca:	d003      	beq.n	8000cd4 <TIM_Base_SetConfig+0x28>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a22      	ldr	r2, [pc, #136]	; (8000d58 <TIM_Base_SetConfig+0xac>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d108      	bne.n	8000ce6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a1a      	ldr	r2, [pc, #104]	; (8000d54 <TIM_Base_SetConfig+0xa8>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d007      	beq.n	8000cfe <TIM_Base_SetConfig+0x52>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf4:	d003      	beq.n	8000cfe <TIM_Base_SetConfig+0x52>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <TIM_Base_SetConfig+0xac>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d108      	bne.n	8000d10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <TIM_Base_SetConfig+0xa8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d103      	bne.n	8000d44 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	615a      	str	r2, [r3, #20]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40012c00 	.word	0x40012c00
 8000d58:	40000400 	.word	0x40000400

08000d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <__libc_init_array>:
 8000d80:	b570      	push	{r4, r5, r6, lr}
 8000d82:	2500      	movs	r5, #0
 8000d84:	4e0c      	ldr	r6, [pc, #48]	; (8000db8 <__libc_init_array+0x38>)
 8000d86:	4c0d      	ldr	r4, [pc, #52]	; (8000dbc <__libc_init_array+0x3c>)
 8000d88:	1ba4      	subs	r4, r4, r6
 8000d8a:	10a4      	asrs	r4, r4, #2
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	d109      	bne.n	8000da4 <__libc_init_array+0x24>
 8000d90:	f000 f81a 	bl	8000dc8 <_init>
 8000d94:	2500      	movs	r5, #0
 8000d96:	4e0a      	ldr	r6, [pc, #40]	; (8000dc0 <__libc_init_array+0x40>)
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <__libc_init_array+0x44>)
 8000d9a:	1ba4      	subs	r4, r4, r6
 8000d9c:	10a4      	asrs	r4, r4, #2
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d105      	bne.n	8000dae <__libc_init_array+0x2e>
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000da8:	4798      	blx	r3
 8000daa:	3501      	adds	r5, #1
 8000dac:	e7ee      	b.n	8000d8c <__libc_init_array+0xc>
 8000dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db2:	4798      	blx	r3
 8000db4:	3501      	adds	r5, #1
 8000db6:	e7f2      	b.n	8000d9e <__libc_init_array+0x1e>
 8000db8:	08000de0 	.word	0x08000de0
 8000dbc:	08000de0 	.word	0x08000de0
 8000dc0:	08000de0 	.word	0x08000de0
 8000dc4:	08000de4 	.word	0x08000de4

08000dc8 <_init>:
 8000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dca:	bf00      	nop
 8000dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dce:	bc08      	pop	{r3}
 8000dd0:	469e      	mov	lr, r3
 8000dd2:	4770      	bx	lr

08000dd4 <_fini>:
 8000dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd6:	bf00      	nop
 8000dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dda:	bc08      	pop	{r3}
 8000ddc:	469e      	mov	lr, r3
 8000dde:	4770      	bx	lr
