
SLEEP-ON-EXIT_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dac  08002dac  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002db4  08002db4  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000034  08002df0  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002df0  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c42e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c28  00000000  00000000  0002c492  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  0002e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00021b9f  00000000  00000000  0002ed40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009b66  00000000  00000000  000508df  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ce17d  00000000  00000000  0005a445  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001285c2  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b80  00000000  00000000  00128640  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000033ac  00000000  00000000  001291c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000034 	.word	0x20000034
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002d7c 	.word	0x08002d7c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000038 	.word	0x20000038
 8000200:	08002d7c 	.word	0x08002d7c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
 * Avg. current consumption: 1.86mA
 * Application life = 500mA/1.86mA = 269Hrs (~11 days)
 *
 * */

int main(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

	HAL_Init();
 8000518:	f000 fa56 	bl	80009c8 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 800051c:	2032      	movs	r0, #50	; 0x32
 800051e:	f000 f815 	bl	800054c <SystemClock_Config_HSE>

	GPIO_Init();
 8000522:	f000 f8bf 	bl	80006a4 <GPIO_Init>

	//HAL_SuspendTick();

	UART2_Init();
 8000526:	f000 f8ed 	bl	8000704 <UART2_Init>

	TIMER6_Init();
 800052a:	f000 f911 	bl	8000750 <TIMER6_Init>

	GPIO_AnalogConfig();
 800052e:	f000 f8a3 	bl	8000678 <GPIO_AnalogConfig>

	//SCB->SCR |= (1 << 1); // See on Generic user guide
	HAL_PWR_EnableSleepOnExit(); // Enter sleep mode, on return from an ISR.
 8000532:	f000 fdc5 	bl	80010c0 <HAL_PWR_EnableSleepOnExit>

	/* lets start with fresh Status register of Timer to avoid any spurious interrupts */
    TIM6->SR = 0;
 8000536:	4b03      	ldr	r3, [pc, #12]	; (8000544 <main+0x30>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]

	//Lets start the timer in interrupt mode
	HAL_TIM_Base_Start_IT(&htimer6);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <main+0x34>)
 800053e:	f001 fb0e 	bl	8001b5e <HAL_TIM_Base_Start_IT>

	while(1);
 8000542:	e7fe      	b.n	8000542 <main+0x2e>
 8000544:	40001000 	.word	0x40001000
 8000548:	20000050 	.word	0x20000050

0800054c <SystemClock_Config_HSE>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq){
 800054c:	b580      	push	{r7, lr}
 800054e:	b096      	sub	sp, #88	; 0x58
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 8000556:	2300      	movs	r3, #0
 8000558:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 800055c:	2301      	movs	r3, #1
 800055e:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	623b      	str	r3, [r7, #32]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq){
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b54      	cmp	r3, #84	; 0x54
 8000574:	d01d      	beq.n	80005b2 <SystemClock_Config_HSE+0x66>
 8000576:	2b78      	cmp	r3, #120	; 0x78
 8000578:	d034      	beq.n	80005e4 <SystemClock_Config_HSE+0x98>
 800057a:	2b32      	cmp	r3, #50	; 0x32
 800057c:	d000      	beq.n	8000580 <SystemClock_Config_HSE+0x34>

	    break;

	default:

		return ;
 800057e:	e076      	b.n	800066e <SystemClock_Config_HSE+0x122>
		Osc_Init.PLL.PLLM = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
		Osc_Init.PLL.PLLN = 50;
 8000584:	2332      	movs	r3, #50	; 0x32
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
		Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
		Osc_Init.PLL.PLLQ = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
		Osc_Init.PLL.PLLR = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
		Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60bb      	str	r3, [r7, #8]
		Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	60fb      	str	r3, [r7, #12]
		Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
		Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a4:	617b      	str	r3, [r7, #20]
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
		flash_latency = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 80005b0:	e032      	b.n	8000618 <SystemClock_Config_HSE+0xcc>
		Osc_Init.PLL.PLLM = 4;
 80005b2:	2304      	movs	r3, #4
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		Osc_Init.PLL.PLLN = 84;
 80005b6:	2354      	movs	r3, #84	; 0x54
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
		Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
		Osc_Init.PLL.PLLQ = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
		Osc_Init.PLL.PLLR = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60bb      	str	r3, [r7, #8]
		Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	60fb      	str	r3, [r7, #12]
		Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
		Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	617b      	str	r3, [r7, #20]
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
        flash_latency = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 80005e2:	e019      	b.n	8000618 <SystemClock_Config_HSE+0xcc>
		Osc_Init.PLL.PLLM = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
		Osc_Init.PLL.PLLN = 120;
 80005e8:	2378      	movs	r3, #120	; 0x78
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
		Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
		Osc_Init.PLL.PLLQ = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
		Osc_Init.PLL.PLLR = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60bb      	str	r3, [r7, #8]
		Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
		Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
		Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	617b      	str	r3, [r7, #20]
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61bb      	str	r3, [r7, #24]
        flash_latency = 3;
 8000610:	2303      	movs	r3, #3
 8000612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    break;
 8000616:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&Osc_Init) != HAL_OK){
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f819 	bl	8001654 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config_HSE+0xe0>
		Error_handler();
 8000628:	f000 f8de 	bl	80007e8 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK){
 800062c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	4611      	mov	r1, r2
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fd52 	bl	80010e0 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config_HSE+0xfa>
		Error_handler();
 8000642:	f000 f8d1 	bl	80007e8 <Error_handler>
	}

	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000646:	f000 fe31 	bl	80012ac <HAL_RCC_GetHCLKFreq>
 800064a:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 800064c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800064e:	4a09      	ldr	r2, [pc, #36]	; (8000674 <SystemClock_Config_HSE+0x128>)
 8000650:	fba2 2303 	umull	r2, r3, r2, r3
 8000654:	099b      	lsrs	r3, r3, #6
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fb2d 	bl	8000cb6 <HAL_SYSTICK_Config>

	/**Configure the Systick*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800065c:	2004      	movs	r0, #4
 800065e:	f000 fb37 	bl	8000cd0 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	f04f 30ff 	mov.w	r0, #4294967295
 800066a:	f000 fafa 	bl	8000c62 <HAL_NVIC_SetPriority>

}
 800066e:	3758      	adds	r7, #88	; 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	10624dd3 	.word	0x10624dd3

08000678 <GPIO_AnalogConfig>:

void GPIO_AnalogConfig(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GpioA;

	uint32_t gpio_pins = GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_4 | 		\
 800067e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8000682:	617b      	str	r3, [r7, #20]
						 GPIO_PIN_5 | GPIO_PIN_6 |GPIO_PIN_7 |		\
						 GPIO_PIN_8 | GPIO_PIN_9 |GPIO_PIN_10 |		\
						 GPIO_PIN_11 | GPIO_PIN_12 |GPIO_PIN_13 | 	\
						 GPIO_PIN_14 | GPIO_PIN_15;

	GpioA.Pin = gpio_pins;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	603b      	str	r3, [r7, #0]
	GpioA.Mode = GPIO_MODE_ANALOG;
 8000688:	2303      	movs	r3, #3
 800068a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GpioA);
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <GPIO_AnalogConfig+0x28>)
 8000692:	f000 fb69 	bl	8000d68 <HAL_GPIO_Init>
}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40020000 	.word	0x40020000

080006a4 <GPIO_Init>:

void GPIO_Init(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <GPIO_Init+0x58>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <GPIO_Init+0x58>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <GPIO_Init+0x58>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef ledgpio ;
	ledgpio.Pin = GPIO_PIN_5;
 80006c6:	2320      	movs	r3, #32
 80006c8:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <GPIO_Init+0x5c>)
 80006d8:	f000 fb46 	bl	8000d68 <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_12;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <GPIO_Init+0x5c>)
 80006f0:	f000 fb3a 	bl	8000d68 <HAL_GPIO_Init>

}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000

08000704 <UART2_Init>:

void UART2_Init(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <UART2_Init+0x44>)
 800070a:	4a10      	ldr	r2, [pc, #64]	; (800074c <UART2_Init+0x48>)
 800070c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 921600;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <UART2_Init+0x44>)
 8000710:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000714:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <UART2_Init+0x44>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <UART2_Init+0x44>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <UART2_Init+0x44>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <UART2_Init+0x44>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <UART2_Init+0x44>)
 8000730:	2208      	movs	r2, #8
 8000732:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <UART2_Init+0x44>)
 8000736:	f001 fc1b 	bl	8001f70 <HAL_UART_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <UART2_Init+0x40>
		//There is a problem
		Error_handler();
 8000740:	f000 f852 	bl	80007e8 <Error_handler>
	}
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000090 	.word	0x20000090
 800074c:	40004400 	.word	0x40004400

08000750 <TIMER6_Init>:

void TIMER6_Init(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

	htimer6.Instance = TIM6;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <TIMER6_Init+0x2c>)
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <TIMER6_Init+0x30>)
 8000758:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 4999;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <TIMER6_Init+0x2c>)
 800075c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000760:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 100-1;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <TIMER6_Init+0x2c>)
 8000764:	2263      	movs	r2, #99	; 0x63
 8000766:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer6) != HAL_OK){
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <TIMER6_Init+0x2c>)
 800076a:	f001 f9cd 	bl	8001b08 <HAL_TIM_Base_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <TIMER6_Init+0x28>
		Error_handler();
 8000774:	f000 f838 	bl	80007e8 <Error_handler>
	}
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000050 	.word	0x20000050
 8000780:	40001000 	.word	0x40001000

08000784 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

	if(HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY) != HAL_OK){
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800078e:	f7ff fd39 	bl	8000204 <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	b29a      	uxth	r2, r3
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	4906      	ldr	r1, [pc, #24]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800079c:	4806      	ldr	r0, [pc, #24]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800079e:	f001 fc34 	bl	800200a <HAL_UART_Transmit>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <HAL_TIM_PeriodElapsedCallback+0x28>
		Error_handler();
 80007a8:	f000 f81e 	bl	80007e8 <Error_handler>
	 }
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000090 	.word	0x20000090

080007bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <HAL_UART_TxCpltCallback+0x28>)
 80007cc:	f000 fc5e 	bl	800108c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <HAL_UART_TxCpltCallback+0x28>)
 80007d8:	f000 fc58 	bl	800108c <HAL_GPIO_WritePin>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40020000 	.word	0x40020000

080007e8 <Error_handler>:

void Error_handler(void){
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	while(1);
 80007ec:	e7fe      	b.n	80007ec <Error_handler+0x4>
	...

080007f0 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void HAL_MspInit(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

	//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 fa29 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x40>)
 80007fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <HAL_MspInit+0x40>)
 8000800:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000804:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	f06f 000b 	mvn.w	r0, #11
 800080e:	f000 fa28 	bl	8000c62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	f06f 000a 	mvn.w	r0, #10
 800081a:	f000 fa22 	bl	8000c62 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	f06f 0009 	mvn.w	r0, #9
 8000826:	f000 fa1c 	bl	8000c62 <HAL_NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer){
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_TIM_Base_MspInit+0x3c>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_TIM_Base_MspInit+0x3c>)
 8000846:	f043 0310 	orr.w	r3, r3, #16
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_TIM_Base_MspInit+0x3c>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 0310 	and.w	r3, r3, #16
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000858:	2036      	movs	r0, #54	; 0x36
 800085a:	f000 fa1e 	bl	8000c9a <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,0,0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2036      	movs	r0, #54	; 0x36
 8000864:	f000 f9fd 	bl	8000c62 <HAL_NVIC_SetPriority>

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral

	 __HAL_RCC_USART2_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <HAL_UART_MspInit+0x94>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a20      	ldr	r2, [pc, #128]	; (8000908 <HAL_UART_MspInit+0x94>)
 8000886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <HAL_UART_MspInit+0x94>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_USART2_CLK_SLEEP_DISABLE(); // USART2 clock disabled during Sleep mode
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <HAL_UART_MspInit+0x94>)
 800089a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089c:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <HAL_UART_MspInit+0x94>)
 800089e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80008a2:	6613      	str	r3, [r2, #96]	; 0x60

	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_UART_MspInit+0x94>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	4a16      	ldr	r2, [pc, #88]	; (8000908 <HAL_UART_MspInit+0x94>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6313      	str	r3, [r2, #48]	; 0x30
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_UART_MspInit+0x94>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80008c0:	2304      	movs	r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80008d0:	2307      	movs	r3, #7
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <HAL_UART_MspInit+0x98>)
 80008dc:	f000 fa44 	bl	8000d68 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80008e0:	2308      	movs	r3, #8
 80008e2:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <HAL_UART_MspInit+0x98>)
 80008ec:	f000 fa3c 	bl	8000d68 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008f0:	2026      	movs	r0, #38	; 0x26
 80008f2:	f000 f9d2 	bl	8000c9a <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	210f      	movs	r1, #15
 80008fa:	2026      	movs	r0, #38	; 0x26
 80008fc:	f000 f9b1 	bl	8000c62 <HAL_NVIC_SetPriority>

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000

08000910 <SysTick_Handler>:
#include "main.h"

extern TIM_HandleTypeDef htimer6;
extern UART_HandleTypeDef huart2;

void SysTick_Handler (void){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000914:	f000 f8aa 	bl	8000a6c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000918:	f000 f9f6 	bl	8000d08 <HAL_SYSTICK_IRQHandler>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
	HAL_TIM_IRQHandler(&htimer6);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <TIM6_DAC_IRQHandler+0x10>)
 8000926:	f001 f93e 	bl	8001ba6 <HAL_TIM_IRQHandler>
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000050 	.word	0x20000050

08000934 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <USART2_IRQHandler+0x10>)
 800093a:	f001 fbff 	bl	800213c <HAL_UART_IRQHandler>
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000090 	.word	0x20000090

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <SystemInit+0x28>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <SystemInit+0x28>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SystemInit+0x28>)
 800095e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000962:	609a      	str	r2, [r3, #8]
#endif
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000978:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800097a:	e003      	b.n	8000984 <LoopCopyDataInit>

0800097c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800097e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000980:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000982:	3104      	adds	r1, #4

08000984 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000988:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800098a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800098c:	d3f6      	bcc.n	800097c <CopyDataInit>
  ldr  r2, =_sbss
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000990:	e002      	b.n	8000998 <LoopFillZerobss>

08000992 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000992:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000994:	f842 3b04 	str.w	r3, [r2], #4

08000998 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800099a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800099c:	d3f9      	bcc.n	8000992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800099e:	f7ff ffd3 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a2:	f002 f9c7 	bl	8002d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a6:	f7ff fdb5 	bl	8000514 <main>
  bx  lr    
 80009aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009b0:	08002dbc 	.word	0x08002dbc
  ldr  r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009b8:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 80009bc:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 80009c0:	200000d4 	.word	0x200000d4

080009c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <HAL_Init+0x40>)
 80009d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_Init+0x40>)
 80009de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x40>)
 80009ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f92b 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff fef8 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f943 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f90b 	bl	8000c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000028 	.word	0x20000028
 8000a64:	20000030 	.word	0x20000030
 8000a68:	2000002c 	.word	0x2000002c

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000030 	.word	0x20000030
 8000a90:	200000d0 	.word	0x200000d0

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200000d0 	.word	0x200000d0

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <__NVIC_EnableIRQ+0x38>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c18:	d301      	bcc.n	8000c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <SysTick_Config+0x40>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c26:	210f      	movs	r1, #15
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f7ff ff8e 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x40>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff29 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff3e 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff8e 	bl	8000ba0 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff31 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa2 	bl	8000c08 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d106      	bne.n	8000cec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000cea:	e005      	b.n	8000cf8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cf2:	f023 0304 	bic.w	r3, r3, #4
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d0c:	f000 f802 	bl	8000d14 <HAL_SYSTICK_Callback>
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d004      	beq.n	8000d40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e00c      	b.n	8000d5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2205      	movs	r2, #5
 8000d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 0201 	bic.w	r2, r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e165      	b.n	8001050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f040 8154 	bne.w	800104a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d00b      	beq.n	8000dc2 <HAL_GPIO_Init+0x5a>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db6:	2b11      	cmp	r3, #17
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b12      	cmp	r3, #18
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0xfc>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b12      	cmp	r3, #18
 8000e62:	d123      	bne.n	8000eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	69b9      	ldr	r1, [r7, #24]
 8000ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0203 	and.w	r2, r3, #3
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80ae 	beq.w	800104a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b59      	ldr	r3, [pc, #356]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0a:	4a57      	ldr	r2, [pc, #348]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4e      	ldr	r2, [pc, #312]	; (800106c <HAL_GPIO_Init+0x304>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d025      	beq.n	8000f82 <HAL_GPIO_Init+0x21a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <HAL_GPIO_Init+0x308>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01f      	beq.n	8000f7e <HAL_GPIO_Init+0x216>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x30c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x212>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4b      	ldr	r2, [pc, #300]	; (8001078 <HAL_GPIO_Init+0x310>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x20e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4a      	ldr	r2, [pc, #296]	; (800107c <HAL_GPIO_Init+0x314>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x20a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x318>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x206>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x31c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x202>
 8000f66:	2306      	movs	r3, #6
 8000f68:	e00c      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e00a      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f82:	2300      	movs	r3, #0
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f94:	4934      	ldr	r1, [pc, #208]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc6:	4a30      	ldr	r2, [pc, #192]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff0:	4a25      	ldr	r2, [pc, #148]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <HAL_GPIO_Init+0x320>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x320>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_GPIO_Init+0x320>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	f67f ae96 	bls.w	8000d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001058:	bf00      	nop
 800105a:	3724      	adds	r7, #36	; 0x24
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40013c00 	.word	0x40013c00

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_PWR_EnableSleepOnExit+0x1c>)
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_PWR_EnableSleepOnExit+0x1c>)
 80010ca:	f043 0302 	orr.w	r3, r3, #2
 80010ce:	6113      	str	r3, [r2, #16]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e0cc      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010f4:	4b68      	ldr	r3, [pc, #416]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d90c      	bls.n	800111c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001102:	4b65      	ldr	r3, [pc, #404]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d001      	beq.n	800111c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0b8      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d020      	beq.n	800116a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a58      	ldr	r2, [pc, #352]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 800113a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800113e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4a52      	ldr	r2, [pc, #328]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001158:	4b50      	ldr	r3, [pc, #320]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	494d      	ldr	r1, [pc, #308]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	4313      	orrs	r3, r2
 8001168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d044      	beq.n	8001200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d119      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e07f      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d003      	beq.n	800119e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119a:	2b03      	cmp	r3, #3
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119e:	4b3f      	ldr	r3, [pc, #252]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d109      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e06f      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	4b3b      	ldr	r3, [pc, #236]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e067      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f023 0203 	bic.w	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4934      	ldr	r1, [pc, #208]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d0:	f7ff fc60 	bl	8000a94 <HAL_GetTick>
 80011d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	e00a      	b.n	80011ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d8:	f7ff fc5c 	bl	8000a94 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e04f      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 020c 	and.w	r2, r3, #12
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d1eb      	bne.n	80011d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001200:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d20c      	bcs.n	8001228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_RCC_ClockConfig+0x1b8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d001      	beq.n	8001228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e032      	b.n	800128e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4916      	ldr	r1, [pc, #88]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	4313      	orrs	r3, r2
 8001244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	490e      	ldr	r1, [pc, #56]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	4313      	orrs	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001266:	f000 f855 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 800126a:	4601      	mov	r1, r0
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	fa21 f303 	lsr.w	r3, r1, r3
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fbc0 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00
 800129c:	40023800 	.word	0x40023800
 80012a0:	08002d94 	.word	0x08002d94
 80012a4:	20000028 	.word	0x20000028
 80012a8:	2000002c 	.word	0x2000002c

080012ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000028 	.word	0x20000028

080012c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012c8:	f7ff fff0 	bl	80012ac <HAL_RCC_GetHCLKFreq>
 80012cc:	4601      	mov	r1, r0
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	0a9b      	lsrs	r3, r3, #10
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	08002da4 	.word	0x08002da4

080012ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012f0:	f7ff ffdc 	bl	80012ac <HAL_RCC_GetHCLKFreq>
 80012f4:	4601      	mov	r1, r0
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_RCC_GetPCLK2Freq+0x20>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	0b5b      	lsrs	r3, r3, #13
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	08002da4 	.word	0x08002da4

08001314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800132e:	4bc6      	ldr	r3, [pc, #792]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b0c      	cmp	r3, #12
 8001338:	f200 817e 	bhi.w	8001638 <HAL_RCC_GetSysClockFreq+0x324>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <HAL_RCC_GetSysClockFreq+0x30>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001379 	.word	0x08001379
 8001348:	08001639 	.word	0x08001639
 800134c:	08001639 	.word	0x08001639
 8001350:	08001639 	.word	0x08001639
 8001354:	0800137f 	.word	0x0800137f
 8001358:	08001639 	.word	0x08001639
 800135c:	08001639 	.word	0x08001639
 8001360:	08001639 	.word	0x08001639
 8001364:	08001385 	.word	0x08001385
 8001368:	08001639 	.word	0x08001639
 800136c:	08001639 	.word	0x08001639
 8001370:	08001639 	.word	0x08001639
 8001374:	080014e1 	.word	0x080014e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001378:	4bb4      	ldr	r3, [pc, #720]	; (800164c <HAL_RCC_GetSysClockFreq+0x338>)
 800137a:	613b      	str	r3, [r7, #16]
       break;
 800137c:	e15f      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800137e:	4bb4      	ldr	r3, [pc, #720]	; (8001650 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001380:	613b      	str	r3, [r7, #16]
      break;
 8001382:	e15c      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001384:	4bb0      	ldr	r3, [pc, #704]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800138c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800138e:	4bae      	ldr	r3, [pc, #696]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d04a      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800139a:	4bab      	ldr	r3, [pc, #684]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	099b      	lsrs	r3, r3, #6
 80013a0:	f04f 0400 	mov.w	r4, #0
 80013a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	ea03 0501 	and.w	r5, r3, r1
 80013b0:	ea04 0602 	and.w	r6, r4, r2
 80013b4:	4629      	mov	r1, r5
 80013b6:	4632      	mov	r2, r6
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	f04f 0400 	mov.w	r4, #0
 80013c0:	0154      	lsls	r4, r2, #5
 80013c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013c6:	014b      	lsls	r3, r1, #5
 80013c8:	4619      	mov	r1, r3
 80013ca:	4622      	mov	r2, r4
 80013cc:	1b49      	subs	r1, r1, r5
 80013ce:	eb62 0206 	sbc.w	r2, r2, r6
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	f04f 0400 	mov.w	r4, #0
 80013da:	0194      	lsls	r4, r2, #6
 80013dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013e0:	018b      	lsls	r3, r1, #6
 80013e2:	1a5b      	subs	r3, r3, r1
 80013e4:	eb64 0402 	sbc.w	r4, r4, r2
 80013e8:	f04f 0100 	mov.w	r1, #0
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	00e2      	lsls	r2, r4, #3
 80013f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013f6:	00d9      	lsls	r1, r3, #3
 80013f8:	460b      	mov	r3, r1
 80013fa:	4614      	mov	r4, r2
 80013fc:	195b      	adds	r3, r3, r5
 80013fe:	eb44 0406 	adc.w	r4, r4, r6
 8001402:	f04f 0100 	mov.w	r1, #0
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	0262      	lsls	r2, r4, #9
 800140c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001410:	0259      	lsls	r1, r3, #9
 8001412:	460b      	mov	r3, r1
 8001414:	4614      	mov	r4, r2
 8001416:	4618      	mov	r0, r3
 8001418:	4621      	mov	r1, r4
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f04f 0400 	mov.w	r4, #0
 8001420:	461a      	mov	r2, r3
 8001422:	4623      	mov	r3, r4
 8001424:	f7fe fef6 	bl	8000214 <__aeabi_uldivmod>
 8001428:	4603      	mov	r3, r0
 800142a:	460c      	mov	r4, r1
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e049      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001430:	4b85      	ldr	r3, [pc, #532]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	ea03 0501 	and.w	r5, r3, r1
 8001446:	ea04 0602 	and.w	r6, r4, r2
 800144a:	4629      	mov	r1, r5
 800144c:	4632      	mov	r2, r6
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	f04f 0400 	mov.w	r4, #0
 8001456:	0154      	lsls	r4, r2, #5
 8001458:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800145c:	014b      	lsls	r3, r1, #5
 800145e:	4619      	mov	r1, r3
 8001460:	4622      	mov	r2, r4
 8001462:	1b49      	subs	r1, r1, r5
 8001464:	eb62 0206 	sbc.w	r2, r2, r6
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	f04f 0400 	mov.w	r4, #0
 8001470:	0194      	lsls	r4, r2, #6
 8001472:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001476:	018b      	lsls	r3, r1, #6
 8001478:	1a5b      	subs	r3, r3, r1
 800147a:	eb64 0402 	sbc.w	r4, r4, r2
 800147e:	f04f 0100 	mov.w	r1, #0
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	00e2      	lsls	r2, r4, #3
 8001488:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800148c:	00d9      	lsls	r1, r3, #3
 800148e:	460b      	mov	r3, r1
 8001490:	4614      	mov	r4, r2
 8001492:	195b      	adds	r3, r3, r5
 8001494:	eb44 0406 	adc.w	r4, r4, r6
 8001498:	f04f 0100 	mov.w	r1, #0
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	02a2      	lsls	r2, r4, #10
 80014a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80014a6:	0299      	lsls	r1, r3, #10
 80014a8:	460b      	mov	r3, r1
 80014aa:	4614      	mov	r4, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	4621      	mov	r1, r4
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f04f 0400 	mov.w	r4, #0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4623      	mov	r3, r4
 80014ba:	f7fe feab 	bl	8000214 <__aeabi_uldivmod>
 80014be:	4603      	mov	r3, r0
 80014c0:	460c      	mov	r4, r1
 80014c2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014c4:	4b60      	ldr	r3, [pc, #384]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	0c1b      	lsrs	r3, r3, #16
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	3301      	adds	r3, #1
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014dc:	613b      	str	r3, [r7, #16]
      break;
 80014de:	e0ae      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e0:	4b59      	ldr	r3, [pc, #356]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ea:	4b57      	ldr	r3, [pc, #348]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d04a      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f6:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	099b      	lsrs	r3, r3, #6
 80014fc:	f04f 0400 	mov.w	r4, #0
 8001500:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	ea03 0501 	and.w	r5, r3, r1
 800150c:	ea04 0602 	and.w	r6, r4, r2
 8001510:	4629      	mov	r1, r5
 8001512:	4632      	mov	r2, r6
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	f04f 0400 	mov.w	r4, #0
 800151c:	0154      	lsls	r4, r2, #5
 800151e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001522:	014b      	lsls	r3, r1, #5
 8001524:	4619      	mov	r1, r3
 8001526:	4622      	mov	r2, r4
 8001528:	1b49      	subs	r1, r1, r5
 800152a:	eb62 0206 	sbc.w	r2, r2, r6
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	f04f 0400 	mov.w	r4, #0
 8001536:	0194      	lsls	r4, r2, #6
 8001538:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800153c:	018b      	lsls	r3, r1, #6
 800153e:	1a5b      	subs	r3, r3, r1
 8001540:	eb64 0402 	sbc.w	r4, r4, r2
 8001544:	f04f 0100 	mov.w	r1, #0
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	00e2      	lsls	r2, r4, #3
 800154e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001552:	00d9      	lsls	r1, r3, #3
 8001554:	460b      	mov	r3, r1
 8001556:	4614      	mov	r4, r2
 8001558:	195b      	adds	r3, r3, r5
 800155a:	eb44 0406 	adc.w	r4, r4, r6
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	0262      	lsls	r2, r4, #9
 8001568:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800156c:	0259      	lsls	r1, r3, #9
 800156e:	460b      	mov	r3, r1
 8001570:	4614      	mov	r4, r2
 8001572:	4618      	mov	r0, r3
 8001574:	4621      	mov	r1, r4
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f04f 0400 	mov.w	r4, #0
 800157c:	461a      	mov	r2, r3
 800157e:	4623      	mov	r3, r4
 8001580:	f7fe fe48 	bl	8000214 <__aeabi_uldivmod>
 8001584:	4603      	mov	r3, r0
 8001586:	460c      	mov	r4, r1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e049      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158c:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	f04f 0400 	mov.w	r4, #0
 8001596:	f240 11ff 	movw	r1, #511	; 0x1ff
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	ea03 0501 	and.w	r5, r3, r1
 80015a2:	ea04 0602 	and.w	r6, r4, r2
 80015a6:	4629      	mov	r1, r5
 80015a8:	4632      	mov	r2, r6
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	f04f 0400 	mov.w	r4, #0
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015b8:	014b      	lsls	r3, r1, #5
 80015ba:	4619      	mov	r1, r3
 80015bc:	4622      	mov	r2, r4
 80015be:	1b49      	subs	r1, r1, r5
 80015c0:	eb62 0206 	sbc.w	r2, r2, r6
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	f04f 0400 	mov.w	r4, #0
 80015cc:	0194      	lsls	r4, r2, #6
 80015ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015d2:	018b      	lsls	r3, r1, #6
 80015d4:	1a5b      	subs	r3, r3, r1
 80015d6:	eb64 0402 	sbc.w	r4, r4, r2
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	00e2      	lsls	r2, r4, #3
 80015e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015e8:	00d9      	lsls	r1, r3, #3
 80015ea:	460b      	mov	r3, r1
 80015ec:	4614      	mov	r4, r2
 80015ee:	195b      	adds	r3, r3, r5
 80015f0:	eb44 0406 	adc.w	r4, r4, r6
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	02a2      	lsls	r2, r4, #10
 80015fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001602:	0299      	lsls	r1, r3, #10
 8001604:	460b      	mov	r3, r1
 8001606:	4614      	mov	r4, r2
 8001608:	4618      	mov	r0, r3
 800160a:	4621      	mov	r1, r4
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f04f 0400 	mov.w	r4, #0
 8001612:	461a      	mov	r2, r3
 8001614:	4623      	mov	r3, r4
 8001616:	f7fe fdfd 	bl	8000214 <__aeabi_uldivmod>
 800161a:	4603      	mov	r3, r0
 800161c:	460c      	mov	r4, r1
 800161e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_GetSysClockFreq+0x334>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	0f1b      	lsrs	r3, r3, #28
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	613b      	str	r3, [r7, #16]
      break;
 8001636:	e002      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <HAL_RCC_GetSysClockFreq+0x338>)
 800163a:	613b      	str	r3, [r7, #16]
      break;
 800163c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800163e:	693b      	ldr	r3, [r7, #16]
}
 8001640:	4618      	mov	r0, r3
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	00f42400 	.word	0x00f42400
 8001650:	007a1200 	.word	0x007a1200

08001654 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8083 	beq.w	8001774 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800166e:	4b95      	ldr	r3, [pc, #596]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b04      	cmp	r3, #4
 8001678:	d019      	beq.n	80016ae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800167a:	4b92      	ldr	r3, [pc, #584]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001682:	2b08      	cmp	r3, #8
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001686:	4b8f      	ldr	r3, [pc, #572]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001692:	d00c      	beq.n	80016ae <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001694:	4b8b      	ldr	r3, [pc, #556]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d112      	bne.n	80016c6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a0:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ac:	d10b      	bne.n	80016c6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ae:	4b85      	ldr	r3, [pc, #532]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d05b      	beq.n	8001772 <HAL_RCC_OscConfig+0x11e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d157      	bne.n	8001772 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e216      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x8a>
 80016d0:	4b7c      	ldr	r3, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a7b      	ldr	r2, [pc, #492]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	e01d      	b.n	800171a <HAL_RCC_OscConfig+0xc6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0xae>
 80016e8:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a75      	ldr	r2, [pc, #468]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b73      	ldr	r3, [pc, #460]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a72      	ldr	r2, [pc, #456]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80016fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0xc6>
 8001702:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6f      	ldr	r2, [pc, #444]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6c      	ldr	r2, [pc, #432]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d013      	beq.n	800174a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff f9b7 	bl	8000a94 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172a:	f7ff f9b3 	bl	8000a94 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b64      	cmp	r3, #100	; 0x64
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1db      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0xd6>
 8001748:	e014      	b.n	8001774 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff f9a3 	bl	8000a94 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001752:	f7ff f99f 	bl	8000a94 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b64      	cmp	r3, #100	; 0x64
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1c7      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001764:	4b57      	ldr	r3, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0xfe>
 8001770:	e000      	b.n	8001774 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001772:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d06f      	beq.n	8001860 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b00      	cmp	r3, #0
 800178a:	d017      	beq.n	80017bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800178c:	4b4d      	ldr	r3, [pc, #308]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001794:	2b08      	cmp	r3, #8
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001798:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00b      	beq.n	80017bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ac:	2b0c      	cmp	r3, #12
 80017ae:	d11c      	bne.n	80017ea <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d116      	bne.n	80017ea <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_OscConfig+0x180>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e18f      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4938      	ldr	r1, [pc, #224]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e8:	e03a      	b.n	8001860 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d020      	beq.n	8001834 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f2:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HAL_RCC_OscConfig+0x274>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff f94c 	bl	8000a94 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff f948 	bl	8000a94 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e170      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4925      	ldr	r1, [pc, #148]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
 8001832:	e015      	b.n	8001860 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCC_OscConfig+0x274>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff f92b 	bl	8000a94 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff f927 	bl	8000a94 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e14f      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d037      	beq.n	80018dc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d016      	beq.n	80018a2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_RCC_OscConfig+0x278>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187a:	f7ff f90b 	bl	8000a94 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001882:	f7ff f907 	bl	8000a94 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e12f      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_OscConfig+0x270>)
 8001896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x22e>
 80018a0:	e01c      	b.n	80018dc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_RCC_OscConfig+0x278>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff f8f4 	bl	8000a94 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ae:	e00f      	b.n	80018d0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff f8f0 	bl	8000a94 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d908      	bls.n	80018d0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e118      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	42470000 	.word	0x42470000
 80018cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	4b8a      	ldr	r3, [pc, #552]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 80018d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e9      	bne.n	80018b0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8097 	beq.w	8001a18 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b83      	ldr	r3, [pc, #524]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a7e      	ldr	r2, [pc, #504]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b7c      	ldr	r3, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <HAL_RCC_OscConfig+0x4ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x4ac>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a75      	ldr	r2, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x4ac>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7ff f8af 	bl	8000a94 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff f8ab 	bl	8000a94 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0d3      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x4ac>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x31a>
 8001960:	4b66      	ldr	r3, [pc, #408]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	4a65      	ldr	r2, [pc, #404]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
 800196c:	e01c      	b.n	80019a8 <HAL_RCC_OscConfig+0x354>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b05      	cmp	r3, #5
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x33c>
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	4a60      	ldr	r2, [pc, #384]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6713      	str	r3, [r2, #112]	; 0x70
 8001982:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a5d      	ldr	r2, [pc, #372]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0x354>
 8001990:	4b5a      	ldr	r3, [pc, #360]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	4a59      	ldr	r2, [pc, #356]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	6713      	str	r3, [r2, #112]	; 0x70
 800199c:	4b57      	ldr	r3, [pc, #348]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 80019a2:	f023 0304 	bic.w	r3, r3, #4
 80019a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d015      	beq.n	80019dc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff f870 	bl	8000a94 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7ff f86c 	bl	8000a94 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e092      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ce:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0ee      	beq.n	80019b8 <HAL_RCC_OscConfig+0x364>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff f85a 	bl	8000a94 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff f856 	bl	8000a94 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e07c      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ee      	bne.n	80019e4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	4a3a      	ldr	r2, [pc, #232]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d068      	beq.n	8001af2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d060      	beq.n	8001aee <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d145      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a34:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <HAL_RCC_OscConfig+0x4b0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f82b 	bl	8000a94 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a42:	f7ff f827 	bl	8000a94 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e04f      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f0      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	019b      	lsls	r3, r3, #6
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	085b      	lsrs	r3, r3, #1
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	041b      	lsls	r3, r3, #16
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	061b      	lsls	r3, r3, #24
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	071b      	lsls	r3, r3, #28
 8001a8c:	491b      	ldr	r1, [pc, #108]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_RCC_OscConfig+0x4b0>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7fe fffc 	bl	8000a94 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7fe fff8 	bl	8000a94 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e020      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x44c>
 8001abe:	e018      	b.n	8001af2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_RCC_OscConfig+0x4b0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7fe ffe5 	bl	8000a94 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ace:	f7fe ffe1 	bl	8000a94 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e009      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_OscConfig+0x4a8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x47a>
 8001aec:	e001      	b.n	8001af2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000
 8001b04:	42470060 	.word	0x42470060

08001b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e01d      	b.n	8001b56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fe80 	bl	8000834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3304      	adds	r3, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f000 f95e 	bl	8001e08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d007      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d122      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d11b      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0202 	mvn.w	r2, #2
 8001bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8ee 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001bee:	e005      	b.n	8001bfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8e0 	bl	8001db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8f1 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d122      	bne.n	8001c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d11b      	bne.n	8001c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0204 	mvn.w	r2, #4
 8001c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8c4 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001c42:	e005      	b.n	8001c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f8b6 	bl	8001db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8c7 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d122      	bne.n	8001caa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11b      	bne.n	8001caa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 0208 	mvn.w	r2, #8
 8001c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f89a 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001c96:	e005      	b.n	8001ca4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f88c 	bl	8001db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f89d 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d122      	bne.n	8001cfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d11b      	bne.n	8001cfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f06f 0210 	mvn.w	r2, #16
 8001cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f870 	bl	8001dca <HAL_TIM_IC_CaptureCallback>
 8001cea:	e005      	b.n	8001cf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f862 	bl	8001db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f873 	bl	8001dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10e      	bne.n	8001d2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f06f 0201 	mvn.w	r2, #1
 8001d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7fe fd2d 	bl	8000784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d10e      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b80      	cmp	r3, #128	; 0x80
 8001d44:	d107      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f903 	bl	8001f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d10e      	bne.n	8001d82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d107      	bne.n	8001d82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f838 	bl	8001df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d10e      	bne.n	8001dae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d107      	bne.n	8001dae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f06f 0220 	mvn.w	r2, #32
 8001da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f8cd 	bl	8001f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a40      	ldr	r2, [pc, #256]	; (8001f1c <TIM_Base_SetConfig+0x114>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e26:	d00f      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3d      	ldr	r2, [pc, #244]	; (8001f20 <TIM_Base_SetConfig+0x118>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00b      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a3c      	ldr	r2, [pc, #240]	; (8001f24 <TIM_Base_SetConfig+0x11c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d007      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <TIM_Base_SetConfig+0x120>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <TIM_Base_SetConfig+0x40>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3a      	ldr	r2, [pc, #232]	; (8001f2c <TIM_Base_SetConfig+0x124>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d108      	bne.n	8001e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <TIM_Base_SetConfig+0x114>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d02b      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e68:	d027      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <TIM_Base_SetConfig+0x118>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d023      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <TIM_Base_SetConfig+0x11c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01f      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	; (8001f28 <TIM_Base_SetConfig+0x120>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01b      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <TIM_Base_SetConfig+0x124>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d017      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a28      	ldr	r2, [pc, #160]	; (8001f30 <TIM_Base_SetConfig+0x128>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <TIM_Base_SetConfig+0x12c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00f      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <TIM_Base_SetConfig+0x130>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00b      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <TIM_Base_SetConfig+0x134>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a24      	ldr	r2, [pc, #144]	; (8001f40 <TIM_Base_SetConfig+0x138>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d003      	beq.n	8001eba <TIM_Base_SetConfig+0xb2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <TIM_Base_SetConfig+0x13c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d108      	bne.n	8001ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <TIM_Base_SetConfig+0x114>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <TIM_Base_SetConfig+0xf8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <TIM_Base_SetConfig+0x124>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d103      	bne.n	8001f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40010400 	.word	0x40010400
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40014400 	.word	0x40014400
 8001f38:	40014800 	.word	0x40014800
 8001f3c:	40001800 	.word	0x40001800
 8001f40:	40001c00 	.word	0x40001c00
 8001f44:	40002000 	.word	0x40002000

08001f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e03f      	b.n	8002002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fc6c 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2224      	movs	r2, #36	; 0x24
 8001fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fb41 	bl	800263c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b088      	sub	sp, #32
 800200e:	af02      	add	r7, sp, #8
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b20      	cmp	r3, #32
 8002028:	f040 8083 	bne.w	8002132 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_UART_Transmit+0x2e>
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e07b      	b.n	8002134 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_UART_Transmit+0x40>
 8002046:	2302      	movs	r3, #2
 8002048:	e074      	b.n	8002134 <HAL_UART_Transmit+0x12a>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2221      	movs	r2, #33	; 0x21
 800205c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002060:	f7fe fd18 	bl	8000a94 <HAL_GetTick>
 8002064:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	88fa      	ldrh	r2, [r7, #6]
 800206a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800207a:	e042      	b.n	8002102 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002092:	d122      	bne.n	80020da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2200      	movs	r2, #0
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f960 	bl	8002364 <UART_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e042      	b.n	8002134 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3302      	adds	r3, #2
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	e017      	b.n	8002102 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	e013      	b.n	8002102 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2200      	movs	r2, #0
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f93d 	bl	8002364 <UART_WaitOnFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e01f      	b.n	8002134 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1b7      	bne.n	800207c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2200      	movs	r2, #0
 8002114:	2140      	movs	r1, #64	; 0x40
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f924 	bl	8002364 <UART_WaitOnFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e006      	b.n	8002134 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002132:	2302      	movs	r3, #2
  }
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_UART_IRQHandler+0x52>
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f9d6 	bl	8002538 <UART_Receive_IT>
      return;
 800218c:	e0d1      	b.n	8002332 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80b0 	beq.w	80022f6 <HAL_UART_IRQHandler+0x1ba>
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_UART_IRQHandler+0x70>
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80a5 	beq.w	80022f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_UART_IRQHandler+0x90>
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	f043 0201 	orr.w	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_UART_IRQHandler+0xb0>
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	f043 0202 	orr.w	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_UART_IRQHandler+0xd0>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00f      	beq.n	8002236 <HAL_UART_IRQHandler+0xfa>
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d104      	bne.n	800222a <HAL_UART_IRQHandler+0xee>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	f043 0208 	orr.w	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d078      	beq.n	8002330 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_UART_IRQHandler+0x11c>
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f970 	bl	8002538 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b40      	cmp	r3, #64	; 0x40
 8002264:	bf0c      	ite	eq
 8002266:	2301      	moveq	r3, #1
 8002268:	2300      	movne	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_UART_IRQHandler+0x144>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d031      	beq.n	80022e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f8b9 	bl	80023f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	d123      	bne.n	80022dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <HAL_UART_IRQHandler+0x1fc>)
 80022b2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fd32 	bl	8000d22 <HAL_DMA_Abort_IT>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d016      	beq.n	80022f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022ce:	4610      	mov	r0, r2
 80022d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d2:	e00e      	b.n	80022f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f83b 	bl	8002350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022da:	e00a      	b.n	80022f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f837 	bl	8002350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e2:	e006      	b.n	80022f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f833 	bl	8002350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80022f0:	e01e      	b.n	8002330 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f2:	bf00      	nop
    return;
 80022f4:	e01c      	b.n	8002330 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_UART_IRQHandler+0x1d6>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8a6 	bl	800245c <UART_Transmit_IT>
    return;
 8002310:	e00f      	b.n	8002332 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_UART_IRQHandler+0x1f6>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8ee 	bl	8002508 <UART_EndTransmit_IT>
    return;
 800232c:	bf00      	nop
 800232e:	e000      	b.n	8002332 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002330:	bf00      	nop
  }
}
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	08002435 	.word	0x08002435

0800233c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002374:	e02c      	b.n	80023d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d028      	beq.n	80023d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <UART_WaitOnFlagUntilTimeout+0x30>
 8002384:	f7fe fb86 	bl	8000a94 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	429a      	cmp	r2, r3
 8002392:	d21d      	bcs.n	80023d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e00f      	b.n	80023f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4013      	ands	r3, r2
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d0c3      	beq.n	8002376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800240e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7ff ff7e 	bl	8002350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b21      	cmp	r3, #33	; 0x21
 800246e:	d144      	bne.n	80024fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002478:	d11a      	bne.n	80024b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800248e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	1c9a      	adds	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	621a      	str	r2, [r3, #32]
 80024a2:	e00e      	b.n	80024c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	621a      	str	r2, [r3, #32]
 80024ae:	e008      	b.n	80024c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	1c59      	adds	r1, r3, #1
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6211      	str	r1, [r2, #32]
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	4619      	mov	r1, r3
 80024d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
  }
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fe f947 	bl	80007bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b22      	cmp	r3, #34	; 0x22
 800254a:	d171      	bne.n	8002630 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002554:	d123      	bne.n	800259e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10e      	bne.n	8002582 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	b29b      	uxth	r3, r3
 800256c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	1c9a      	adds	r2, r3, #2
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
 8002580:	e029      	b.n	80025d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	b29b      	uxth	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
 800259c:	e01b      	b.n	80025d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6858      	ldr	r0, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	1c59      	adds	r1, r3, #1
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6291      	str	r1, [r2, #40]	; 0x28
 80025b6:	b2c2      	uxtb	r2, r0
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e00c      	b.n	80025d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	1c58      	adds	r0, r3, #1
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	6288      	str	r0, [r1, #40]	; 0x28
 80025ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29b      	uxth	r3, r3
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4619      	mov	r1, r3
 80025e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d120      	bne.n	800262c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0220 	bic.w	r2, r2, #32
 80025f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002608:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fe8a 	bl	800233c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	e002      	b.n	8002632 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800267e:	f023 030c 	bic.w	r3, r3, #12
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	68f9      	ldr	r1, [r7, #12]
 8002688:	430b      	orrs	r3, r1
 800268a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	f040 818b 	bne.w	80029c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4ac1      	ldr	r2, [pc, #772]	; (80029b8 <UART_SetConfig+0x37c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d005      	beq.n	80026c4 <UART_SetConfig+0x88>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4abf      	ldr	r2, [pc, #764]	; (80029bc <UART_SetConfig+0x380>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	f040 80bd 	bne.w	800283e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026c4:	f7fe fe12 	bl	80012ec <HAL_RCC_GetPCLK2Freq>
 80026c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	461d      	mov	r5, r3
 80026ce:	f04f 0600 	mov.w	r6, #0
 80026d2:	46a8      	mov	r8, r5
 80026d4:	46b1      	mov	r9, r6
 80026d6:	eb18 0308 	adds.w	r3, r8, r8
 80026da:	eb49 0409 	adc.w	r4, r9, r9
 80026de:	4698      	mov	r8, r3
 80026e0:	46a1      	mov	r9, r4
 80026e2:	eb18 0805 	adds.w	r8, r8, r5
 80026e6:	eb49 0906 	adc.w	r9, r9, r6
 80026ea:	f04f 0100 	mov.w	r1, #0
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026fe:	4688      	mov	r8, r1
 8002700:	4691      	mov	r9, r2
 8002702:	eb18 0005 	adds.w	r0, r8, r5
 8002706:	eb49 0106 	adc.w	r1, r9, r6
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	461d      	mov	r5, r3
 8002710:	f04f 0600 	mov.w	r6, #0
 8002714:	196b      	adds	r3, r5, r5
 8002716:	eb46 0406 	adc.w	r4, r6, r6
 800271a:	461a      	mov	r2, r3
 800271c:	4623      	mov	r3, r4
 800271e:	f7fd fd79 	bl	8000214 <__aeabi_uldivmod>
 8002722:	4603      	mov	r3, r0
 8002724:	460c      	mov	r4, r1
 8002726:	461a      	mov	r2, r3
 8002728:	4ba5      	ldr	r3, [pc, #660]	; (80029c0 <UART_SetConfig+0x384>)
 800272a:	fba3 2302 	umull	r2, r3, r3, r2
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	461d      	mov	r5, r3
 8002738:	f04f 0600 	mov.w	r6, #0
 800273c:	46a9      	mov	r9, r5
 800273e:	46b2      	mov	sl, r6
 8002740:	eb19 0309 	adds.w	r3, r9, r9
 8002744:	eb4a 040a 	adc.w	r4, sl, sl
 8002748:	4699      	mov	r9, r3
 800274a:	46a2      	mov	sl, r4
 800274c:	eb19 0905 	adds.w	r9, r9, r5
 8002750:	eb4a 0a06 	adc.w	sl, sl, r6
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002760:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002764:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002768:	4689      	mov	r9, r1
 800276a:	4692      	mov	sl, r2
 800276c:	eb19 0005 	adds.w	r0, r9, r5
 8002770:	eb4a 0106 	adc.w	r1, sl, r6
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	461d      	mov	r5, r3
 800277a:	f04f 0600 	mov.w	r6, #0
 800277e:	196b      	adds	r3, r5, r5
 8002780:	eb46 0406 	adc.w	r4, r6, r6
 8002784:	461a      	mov	r2, r3
 8002786:	4623      	mov	r3, r4
 8002788:	f7fd fd44 	bl	8000214 <__aeabi_uldivmod>
 800278c:	4603      	mov	r3, r0
 800278e:	460c      	mov	r4, r1
 8002790:	461a      	mov	r2, r3
 8002792:	4b8b      	ldr	r3, [pc, #556]	; (80029c0 <UART_SetConfig+0x384>)
 8002794:	fba3 1302 	umull	r1, r3, r3, r2
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	2164      	movs	r1, #100	; 0x64
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	3332      	adds	r3, #50	; 0x32
 80027a6:	4a86      	ldr	r2, [pc, #536]	; (80029c0 <UART_SetConfig+0x384>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027b4:	4498      	add	r8, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	461d      	mov	r5, r3
 80027ba:	f04f 0600 	mov.w	r6, #0
 80027be:	46a9      	mov	r9, r5
 80027c0:	46b2      	mov	sl, r6
 80027c2:	eb19 0309 	adds.w	r3, r9, r9
 80027c6:	eb4a 040a 	adc.w	r4, sl, sl
 80027ca:	4699      	mov	r9, r3
 80027cc:	46a2      	mov	sl, r4
 80027ce:	eb19 0905 	adds.w	r9, r9, r5
 80027d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027ea:	4689      	mov	r9, r1
 80027ec:	4692      	mov	sl, r2
 80027ee:	eb19 0005 	adds.w	r0, r9, r5
 80027f2:	eb4a 0106 	adc.w	r1, sl, r6
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	461d      	mov	r5, r3
 80027fc:	f04f 0600 	mov.w	r6, #0
 8002800:	196b      	adds	r3, r5, r5
 8002802:	eb46 0406 	adc.w	r4, r6, r6
 8002806:	461a      	mov	r2, r3
 8002808:	4623      	mov	r3, r4
 800280a:	f7fd fd03 	bl	8000214 <__aeabi_uldivmod>
 800280e:	4603      	mov	r3, r0
 8002810:	460c      	mov	r4, r1
 8002812:	461a      	mov	r2, r3
 8002814:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <UART_SetConfig+0x384>)
 8002816:	fba3 1302 	umull	r1, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2164      	movs	r1, #100	; 0x64
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	4a65      	ldr	r2, [pc, #404]	; (80029c0 <UART_SetConfig+0x384>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 0207 	and.w	r2, r3, #7
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4442      	add	r2, r8
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e26f      	b.n	8002d1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800283e:	f7fe fd41 	bl	80012c4 <HAL_RCC_GetPCLK1Freq>
 8002842:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	461d      	mov	r5, r3
 8002848:	f04f 0600 	mov.w	r6, #0
 800284c:	46a8      	mov	r8, r5
 800284e:	46b1      	mov	r9, r6
 8002850:	eb18 0308 	adds.w	r3, r8, r8
 8002854:	eb49 0409 	adc.w	r4, r9, r9
 8002858:	4698      	mov	r8, r3
 800285a:	46a1      	mov	r9, r4
 800285c:	eb18 0805 	adds.w	r8, r8, r5
 8002860:	eb49 0906 	adc.w	r9, r9, r6
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002870:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002874:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002878:	4688      	mov	r8, r1
 800287a:	4691      	mov	r9, r2
 800287c:	eb18 0005 	adds.w	r0, r8, r5
 8002880:	eb49 0106 	adc.w	r1, r9, r6
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	461d      	mov	r5, r3
 800288a:	f04f 0600 	mov.w	r6, #0
 800288e:	196b      	adds	r3, r5, r5
 8002890:	eb46 0406 	adc.w	r4, r6, r6
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	f7fd fcbc 	bl	8000214 <__aeabi_uldivmod>
 800289c:	4603      	mov	r3, r0
 800289e:	460c      	mov	r4, r1
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <UART_SetConfig+0x384>)
 80028a4:	fba3 2302 	umull	r2, r3, r3, r2
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	461d      	mov	r5, r3
 80028b2:	f04f 0600 	mov.w	r6, #0
 80028b6:	46a9      	mov	r9, r5
 80028b8:	46b2      	mov	sl, r6
 80028ba:	eb19 0309 	adds.w	r3, r9, r9
 80028be:	eb4a 040a 	adc.w	r4, sl, sl
 80028c2:	4699      	mov	r9, r3
 80028c4:	46a2      	mov	sl, r4
 80028c6:	eb19 0905 	adds.w	r9, r9, r5
 80028ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028e2:	4689      	mov	r9, r1
 80028e4:	4692      	mov	sl, r2
 80028e6:	eb19 0005 	adds.w	r0, r9, r5
 80028ea:	eb4a 0106 	adc.w	r1, sl, r6
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	461d      	mov	r5, r3
 80028f4:	f04f 0600 	mov.w	r6, #0
 80028f8:	196b      	adds	r3, r5, r5
 80028fa:	eb46 0406 	adc.w	r4, r6, r6
 80028fe:	461a      	mov	r2, r3
 8002900:	4623      	mov	r3, r4
 8002902:	f7fd fc87 	bl	8000214 <__aeabi_uldivmod>
 8002906:	4603      	mov	r3, r0
 8002908:	460c      	mov	r4, r1
 800290a:	461a      	mov	r2, r3
 800290c:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <UART_SetConfig+0x384>)
 800290e:	fba3 1302 	umull	r1, r3, r3, r2
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2164      	movs	r1, #100	; 0x64
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	3332      	adds	r3, #50	; 0x32
 8002920:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <UART_SetConfig+0x384>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800292e:	4498      	add	r8, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	461d      	mov	r5, r3
 8002934:	f04f 0600 	mov.w	r6, #0
 8002938:	46a9      	mov	r9, r5
 800293a:	46b2      	mov	sl, r6
 800293c:	eb19 0309 	adds.w	r3, r9, r9
 8002940:	eb4a 040a 	adc.w	r4, sl, sl
 8002944:	4699      	mov	r9, r3
 8002946:	46a2      	mov	sl, r4
 8002948:	eb19 0905 	adds.w	r9, r9, r5
 800294c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002950:	f04f 0100 	mov.w	r1, #0
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800295c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002964:	4689      	mov	r9, r1
 8002966:	4692      	mov	sl, r2
 8002968:	eb19 0005 	adds.w	r0, r9, r5
 800296c:	eb4a 0106 	adc.w	r1, sl, r6
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	461d      	mov	r5, r3
 8002976:	f04f 0600 	mov.w	r6, #0
 800297a:	196b      	adds	r3, r5, r5
 800297c:	eb46 0406 	adc.w	r4, r6, r6
 8002980:	461a      	mov	r2, r3
 8002982:	4623      	mov	r3, r4
 8002984:	f7fd fc46 	bl	8000214 <__aeabi_uldivmod>
 8002988:	4603      	mov	r3, r0
 800298a:	460c      	mov	r4, r1
 800298c:	461a      	mov	r2, r3
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <UART_SetConfig+0x384>)
 8002990:	fba3 1302 	umull	r1, r3, r3, r2
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	2164      	movs	r1, #100	; 0x64
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	3332      	adds	r3, #50	; 0x32
 80029a2:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <UART_SetConfig+0x384>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	f003 0207 	and.w	r2, r3, #7
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4442      	add	r2, r8
 80029b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80029b6:	e1b2      	b.n	8002d1e <UART_SetConfig+0x6e2>
 80029b8:	40011000 	.word	0x40011000
 80029bc:	40011400 	.word	0x40011400
 80029c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4ad7      	ldr	r2, [pc, #860]	; (8002d28 <UART_SetConfig+0x6ec>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d005      	beq.n	80029da <UART_SetConfig+0x39e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4ad6      	ldr	r2, [pc, #856]	; (8002d2c <UART_SetConfig+0x6f0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	f040 80d1 	bne.w	8002b7c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80029da:	f7fe fc87 	bl	80012ec <HAL_RCC_GetPCLK2Freq>
 80029de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	469a      	mov	sl, r3
 80029e4:	f04f 0b00 	mov.w	fp, #0
 80029e8:	46d0      	mov	r8, sl
 80029ea:	46d9      	mov	r9, fp
 80029ec:	eb18 0308 	adds.w	r3, r8, r8
 80029f0:	eb49 0409 	adc.w	r4, r9, r9
 80029f4:	4698      	mov	r8, r3
 80029f6:	46a1      	mov	r9, r4
 80029f8:	eb18 080a 	adds.w	r8, r8, sl
 80029fc:	eb49 090b 	adc.w	r9, r9, fp
 8002a00:	f04f 0100 	mov.w	r1, #0
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a14:	4688      	mov	r8, r1
 8002a16:	4691      	mov	r9, r2
 8002a18:	eb1a 0508 	adds.w	r5, sl, r8
 8002a1c:	eb4b 0609 	adc.w	r6, fp, r9
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	f04f 0400 	mov.w	r4, #0
 8002a32:	0094      	lsls	r4, r2, #2
 8002a34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a38:	008b      	lsls	r3, r1, #2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4623      	mov	r3, r4
 8002a3e:	4628      	mov	r0, r5
 8002a40:	4631      	mov	r1, r6
 8002a42:	f7fd fbe7 	bl	8000214 <__aeabi_uldivmod>
 8002a46:	4603      	mov	r3, r0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4bb8      	ldr	r3, [pc, #736]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	469b      	mov	fp, r3
 8002a5c:	f04f 0c00 	mov.w	ip, #0
 8002a60:	46d9      	mov	r9, fp
 8002a62:	46e2      	mov	sl, ip
 8002a64:	eb19 0309 	adds.w	r3, r9, r9
 8002a68:	eb4a 040a 	adc.w	r4, sl, sl
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	46a2      	mov	sl, r4
 8002a70:	eb19 090b 	adds.w	r9, r9, fp
 8002a74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a8c:	4689      	mov	r9, r1
 8002a8e:	4692      	mov	sl, r2
 8002a90:	eb1b 0509 	adds.w	r5, fp, r9
 8002a94:	eb4c 060a 	adc.w	r6, ip, sl
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	f04f 0400 	mov.w	r4, #0
 8002aaa:	0094      	lsls	r4, r2, #2
 8002aac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ab0:	008b      	lsls	r3, r1, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	4631      	mov	r1, r6
 8002aba:	f7fd fbab 	bl	8000214 <__aeabi_uldivmod>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b9a      	ldr	r3, [pc, #616]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2164      	movs	r1, #100	; 0x64
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	; 0x32
 8002ad8:	4a95      	ldr	r2, [pc, #596]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae4:	4498      	add	r8, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	469b      	mov	fp, r3
 8002aea:	f04f 0c00 	mov.w	ip, #0
 8002aee:	46d9      	mov	r9, fp
 8002af0:	46e2      	mov	sl, ip
 8002af2:	eb19 0309 	adds.w	r3, r9, r9
 8002af6:	eb4a 040a 	adc.w	r4, sl, sl
 8002afa:	4699      	mov	r9, r3
 8002afc:	46a2      	mov	sl, r4
 8002afe:	eb19 090b 	adds.w	r9, r9, fp
 8002b02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b06:	f04f 0100 	mov.w	r1, #0
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b1a:	4689      	mov	r9, r1
 8002b1c:	4692      	mov	sl, r2
 8002b1e:	eb1b 0509 	adds.w	r5, fp, r9
 8002b22:	eb4c 060a 	adc.w	r6, ip, sl
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	f04f 0400 	mov.w	r4, #0
 8002b38:	0094      	lsls	r4, r2, #2
 8002b3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b3e:	008b      	lsls	r3, r1, #2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4623      	mov	r3, r4
 8002b44:	4628      	mov	r0, r5
 8002b46:	4631      	mov	r1, r6
 8002b48:	f7fd fb64 	bl	8000214 <__aeabi_uldivmod>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b77      	ldr	r3, [pc, #476]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002b54:	fba3 1302 	umull	r1, r3, r3, r2
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	2164      	movs	r1, #100	; 0x64
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	3332      	adds	r3, #50	; 0x32
 8002b66:	4a72      	ldr	r2, [pc, #456]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	f003 020f 	and.w	r2, r3, #15
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4442      	add	r2, r8
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	e0d0      	b.n	8002d1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7c:	f7fe fba2 	bl	80012c4 <HAL_RCC_GetPCLK1Freq>
 8002b80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	469a      	mov	sl, r3
 8002b86:	f04f 0b00 	mov.w	fp, #0
 8002b8a:	46d0      	mov	r8, sl
 8002b8c:	46d9      	mov	r9, fp
 8002b8e:	eb18 0308 	adds.w	r3, r8, r8
 8002b92:	eb49 0409 	adc.w	r4, r9, r9
 8002b96:	4698      	mov	r8, r3
 8002b98:	46a1      	mov	r9, r4
 8002b9a:	eb18 080a 	adds.w	r8, r8, sl
 8002b9e:	eb49 090b 	adc.w	r9, r9, fp
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4691      	mov	r9, r2
 8002bba:	eb1a 0508 	adds.w	r5, sl, r8
 8002bbe:	eb4b 0609 	adc.w	r6, fp, r9
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	f04f 0400 	mov.w	r4, #0
 8002bd4:	0094      	lsls	r4, r2, #2
 8002bd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bda:	008b      	lsls	r3, r1, #2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	4628      	mov	r0, r5
 8002be2:	4631      	mov	r1, r6
 8002be4:	f7fd fb16 	bl	8000214 <__aeabi_uldivmod>
 8002be8:	4603      	mov	r3, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	469b      	mov	fp, r3
 8002bfe:	f04f 0c00 	mov.w	ip, #0
 8002c02:	46d9      	mov	r9, fp
 8002c04:	46e2      	mov	sl, ip
 8002c06:	eb19 0309 	adds.w	r3, r9, r9
 8002c0a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c0e:	4699      	mov	r9, r3
 8002c10:	46a2      	mov	sl, r4
 8002c12:	eb19 090b 	adds.w	r9, r9, fp
 8002c16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c2e:	4689      	mov	r9, r1
 8002c30:	4692      	mov	sl, r2
 8002c32:	eb1b 0509 	adds.w	r5, fp, r9
 8002c36:	eb4c 060a 	adc.w	r6, ip, sl
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	f04f 0400 	mov.w	r4, #0
 8002c4c:	0094      	lsls	r4, r2, #2
 8002c4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c52:	008b      	lsls	r3, r1, #2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4623      	mov	r3, r4
 8002c58:	4628      	mov	r0, r5
 8002c5a:	4631      	mov	r1, r6
 8002c5c:	f7fd fada 	bl	8000214 <__aeabi_uldivmod>
 8002c60:	4603      	mov	r3, r0
 8002c62:	460c      	mov	r4, r1
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002c68:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	3332      	adds	r3, #50	; 0x32
 8002c7a:	4a2d      	ldr	r2, [pc, #180]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c86:	4498      	add	r8, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	469b      	mov	fp, r3
 8002c8c:	f04f 0c00 	mov.w	ip, #0
 8002c90:	46d9      	mov	r9, fp
 8002c92:	46e2      	mov	sl, ip
 8002c94:	eb19 0309 	adds.w	r3, r9, r9
 8002c98:	eb4a 040a 	adc.w	r4, sl, sl
 8002c9c:	4699      	mov	r9, r3
 8002c9e:	46a2      	mov	sl, r4
 8002ca0:	eb19 090b 	adds.w	r9, r9, fp
 8002ca4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cbc:	4689      	mov	r9, r1
 8002cbe:	4692      	mov	sl, r2
 8002cc0:	eb1b 0509 	adds.w	r5, fp, r9
 8002cc4:	eb4c 060a 	adc.w	r6, ip, sl
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	f04f 0400 	mov.w	r4, #0
 8002cda:	0094      	lsls	r4, r2, #2
 8002cdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ce0:	008b      	lsls	r3, r1, #2
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4623      	mov	r3, r4
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	4631      	mov	r1, r6
 8002cea:	f7fd fa93 	bl	8000214 <__aeabi_uldivmod>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2164      	movs	r1, #100	; 0x64
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	3332      	adds	r3, #50	; 0x32
 8002d08:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <UART_SetConfig+0x6f4>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	f003 020f 	and.w	r2, r3, #15
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4442      	add	r2, r8
 8002d1a:	609a      	str	r2, [r3, #8]
}
 8002d1c:	e7ff      	b.n	8002d1e <UART_SetConfig+0x6e2>
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d28:	40011000 	.word	0x40011000
 8002d2c:	40011400 	.word	0x40011400
 8002d30:	51eb851f 	.word	0x51eb851f

08002d34 <__libc_init_array>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	4e0d      	ldr	r6, [pc, #52]	; (8002d6c <__libc_init_array+0x38>)
 8002d38:	4c0d      	ldr	r4, [pc, #52]	; (8002d70 <__libc_init_array+0x3c>)
 8002d3a:	1ba4      	subs	r4, r4, r6
 8002d3c:	10a4      	asrs	r4, r4, #2
 8002d3e:	2500      	movs	r5, #0
 8002d40:	42a5      	cmp	r5, r4
 8002d42:	d109      	bne.n	8002d58 <__libc_init_array+0x24>
 8002d44:	4e0b      	ldr	r6, [pc, #44]	; (8002d74 <__libc_init_array+0x40>)
 8002d46:	4c0c      	ldr	r4, [pc, #48]	; (8002d78 <__libc_init_array+0x44>)
 8002d48:	f000 f818 	bl	8002d7c <_init>
 8002d4c:	1ba4      	subs	r4, r4, r6
 8002d4e:	10a4      	asrs	r4, r4, #2
 8002d50:	2500      	movs	r5, #0
 8002d52:	42a5      	cmp	r5, r4
 8002d54:	d105      	bne.n	8002d62 <__libc_init_array+0x2e>
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d5c:	4798      	blx	r3
 8002d5e:	3501      	adds	r5, #1
 8002d60:	e7ee      	b.n	8002d40 <__libc_init_array+0xc>
 8002d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d66:	4798      	blx	r3
 8002d68:	3501      	adds	r5, #1
 8002d6a:	e7f2      	b.n	8002d52 <__libc_init_array+0x1e>
 8002d6c:	08002db4 	.word	0x08002db4
 8002d70:	08002db4 	.word	0x08002db4
 8002d74:	08002db4 	.word	0x08002db4
 8002d78:	08002db8 	.word	0x08002db8

08002d7c <_init>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr

08002d88 <_fini>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	bf00      	nop
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr
