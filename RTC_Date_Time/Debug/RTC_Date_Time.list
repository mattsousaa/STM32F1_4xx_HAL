
RTC_Date_Time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003964  08003964  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003964  08003964  00013964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800396c  0800396c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  080039e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080039e4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000964b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017f0  00000000  00000000  000296eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  0002aee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  0002b698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021fce  00000000  00000000  0002bd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075a4  00000000  00000000  0004dd46  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd50f  00000000  00000000  000552ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001227f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000212c  00000000  00000000  00122874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003814 	.word	0x08003814

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003814 	.word	0x08003814

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <printmsg>:
void RTC_CalendarConfig(void);

UART_HandleTypeDef huart2;
RTC_HandleTypeDef hrtc;

void printmsg(char *format, ...){
 80005c0:	b40f      	push	{r0, r1, r2, r3}
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b096      	sub	sp, #88	; 0x58
 80005c6:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80005c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005cc:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fd2c 	bl	8003034 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fe15 	bl	8000210 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	f107 0108 	add.w	r1, r7, #8
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <printmsg+0x48>)
 80005f4:	f002 f87f 	bl	80026f6 <HAL_UART_Transmit>
	va_end(args);

}
 80005f8:	bf00      	nop
 80005fa:	3758      	adds	r7, #88	; 0x58
 80005fc:	46bd      	mov	sp, r7
 80005fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000602:	b004      	add	sp, #16
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000b8 	.word	0x200000b8

0800060c <main>:

int main(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000610:	f000 fab4 	bl	8000b7c <HAL_Init>

	GPIO_Init();
 8000614:	f000 f8d4 	bl	80007c0 <GPIO_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000618:	2032      	movs	r0, #50	; 0x32
 800061a:	f000 f815 	bl	8000648 <SystemClock_Config_HSE>

	UART2_Init();
 800061e:	f000 f91b 	bl	8000858 <UART2_Init>

	RTC_Init();
 8000622:	f000 f8a7 	bl	8000774 <RTC_Init>

	printmsg("This is RTC calendar Test program \r\n");
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <main+0x34>)
 8000628:	f7ff ffca 	bl	80005c0 <printmsg>
#endif

	//RTC_CalendarConfig();

	//Enable the wakeup pin 1 in pwr_csr register
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800062c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000630:	f000 fdfc 	bl	800122c <HAL_PWR_EnableWakeUpPin>

	printmsg("Went to STANDBY mode\r\n");
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <main+0x38>)
 8000636:	f7ff ffc3 	bl	80005c0 <printmsg>
	HAL_PWR_EnterSTANDBYMode();
 800063a:	f000 fe09 	bl	8001250 <HAL_PWR_EnterSTANDBYMode>

	while(1);
 800063e:	e7fe      	b.n	800063e <main+0x32>
 8000640:	0800382c 	.word	0x0800382c
 8000644:	08003854 	.word	0x08003854

08000648 <SystemClock_Config_HSE>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config_HSE(uint8_t clock_freq){
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	; 0x58
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
	uint8_t flash_latency = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	623b      	str	r3, [r7, #32]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq){
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b54      	cmp	r3, #84	; 0x54
 8000670:	d01d      	beq.n	80006ae <SystemClock_Config_HSE+0x66>
 8000672:	2b78      	cmp	r3, #120	; 0x78
 8000674:	d034      	beq.n	80006e0 <SystemClock_Config_HSE+0x98>
 8000676:	2b32      	cmp	r3, #50	; 0x32
 8000678:	d000      	beq.n	800067c <SystemClock_Config_HSE+0x34>
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
		flash_latency = 3;
		break;

	default:
		return;
 800067a:	e076      	b.n	800076a <SystemClock_Config_HSE+0x122>
		Osc_Init.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
		Osc_Init.PLL.PLLN = 50;
 8000680:	2332      	movs	r3, #50	; 0x32
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
		Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
		Osc_Init.PLL.PLLQ = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
		Osc_Init.PLL.PLLR = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
		Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60bb      	str	r3, [r7, #8]
		Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
		Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
		Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	617b      	str	r3, [r7, #20]
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
		flash_latency = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		break;
 80006ac:	e032      	b.n	8000714 <SystemClock_Config_HSE+0xcc>
		Osc_Init.PLL.PLLM = 4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		Osc_Init.PLL.PLLN = 84;
 80006b2:	2354      	movs	r3, #84	; 0x54
 80006b4:	643b      	str	r3, [r7, #64]	; 0x40
		Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
		Osc_Init.PLL.PLLQ = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
		Osc_Init.PLL.PLLR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60bb      	str	r3, [r7, #8]
		Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60fb      	str	r3, [r7, #12]
		Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
		Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	617b      	str	r3, [r7, #20]
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
		flash_latency = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		break;
 80006de:	e019      	b.n	8000714 <SystemClock_Config_HSE+0xcc>
		Osc_Init.PLL.PLLM = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
		Osc_Init.PLL.PLLN = 120;
 80006e4:	2378      	movs	r3, #120	; 0x78
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
		Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
		Osc_Init.PLL.PLLQ = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
		Osc_Init.PLL.PLLR = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60bb      	str	r3, [r7, #8]
		Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
		Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
		Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	617b      	str	r3, [r7, #20]
		Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61bb      	str	r3, [r7, #24]
		flash_latency = 3;
 800070c:	2303      	movs	r3, #3
 800070e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		break;
 8000712:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&Osc_Init) != HAL_OK){
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fb95 	bl	8001e48 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config_HSE+0xe0>
		Error_handler();
 8000724:	f000 f914 	bl	8000950 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK){
 8000728:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fda4 	bl	8001280 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config_HSE+0xfa>
		Error_handler();
 800073e:	f000 f907 	bl	8000950 <Error_handler>
	}

	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000742:	f000 fe83 	bl	800144c <HAL_RCC_GetHCLKFreq>
 8000746:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq / 1000);
 8000748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800074a:	4a09      	ldr	r2, [pc, #36]	; (8000770 <SystemClock_Config_HSE+0x128>)
 800074c:	fba2 2303 	umull	r2, r3, r2, r3
 8000750:	099b      	lsrs	r3, r3, #6
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fb89 	bl	8000e6a <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000758:	2004      	movs	r0, #4
 800075a:	f000 fb93 	bl	8000e84 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	f04f 30ff 	mov.w	r0, #4294967295
 8000766:	f000 fb56 	bl	8000e16 <HAL_NVIC_SetPriority>

}
 800076a:	3758      	adds	r7, #88	; 0x58
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	10624dd3 	.word	0x10624dd3

08000774 <RTC_Init>:

void RTC_Init(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

	hrtc.Instance = RTC;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <RTC_Init+0x44>)
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <RTC_Init+0x48>)
 800077c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <RTC_Init+0x44>)
 8000780:	2240      	movs	r2, #64	; 0x40
 8000782:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 0x7F;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <RTC_Init+0x44>)
 8000786:	227f      	movs	r2, #127	; 0x7f
 8000788:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 0xFF;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <RTC_Init+0x44>)
 800078c:	22ff      	movs	r2, #255	; 0xff
 800078e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <RTC_Init+0x44>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <RTC_Init+0x44>)
 8000798:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800079c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <RTC_Init+0x44>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]

	if(HAL_RTC_Init(&hrtc) != HAL_OK){
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <RTC_Init+0x44>)
 80007a6:	f001 fda9 	bl	80022fc <HAL_RTC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <RTC_Init+0x40>
		Error_handler();
 80007b0:	f000 f8ce 	bl	8000950 <Error_handler>
	}
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000098 	.word	0x20000098
 80007bc:	40002800 	.word	0x40002800

080007c0 <GPIO_Init>:
	RTC_DateInit.WeekDay = RTC_WEEKDAY_TUESDAY;
	HAL_RTC_SetDate(&hrtc, &RTC_DateInit, RTC_FORMAT_BIN);

}

void GPIO_Init(void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <GPIO_Init+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <GPIO_Init+0x88>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <GPIO_Init+0x88>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <GPIO_Init+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <GPIO_Init+0x88>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <GPIO_Init+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio, buttongpio;

	ledgpio.Pin = GPIO_PIN_5;
 80007fe:	2320      	movs	r3, #32
 8000800:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &ledgpio);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	480e      	ldr	r0, [pc, #56]	; (800084c <GPIO_Init+0x8c>)
 8000812:	f000 fb61 	bl	8000ed8 <HAL_GPIO_Init>

	buttongpio.Pin = GPIO_PIN_13;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	60bb      	str	r3, [r7, #8]
	buttongpio.Mode = GPIO_MODE_IT_FALLING;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <GPIO_Init+0x90>)
 800081e:	60fb      	str	r3, [r7, #12]
	buttongpio.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &buttongpio);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4619      	mov	r1, r3
 800082a:	480a      	ldr	r0, [pc, #40]	; (8000854 <GPIO_Init+0x94>)
 800082c:	f000 fb54 	bl	8000ed8 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	210f      	movs	r1, #15
 8000834:	2028      	movs	r0, #40	; 0x28
 8000836:	f000 faee 	bl	8000e16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083a:	2028      	movs	r0, #40	; 0x28
 800083c:	f000 fb07 	bl	8000e4e <HAL_NVIC_EnableIRQ>

}
 8000840:	bf00      	nop
 8000842:	3730      	adds	r7, #48	; 0x30
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000
 8000850:	10210000 	.word	0x10210000
 8000854:	40020800 	.word	0x40020800

08000858 <UART2_Init>:

void UART2_Init(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <UART2_Init+0x44>)
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <UART2_Init+0x48>)
 8000860:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <UART2_Init+0x44>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <UART2_Init+0x44>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <UART2_Init+0x44>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <UART2_Init+0x44>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <UART2_Init+0x44>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <UART2_Init+0x44>)
 8000884:	2208      	movs	r2, #8
 8000886:	615a      	str	r2, [r3, #20]

	if (HAL_UART_Init(&huart2) != HAL_OK){
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <UART2_Init+0x44>)
 800088a:	f001 fee7 	bl	800265c <HAL_UART_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <UART2_Init+0x40>
		//There is a problem
		Error_handler();
 8000894:	f000 f85c 	bl	8000950 <Error_handler>
	}
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000b8 	.word	0x200000b8
 80008a0:	40004400 	.word	0x40004400

080008a4 <getDayofweek>:

char* getDayofweek(uint8_t number){
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]

	// Monday starts from 1
	char *weekday[] = {"Monday", "TuesDay", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <getDayofweek+0x38>)
 80008b0:	f107 040c 	add.w	r4, r7, #12
 80008b4:	461d      	mov	r5, r3
 80008b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008be:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return weekday[number - 1];
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008cc:	4413      	add	r3, r2
 80008ce:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	372c      	adds	r7, #44	; 0x2c
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bcb0      	pop	{r4, r5, r7}
 80008da:	4770      	bx	lr
 80008dc:	080038b0 	.word	0x080038b0

080008e0 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callbacks.
 * @param  GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	b08b      	sub	sp, #44	; 0x2c
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	4603      	mov	r3, r0
 80008e8:	80fb      	strh	r3, [r7, #6]

	RTC_TimeTypeDef RTC_TimeRead;
	RTC_DateTypeDef RTC_DateRead;

	HAL_RTC_GetTime(&hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <HAL_GPIO_EXTI_Callback+0x64>)
 80008f4:	f001 fd93 	bl	800241e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_DateRead, RTC_FORMAT_BIN);
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	4619      	mov	r1, r3
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <HAL_GPIO_EXTI_Callback+0x64>)
 8000902:	f001 fdea 	bl	80024da <HAL_RTC_GetDate>

	printmsg("Current Time is: %02d:%02d:%02d \r\n", RTC_TimeRead.Hours, RTC_TimeRead.Minutes, RTC_TimeRead.Seconds);
 8000906:	7b3b      	ldrb	r3, [r7, #12]
 8000908:	4619      	mov	r1, r3
 800090a:	7b7b      	ldrb	r3, [r7, #13]
 800090c:	461a      	mov	r2, r3
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <HAL_GPIO_EXTI_Callback+0x68>)
 8000912:	f7ff fe55 	bl	80005c0 <printmsg>
	printmsg("Current Date is: %02d-%2d-%2d <%s> \r\n", RTC_DateRead.Month, RTC_DateRead.Date, RTC_DateRead.Year, getDayofweek(RTC_DateRead.WeekDay));
 8000916:	7a7b      	ldrb	r3, [r7, #9]
 8000918:	461c      	mov	r4, r3
 800091a:	7abb      	ldrb	r3, [r7, #10]
 800091c:	461d      	mov	r5, r3
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	461e      	mov	r6, r3
 8000922:	7a3b      	ldrb	r3, [r7, #8]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ffbd 	bl	80008a4 <getDayofweek>
 800092a:	4603      	mov	r3, r0
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	4633      	mov	r3, r6
 8000930:	462a      	mov	r2, r5
 8000932:	4621      	mov	r1, r4
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000936:	f7ff fe43 	bl	80005c0 <printmsg>
}
 800093a:	bf00      	nop
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000942:	bf00      	nop
 8000944:	20000098 	.word	0x20000098
 8000948:	080038cc 	.word	0x080038cc
 800094c:	080038f0 	.word	0x080038f0

08000950 <Error_handler>:

void Error_handler(void){
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	while(1);
 8000954:	e7fe      	b.n	8000954 <Error_handler+0x4>
	...

08000958 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void HAL_MspInit(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 fa4f 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x40>)
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <HAL_MspInit+0x40>)
 8000968:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800096c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	f06f 000b 	mvn.w	r0, #11
 8000976:	f000 fa4e 	bl	8000e16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	f06f 000a 	mvn.w	r0, #10
 8000982:	f000 fa48 	bl	8000e16 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	f06f 0009 	mvn.w	r0, #9
 800098e:	f000 fa42 	bl	8000e16 <HAL_NVIC_SetPriority>

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

	//2 . Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2;
 80009dc:	2304      	movs	r3, #4
 80009de:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2; //UART2_TX
 80009ec:	2307      	movs	r3, #7
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <HAL_UART_MspInit+0x8c>)
 80009f8:	f000 fa6e 	bl	8000ed8 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80009fc:	2308      	movs	r3, #8
 80009fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <HAL_UART_MspInit+0x8c>)
 8000a08:	f000 fa66 	bl	8000ed8 <HAL_GPIO_Init>
	//3 . Enable the IRQ and set up the priority (NVIC settings )
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a0c:	2026      	movs	r0, #38	; 0x26
 8000a0e:	f000 fa1e 	bl	8000e4e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2026      	movs	r0, #38	; 0x26
 8000a18:	f000 f9fd 	bl	8000e16 <HAL_NVIC_SetPriority>

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0a6      	sub	sp, #152	; 0x98
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_PeriphCLKInitTypeDef RCC_RTCPeriClkInit;
	//1. Turn on the LSE
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000a34:	2304      	movs	r3, #4
 8000a36:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	67fb      	str	r3, [r7, #124]	; 0x7c

	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8000a40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f9ff 	bl	8001e48 <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_RTC_MspInit+0x28>
		Error_handler();
 8000a50:	f7ff ff7e 	bl	8000950 <Error_handler>
	}

	//2. select LSE as RTCCLK
	RCC_RTCPeriClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a54:	2320      	movs	r3, #32
 8000a56:	60bb      	str	r3, [r7, #8]
	RCC_RTCPeriClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48

	if(HAL_RCCEx_PeriphCLKConfig(&RCC_RTCPeriClkInit) != HAL_OK){
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fd26 	bl	80014b4 <HAL_RCCEx_PeriphCLKConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_RTC_MspInit+0x46>
		Error_handler();
 8000a6e:	f7ff ff6f 	bl	8000950 <Error_handler>
	}

	//3. Enable the RTC Clock
	__HAL_RCC_RTC_ENABLE();
 8000a72:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_RTC_MspInit+0x54>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	3798      	adds	r7, #152	; 0x98
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	42470e3c 	.word	0x42470e3c

08000a84 <SysTick_Handler>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void SysTick_Handler(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000a88:	f000 f8ca 	bl	8000c20 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000a8c:	f000 fa16 	bl	8000ebc <HAL_SYSTICK_IRQHandler>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a9c:	f000 fbae 	bl	80011fc <HAL_GPIO_EXTI_IRQHandler>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <_sbrk+0x50>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x16>
		heap_end = &end;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <_sbrk+0x50>)
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <_sbrk+0x54>)
 8000ab8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <_sbrk+0x50>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <_sbrk+0x50>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	466a      	mov	r2, sp
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d907      	bls.n	8000ade <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ace:	f002 fa71 	bl	8002fb4 <__errno>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	e006      	b.n	8000aec <_sbrk+0x48>
	}

	heap_end += incr;
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <_sbrk+0x50>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <_sbrk+0x50>)
 8000ae8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000008c 	.word	0x2000008c
 8000af8:	20000100 	.word	0x20000100

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <SystemInit+0x28>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <SystemInit+0x28>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SystemInit+0x28>)
 8000b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b16:	609a      	str	r2, [r3, #8]
#endif
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b2e:	e003      	b.n	8000b38 <LoopCopyDataInit>

08000b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b36:	3104      	adds	r1, #4

08000b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b40:	d3f6      	bcc.n	8000b30 <CopyDataInit>
  ldr  r2, =_sbss
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b44:	e002      	b.n	8000b4c <LoopFillZerobss>

08000b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b48:	f842 3b04 	str.w	r3, [r2], #4

08000b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b50:	d3f9      	bcc.n	8000b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b52:	f7ff ffd3 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f002 fa33 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5a:	f7ff fd57 	bl	800060c <main>
  bx  lr    
 8000b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b64:	08003974 	.word	0x08003974
  ldr  r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b6c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b70:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b74:	20000100 	.word	0x20000100

08000b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_Init+0x40>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_Init+0x40>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x40>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f92b 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fed2 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023c00 	.word	0x40023c00

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f943 	bl	8000e6a <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f90b 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000004 	.word	0x20000004

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	200000f8 	.word	0x200000f8

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200000f8 	.word	0x200000f8

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff29 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff3e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff31 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d106      	bne.n	8000ea0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e9e:	e005      	b.n	8000eac <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ea6:	f023 0304 	bic.w	r3, r3, #4
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ec0:	f000 f802 	bl	8000ec8 <HAL_SYSTICK_Callback>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e165      	b.n	80011c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8154 	bne.w	80011ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d00b      	beq.n	8000f32 <HAL_GPIO_Init+0x5a>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f26:	2b11      	cmp	r3, #17
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b12      	cmp	r3, #18
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0xfc>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b12      	cmp	r3, #18
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80ae 	beq.w	80011ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <HAL_GPIO_Init+0x2fc>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a5b      	ldr	r2, [pc, #364]	; (80011d4 <HAL_GPIO_Init+0x2fc>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b59      	ldr	r3, [pc, #356]	; (80011d4 <HAL_GPIO_Init+0x2fc>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a57      	ldr	r2, [pc, #348]	; (80011d8 <HAL_GPIO_Init+0x300>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4e      	ldr	r2, [pc, #312]	; (80011dc <HAL_GPIO_Init+0x304>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d025      	beq.n	80010f2 <HAL_GPIO_Init+0x21a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4d      	ldr	r2, [pc, #308]	; (80011e0 <HAL_GPIO_Init+0x308>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01f      	beq.n	80010ee <HAL_GPIO_Init+0x216>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4c      	ldr	r2, [pc, #304]	; (80011e4 <HAL_GPIO_Init+0x30c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x212>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4b      	ldr	r2, [pc, #300]	; (80011e8 <HAL_GPIO_Init+0x310>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x20e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4a      	ldr	r2, [pc, #296]	; (80011ec <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x20a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a49      	ldr	r2, [pc, #292]	; (80011f0 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x206>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x202>
 80010d6:	2306      	movs	r3, #6
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010da:	2307      	movs	r3, #7
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x21c>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4934      	ldr	r1, [pc, #208]	; (80011d8 <HAL_GPIO_Init+0x300>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <HAL_GPIO_Init+0x320>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001136:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <HAL_GPIO_Init+0x320>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <HAL_GPIO_Init+0x320>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001160:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <HAL_GPIO_Init+0x320>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_GPIO_Init+0x320>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_GPIO_Init+0x320>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_GPIO_Init+0x320>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b4:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_GPIO_Init+0x320>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f ae96 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	3724      	adds	r7, #36	; 0x24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fb60 	bl	80008e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40013c00 	.word	0x40013c00

0800122c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_PWR_EnableWakeUpPin+0x20>)
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	4904      	ldr	r1, [pc, #16]	; (800124c <HAL_PWR_EnableWakeUpPin+0x20>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40007000 	.word	0x40007000

08001250 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800126c:	bf30      	wfi
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40007000 	.word	0x40007000
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0cc      	b.n	800142e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001294:	4b68      	ldr	r3, [pc, #416]	; (8001438 <HAL_RCC_ClockConfig+0x1b8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d90c      	bls.n	80012bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b65      	ldr	r3, [pc, #404]	; (8001438 <HAL_RCC_ClockConfig+0x1b8>)
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012aa:	4b63      	ldr	r3, [pc, #396]	; (8001438 <HAL_RCC_ClockConfig+0x1b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e0b8      	b.n	800142e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d020      	beq.n	800130a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d4:	4b59      	ldr	r3, [pc, #356]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a58      	ldr	r2, [pc, #352]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012ec:	4b53      	ldr	r3, [pc, #332]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a52      	ldr	r2, [pc, #328]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f8:	4b50      	ldr	r3, [pc, #320]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	494d      	ldr	r1, [pc, #308]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d044      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d107      	bne.n	800132e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b47      	ldr	r3, [pc, #284]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d119      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e07f      	b.n	800142e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d003      	beq.n	800133e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800133a:	2b03      	cmp	r3, #3
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133e:	4b3f      	ldr	r3, [pc, #252]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d109      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e06f      	b.n	800142e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e067      	b.n	800142e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f023 0203 	bic.w	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4934      	ldr	r1, [pc, #208]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	4313      	orrs	r3, r2
 800136e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001370:	f7ff fc6a 	bl	8000c48 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001376:	e00a      	b.n	800138e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001378:	f7ff fc66 	bl	8000c48 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	; 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e04f      	b.n	800142e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 020c 	and.w	r2, r3, #12
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	429a      	cmp	r2, r3
 800139e:	d1eb      	bne.n	8001378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <HAL_RCC_ClockConfig+0x1b8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d20c      	bcs.n	80013c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <HAL_RCC_ClockConfig+0x1b8>)
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_RCC_ClockConfig+0x1b8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d001      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e032      	b.n	800142e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d008      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4916      	ldr	r1, [pc, #88]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d009      	beq.n	8001406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	490e      	ldr	r1, [pc, #56]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001406:	f000 fb7f 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 800140a:	4601      	mov	r1, r0
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	fa21 f303 	lsr.w	r3, r1, r3
 800141e:	4a09      	ldr	r2, [pc, #36]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_RCC_ClockConfig+0x1c8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fbca 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00
 800143c:	40023800 	.word	0x40023800
 8001440:	08003918 	.word	0x08003918
 8001444:	20000000 	.word	0x20000000
 8001448:	20000004 	.word	0x20000004

0800144c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_RCC_GetHCLKFreq+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000

08001464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001468:	f7ff fff0 	bl	800144c <HAL_RCC_GetHCLKFreq>
 800146c:	4601      	mov	r1, r0
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	0a9b      	lsrs	r3, r3, #10
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	4a03      	ldr	r2, [pc, #12]	; (8001488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	08003928 	.word	0x08003928

0800148c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001490:	f7ff ffdc 	bl	800144c <HAL_RCC_GetHCLKFreq>
 8001494:	4601      	mov	r1, r0
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	0b5b      	lsrs	r3, r3, #13
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800
 80014b0:	08003928 	.word	0x08003928

080014b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d010      	beq.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80014ec:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014f2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	496c      	ldr	r1, [pc, #432]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800150a:	2301      	movs	r3, #1
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d010      	beq.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800151a:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800151c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001520:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	4960      	ldr	r1, [pc, #384]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800152a:	4313      	orrs	r3, r2
 800152c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001538:	2301      	movs	r3, #1
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d017      	beq.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800154a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800154e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4955      	ldr	r1, [pc, #340]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001558:	4313      	orrs	r3, r2
 800155a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001566:	d101      	bne.n	800156c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001568:	2301      	movs	r3, #1
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001574:	2301      	movs	r3, #1
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d017      	beq.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001584:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800158a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	4946      	ldr	r1, [pc, #280]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001594:	4313      	orrs	r3, r2
 8001596:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a2:	d101      	bne.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0320 	and.w	r3, r3, #32
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 808a 	beq.w	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80015de:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a33      	ldr	r2, [pc, #204]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015ea:	f7ff fb2d 	bl	8000c48 <HAL_GetTick>
 80015ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff fb29 	bl	8000c48 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e278      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001610:	4b26      	ldr	r3, [pc, #152]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001618:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d02f      	beq.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	429a      	cmp	r2, r3
 800162c:	d028      	beq.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001636:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001638:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d114      	bne.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff faf7 	bl	8000c48 <HAL_GetTick>
 800165a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff faf3 	bl	8000c48 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e240      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ee      	beq.n	800165e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800168c:	d114      	bne.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800169e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016a2:	4902      	ldr	r1, [pc, #8]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]
 80016a8:	e00c      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42470e40 	.word	0x42470e40
 80016b8:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a49      	ldr	r2, [pc, #292]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80016c2:	6093      	str	r3, [r2, #8]
 80016c4:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	4944      	ldr	r1, [pc, #272]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d004      	beq.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80016e8:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80016ea:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00a      	beq.n	800170e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80016f8:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4937      	ldr	r1, [pc, #220]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001708:	4313      	orrs	r3, r2
 800170a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00a      	beq.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800171c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001720:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001728:	492e      	ldr	r1, [pc, #184]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800172a:	4313      	orrs	r3, r2
 800172c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d011      	beq.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800173e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001742:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174a:	4926      	ldr	r1, [pc, #152]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800174c:	4313      	orrs	r3, r2
 800174e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800175a:	d101      	bne.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800175c:	2301      	movs	r3, #1
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00a      	beq.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800176e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001772:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	491a      	ldr	r1, [pc, #104]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800177c:	4313      	orrs	r3, r2
 800177e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	2b00      	cmp	r3, #0
 800178c:	d011      	beq.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001794:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800179c:	4911      	ldr	r1, [pc, #68]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ac:	d101      	bne.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80017ae:	2301      	movs	r3, #1
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d005      	beq.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017c0:	f040 80ff 	bne.w	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80017ca:	f7ff fa3d 	bl	8000c48 <HAL_GetTick>
 80017ce:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017d0:	e00e      	b.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80017d2:	f7ff fa39 	bl	8000c48 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d907      	bls.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e188      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	424711e0 	.word	0x424711e0
 80017ec:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017f0:	4b7e      	ldr	r3, [pc, #504]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ea      	bne.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	2b00      	cmp	r3, #0
 800180e:	d009      	beq.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001818:	2b00      	cmp	r3, #0
 800181a:	d028      	beq.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001820:	2b00      	cmp	r3, #0
 8001822:	d124      	bne.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001824:	4b71      	ldr	r3, [pc, #452]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	3301      	adds	r3, #1
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001836:	4b6d      	ldr	r3, [pc, #436]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800183c:	0e1b      	lsrs	r3, r3, #24
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	019b      	lsls	r3, r3, #6
 800184e:	431a      	orrs	r2, r3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	3b01      	subs	r3, #1
 8001856:	041b      	lsls	r3, r3, #16
 8001858:	431a      	orrs	r2, r3
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	071b      	lsls	r3, r3, #28
 8001866:	4961      	ldr	r1, [pc, #388]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001868:	4313      	orrs	r3, r2
 800186a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001882:	d00a      	beq.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800188c:	2b00      	cmp	r3, #0
 800188e:	d035      	beq.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001898:	d130      	bne.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800189a:	4b54      	ldr	r3, [pc, #336]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800189c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018a0:	0c1b      	lsrs	r3, r3, #16
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	3301      	adds	r3, #1
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018ac:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b2:	0f1b      	lsrs	r3, r3, #28
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	019b      	lsls	r3, r3, #6
 80018c4:	431a      	orrs	r2, r3
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	431a      	orrs	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	071b      	lsls	r3, r3, #28
 80018dc:	4943      	ldr	r1, [pc, #268]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ea:	f023 021f 	bic.w	r2, r3, #31
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	3b01      	subs	r3, #1
 80018f4:	493d      	ldr	r1, [pc, #244]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d029      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001910:	d124      	bne.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001918:	0c1b      	lsrs	r3, r3, #16
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800192a:	0f1b      	lsrs	r3, r3, #28
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	019b      	lsls	r3, r3, #6
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	431a      	orrs	r2, r3
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	431a      	orrs	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	071b      	lsls	r3, r3, #28
 8001954:	4925      	ldr	r1, [pc, #148]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001956:	4313      	orrs	r3, r2
 8001958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	071b      	lsls	r3, r3, #28
 800198e:	4917      	ldr	r1, [pc, #92]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001990:	4313      	orrs	r3, r2
 8001992:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff f954 	bl	8000c48 <HAL_GetTick>
 80019a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80019a4:	f7ff f950 	bl	8000c48 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e09f      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	f040 8095 	bne.w	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019d0:	f7ff f93a 	bl	8000c48 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019d6:	e00f      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80019d8:	f7ff f936 	bl	8000c48 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d908      	bls.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e085      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	42470068 	.word	0x42470068
 80019f4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a04:	d0e8      	beq.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d02b      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d127      	bne.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	019b      	lsls	r3, r3, #6
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	3b01      	subs	r3, #1
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	4928      	ldr	r1, [pc, #160]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a6a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	3b01      	subs	r3, #1
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	4922      	ldr	r1, [pc, #136]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01d      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a92:	d118      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	0e1b      	lsrs	r3, r3, #24
 8001a9c:	f003 030f 	and.w	r3, r3, #15
 8001aa0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	019b      	lsls	r3, r3, #6
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	4910      	ldr	r1, [pc, #64]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001acc:	f7ff f8bc 	bl	8000c48 <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ad4:	f7ff f8b8 	bl	8000c48 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e007      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af2:	d1ef      	bne.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3730      	adds	r7, #48	; 0x30
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	42470070 	.word	0x42470070

08001b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b22:	4bc6      	ldr	r3, [pc, #792]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	f200 817e 	bhi.w	8001e2c <HAL_RCC_GetSysClockFreq+0x324>
 8001b30:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <HAL_RCC_GetSysClockFreq+0x30>)
 8001b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b36:	bf00      	nop
 8001b38:	08001b6d 	.word	0x08001b6d
 8001b3c:	08001e2d 	.word	0x08001e2d
 8001b40:	08001e2d 	.word	0x08001e2d
 8001b44:	08001e2d 	.word	0x08001e2d
 8001b48:	08001b73 	.word	0x08001b73
 8001b4c:	08001e2d 	.word	0x08001e2d
 8001b50:	08001e2d 	.word	0x08001e2d
 8001b54:	08001e2d 	.word	0x08001e2d
 8001b58:	08001b79 	.word	0x08001b79
 8001b5c:	08001e2d 	.word	0x08001e2d
 8001b60:	08001e2d 	.word	0x08001e2d
 8001b64:	08001e2d 	.word	0x08001e2d
 8001b68:	08001cd5 	.word	0x08001cd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4bb4      	ldr	r3, [pc, #720]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x338>)
 8001b6e:	613b      	str	r3, [r7, #16]
       break;
 8001b70:	e15f      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b72:	4bb4      	ldr	r3, [pc, #720]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001b74:	613b      	str	r3, [r7, #16]
      break;
 8001b76:	e15c      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b78:	4bb0      	ldr	r3, [pc, #704]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b80:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b82:	4bae      	ldr	r3, [pc, #696]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d04a      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4bab      	ldr	r3, [pc, #684]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	f04f 0400 	mov.w	r4, #0
 8001b98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	ea03 0501 	and.w	r5, r3, r1
 8001ba4:	ea04 0602 	and.w	r6, r4, r2
 8001ba8:	4629      	mov	r1, r5
 8001baa:	4632      	mov	r2, r6
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	f04f 0400 	mov.w	r4, #0
 8001bb4:	0154      	lsls	r4, r2, #5
 8001bb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bba:	014b      	lsls	r3, r1, #5
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	1b49      	subs	r1, r1, r5
 8001bc2:	eb62 0206 	sbc.w	r2, r2, r6
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	f04f 0400 	mov.w	r4, #0
 8001bce:	0194      	lsls	r4, r2, #6
 8001bd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bd4:	018b      	lsls	r3, r1, #6
 8001bd6:	1a5b      	subs	r3, r3, r1
 8001bd8:	eb64 0402 	sbc.w	r4, r4, r2
 8001bdc:	f04f 0100 	mov.w	r1, #0
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	00e2      	lsls	r2, r4, #3
 8001be6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bea:	00d9      	lsls	r1, r3, #3
 8001bec:	460b      	mov	r3, r1
 8001bee:	4614      	mov	r4, r2
 8001bf0:	195b      	adds	r3, r3, r5
 8001bf2:	eb44 0406 	adc.w	r4, r4, r6
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	0262      	lsls	r2, r4, #9
 8001c00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c04:	0259      	lsls	r1, r3, #9
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f04f 0400 	mov.w	r4, #0
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	f7fe fb52 	bl	80002c0 <__aeabi_uldivmod>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e049      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	4b85      	ldr	r3, [pc, #532]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	f04f 0400 	mov.w	r4, #0
 8001c2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	ea03 0501 	and.w	r5, r3, r1
 8001c3a:	ea04 0602 	and.w	r6, r4, r2
 8001c3e:	4629      	mov	r1, r5
 8001c40:	4632      	mov	r2, r6
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	f04f 0400 	mov.w	r4, #0
 8001c4a:	0154      	lsls	r4, r2, #5
 8001c4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c50:	014b      	lsls	r3, r1, #5
 8001c52:	4619      	mov	r1, r3
 8001c54:	4622      	mov	r2, r4
 8001c56:	1b49      	subs	r1, r1, r5
 8001c58:	eb62 0206 	sbc.w	r2, r2, r6
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	f04f 0400 	mov.w	r4, #0
 8001c64:	0194      	lsls	r4, r2, #6
 8001c66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c6a:	018b      	lsls	r3, r1, #6
 8001c6c:	1a5b      	subs	r3, r3, r1
 8001c6e:	eb64 0402 	sbc.w	r4, r4, r2
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	00e2      	lsls	r2, r4, #3
 8001c7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c80:	00d9      	lsls	r1, r3, #3
 8001c82:	460b      	mov	r3, r1
 8001c84:	4614      	mov	r4, r2
 8001c86:	195b      	adds	r3, r3, r5
 8001c88:	eb44 0406 	adc.w	r4, r4, r6
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	02a2      	lsls	r2, r4, #10
 8001c96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c9a:	0299      	lsls	r1, r3, #10
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f04f 0400 	mov.w	r4, #0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4623      	mov	r3, r4
 8001cae:	f7fe fb07 	bl	80002c0 <__aeabi_uldivmod>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb8:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	613b      	str	r3, [r7, #16]
      break;
 8001cd2:	e0ae      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cdc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cde:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d04a      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cea:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	f04f 0400 	mov.w	r4, #0
 8001cf4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	ea03 0501 	and.w	r5, r3, r1
 8001d00:	ea04 0602 	and.w	r6, r4, r2
 8001d04:	4629      	mov	r1, r5
 8001d06:	4632      	mov	r2, r6
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	f04f 0400 	mov.w	r4, #0
 8001d10:	0154      	lsls	r4, r2, #5
 8001d12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d16:	014b      	lsls	r3, r1, #5
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	1b49      	subs	r1, r1, r5
 8001d1e:	eb62 0206 	sbc.w	r2, r2, r6
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	f04f 0400 	mov.w	r4, #0
 8001d2a:	0194      	lsls	r4, r2, #6
 8001d2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d30:	018b      	lsls	r3, r1, #6
 8001d32:	1a5b      	subs	r3, r3, r1
 8001d34:	eb64 0402 	sbc.w	r4, r4, r2
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	00e2      	lsls	r2, r4, #3
 8001d42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d46:	00d9      	lsls	r1, r3, #3
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4614      	mov	r4, r2
 8001d4c:	195b      	adds	r3, r3, r5
 8001d4e:	eb44 0406 	adc.w	r4, r4, r6
 8001d52:	f04f 0100 	mov.w	r1, #0
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	0262      	lsls	r2, r4, #9
 8001d5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d60:	0259      	lsls	r1, r3, #9
 8001d62:	460b      	mov	r3, r1
 8001d64:	4614      	mov	r4, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	4621      	mov	r1, r4
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f04f 0400 	mov.w	r4, #0
 8001d70:	461a      	mov	r2, r3
 8001d72:	4623      	mov	r3, r4
 8001d74:	f7fe faa4 	bl	80002c0 <__aeabi_uldivmod>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	460c      	mov	r4, r1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e049      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	f04f 0400 	mov.w	r4, #0
 8001d8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	ea03 0501 	and.w	r5, r3, r1
 8001d96:	ea04 0602 	and.w	r6, r4, r2
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	4632      	mov	r2, r6
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	f04f 0400 	mov.w	r4, #0
 8001da6:	0154      	lsls	r4, r2, #5
 8001da8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dac:	014b      	lsls	r3, r1, #5
 8001dae:	4619      	mov	r1, r3
 8001db0:	4622      	mov	r2, r4
 8001db2:	1b49      	subs	r1, r1, r5
 8001db4:	eb62 0206 	sbc.w	r2, r2, r6
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	f04f 0400 	mov.w	r4, #0
 8001dc0:	0194      	lsls	r4, r2, #6
 8001dc2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dc6:	018b      	lsls	r3, r1, #6
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	eb64 0402 	sbc.w	r4, r4, r2
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	00e2      	lsls	r2, r4, #3
 8001dd8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ddc:	00d9      	lsls	r1, r3, #3
 8001dde:	460b      	mov	r3, r1
 8001de0:	4614      	mov	r4, r2
 8001de2:	195b      	adds	r3, r3, r5
 8001de4:	eb44 0406 	adc.w	r4, r4, r6
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	02a2      	lsls	r2, r4, #10
 8001df2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001df6:	0299      	lsls	r1, r3, #10
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4614      	mov	r4, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	4621      	mov	r1, r4
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f04f 0400 	mov.w	r4, #0
 8001e06:	461a      	mov	r2, r3
 8001e08:	4623      	mov	r3, r4
 8001e0a:	f7fe fa59 	bl	80002c0 <__aeabi_uldivmod>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	0f1b      	lsrs	r3, r3, #28
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	613b      	str	r3, [r7, #16]
      break;
 8001e2a:	e002      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x338>)
 8001e2e:	613b      	str	r3, [r7, #16]
      break;
 8001e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e32:	693b      	ldr	r3, [r7, #16]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	007a1200 	.word	0x007a1200

08001e48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 8083 	beq.w	8001f68 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e62:	4b95      	ldr	r3, [pc, #596]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d019      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e6e:	4b92      	ldr	r3, [pc, #584]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e7a:	4b8f      	ldr	r3, [pc, #572]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e86:	d00c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e88:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	d112      	bne.n	8001eba <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e94:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea0:	d10b      	bne.n	8001eba <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea2:	4b85      	ldr	r3, [pc, #532]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d05b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x11e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d157      	bne.n	8001f66 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e216      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x8a>
 8001ec4:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a7b      	ldr	r2, [pc, #492]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	e01d      	b.n	8001f0e <HAL_RCC_OscConfig+0xc6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eda:	d10c      	bne.n	8001ef6 <HAL_RCC_OscConfig+0xae>
 8001edc:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a75      	ldr	r2, [pc, #468]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b73      	ldr	r3, [pc, #460]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a72      	ldr	r2, [pc, #456]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e00b      	b.n	8001f0e <HAL_RCC_OscConfig+0xc6>
 8001ef6:	4b70      	ldr	r3, [pc, #448]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a6f      	ldr	r2, [pc, #444]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b6d      	ldr	r3, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6c      	ldr	r2, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d013      	beq.n	8001f3e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe97 	bl	8000c48 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f1e:	f7fe fe93 	bl	8000c48 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1db      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0xd6>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fe83 	bl	8000c48 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f46:	f7fe fe7f 	bl	8000c48 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1c7      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f58:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0xfe>
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d06f      	beq.n	8002054 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d017      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f80:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f8c:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f98:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d11c      	bne.n	8001fde <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa4:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d116      	bne.n	8001fde <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb0:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x180>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e18f      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4938      	ldr	r1, [pc, #224]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fdc:	e03a      	b.n	8002054 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d020      	beq.n	8002028 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe6:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fe2c 	bl	8000c48 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fe28 	bl	8000c48 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e170      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4925      	ldr	r1, [pc, #148]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
 8002026:	e015      	b.n	8002054 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7fe fe0b 	bl	8000c48 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002036:	f7fe fe07 	bl	8000c48 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e14f      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d037      	beq.n	80020d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d016      	beq.n	8002096 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_RCC_OscConfig+0x278>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe fdeb 	bl	8000c48 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002076:	f7fe fde7 	bl	8000c48 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e12f      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_OscConfig+0x270>)
 800208a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x22e>
 8002094:	e01c      	b.n	80020d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_OscConfig+0x278>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe fdd4 	bl	8000c48 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a4:	f7fe fdd0 	bl	8000c48 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d908      	bls.n	80020c4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e118      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470000 	.word	0x42470000
 80020c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b8a      	ldr	r3, [pc, #552]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 80020c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e9      	bne.n	80020a4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8097 	beq.w	800220c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b83      	ldr	r3, [pc, #524]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b7f      	ldr	r3, [pc, #508]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a7e      	ldr	r2, [pc, #504]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b7c      	ldr	r3, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7fe fd8f 	bl	8000c48 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7fe fd8b 	bl	8000c48 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0d3      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b6c      	ldr	r3, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x31a>
 8002154:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x354>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x33c>
 800216a:	4b61      	ldr	r3, [pc, #388]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a60      	ldr	r2, [pc, #384]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
 8002176:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a5d      	ldr	r2, [pc, #372]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x354>
 8002184:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a59      	ldr	r2, [pc, #356]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe fd50 	bl	8000c48 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7fe fd4c 	bl	8000c48 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e092      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c2:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ee      	beq.n	80021ac <HAL_RCC_OscConfig+0x364>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7fe fd3a 	bl	8000c48 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fd36 	bl	8000c48 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e07c      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ee      	bne.n	80021d8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	4a3a      	ldr	r2, [pc, #232]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d068      	beq.n	80022e6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d060      	beq.n	80022e2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d145      	bne.n	80022b4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_RCC_OscConfig+0x4b0>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7fe fd0b 	bl	8000c48 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe fd07 	bl	8000c48 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e04f      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	019b      	lsls	r3, r3, #6
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	085b      	lsrs	r3, r3, #1
 800226c:	3b01      	subs	r3, #1
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	061b      	lsls	r3, r3, #24
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	071b      	lsls	r3, r3, #28
 8002280:	491b      	ldr	r1, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_RCC_OscConfig+0x4b0>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fcdc 	bl	8000c48 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fcd8 	bl	8000c48 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e020      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x44c>
 80022b2:	e018      	b.n	80022e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_OscConfig+0x4b0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe fcc5 	bl	8000c48 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe fcc1 	bl	8000c48 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e009      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x4a8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x47a>
 80022e0:	e001      	b.n	80022e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42470060 	.word	0x42470060

080022fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e083      	b.n	8002416 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7f5b      	ldrb	r3, [r3, #29]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fb84 	bl	8000a2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	22ca      	movs	r2, #202	; 0xca
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2253      	movs	r2, #83	; 0x53
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f944 	bl	80025c8 <RTC_EnterInitMode>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	22ff      	movs	r2, #255	; 0xff
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2204      	movs	r2, #4
 8002352:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e05e      	b.n	8002416 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800236a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	041a      	lsls	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10e      	bne.n	80023e4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8d6 	bl	8002578 <HAL_RTC_WaitForSynchro>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	22ff      	movs	r2, #255	; 0xff
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2204      	movs	r2, #4
 80023de:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e018      	b.n	8002416 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002414:	2300      	movs	r3, #0
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002450:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002454:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002470:	b2da      	uxtb	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800247e:	b2da      	uxtb	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	0c1b      	lsrs	r3, r3, #16
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	b2da      	uxtb	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11a      	bne.n	80024d0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f8be 	bl	8002620 <RTC_Bcd2ToByte>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	785b      	ldrb	r3, [r3, #1]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f8b5 	bl	8002620 <RTC_Bcd2ToByte>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	789b      	ldrb	r3, [r3, #2]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f8ac 	bl	8002620 <RTC_Bcd2ToByte>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80024f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800251c:	b2da      	uxtb	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	0b5b      	lsrs	r3, r3, #13
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11a      	bne.n	800256e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	78db      	ldrb	r3, [r3, #3]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f86f 	bl	8002620 <RTC_Bcd2ToByte>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f866 	bl	8002620 <RTC_Bcd2ToByte>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	789b      	ldrb	r3, [r3, #2]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f85d 	bl	8002620 <RTC_Bcd2ToByte>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002592:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002594:	f7fe fb58 	bl	8000c48 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800259a:	e009      	b.n	80025b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800259c:	f7fe fb54 	bl	8000c48 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025aa:	d901      	bls.n	80025b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e007      	b.n	80025c0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ee      	beq.n	800259c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d119      	bne.n	8002616 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025ec:	f7fe fb2c 	bl	8000c48 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80025f2:	e009      	b.n	8002608 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025f4:	f7fe fb28 	bl	8000c48 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002602:	d901      	bls.n	8002608 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e007      	b.n	8002618 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ee      	beq.n	80025f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	4413      	add	r3, r2
 800264e:	b2db      	uxtb	r3, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e03f      	b.n	80026ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe f98a 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2224      	movs	r2, #36	; 0x24
 800268c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800269e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f90b 	bl	80028bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b088      	sub	sp, #32
 80026fa:	af02      	add	r7, sp, #8
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4613      	mov	r3, r2
 8002704:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b20      	cmp	r3, #32
 8002714:	f040 8083 	bne.w	800281e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_UART_Transmit+0x2e>
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e07b      	b.n	8002820 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_UART_Transmit+0x40>
 8002732:	2302      	movs	r3, #2
 8002734:	e074      	b.n	8002820 <HAL_UART_Transmit+0x12a>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2221      	movs	r2, #33	; 0x21
 8002748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800274c:	f7fe fa7c 	bl	8000c48 <HAL_GetTick>
 8002750:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88fa      	ldrh	r2, [r7, #6]
 800275c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002766:	e042      	b.n	80027ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277e:	d122      	bne.n	80027c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2200      	movs	r2, #0
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f84c 	bl	8002828 <UART_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e042      	b.n	8002820 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3302      	adds	r3, #2
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	e017      	b.n	80027ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	e013      	b.n	80027ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2180      	movs	r1, #128	; 0x80
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f829 	bl	8002828 <UART_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e01f      	b.n	8002820 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	60ba      	str	r2, [r7, #8]
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1b7      	bne.n	8002768 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	2140      	movs	r1, #64	; 0x40
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f810 	bl	8002828 <UART_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e006      	b.n	8002820 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002838:	e02c      	b.n	8002894 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d028      	beq.n	8002894 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <UART_WaitOnFlagUntilTimeout+0x30>
 8002848:	f7fe f9fe 	bl	8000c48 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	429a      	cmp	r2, r3
 8002856:	d21d      	bcs.n	8002894 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002866:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e00f      	b.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d0c3      	beq.n	800283a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028fe:	f023 030c 	bic.w	r3, r3, #12
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	430b      	orrs	r3, r1
 800290a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292a:	f040 818b 	bne.w	8002c44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4ac1      	ldr	r2, [pc, #772]	; (8002c38 <UART_SetConfig+0x37c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d005      	beq.n	8002944 <UART_SetConfig+0x88>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4abf      	ldr	r2, [pc, #764]	; (8002c3c <UART_SetConfig+0x380>)
 800293e:	4293      	cmp	r3, r2
 8002940:	f040 80bd 	bne.w	8002abe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002944:	f7fe fda2 	bl	800148c <HAL_RCC_GetPCLK2Freq>
 8002948:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	461d      	mov	r5, r3
 800294e:	f04f 0600 	mov.w	r6, #0
 8002952:	46a8      	mov	r8, r5
 8002954:	46b1      	mov	r9, r6
 8002956:	eb18 0308 	adds.w	r3, r8, r8
 800295a:	eb49 0409 	adc.w	r4, r9, r9
 800295e:	4698      	mov	r8, r3
 8002960:	46a1      	mov	r9, r4
 8002962:	eb18 0805 	adds.w	r8, r8, r5
 8002966:	eb49 0906 	adc.w	r9, r9, r6
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002976:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800297a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800297e:	4688      	mov	r8, r1
 8002980:	4691      	mov	r9, r2
 8002982:	eb18 0005 	adds.w	r0, r8, r5
 8002986:	eb49 0106 	adc.w	r1, r9, r6
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	461d      	mov	r5, r3
 8002990:	f04f 0600 	mov.w	r6, #0
 8002994:	196b      	adds	r3, r5, r5
 8002996:	eb46 0406 	adc.w	r4, r6, r6
 800299a:	461a      	mov	r2, r3
 800299c:	4623      	mov	r3, r4
 800299e:	f7fd fc8f 	bl	80002c0 <__aeabi_uldivmod>
 80029a2:	4603      	mov	r3, r0
 80029a4:	460c      	mov	r4, r1
 80029a6:	461a      	mov	r2, r3
 80029a8:	4ba5      	ldr	r3, [pc, #660]	; (8002c40 <UART_SetConfig+0x384>)
 80029aa:	fba3 2302 	umull	r2, r3, r3, r2
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	461d      	mov	r5, r3
 80029b8:	f04f 0600 	mov.w	r6, #0
 80029bc:	46a9      	mov	r9, r5
 80029be:	46b2      	mov	sl, r6
 80029c0:	eb19 0309 	adds.w	r3, r9, r9
 80029c4:	eb4a 040a 	adc.w	r4, sl, sl
 80029c8:	4699      	mov	r9, r3
 80029ca:	46a2      	mov	sl, r4
 80029cc:	eb19 0905 	adds.w	r9, r9, r5
 80029d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029e8:	4689      	mov	r9, r1
 80029ea:	4692      	mov	sl, r2
 80029ec:	eb19 0005 	adds.w	r0, r9, r5
 80029f0:	eb4a 0106 	adc.w	r1, sl, r6
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	461d      	mov	r5, r3
 80029fa:	f04f 0600 	mov.w	r6, #0
 80029fe:	196b      	adds	r3, r5, r5
 8002a00:	eb46 0406 	adc.w	r4, r6, r6
 8002a04:	461a      	mov	r2, r3
 8002a06:	4623      	mov	r3, r4
 8002a08:	f7fd fc5a 	bl	80002c0 <__aeabi_uldivmod>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	460c      	mov	r4, r1
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <UART_SetConfig+0x384>)
 8002a14:	fba3 1302 	umull	r1, r3, r3, r2
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	2164      	movs	r1, #100	; 0x64
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	3332      	adds	r3, #50	; 0x32
 8002a26:	4a86      	ldr	r2, [pc, #536]	; (8002c40 <UART_SetConfig+0x384>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a34:	4498      	add	r8, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	461d      	mov	r5, r3
 8002a3a:	f04f 0600 	mov.w	r6, #0
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	46b2      	mov	sl, r6
 8002a42:	eb19 0309 	adds.w	r3, r9, r9
 8002a46:	eb4a 040a 	adc.w	r4, sl, sl
 8002a4a:	4699      	mov	r9, r3
 8002a4c:	46a2      	mov	sl, r4
 8002a4e:	eb19 0905 	adds.w	r9, r9, r5
 8002a52:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a6a:	4689      	mov	r9, r1
 8002a6c:	4692      	mov	sl, r2
 8002a6e:	eb19 0005 	adds.w	r0, r9, r5
 8002a72:	eb4a 0106 	adc.w	r1, sl, r6
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	f04f 0600 	mov.w	r6, #0
 8002a80:	196b      	adds	r3, r5, r5
 8002a82:	eb46 0406 	adc.w	r4, r6, r6
 8002a86:	461a      	mov	r2, r3
 8002a88:	4623      	mov	r3, r4
 8002a8a:	f7fd fc19 	bl	80002c0 <__aeabi_uldivmod>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	460c      	mov	r4, r1
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b6a      	ldr	r3, [pc, #424]	; (8002c40 <UART_SetConfig+0x384>)
 8002a96:	fba3 1302 	umull	r1, r3, r3, r2
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2164      	movs	r1, #100	; 0x64
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	3332      	adds	r3, #50	; 0x32
 8002aa8:	4a65      	ldr	r2, [pc, #404]	; (8002c40 <UART_SetConfig+0x384>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	f003 0207 	and.w	r2, r3, #7
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4442      	add	r2, r8
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e26f      	b.n	8002f9e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002abe:	f7fe fcd1 	bl	8001464 <HAL_RCC_GetPCLK1Freq>
 8002ac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	f04f 0600 	mov.w	r6, #0
 8002acc:	46a8      	mov	r8, r5
 8002ace:	46b1      	mov	r9, r6
 8002ad0:	eb18 0308 	adds.w	r3, r8, r8
 8002ad4:	eb49 0409 	adc.w	r4, r9, r9
 8002ad8:	4698      	mov	r8, r3
 8002ada:	46a1      	mov	r9, r4
 8002adc:	eb18 0805 	adds.w	r8, r8, r5
 8002ae0:	eb49 0906 	adc.w	r9, r9, r6
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002af0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002af4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002af8:	4688      	mov	r8, r1
 8002afa:	4691      	mov	r9, r2
 8002afc:	eb18 0005 	adds.w	r0, r8, r5
 8002b00:	eb49 0106 	adc.w	r1, r9, r6
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	461d      	mov	r5, r3
 8002b0a:	f04f 0600 	mov.w	r6, #0
 8002b0e:	196b      	adds	r3, r5, r5
 8002b10:	eb46 0406 	adc.w	r4, r6, r6
 8002b14:	461a      	mov	r2, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	f7fd fbd2 	bl	80002c0 <__aeabi_uldivmod>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <UART_SetConfig+0x384>)
 8002b24:	fba3 2302 	umull	r2, r3, r3, r2
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	461d      	mov	r5, r3
 8002b32:	f04f 0600 	mov.w	r6, #0
 8002b36:	46a9      	mov	r9, r5
 8002b38:	46b2      	mov	sl, r6
 8002b3a:	eb19 0309 	adds.w	r3, r9, r9
 8002b3e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b42:	4699      	mov	r9, r3
 8002b44:	46a2      	mov	sl, r4
 8002b46:	eb19 0905 	adds.w	r9, r9, r5
 8002b4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b62:	4689      	mov	r9, r1
 8002b64:	4692      	mov	sl, r2
 8002b66:	eb19 0005 	adds.w	r0, r9, r5
 8002b6a:	eb4a 0106 	adc.w	r1, sl, r6
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	461d      	mov	r5, r3
 8002b74:	f04f 0600 	mov.w	r6, #0
 8002b78:	196b      	adds	r3, r5, r5
 8002b7a:	eb46 0406 	adc.w	r4, r6, r6
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4623      	mov	r3, r4
 8002b82:	f7fd fb9d 	bl	80002c0 <__aeabi_uldivmod>
 8002b86:	4603      	mov	r3, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <UART_SetConfig+0x384>)
 8002b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2164      	movs	r1, #100	; 0x64
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	3332      	adds	r3, #50	; 0x32
 8002ba0:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <UART_SetConfig+0x384>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bae:	4498      	add	r8, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	f04f 0600 	mov.w	r6, #0
 8002bb8:	46a9      	mov	r9, r5
 8002bba:	46b2      	mov	sl, r6
 8002bbc:	eb19 0309 	adds.w	r3, r9, r9
 8002bc0:	eb4a 040a 	adc.w	r4, sl, sl
 8002bc4:	4699      	mov	r9, r3
 8002bc6:	46a2      	mov	sl, r4
 8002bc8:	eb19 0905 	adds.w	r9, r9, r5
 8002bcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bd0:	f04f 0100 	mov.w	r1, #0
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002be0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002be4:	4689      	mov	r9, r1
 8002be6:	4692      	mov	sl, r2
 8002be8:	eb19 0005 	adds.w	r0, r9, r5
 8002bec:	eb4a 0106 	adc.w	r1, sl, r6
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	f04f 0600 	mov.w	r6, #0
 8002bfa:	196b      	adds	r3, r5, r5
 8002bfc:	eb46 0406 	adc.w	r4, r6, r6
 8002c00:	461a      	mov	r2, r3
 8002c02:	4623      	mov	r3, r4
 8002c04:	f7fd fb5c 	bl	80002c0 <__aeabi_uldivmod>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <UART_SetConfig+0x384>)
 8002c10:	fba3 1302 	umull	r1, r3, r3, r2
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	2164      	movs	r1, #100	; 0x64
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	3332      	adds	r3, #50	; 0x32
 8002c22:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <UART_SetConfig+0x384>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	f003 0207 	and.w	r2, r3, #7
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4442      	add	r2, r8
 8002c34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002c36:	e1b2      	b.n	8002f9e <UART_SetConfig+0x6e2>
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	40011400 	.word	0x40011400
 8002c40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4ad7      	ldr	r2, [pc, #860]	; (8002fa8 <UART_SetConfig+0x6ec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d005      	beq.n	8002c5a <UART_SetConfig+0x39e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4ad6      	ldr	r2, [pc, #856]	; (8002fac <UART_SetConfig+0x6f0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	f040 80d1 	bne.w	8002dfc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c5a:	f7fe fc17 	bl	800148c <HAL_RCC_GetPCLK2Freq>
 8002c5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	469a      	mov	sl, r3
 8002c64:	f04f 0b00 	mov.w	fp, #0
 8002c68:	46d0      	mov	r8, sl
 8002c6a:	46d9      	mov	r9, fp
 8002c6c:	eb18 0308 	adds.w	r3, r8, r8
 8002c70:	eb49 0409 	adc.w	r4, r9, r9
 8002c74:	4698      	mov	r8, r3
 8002c76:	46a1      	mov	r9, r4
 8002c78:	eb18 080a 	adds.w	r8, r8, sl
 8002c7c:	eb49 090b 	adc.w	r9, r9, fp
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c94:	4688      	mov	r8, r1
 8002c96:	4691      	mov	r9, r2
 8002c98:	eb1a 0508 	adds.w	r5, sl, r8
 8002c9c:	eb4b 0609 	adc.w	r6, fp, r9
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	0094      	lsls	r4, r2, #2
 8002cb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cb8:	008b      	lsls	r3, r1, #2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	4631      	mov	r1, r6
 8002cc2:	f7fd fafd 	bl	80002c0 <__aeabi_uldivmod>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4bb8      	ldr	r3, [pc, #736]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002cce:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	469b      	mov	fp, r3
 8002cdc:	f04f 0c00 	mov.w	ip, #0
 8002ce0:	46d9      	mov	r9, fp
 8002ce2:	46e2      	mov	sl, ip
 8002ce4:	eb19 0309 	adds.w	r3, r9, r9
 8002ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cec:	4699      	mov	r9, r3
 8002cee:	46a2      	mov	sl, r4
 8002cf0:	eb19 090b 	adds.w	r9, r9, fp
 8002cf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d0c:	4689      	mov	r9, r1
 8002d0e:	4692      	mov	sl, r2
 8002d10:	eb1b 0509 	adds.w	r5, fp, r9
 8002d14:	eb4c 060a 	adc.w	r6, ip, sl
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	f04f 0400 	mov.w	r4, #0
 8002d2a:	0094      	lsls	r4, r2, #2
 8002d2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d30:	008b      	lsls	r3, r1, #2
 8002d32:	461a      	mov	r2, r3
 8002d34:	4623      	mov	r3, r4
 8002d36:	4628      	mov	r0, r5
 8002d38:	4631      	mov	r1, r6
 8002d3a:	f7fd fac1 	bl	80002c0 <__aeabi_uldivmod>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	460c      	mov	r4, r1
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b9a      	ldr	r3, [pc, #616]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002d46:	fba3 1302 	umull	r1, r3, r3, r2
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2164      	movs	r1, #100	; 0x64
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	3332      	adds	r3, #50	; 0x32
 8002d58:	4a95      	ldr	r2, [pc, #596]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d64:	4498      	add	r8, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	469b      	mov	fp, r3
 8002d6a:	f04f 0c00 	mov.w	ip, #0
 8002d6e:	46d9      	mov	r9, fp
 8002d70:	46e2      	mov	sl, ip
 8002d72:	eb19 0309 	adds.w	r3, r9, r9
 8002d76:	eb4a 040a 	adc.w	r4, sl, sl
 8002d7a:	4699      	mov	r9, r3
 8002d7c:	46a2      	mov	sl, r4
 8002d7e:	eb19 090b 	adds.w	r9, r9, fp
 8002d82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d9a:	4689      	mov	r9, r1
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	eb1b 0509 	adds.w	r5, fp, r9
 8002da2:	eb4c 060a 	adc.w	r6, ip, sl
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4619      	mov	r1, r3
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	f04f 0400 	mov.w	r4, #0
 8002db8:	0094      	lsls	r4, r2, #2
 8002dba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dbe:	008b      	lsls	r3, r1, #2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	4631      	mov	r1, r6
 8002dc8:	f7fd fa7a 	bl	80002c0 <__aeabi_uldivmod>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	460c      	mov	r4, r1
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b77      	ldr	r3, [pc, #476]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	2164      	movs	r1, #100	; 0x64
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	3332      	adds	r3, #50	; 0x32
 8002de6:	4a72      	ldr	r2, [pc, #456]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	f003 020f 	and.w	r2, r3, #15
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4442      	add	r2, r8
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	e0d0      	b.n	8002f9e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7fe fb32 	bl	8001464 <HAL_RCC_GetPCLK1Freq>
 8002e00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	469a      	mov	sl, r3
 8002e06:	f04f 0b00 	mov.w	fp, #0
 8002e0a:	46d0      	mov	r8, sl
 8002e0c:	46d9      	mov	r9, fp
 8002e0e:	eb18 0308 	adds.w	r3, r8, r8
 8002e12:	eb49 0409 	adc.w	r4, r9, r9
 8002e16:	4698      	mov	r8, r3
 8002e18:	46a1      	mov	r9, r4
 8002e1a:	eb18 080a 	adds.w	r8, r8, sl
 8002e1e:	eb49 090b 	adc.w	r9, r9, fp
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e36:	4688      	mov	r8, r1
 8002e38:	4691      	mov	r9, r2
 8002e3a:	eb1a 0508 	adds.w	r5, sl, r8
 8002e3e:	eb4b 0609 	adc.w	r6, fp, r9
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4619      	mov	r1, r3
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f04f 0400 	mov.w	r4, #0
 8002e54:	0094      	lsls	r4, r2, #2
 8002e56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e5a:	008b      	lsls	r3, r1, #2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4623      	mov	r3, r4
 8002e60:	4628      	mov	r0, r5
 8002e62:	4631      	mov	r1, r6
 8002e64:	f7fd fa2c 	bl	80002c0 <__aeabi_uldivmod>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	460c      	mov	r4, r1
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b50      	ldr	r3, [pc, #320]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002e70:	fba3 2302 	umull	r2, r3, r3, r2
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	469b      	mov	fp, r3
 8002e7e:	f04f 0c00 	mov.w	ip, #0
 8002e82:	46d9      	mov	r9, fp
 8002e84:	46e2      	mov	sl, ip
 8002e86:	eb19 0309 	adds.w	r3, r9, r9
 8002e8a:	eb4a 040a 	adc.w	r4, sl, sl
 8002e8e:	4699      	mov	r9, r3
 8002e90:	46a2      	mov	sl, r4
 8002e92:	eb19 090b 	adds.w	r9, r9, fp
 8002e96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ea6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eae:	4689      	mov	r9, r1
 8002eb0:	4692      	mov	sl, r2
 8002eb2:	eb1b 0509 	adds.w	r5, fp, r9
 8002eb6:	eb4c 060a 	adc.w	r6, ip, sl
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f04f 0400 	mov.w	r4, #0
 8002ecc:	0094      	lsls	r4, r2, #2
 8002ece:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ed2:	008b      	lsls	r3, r1, #2
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	4628      	mov	r0, r5
 8002eda:	4631      	mov	r1, r6
 8002edc:	f7fd f9f0 	bl	80002c0 <__aeabi_uldivmod>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	2164      	movs	r1, #100	; 0x64
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	3332      	adds	r3, #50	; 0x32
 8002efa:	4a2d      	ldr	r2, [pc, #180]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f06:	4498      	add	r8, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	469b      	mov	fp, r3
 8002f0c:	f04f 0c00 	mov.w	ip, #0
 8002f10:	46d9      	mov	r9, fp
 8002f12:	46e2      	mov	sl, ip
 8002f14:	eb19 0309 	adds.w	r3, r9, r9
 8002f18:	eb4a 040a 	adc.w	r4, sl, sl
 8002f1c:	4699      	mov	r9, r3
 8002f1e:	46a2      	mov	sl, r4
 8002f20:	eb19 090b 	adds.w	r9, r9, fp
 8002f24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f3c:	4689      	mov	r9, r1
 8002f3e:	4692      	mov	sl, r2
 8002f40:	eb1b 0509 	adds.w	r5, fp, r9
 8002f44:	eb4c 060a 	adc.w	r6, ip, sl
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	f04f 0400 	mov.w	r4, #0
 8002f5a:	0094      	lsls	r4, r2, #2
 8002f5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f60:	008b      	lsls	r3, r1, #2
 8002f62:	461a      	mov	r2, r3
 8002f64:	4623      	mov	r3, r4
 8002f66:	4628      	mov	r0, r5
 8002f68:	4631      	mov	r1, r6
 8002f6a:	f7fd f9a9 	bl	80002c0 <__aeabi_uldivmod>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460c      	mov	r4, r1
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002f76:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2164      	movs	r1, #100	; 0x64
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	3332      	adds	r3, #50	; 0x32
 8002f88:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <UART_SetConfig+0x6f4>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	f003 020f 	and.w	r2, r3, #15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4442      	add	r2, r8
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	e7ff      	b.n	8002f9e <UART_SetConfig+0x6e2>
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa8:	40011000 	.word	0x40011000
 8002fac:	40011400 	.word	0x40011400
 8002fb0:	51eb851f 	.word	0x51eb851f

08002fb4 <__errno>:
 8002fb4:	4b01      	ldr	r3, [pc, #4]	; (8002fbc <__errno+0x8>)
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	2000000c 	.word	0x2000000c

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	4e0d      	ldr	r6, [pc, #52]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc4:	4c0d      	ldr	r4, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc6:	1ba4      	subs	r4, r4, r6
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	2500      	movs	r5, #0
 8002fcc:	42a5      	cmp	r5, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	4e0b      	ldr	r6, [pc, #44]	; (8003000 <__libc_init_array+0x40>)
 8002fd2:	4c0c      	ldr	r4, [pc, #48]	; (8003004 <__libc_init_array+0x44>)
 8002fd4:	f000 fc1e 	bl	8003814 <_init>
 8002fd8:	1ba4      	subs	r4, r4, r6
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	2500      	movs	r5, #0
 8002fde:	42a5      	cmp	r5, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe8:	4798      	blx	r3
 8002fea:	3501      	adds	r5, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff2:	4798      	blx	r3
 8002ff4:	3501      	adds	r5, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	0800396c 	.word	0x0800396c
 8002ffc:	0800396c 	.word	0x0800396c
 8003000:	0800396c 	.word	0x0800396c
 8003004:	08003970 	.word	0x08003970

08003008 <_vsiprintf_r>:
 8003008:	b500      	push	{lr}
 800300a:	b09b      	sub	sp, #108	; 0x6c
 800300c:	9100      	str	r1, [sp, #0]
 800300e:	9104      	str	r1, [sp, #16]
 8003010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003014:	9105      	str	r1, [sp, #20]
 8003016:	9102      	str	r1, [sp, #8]
 8003018:	4905      	ldr	r1, [pc, #20]	; (8003030 <_vsiprintf_r+0x28>)
 800301a:	9103      	str	r1, [sp, #12]
 800301c:	4669      	mov	r1, sp
 800301e:	f000 f86d 	bl	80030fc <_svfiprintf_r>
 8003022:	9b00      	ldr	r3, [sp, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	b01b      	add	sp, #108	; 0x6c
 800302a:	f85d fb04 	ldr.w	pc, [sp], #4
 800302e:	bf00      	nop
 8003030:	ffff0208 	.word	0xffff0208

08003034 <vsiprintf>:
 8003034:	4613      	mov	r3, r2
 8003036:	460a      	mov	r2, r1
 8003038:	4601      	mov	r1, r0
 800303a:	4802      	ldr	r0, [pc, #8]	; (8003044 <vsiprintf+0x10>)
 800303c:	6800      	ldr	r0, [r0, #0]
 800303e:	f7ff bfe3 	b.w	8003008 <_vsiprintf_r>
 8003042:	bf00      	nop
 8003044:	2000000c 	.word	0x2000000c

08003048 <__ssputs_r>:
 8003048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800304c:	688e      	ldr	r6, [r1, #8]
 800304e:	429e      	cmp	r6, r3
 8003050:	4682      	mov	sl, r0
 8003052:	460c      	mov	r4, r1
 8003054:	4690      	mov	r8, r2
 8003056:	4699      	mov	r9, r3
 8003058:	d837      	bhi.n	80030ca <__ssputs_r+0x82>
 800305a:	898a      	ldrh	r2, [r1, #12]
 800305c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003060:	d031      	beq.n	80030c6 <__ssputs_r+0x7e>
 8003062:	6825      	ldr	r5, [r4, #0]
 8003064:	6909      	ldr	r1, [r1, #16]
 8003066:	1a6f      	subs	r7, r5, r1
 8003068:	6965      	ldr	r5, [r4, #20]
 800306a:	2302      	movs	r3, #2
 800306c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003070:	fb95 f5f3 	sdiv	r5, r5, r3
 8003074:	f109 0301 	add.w	r3, r9, #1
 8003078:	443b      	add	r3, r7
 800307a:	429d      	cmp	r5, r3
 800307c:	bf38      	it	cc
 800307e:	461d      	movcc	r5, r3
 8003080:	0553      	lsls	r3, r2, #21
 8003082:	d530      	bpl.n	80030e6 <__ssputs_r+0x9e>
 8003084:	4629      	mov	r1, r5
 8003086:	f000 fb2b 	bl	80036e0 <_malloc_r>
 800308a:	4606      	mov	r6, r0
 800308c:	b950      	cbnz	r0, 80030a4 <__ssputs_r+0x5c>
 800308e:	230c      	movs	r3, #12
 8003090:	f8ca 3000 	str.w	r3, [sl]
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309a:	81a3      	strh	r3, [r4, #12]
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a4:	463a      	mov	r2, r7
 80030a6:	6921      	ldr	r1, [r4, #16]
 80030a8:	f000 faa8 	bl	80035fc <memcpy>
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b6:	81a3      	strh	r3, [r4, #12]
 80030b8:	6126      	str	r6, [r4, #16]
 80030ba:	6165      	str	r5, [r4, #20]
 80030bc:	443e      	add	r6, r7
 80030be:	1bed      	subs	r5, r5, r7
 80030c0:	6026      	str	r6, [r4, #0]
 80030c2:	60a5      	str	r5, [r4, #8]
 80030c4:	464e      	mov	r6, r9
 80030c6:	454e      	cmp	r6, r9
 80030c8:	d900      	bls.n	80030cc <__ssputs_r+0x84>
 80030ca:	464e      	mov	r6, r9
 80030cc:	4632      	mov	r2, r6
 80030ce:	4641      	mov	r1, r8
 80030d0:	6820      	ldr	r0, [r4, #0]
 80030d2:	f000 fa9e 	bl	8003612 <memmove>
 80030d6:	68a3      	ldr	r3, [r4, #8]
 80030d8:	1b9b      	subs	r3, r3, r6
 80030da:	60a3      	str	r3, [r4, #8]
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	441e      	add	r6, r3
 80030e0:	6026      	str	r6, [r4, #0]
 80030e2:	2000      	movs	r0, #0
 80030e4:	e7dc      	b.n	80030a0 <__ssputs_r+0x58>
 80030e6:	462a      	mov	r2, r5
 80030e8:	f000 fb54 	bl	8003794 <_realloc_r>
 80030ec:	4606      	mov	r6, r0
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d1e2      	bne.n	80030b8 <__ssputs_r+0x70>
 80030f2:	6921      	ldr	r1, [r4, #16]
 80030f4:	4650      	mov	r0, sl
 80030f6:	f000 faa5 	bl	8003644 <_free_r>
 80030fa:	e7c8      	b.n	800308e <__ssputs_r+0x46>

080030fc <_svfiprintf_r>:
 80030fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003100:	461d      	mov	r5, r3
 8003102:	898b      	ldrh	r3, [r1, #12]
 8003104:	061f      	lsls	r7, r3, #24
 8003106:	b09d      	sub	sp, #116	; 0x74
 8003108:	4680      	mov	r8, r0
 800310a:	460c      	mov	r4, r1
 800310c:	4616      	mov	r6, r2
 800310e:	d50f      	bpl.n	8003130 <_svfiprintf_r+0x34>
 8003110:	690b      	ldr	r3, [r1, #16]
 8003112:	b96b      	cbnz	r3, 8003130 <_svfiprintf_r+0x34>
 8003114:	2140      	movs	r1, #64	; 0x40
 8003116:	f000 fae3 	bl	80036e0 <_malloc_r>
 800311a:	6020      	str	r0, [r4, #0]
 800311c:	6120      	str	r0, [r4, #16]
 800311e:	b928      	cbnz	r0, 800312c <_svfiprintf_r+0x30>
 8003120:	230c      	movs	r3, #12
 8003122:	f8c8 3000 	str.w	r3, [r8]
 8003126:	f04f 30ff 	mov.w	r0, #4294967295
 800312a:	e0c8      	b.n	80032be <_svfiprintf_r+0x1c2>
 800312c:	2340      	movs	r3, #64	; 0x40
 800312e:	6163      	str	r3, [r4, #20]
 8003130:	2300      	movs	r3, #0
 8003132:	9309      	str	r3, [sp, #36]	; 0x24
 8003134:	2320      	movs	r3, #32
 8003136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800313a:	2330      	movs	r3, #48	; 0x30
 800313c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003140:	9503      	str	r5, [sp, #12]
 8003142:	f04f 0b01 	mov.w	fp, #1
 8003146:	4637      	mov	r7, r6
 8003148:	463d      	mov	r5, r7
 800314a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800314e:	b10b      	cbz	r3, 8003154 <_svfiprintf_r+0x58>
 8003150:	2b25      	cmp	r3, #37	; 0x25
 8003152:	d13e      	bne.n	80031d2 <_svfiprintf_r+0xd6>
 8003154:	ebb7 0a06 	subs.w	sl, r7, r6
 8003158:	d00b      	beq.n	8003172 <_svfiprintf_r+0x76>
 800315a:	4653      	mov	r3, sl
 800315c:	4632      	mov	r2, r6
 800315e:	4621      	mov	r1, r4
 8003160:	4640      	mov	r0, r8
 8003162:	f7ff ff71 	bl	8003048 <__ssputs_r>
 8003166:	3001      	adds	r0, #1
 8003168:	f000 80a4 	beq.w	80032b4 <_svfiprintf_r+0x1b8>
 800316c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800316e:	4453      	add	r3, sl
 8003170:	9309      	str	r3, [sp, #36]	; 0x24
 8003172:	783b      	ldrb	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 809d 	beq.w	80032b4 <_svfiprintf_r+0x1b8>
 800317a:	2300      	movs	r3, #0
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003184:	9304      	str	r3, [sp, #16]
 8003186:	9307      	str	r3, [sp, #28]
 8003188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800318c:	931a      	str	r3, [sp, #104]	; 0x68
 800318e:	462f      	mov	r7, r5
 8003190:	2205      	movs	r2, #5
 8003192:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003196:	4850      	ldr	r0, [pc, #320]	; (80032d8 <_svfiprintf_r+0x1dc>)
 8003198:	f7fd f842 	bl	8000220 <memchr>
 800319c:	9b04      	ldr	r3, [sp, #16]
 800319e:	b9d0      	cbnz	r0, 80031d6 <_svfiprintf_r+0xda>
 80031a0:	06d9      	lsls	r1, r3, #27
 80031a2:	bf44      	itt	mi
 80031a4:	2220      	movmi	r2, #32
 80031a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031aa:	071a      	lsls	r2, r3, #28
 80031ac:	bf44      	itt	mi
 80031ae:	222b      	movmi	r2, #43	; 0x2b
 80031b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031b4:	782a      	ldrb	r2, [r5, #0]
 80031b6:	2a2a      	cmp	r2, #42	; 0x2a
 80031b8:	d015      	beq.n	80031e6 <_svfiprintf_r+0xea>
 80031ba:	9a07      	ldr	r2, [sp, #28]
 80031bc:	462f      	mov	r7, r5
 80031be:	2000      	movs	r0, #0
 80031c0:	250a      	movs	r5, #10
 80031c2:	4639      	mov	r1, r7
 80031c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031c8:	3b30      	subs	r3, #48	; 0x30
 80031ca:	2b09      	cmp	r3, #9
 80031cc:	d94d      	bls.n	800326a <_svfiprintf_r+0x16e>
 80031ce:	b1b8      	cbz	r0, 8003200 <_svfiprintf_r+0x104>
 80031d0:	e00f      	b.n	80031f2 <_svfiprintf_r+0xf6>
 80031d2:	462f      	mov	r7, r5
 80031d4:	e7b8      	b.n	8003148 <_svfiprintf_r+0x4c>
 80031d6:	4a40      	ldr	r2, [pc, #256]	; (80032d8 <_svfiprintf_r+0x1dc>)
 80031d8:	1a80      	subs	r0, r0, r2
 80031da:	fa0b f000 	lsl.w	r0, fp, r0
 80031de:	4318      	orrs	r0, r3
 80031e0:	9004      	str	r0, [sp, #16]
 80031e2:	463d      	mov	r5, r7
 80031e4:	e7d3      	b.n	800318e <_svfiprintf_r+0x92>
 80031e6:	9a03      	ldr	r2, [sp, #12]
 80031e8:	1d11      	adds	r1, r2, #4
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	9103      	str	r1, [sp, #12]
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	db01      	blt.n	80031f6 <_svfiprintf_r+0xfa>
 80031f2:	9207      	str	r2, [sp, #28]
 80031f4:	e004      	b.n	8003200 <_svfiprintf_r+0x104>
 80031f6:	4252      	negs	r2, r2
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	9207      	str	r2, [sp, #28]
 80031fe:	9304      	str	r3, [sp, #16]
 8003200:	783b      	ldrb	r3, [r7, #0]
 8003202:	2b2e      	cmp	r3, #46	; 0x2e
 8003204:	d10c      	bne.n	8003220 <_svfiprintf_r+0x124>
 8003206:	787b      	ldrb	r3, [r7, #1]
 8003208:	2b2a      	cmp	r3, #42	; 0x2a
 800320a:	d133      	bne.n	8003274 <_svfiprintf_r+0x178>
 800320c:	9b03      	ldr	r3, [sp, #12]
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	9203      	str	r2, [sp, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	bfb8      	it	lt
 8003218:	f04f 33ff 	movlt.w	r3, #4294967295
 800321c:	3702      	adds	r7, #2
 800321e:	9305      	str	r3, [sp, #20]
 8003220:	4d2e      	ldr	r5, [pc, #184]	; (80032dc <_svfiprintf_r+0x1e0>)
 8003222:	7839      	ldrb	r1, [r7, #0]
 8003224:	2203      	movs	r2, #3
 8003226:	4628      	mov	r0, r5
 8003228:	f7fc fffa 	bl	8000220 <memchr>
 800322c:	b138      	cbz	r0, 800323e <_svfiprintf_r+0x142>
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	1b40      	subs	r0, r0, r5
 8003232:	fa03 f000 	lsl.w	r0, r3, r0
 8003236:	9b04      	ldr	r3, [sp, #16]
 8003238:	4303      	orrs	r3, r0
 800323a:	3701      	adds	r7, #1
 800323c:	9304      	str	r3, [sp, #16]
 800323e:	7839      	ldrb	r1, [r7, #0]
 8003240:	4827      	ldr	r0, [pc, #156]	; (80032e0 <_svfiprintf_r+0x1e4>)
 8003242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003246:	2206      	movs	r2, #6
 8003248:	1c7e      	adds	r6, r7, #1
 800324a:	f7fc ffe9 	bl	8000220 <memchr>
 800324e:	2800      	cmp	r0, #0
 8003250:	d038      	beq.n	80032c4 <_svfiprintf_r+0x1c8>
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <_svfiprintf_r+0x1e8>)
 8003254:	bb13      	cbnz	r3, 800329c <_svfiprintf_r+0x1a0>
 8003256:	9b03      	ldr	r3, [sp, #12]
 8003258:	3307      	adds	r3, #7
 800325a:	f023 0307 	bic.w	r3, r3, #7
 800325e:	3308      	adds	r3, #8
 8003260:	9303      	str	r3, [sp, #12]
 8003262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003264:	444b      	add	r3, r9
 8003266:	9309      	str	r3, [sp, #36]	; 0x24
 8003268:	e76d      	b.n	8003146 <_svfiprintf_r+0x4a>
 800326a:	fb05 3202 	mla	r2, r5, r2, r3
 800326e:	2001      	movs	r0, #1
 8003270:	460f      	mov	r7, r1
 8003272:	e7a6      	b.n	80031c2 <_svfiprintf_r+0xc6>
 8003274:	2300      	movs	r3, #0
 8003276:	3701      	adds	r7, #1
 8003278:	9305      	str	r3, [sp, #20]
 800327a:	4619      	mov	r1, r3
 800327c:	250a      	movs	r5, #10
 800327e:	4638      	mov	r0, r7
 8003280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003284:	3a30      	subs	r2, #48	; 0x30
 8003286:	2a09      	cmp	r2, #9
 8003288:	d903      	bls.n	8003292 <_svfiprintf_r+0x196>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0c8      	beq.n	8003220 <_svfiprintf_r+0x124>
 800328e:	9105      	str	r1, [sp, #20]
 8003290:	e7c6      	b.n	8003220 <_svfiprintf_r+0x124>
 8003292:	fb05 2101 	mla	r1, r5, r1, r2
 8003296:	2301      	movs	r3, #1
 8003298:	4607      	mov	r7, r0
 800329a:	e7f0      	b.n	800327e <_svfiprintf_r+0x182>
 800329c:	ab03      	add	r3, sp, #12
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	4622      	mov	r2, r4
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <_svfiprintf_r+0x1ec>)
 80032a4:	a904      	add	r1, sp, #16
 80032a6:	4640      	mov	r0, r8
 80032a8:	f3af 8000 	nop.w
 80032ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032b0:	4681      	mov	r9, r0
 80032b2:	d1d6      	bne.n	8003262 <_svfiprintf_r+0x166>
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	065b      	lsls	r3, r3, #25
 80032b8:	f53f af35 	bmi.w	8003126 <_svfiprintf_r+0x2a>
 80032bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032be:	b01d      	add	sp, #116	; 0x74
 80032c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c4:	ab03      	add	r3, sp, #12
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	4622      	mov	r2, r4
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <_svfiprintf_r+0x1ec>)
 80032cc:	a904      	add	r1, sp, #16
 80032ce:	4640      	mov	r0, r8
 80032d0:	f000 f882 	bl	80033d8 <_printf_i>
 80032d4:	e7ea      	b.n	80032ac <_svfiprintf_r+0x1b0>
 80032d6:	bf00      	nop
 80032d8:	08003930 	.word	0x08003930
 80032dc:	08003936 	.word	0x08003936
 80032e0:	0800393a 	.word	0x0800393a
 80032e4:	00000000 	.word	0x00000000
 80032e8:	08003049 	.word	0x08003049

080032ec <_printf_common>:
 80032ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f0:	4691      	mov	r9, r2
 80032f2:	461f      	mov	r7, r3
 80032f4:	688a      	ldr	r2, [r1, #8]
 80032f6:	690b      	ldr	r3, [r1, #16]
 80032f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bfb8      	it	lt
 8003300:	4613      	movlt	r3, r2
 8003302:	f8c9 3000 	str.w	r3, [r9]
 8003306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800330a:	4606      	mov	r6, r0
 800330c:	460c      	mov	r4, r1
 800330e:	b112      	cbz	r2, 8003316 <_printf_common+0x2a>
 8003310:	3301      	adds	r3, #1
 8003312:	f8c9 3000 	str.w	r3, [r9]
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	0699      	lsls	r1, r3, #26
 800331a:	bf42      	ittt	mi
 800331c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003320:	3302      	addmi	r3, #2
 8003322:	f8c9 3000 	strmi.w	r3, [r9]
 8003326:	6825      	ldr	r5, [r4, #0]
 8003328:	f015 0506 	ands.w	r5, r5, #6
 800332c:	d107      	bne.n	800333e <_printf_common+0x52>
 800332e:	f104 0a19 	add.w	sl, r4, #25
 8003332:	68e3      	ldr	r3, [r4, #12]
 8003334:	f8d9 2000 	ldr.w	r2, [r9]
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	42ab      	cmp	r3, r5
 800333c:	dc28      	bgt.n	8003390 <_printf_common+0xa4>
 800333e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	3300      	adds	r3, #0
 8003346:	bf18      	it	ne
 8003348:	2301      	movne	r3, #1
 800334a:	0692      	lsls	r2, r2, #26
 800334c:	d42d      	bmi.n	80033aa <_printf_common+0xbe>
 800334e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003352:	4639      	mov	r1, r7
 8003354:	4630      	mov	r0, r6
 8003356:	47c0      	blx	r8
 8003358:	3001      	adds	r0, #1
 800335a:	d020      	beq.n	800339e <_printf_common+0xb2>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	68e5      	ldr	r5, [r4, #12]
 8003360:	f8d9 2000 	ldr.w	r2, [r9]
 8003364:	f003 0306 	and.w	r3, r3, #6
 8003368:	2b04      	cmp	r3, #4
 800336a:	bf08      	it	eq
 800336c:	1aad      	subeq	r5, r5, r2
 800336e:	68a3      	ldr	r3, [r4, #8]
 8003370:	6922      	ldr	r2, [r4, #16]
 8003372:	bf0c      	ite	eq
 8003374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003378:	2500      	movne	r5, #0
 800337a:	4293      	cmp	r3, r2
 800337c:	bfc4      	itt	gt
 800337e:	1a9b      	subgt	r3, r3, r2
 8003380:	18ed      	addgt	r5, r5, r3
 8003382:	f04f 0900 	mov.w	r9, #0
 8003386:	341a      	adds	r4, #26
 8003388:	454d      	cmp	r5, r9
 800338a:	d11a      	bne.n	80033c2 <_printf_common+0xd6>
 800338c:	2000      	movs	r0, #0
 800338e:	e008      	b.n	80033a2 <_printf_common+0xb6>
 8003390:	2301      	movs	r3, #1
 8003392:	4652      	mov	r2, sl
 8003394:	4639      	mov	r1, r7
 8003396:	4630      	mov	r0, r6
 8003398:	47c0      	blx	r8
 800339a:	3001      	adds	r0, #1
 800339c:	d103      	bne.n	80033a6 <_printf_common+0xba>
 800339e:	f04f 30ff 	mov.w	r0, #4294967295
 80033a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a6:	3501      	adds	r5, #1
 80033a8:	e7c3      	b.n	8003332 <_printf_common+0x46>
 80033aa:	18e1      	adds	r1, r4, r3
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	2030      	movs	r0, #48	; 0x30
 80033b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033b4:	4422      	add	r2, r4
 80033b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033be:	3302      	adds	r3, #2
 80033c0:	e7c5      	b.n	800334e <_printf_common+0x62>
 80033c2:	2301      	movs	r3, #1
 80033c4:	4622      	mov	r2, r4
 80033c6:	4639      	mov	r1, r7
 80033c8:	4630      	mov	r0, r6
 80033ca:	47c0      	blx	r8
 80033cc:	3001      	adds	r0, #1
 80033ce:	d0e6      	beq.n	800339e <_printf_common+0xb2>
 80033d0:	f109 0901 	add.w	r9, r9, #1
 80033d4:	e7d8      	b.n	8003388 <_printf_common+0x9c>
	...

080033d8 <_printf_i>:
 80033d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80033e0:	460c      	mov	r4, r1
 80033e2:	7e09      	ldrb	r1, [r1, #24]
 80033e4:	b085      	sub	sp, #20
 80033e6:	296e      	cmp	r1, #110	; 0x6e
 80033e8:	4617      	mov	r7, r2
 80033ea:	4606      	mov	r6, r0
 80033ec:	4698      	mov	r8, r3
 80033ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033f0:	f000 80b3 	beq.w	800355a <_printf_i+0x182>
 80033f4:	d822      	bhi.n	800343c <_printf_i+0x64>
 80033f6:	2963      	cmp	r1, #99	; 0x63
 80033f8:	d036      	beq.n	8003468 <_printf_i+0x90>
 80033fa:	d80a      	bhi.n	8003412 <_printf_i+0x3a>
 80033fc:	2900      	cmp	r1, #0
 80033fe:	f000 80b9 	beq.w	8003574 <_printf_i+0x19c>
 8003402:	2958      	cmp	r1, #88	; 0x58
 8003404:	f000 8083 	beq.w	800350e <_printf_i+0x136>
 8003408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800340c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003410:	e032      	b.n	8003478 <_printf_i+0xa0>
 8003412:	2964      	cmp	r1, #100	; 0x64
 8003414:	d001      	beq.n	800341a <_printf_i+0x42>
 8003416:	2969      	cmp	r1, #105	; 0x69
 8003418:	d1f6      	bne.n	8003408 <_printf_i+0x30>
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	6813      	ldr	r3, [r2, #0]
 800341e:	0605      	lsls	r5, r0, #24
 8003420:	f103 0104 	add.w	r1, r3, #4
 8003424:	d52a      	bpl.n	800347c <_printf_i+0xa4>
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6011      	str	r1, [r2, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	da03      	bge.n	8003436 <_printf_i+0x5e>
 800342e:	222d      	movs	r2, #45	; 0x2d
 8003430:	425b      	negs	r3, r3
 8003432:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003436:	486f      	ldr	r0, [pc, #444]	; (80035f4 <_printf_i+0x21c>)
 8003438:	220a      	movs	r2, #10
 800343a:	e039      	b.n	80034b0 <_printf_i+0xd8>
 800343c:	2973      	cmp	r1, #115	; 0x73
 800343e:	f000 809d 	beq.w	800357c <_printf_i+0x1a4>
 8003442:	d808      	bhi.n	8003456 <_printf_i+0x7e>
 8003444:	296f      	cmp	r1, #111	; 0x6f
 8003446:	d020      	beq.n	800348a <_printf_i+0xb2>
 8003448:	2970      	cmp	r1, #112	; 0x70
 800344a:	d1dd      	bne.n	8003408 <_printf_i+0x30>
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	f043 0320 	orr.w	r3, r3, #32
 8003452:	6023      	str	r3, [r4, #0]
 8003454:	e003      	b.n	800345e <_printf_i+0x86>
 8003456:	2975      	cmp	r1, #117	; 0x75
 8003458:	d017      	beq.n	800348a <_printf_i+0xb2>
 800345a:	2978      	cmp	r1, #120	; 0x78
 800345c:	d1d4      	bne.n	8003408 <_printf_i+0x30>
 800345e:	2378      	movs	r3, #120	; 0x78
 8003460:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003464:	4864      	ldr	r0, [pc, #400]	; (80035f8 <_printf_i+0x220>)
 8003466:	e055      	b.n	8003514 <_printf_i+0x13c>
 8003468:	6813      	ldr	r3, [r2, #0]
 800346a:	1d19      	adds	r1, r3, #4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6011      	str	r1, [r2, #0]
 8003470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003478:	2301      	movs	r3, #1
 800347a:	e08c      	b.n	8003596 <_printf_i+0x1be>
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6011      	str	r1, [r2, #0]
 8003480:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003484:	bf18      	it	ne
 8003486:	b21b      	sxthne	r3, r3
 8003488:	e7cf      	b.n	800342a <_printf_i+0x52>
 800348a:	6813      	ldr	r3, [r2, #0]
 800348c:	6825      	ldr	r5, [r4, #0]
 800348e:	1d18      	adds	r0, r3, #4
 8003490:	6010      	str	r0, [r2, #0]
 8003492:	0628      	lsls	r0, r5, #24
 8003494:	d501      	bpl.n	800349a <_printf_i+0xc2>
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	e002      	b.n	80034a0 <_printf_i+0xc8>
 800349a:	0668      	lsls	r0, r5, #25
 800349c:	d5fb      	bpl.n	8003496 <_printf_i+0xbe>
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	4854      	ldr	r0, [pc, #336]	; (80035f4 <_printf_i+0x21c>)
 80034a2:	296f      	cmp	r1, #111	; 0x6f
 80034a4:	bf14      	ite	ne
 80034a6:	220a      	movne	r2, #10
 80034a8:	2208      	moveq	r2, #8
 80034aa:	2100      	movs	r1, #0
 80034ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034b0:	6865      	ldr	r5, [r4, #4]
 80034b2:	60a5      	str	r5, [r4, #8]
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	f2c0 8095 	blt.w	80035e4 <_printf_i+0x20c>
 80034ba:	6821      	ldr	r1, [r4, #0]
 80034bc:	f021 0104 	bic.w	r1, r1, #4
 80034c0:	6021      	str	r1, [r4, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d13d      	bne.n	8003542 <_printf_i+0x16a>
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	f040 808e 	bne.w	80035e8 <_printf_i+0x210>
 80034cc:	4665      	mov	r5, ip
 80034ce:	2a08      	cmp	r2, #8
 80034d0:	d10b      	bne.n	80034ea <_printf_i+0x112>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	07db      	lsls	r3, r3, #31
 80034d6:	d508      	bpl.n	80034ea <_printf_i+0x112>
 80034d8:	6923      	ldr	r3, [r4, #16]
 80034da:	6862      	ldr	r2, [r4, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	bfde      	ittt	le
 80034e0:	2330      	movle	r3, #48	; 0x30
 80034e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034ea:	ebac 0305 	sub.w	r3, ip, r5
 80034ee:	6123      	str	r3, [r4, #16]
 80034f0:	f8cd 8000 	str.w	r8, [sp]
 80034f4:	463b      	mov	r3, r7
 80034f6:	aa03      	add	r2, sp, #12
 80034f8:	4621      	mov	r1, r4
 80034fa:	4630      	mov	r0, r6
 80034fc:	f7ff fef6 	bl	80032ec <_printf_common>
 8003500:	3001      	adds	r0, #1
 8003502:	d14d      	bne.n	80035a0 <_printf_i+0x1c8>
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	b005      	add	sp, #20
 800350a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800350e:	4839      	ldr	r0, [pc, #228]	; (80035f4 <_printf_i+0x21c>)
 8003510:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003514:	6813      	ldr	r3, [r2, #0]
 8003516:	6821      	ldr	r1, [r4, #0]
 8003518:	1d1d      	adds	r5, r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6015      	str	r5, [r2, #0]
 800351e:	060a      	lsls	r2, r1, #24
 8003520:	d50b      	bpl.n	800353a <_printf_i+0x162>
 8003522:	07ca      	lsls	r2, r1, #31
 8003524:	bf44      	itt	mi
 8003526:	f041 0120 	orrmi.w	r1, r1, #32
 800352a:	6021      	strmi	r1, [r4, #0]
 800352c:	b91b      	cbnz	r3, 8003536 <_printf_i+0x15e>
 800352e:	6822      	ldr	r2, [r4, #0]
 8003530:	f022 0220 	bic.w	r2, r2, #32
 8003534:	6022      	str	r2, [r4, #0]
 8003536:	2210      	movs	r2, #16
 8003538:	e7b7      	b.n	80034aa <_printf_i+0xd2>
 800353a:	064d      	lsls	r5, r1, #25
 800353c:	bf48      	it	mi
 800353e:	b29b      	uxthmi	r3, r3
 8003540:	e7ef      	b.n	8003522 <_printf_i+0x14a>
 8003542:	4665      	mov	r5, ip
 8003544:	fbb3 f1f2 	udiv	r1, r3, r2
 8003548:	fb02 3311 	mls	r3, r2, r1, r3
 800354c:	5cc3      	ldrb	r3, [r0, r3]
 800354e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003552:	460b      	mov	r3, r1
 8003554:	2900      	cmp	r1, #0
 8003556:	d1f5      	bne.n	8003544 <_printf_i+0x16c>
 8003558:	e7b9      	b.n	80034ce <_printf_i+0xf6>
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	6825      	ldr	r5, [r4, #0]
 800355e:	6961      	ldr	r1, [r4, #20]
 8003560:	1d18      	adds	r0, r3, #4
 8003562:	6010      	str	r0, [r2, #0]
 8003564:	0628      	lsls	r0, r5, #24
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	d501      	bpl.n	800356e <_printf_i+0x196>
 800356a:	6019      	str	r1, [r3, #0]
 800356c:	e002      	b.n	8003574 <_printf_i+0x19c>
 800356e:	066a      	lsls	r2, r5, #25
 8003570:	d5fb      	bpl.n	800356a <_printf_i+0x192>
 8003572:	8019      	strh	r1, [r3, #0]
 8003574:	2300      	movs	r3, #0
 8003576:	6123      	str	r3, [r4, #16]
 8003578:	4665      	mov	r5, ip
 800357a:	e7b9      	b.n	80034f0 <_printf_i+0x118>
 800357c:	6813      	ldr	r3, [r2, #0]
 800357e:	1d19      	adds	r1, r3, #4
 8003580:	6011      	str	r1, [r2, #0]
 8003582:	681d      	ldr	r5, [r3, #0]
 8003584:	6862      	ldr	r2, [r4, #4]
 8003586:	2100      	movs	r1, #0
 8003588:	4628      	mov	r0, r5
 800358a:	f7fc fe49 	bl	8000220 <memchr>
 800358e:	b108      	cbz	r0, 8003594 <_printf_i+0x1bc>
 8003590:	1b40      	subs	r0, r0, r5
 8003592:	6060      	str	r0, [r4, #4]
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	6123      	str	r3, [r4, #16]
 8003598:	2300      	movs	r3, #0
 800359a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800359e:	e7a7      	b.n	80034f0 <_printf_i+0x118>
 80035a0:	6923      	ldr	r3, [r4, #16]
 80035a2:	462a      	mov	r2, r5
 80035a4:	4639      	mov	r1, r7
 80035a6:	4630      	mov	r0, r6
 80035a8:	47c0      	blx	r8
 80035aa:	3001      	adds	r0, #1
 80035ac:	d0aa      	beq.n	8003504 <_printf_i+0x12c>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	079b      	lsls	r3, r3, #30
 80035b2:	d413      	bmi.n	80035dc <_printf_i+0x204>
 80035b4:	68e0      	ldr	r0, [r4, #12]
 80035b6:	9b03      	ldr	r3, [sp, #12]
 80035b8:	4298      	cmp	r0, r3
 80035ba:	bfb8      	it	lt
 80035bc:	4618      	movlt	r0, r3
 80035be:	e7a3      	b.n	8003508 <_printf_i+0x130>
 80035c0:	2301      	movs	r3, #1
 80035c2:	464a      	mov	r2, r9
 80035c4:	4639      	mov	r1, r7
 80035c6:	4630      	mov	r0, r6
 80035c8:	47c0      	blx	r8
 80035ca:	3001      	adds	r0, #1
 80035cc:	d09a      	beq.n	8003504 <_printf_i+0x12c>
 80035ce:	3501      	adds	r5, #1
 80035d0:	68e3      	ldr	r3, [r4, #12]
 80035d2:	9a03      	ldr	r2, [sp, #12]
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	42ab      	cmp	r3, r5
 80035d8:	dcf2      	bgt.n	80035c0 <_printf_i+0x1e8>
 80035da:	e7eb      	b.n	80035b4 <_printf_i+0x1dc>
 80035dc:	2500      	movs	r5, #0
 80035de:	f104 0919 	add.w	r9, r4, #25
 80035e2:	e7f5      	b.n	80035d0 <_printf_i+0x1f8>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ac      	bne.n	8003542 <_printf_i+0x16a>
 80035e8:	7803      	ldrb	r3, [r0, #0]
 80035ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035f2:	e76c      	b.n	80034ce <_printf_i+0xf6>
 80035f4:	08003941 	.word	0x08003941
 80035f8:	08003952 	.word	0x08003952

080035fc <memcpy>:
 80035fc:	b510      	push	{r4, lr}
 80035fe:	1e43      	subs	r3, r0, #1
 8003600:	440a      	add	r2, r1
 8003602:	4291      	cmp	r1, r2
 8003604:	d100      	bne.n	8003608 <memcpy+0xc>
 8003606:	bd10      	pop	{r4, pc}
 8003608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800360c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003610:	e7f7      	b.n	8003602 <memcpy+0x6>

08003612 <memmove>:
 8003612:	4288      	cmp	r0, r1
 8003614:	b510      	push	{r4, lr}
 8003616:	eb01 0302 	add.w	r3, r1, r2
 800361a:	d807      	bhi.n	800362c <memmove+0x1a>
 800361c:	1e42      	subs	r2, r0, #1
 800361e:	4299      	cmp	r1, r3
 8003620:	d00a      	beq.n	8003638 <memmove+0x26>
 8003622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003626:	f802 4f01 	strb.w	r4, [r2, #1]!
 800362a:	e7f8      	b.n	800361e <memmove+0xc>
 800362c:	4283      	cmp	r3, r0
 800362e:	d9f5      	bls.n	800361c <memmove+0xa>
 8003630:	1881      	adds	r1, r0, r2
 8003632:	1ad2      	subs	r2, r2, r3
 8003634:	42d3      	cmn	r3, r2
 8003636:	d100      	bne.n	800363a <memmove+0x28>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800363e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003642:	e7f7      	b.n	8003634 <memmove+0x22>

08003644 <_free_r>:
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	4605      	mov	r5, r0
 8003648:	2900      	cmp	r1, #0
 800364a:	d045      	beq.n	80036d8 <_free_r+0x94>
 800364c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003650:	1f0c      	subs	r4, r1, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	bfb8      	it	lt
 8003656:	18e4      	addlt	r4, r4, r3
 8003658:	f000 f8d2 	bl	8003800 <__malloc_lock>
 800365c:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <_free_r+0x98>)
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	4610      	mov	r0, r2
 8003662:	b933      	cbnz	r3, 8003672 <_free_r+0x2e>
 8003664:	6063      	str	r3, [r4, #4]
 8003666:	6014      	str	r4, [r2, #0]
 8003668:	4628      	mov	r0, r5
 800366a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800366e:	f000 b8c8 	b.w	8003802 <__malloc_unlock>
 8003672:	42a3      	cmp	r3, r4
 8003674:	d90c      	bls.n	8003690 <_free_r+0x4c>
 8003676:	6821      	ldr	r1, [r4, #0]
 8003678:	1862      	adds	r2, r4, r1
 800367a:	4293      	cmp	r3, r2
 800367c:	bf04      	itt	eq
 800367e:	681a      	ldreq	r2, [r3, #0]
 8003680:	685b      	ldreq	r3, [r3, #4]
 8003682:	6063      	str	r3, [r4, #4]
 8003684:	bf04      	itt	eq
 8003686:	1852      	addeq	r2, r2, r1
 8003688:	6022      	streq	r2, [r4, #0]
 800368a:	6004      	str	r4, [r0, #0]
 800368c:	e7ec      	b.n	8003668 <_free_r+0x24>
 800368e:	4613      	mov	r3, r2
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	b10a      	cbz	r2, 8003698 <_free_r+0x54>
 8003694:	42a2      	cmp	r2, r4
 8003696:	d9fa      	bls.n	800368e <_free_r+0x4a>
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	1858      	adds	r0, r3, r1
 800369c:	42a0      	cmp	r0, r4
 800369e:	d10b      	bne.n	80036b8 <_free_r+0x74>
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	4401      	add	r1, r0
 80036a4:	1858      	adds	r0, r3, r1
 80036a6:	4282      	cmp	r2, r0
 80036a8:	6019      	str	r1, [r3, #0]
 80036aa:	d1dd      	bne.n	8003668 <_free_r+0x24>
 80036ac:	6810      	ldr	r0, [r2, #0]
 80036ae:	6852      	ldr	r2, [r2, #4]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	4401      	add	r1, r0
 80036b4:	6019      	str	r1, [r3, #0]
 80036b6:	e7d7      	b.n	8003668 <_free_r+0x24>
 80036b8:	d902      	bls.n	80036c0 <_free_r+0x7c>
 80036ba:	230c      	movs	r3, #12
 80036bc:	602b      	str	r3, [r5, #0]
 80036be:	e7d3      	b.n	8003668 <_free_r+0x24>
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	1821      	adds	r1, r4, r0
 80036c4:	428a      	cmp	r2, r1
 80036c6:	bf04      	itt	eq
 80036c8:	6811      	ldreq	r1, [r2, #0]
 80036ca:	6852      	ldreq	r2, [r2, #4]
 80036cc:	6062      	str	r2, [r4, #4]
 80036ce:	bf04      	itt	eq
 80036d0:	1809      	addeq	r1, r1, r0
 80036d2:	6021      	streq	r1, [r4, #0]
 80036d4:	605c      	str	r4, [r3, #4]
 80036d6:	e7c7      	b.n	8003668 <_free_r+0x24>
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
 80036da:	bf00      	nop
 80036dc:	20000090 	.word	0x20000090

080036e0 <_malloc_r>:
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	1ccd      	adds	r5, r1, #3
 80036e4:	f025 0503 	bic.w	r5, r5, #3
 80036e8:	3508      	adds	r5, #8
 80036ea:	2d0c      	cmp	r5, #12
 80036ec:	bf38      	it	cc
 80036ee:	250c      	movcc	r5, #12
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	4606      	mov	r6, r0
 80036f4:	db01      	blt.n	80036fa <_malloc_r+0x1a>
 80036f6:	42a9      	cmp	r1, r5
 80036f8:	d903      	bls.n	8003702 <_malloc_r+0x22>
 80036fa:	230c      	movs	r3, #12
 80036fc:	6033      	str	r3, [r6, #0]
 80036fe:	2000      	movs	r0, #0
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	f000 f87d 	bl	8003800 <__malloc_lock>
 8003706:	4a21      	ldr	r2, [pc, #132]	; (800378c <_malloc_r+0xac>)
 8003708:	6814      	ldr	r4, [r2, #0]
 800370a:	4621      	mov	r1, r4
 800370c:	b991      	cbnz	r1, 8003734 <_malloc_r+0x54>
 800370e:	4c20      	ldr	r4, [pc, #128]	; (8003790 <_malloc_r+0xb0>)
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	b91b      	cbnz	r3, 800371c <_malloc_r+0x3c>
 8003714:	4630      	mov	r0, r6
 8003716:	f000 f863 	bl	80037e0 <_sbrk_r>
 800371a:	6020      	str	r0, [r4, #0]
 800371c:	4629      	mov	r1, r5
 800371e:	4630      	mov	r0, r6
 8003720:	f000 f85e 	bl	80037e0 <_sbrk_r>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d124      	bne.n	8003772 <_malloc_r+0x92>
 8003728:	230c      	movs	r3, #12
 800372a:	6033      	str	r3, [r6, #0]
 800372c:	4630      	mov	r0, r6
 800372e:	f000 f868 	bl	8003802 <__malloc_unlock>
 8003732:	e7e4      	b.n	80036fe <_malloc_r+0x1e>
 8003734:	680b      	ldr	r3, [r1, #0]
 8003736:	1b5b      	subs	r3, r3, r5
 8003738:	d418      	bmi.n	800376c <_malloc_r+0x8c>
 800373a:	2b0b      	cmp	r3, #11
 800373c:	d90f      	bls.n	800375e <_malloc_r+0x7e>
 800373e:	600b      	str	r3, [r1, #0]
 8003740:	50cd      	str	r5, [r1, r3]
 8003742:	18cc      	adds	r4, r1, r3
 8003744:	4630      	mov	r0, r6
 8003746:	f000 f85c 	bl	8003802 <__malloc_unlock>
 800374a:	f104 000b 	add.w	r0, r4, #11
 800374e:	1d23      	adds	r3, r4, #4
 8003750:	f020 0007 	bic.w	r0, r0, #7
 8003754:	1ac3      	subs	r3, r0, r3
 8003756:	d0d3      	beq.n	8003700 <_malloc_r+0x20>
 8003758:	425a      	negs	r2, r3
 800375a:	50e2      	str	r2, [r4, r3]
 800375c:	e7d0      	b.n	8003700 <_malloc_r+0x20>
 800375e:	428c      	cmp	r4, r1
 8003760:	684b      	ldr	r3, [r1, #4]
 8003762:	bf16      	itet	ne
 8003764:	6063      	strne	r3, [r4, #4]
 8003766:	6013      	streq	r3, [r2, #0]
 8003768:	460c      	movne	r4, r1
 800376a:	e7eb      	b.n	8003744 <_malloc_r+0x64>
 800376c:	460c      	mov	r4, r1
 800376e:	6849      	ldr	r1, [r1, #4]
 8003770:	e7cc      	b.n	800370c <_malloc_r+0x2c>
 8003772:	1cc4      	adds	r4, r0, #3
 8003774:	f024 0403 	bic.w	r4, r4, #3
 8003778:	42a0      	cmp	r0, r4
 800377a:	d005      	beq.n	8003788 <_malloc_r+0xa8>
 800377c:	1a21      	subs	r1, r4, r0
 800377e:	4630      	mov	r0, r6
 8003780:	f000 f82e 	bl	80037e0 <_sbrk_r>
 8003784:	3001      	adds	r0, #1
 8003786:	d0cf      	beq.n	8003728 <_malloc_r+0x48>
 8003788:	6025      	str	r5, [r4, #0]
 800378a:	e7db      	b.n	8003744 <_malloc_r+0x64>
 800378c:	20000090 	.word	0x20000090
 8003790:	20000094 	.word	0x20000094

08003794 <_realloc_r>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	4607      	mov	r7, r0
 8003798:	4614      	mov	r4, r2
 800379a:	460e      	mov	r6, r1
 800379c:	b921      	cbnz	r1, 80037a8 <_realloc_r+0x14>
 800379e:	4611      	mov	r1, r2
 80037a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037a4:	f7ff bf9c 	b.w	80036e0 <_malloc_r>
 80037a8:	b922      	cbnz	r2, 80037b4 <_realloc_r+0x20>
 80037aa:	f7ff ff4b 	bl	8003644 <_free_r>
 80037ae:	4625      	mov	r5, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037b4:	f000 f826 	bl	8003804 <_malloc_usable_size_r>
 80037b8:	42a0      	cmp	r0, r4
 80037ba:	d20f      	bcs.n	80037dc <_realloc_r+0x48>
 80037bc:	4621      	mov	r1, r4
 80037be:	4638      	mov	r0, r7
 80037c0:	f7ff ff8e 	bl	80036e0 <_malloc_r>
 80037c4:	4605      	mov	r5, r0
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d0f2      	beq.n	80037b0 <_realloc_r+0x1c>
 80037ca:	4631      	mov	r1, r6
 80037cc:	4622      	mov	r2, r4
 80037ce:	f7ff ff15 	bl	80035fc <memcpy>
 80037d2:	4631      	mov	r1, r6
 80037d4:	4638      	mov	r0, r7
 80037d6:	f7ff ff35 	bl	8003644 <_free_r>
 80037da:	e7e9      	b.n	80037b0 <_realloc_r+0x1c>
 80037dc:	4635      	mov	r5, r6
 80037de:	e7e7      	b.n	80037b0 <_realloc_r+0x1c>

080037e0 <_sbrk_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4c06      	ldr	r4, [pc, #24]	; (80037fc <_sbrk_r+0x1c>)
 80037e4:	2300      	movs	r3, #0
 80037e6:	4605      	mov	r5, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	f7fd f95a 	bl	8000aa4 <_sbrk>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_sbrk_r+0x1a>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_sbrk_r+0x1a>
 80037f8:	602b      	str	r3, [r5, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	200000fc 	.word	0x200000fc

08003800 <__malloc_lock>:
 8003800:	4770      	bx	lr

08003802 <__malloc_unlock>:
 8003802:	4770      	bx	lr

08003804 <_malloc_usable_size_r>:
 8003804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003808:	1f18      	subs	r0, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfbc      	itt	lt
 800380e:	580b      	ldrlt	r3, [r1, r0]
 8003810:	18c0      	addlt	r0, r0, r3
 8003812:	4770      	bx	lr

08003814 <_init>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr

08003820 <_fini>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr
