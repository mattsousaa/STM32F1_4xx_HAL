/*
 * main.c
 *
 *  Created on: 21 de Junho, 2020
 *      Author: Mateus Sousa
 */

#include <string.h>
#include <stdio.h>
#include "main.h"
#include "stm32f4xx_hal.h"

void SystemClock_Config(uint8_t clock_freq);
void ADC1_Init(void);
void UART2_Init(void);
void Error_Handler(void);

UART_HandleTypeDef huart2;
ADC_HandleTypeDef hadc1;

char *user_data = "The application is running\r\n";

int main(void){

	char msg[100];
	HAL_Init();
	SystemClock_Config(SYS_CLOCK_FREQ_25_MHZ);

	ADC1_Init();

	HAL_ADC_Start(&hadc1);

	UART2_Init();

	memset(msg, 0, sizeof(msg));
	sprintf(msg,"SYSCLK: %ldHz\r\n",HAL_RCC_GetSysClockFreq());
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "HCLK: %ldHz\r\n", HAL_RCC_GetHCLKFreq());
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "PCLK1: %ldHz\r\n", HAL_RCC_GetPCLK1Freq());
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "PCLK2: %ldHz\r\n", HAL_RCC_GetPCLK2Freq());
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

	while(1){

		char msg[20];
		uint16_t rawValue;
		double temp;

		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);

		rawValue = HAL_ADC_GetValue(&hadc1);
		temp = ((float)rawValue) / 4095 * 3300;
		temp = ((temp - 760.0) / 2.5) + 25;

		sprintf(msg, "rawValue: %hu\r\n", rawValue);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

		sprintf(msg, "Temperature: %.2f\r\n", temp);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

	}

	return 0;

}

void SystemClock_Config(uint8_t clock_freq){

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	uint32_t FLatency = 0;

	/** Initializes the CPU, AHB and APB busses clocks*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;

	switch(clock_freq){

		case SYS_CLOCK_FREQ_25_MHZ:

			RCC_OscInitStruct.PLL.PLLM = 4;
			RCC_OscInitStruct.PLL.PLLN = 50;
			RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
			RCC_OscInitStruct.PLL.PLLQ = 2;

			RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
						                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
			RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
			RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

			FLatency = FLASH_ACR_LATENCY_0WS;

			break;

		case SYS_CLOCK_FREQ_50_MHZ:

			RCC_OscInitStruct.PLL.PLLM = 8;
			RCC_OscInitStruct.PLL.PLLN = 100;
			RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
			RCC_OscInitStruct.PLL.PLLQ = 2;

			RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
									      RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
			RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
			RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

			FLatency = FLASH_ACR_LATENCY_1WS;

			break;

		case SYS_CLOCK_FREQ_84_MHZ:

			/* Configure the main internal regulator output voltage */
			// Enable the clock for the power controller
			__HAL_RCC_PWR_CLK_ENABLE();

			// set regulator voltage scale as 2 to reach MAX frequency of 84MHz
			__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

			//turn on the over drive mode of the voltage regulator (for STM32F0446RE)
			//__HAL_PWR_OVERDRIVE_ENABLE();

			RCC_OscInitStruct.PLL.PLLM = 8;
			RCC_OscInitStruct.PLL.PLLN = 168;
			RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
			RCC_OscInitStruct.PLL.PLLQ = 2;

			RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
			                              RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
			RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
			RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

			FLatency = FLASH_ACR_LATENCY_2WS;

			break;

		default:

			return;

	}

	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
		Error_Handler();
	}

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLatency) != HAL_OK){
		Error_Handler();
	}

	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}

/* ADC1 init function */
void ADC1_Init(void){

	ADC_ChannelConfTypeDef sConfig = {0};

	/* Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;	/* The clock of the analog part of the ADC is the half of the PCLK frequency*/
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;	/* MAX Resolution of ADC Channel */
	hadc1.Init.ScanConvMode = DISABLE;
	hadc1.Init.ContinuousConvMode = ENABLE;	/* We can repeatedly poll for a conversion without stopping and then restarting the ADC */
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;	/* Specifies the data align of the converted result. ADC data register is implemented as half-word register. */
	hadc1.Init.NbrOfConversion = 1;	/* Meaningless. Single conversion mode automatically assumes that the number of sampled channels is equal to 1. */
	hadc1.Init.DMAContinuousRequests = DISABLE;	/* No DMA for now */
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;	/* End Of Conversion (EOC) for continuous conversion */

	if(HAL_ADC_Init(&hadc1) != HAL_OK){
		Error_Handler();
	}

	/* Configure for the selected ADC regular channel its corresponding rank in the sequence and its sample time */
	sConfig.Channel = ADC_CHANNEL_1;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;

	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}
}

/* High level initialization */
void UART2_Init(void){

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX;

	if(HAL_UART_Init(&huart2) != HAL_OK){
		//There is a problem
		Error_Handler();
	}
}

void Error_Handler(void){
	while(1);
}
