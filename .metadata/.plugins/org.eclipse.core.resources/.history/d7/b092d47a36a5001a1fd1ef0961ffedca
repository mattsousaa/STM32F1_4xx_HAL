#include "main.h"
#include <string.h>
#include <stdio.h>

#define TRUE 	1
#define FALSE 	0

UART_HandleTypeDef huart2;

void MX_USART2_UART_Init(void);
void Error_Handler(void);
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);

char *jj = "The application is running\r\n";
uint8_t tx1_complete = FALSE;
uint8_t tx2_complete = FALSE;
uint8_t tx3_complete = FALSE;
uint8_t tx4_complete = FALSE;

int main(void){

	char msg[100];
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
  
	HAL_Init();
	MX_USART2_UART_Init();

	memset(&osc_init, 0, sizeof(osc_init));

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	osc_init.HSEState = RCC_HSE_ON;

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_Handler();
	}

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
  		    		     RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

	if(HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0) != HAL_OK){
		Error_Handler();
	}

	/*---------------------------- AFTER THIS LINE SYSCLK is SOURCED BY HSE------------------*/

  	__HAL_RCC_HSI_DISABLE(); 	//Saves some current

  	 /* LETS REDO THE SYSTICK CONFIGURATION */

  	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  	MX_USART2_UART_Init();

  	HAL_UART_Transmit_IT(&huart2, (uint8_t*)jj, strlen(jj));

  	memset(msg, 0, sizeof(msg));
  	sprintf(msg,"SYSCLK: %ldHz\r\n", HAL_RCC_GetSysClockFreq());
  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  	memset(msg, 0, sizeof(msg));
  	sprintf(msg, "HCLK: %ldHz\r\n", HAL_RCC_GetHCLKFreq());
  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  	memset(msg, 0, sizeof(msg));
  	sprintf(msg,"PCLK1: %ldHz\r\n", HAL_RCC_GetPCLK1Freq());
  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  	memset(msg,0,sizeof(msg));
  	sprintf(msg, "PCLK2: %ldHz\r\n", HAL_RCC_GetPCLK2Freq());
  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  	while(1);

  	return 0;

}


void MX_USART2_UART_Init(void){

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX;

	if(HAL_UART_Init(&huart2) != HAL_OK){
		//There is a problem
		Error_Handler();
	}
}


void Error_Handler(void){
	while(1);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){

	GPIO_InitTypeDef gpio_uart;
	__HAL_RCC_GPIOA_CLK_ENABLE();

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
	gpio_uart.Mode = GPIO_MODE_AF_PP;
	gpio_uart.Pull = GPIO_PULLUP;
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOA, &gpio_uart);
}

