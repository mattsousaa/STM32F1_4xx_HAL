#include "main.h"
#include "stm32f1xx_hal_tim.h"

void SystemClockConfig(void);
void TIMER3_Init(void);
void GPIO_Init(void);
void Error_Handler(void);

/* TIMER3 can be used for basic timer
 * See STM32 cross-series timer overview document for more details */
TIM_HandleTypeDef htimer3;

int main(void){

	HAL_Init();
	SystemClockConfig();
	GPIO_Init();
	TIMER3_Init();

	HAL_TIM_Base_Start(&htimer3);

	while(1){
		/* Loop until the update event flag is set */
		while(! (TIM3->SR & TIM_SR_UIF));
		/* The required time delay has been elapsed */
		/* User code can be executed */
		TIM3->SR = 0;
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
	}

}

void SystemClockConfig(void){


}

void GPIO_Init(void){

	GPIO_InitTypeDef ledgpio;

	/* GPIOA clock enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();

    /*Configure GPIO pin Output Level */

    /* High Level GPIO Initialization */
	ledgpio.Pin = GPIO_PIN_2;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	ledgpio.Speed = GPIO_SPEED_FREQ_LOW;

	/* Init GPIO */
	HAL_GPIO_Init(GPIOA, &ledgpio);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);

}

void TIMER3_Init(void){

	/* Verify the spreadsheet "timer_period_calculation" to adjust Prescaler and Period values;
	 * Prescaler value is stored in TIMx_PSC register (16 bits);
	 * Period value is stored in TIMx_ARR register (16 bits - MAX 65535);
	 * Choose a clock value for your microcontroller in the spreadsheet (TIMx_CLK);
	 * Choose a time base required in seconds in the spreadsheet;
	 * Check if the TIMER Count Clock (CNT_CLK) exceeded the maximum value of TIMx_ARR register (16 bits - MAX 65535);
	 * If yes, increase or decrease the prescaler in the spreedsheet until 0 < CNT_CLK <= 65535;
	 * This process will find how many ticks there exists for every period of clock;
	 * For instance, if TIMx_CLK = 16MHz and prescaler = 0, so for every 0.0625us a tick happens;
	 * In this case, what is the period value must be configured to get the time base of 100ms?;
	 * This math results in 1600000 and should be placed in TIMx_ARR register, but this value is greater than 65535;
	 * That's why you should increase or decrease the prescaler value.
	 * */

	htimer3.Instance = TIM3;
	htimer3.Init.Prescaler = 300;
	htimer3.Init.Period = 26578-1;	// The update event happens after one time gap or one time period

	if(HAL_TIM_Base_Init(&htimer3) != HAL_OK){
		Error_Handler();
	}

}


void Error_Handler(void){
	while(1);
}
