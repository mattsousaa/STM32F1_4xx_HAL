
PLL_SYSCLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002138  08002138  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002138  08002138  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002138  08002138  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002138  08002138  00012138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800213c  0800213c  0001213c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000074  080021b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080021b4  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f22  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012ee  00000000  00000000  00025fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000588  00000000  00000000  000272b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004e0  00000000  00000000  00027838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001344c  00000000  00000000  00027d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000050a5  00000000  00000000  0003b164  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068211  00000000  00000000  00040209  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a841a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001848  00000000  00000000  000a8498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002060 	.word	0x08002060

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002060 	.word	0x08002060

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
void MX_USART2_UART_Init(void);
void Error_Handler(void);

char *msg_user = "The application is running\r\n";

int main(void){
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b09b      	sub	sp, #108	; 0x6c
 8000160:	af00      	add	r7, sp, #0

	char msg[100];
	HAL_Init();
 8000162:	f000 fa29 	bl	80005b8 <HAL_Init>

	SystemClock_Config(SYS_CLOCK_FREQ_64_MHZ);
 8000166:	2040      	movs	r0, #64	; 0x40
 8000168:	f000 f886 	bl	8000278 <SystemClock_Config>

	MX_USART2_UART_Init();
 800016c:	f000 f8fa 	bl	8000364 <MX_USART2_UART_Init>

	HAL_UART_Transmit(&huart2, (uint8_t*)msg_user, strlen(msg_user), HAL_MAX_DELAY);
 8000170:	4b3b      	ldr	r3, [pc, #236]	; (8000260 <main+0x104>)
 8000172:	681c      	ldr	r4, [r3, #0]
 8000174:	4b3a      	ldr	r3, [pc, #232]	; (8000260 <main+0x104>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4618      	mov	r0, r3
 800017a:	f7ff ffe7 	bl	800014c <strlen>
 800017e:	4603      	mov	r3, r0
 8000180:	b29a      	uxth	r2, r3
 8000182:	f04f 33ff 	mov.w	r3, #4294967295
 8000186:	4621      	mov	r1, r4
 8000188:	4836      	ldr	r0, [pc, #216]	; (8000264 <main+0x108>)
 800018a:	f001 f968 	bl	800145e <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2264      	movs	r2, #100	; 0x64
 8000192:	2100      	movs	r1, #0
 8000194:	4618      	mov	r0, r3
 8000196:	f001 fb49 	bl	800182c <memset>
  	sprintf(msg,"SYSCLK: %ldHz\r\n",HAL_RCC_GetSysClockFreq());
 800019a:	f001 f861 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 800019e:	4602      	mov	r2, r0
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	4931      	ldr	r1, [pc, #196]	; (8000268 <main+0x10c>)
 80001a4:	4618      	mov	r0, r3
 80001a6:	f001 fb49 	bl	800183c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	4618      	mov	r0, r3
 80001ae:	f7ff ffcd 	bl	800014c <strlen>
 80001b2:	4603      	mov	r3, r0
 80001b4:	b29a      	uxth	r2, r3
 80001b6:	1d39      	adds	r1, r7, #4
 80001b8:	f04f 33ff 	mov.w	r3, #4294967295
 80001bc:	4829      	ldr	r0, [pc, #164]	; (8000264 <main+0x108>)
 80001be:	f001 f94e 	bl	800145e <HAL_UART_Transmit>

  	memset(msg,0,sizeof(msg));
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	2264      	movs	r2, #100	; 0x64
 80001c6:	2100      	movs	r1, #0
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fb2f 	bl	800182c <memset>
  	sprintf(msg,"HCLK: %ldHz\r\n",HAL_RCC_GetHCLKFreq());
 80001ce:	f001 f8a9 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 80001d2:	4602      	mov	r2, r0
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	4925      	ldr	r1, [pc, #148]	; (800026c <main+0x110>)
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 fb2f 	bl	800183c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4618      	mov	r0, r3
 80001e2:	f7ff ffb3 	bl	800014c <strlen>
 80001e6:	4603      	mov	r3, r0
 80001e8:	b29a      	uxth	r2, r3
 80001ea:	1d39      	adds	r1, r7, #4
 80001ec:	f04f 33ff 	mov.w	r3, #4294967295
 80001f0:	481c      	ldr	r0, [pc, #112]	; (8000264 <main+0x108>)
 80001f2:	f001 f934 	bl	800145e <HAL_UART_Transmit>

  	memset(msg,0,sizeof(msg));
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2264      	movs	r2, #100	; 0x64
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 fb15 	bl	800182c <memset>
  	sprintf(msg,"PCLK1: %ldHz\r\n",HAL_RCC_GetPCLK1Freq());
 8000202:	f001 f899 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 8000206:	4602      	mov	r2, r0
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	4919      	ldr	r1, [pc, #100]	; (8000270 <main+0x114>)
 800020c:	4618      	mov	r0, r3
 800020e:	f001 fb15 	bl	800183c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f7ff ff99 	bl	800014c <strlen>
 800021a:	4603      	mov	r3, r0
 800021c:	b29a      	uxth	r2, r3
 800021e:	1d39      	adds	r1, r7, #4
 8000220:	f04f 33ff 	mov.w	r3, #4294967295
 8000224:	480f      	ldr	r0, [pc, #60]	; (8000264 <main+0x108>)
 8000226:	f001 f91a 	bl	800145e <HAL_UART_Transmit>

  	memset(msg,0,sizeof(msg));
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2264      	movs	r2, #100	; 0x64
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f001 fafb 	bl	800182c <memset>
  	sprintf(msg,"PCLK2: %ldHz\r\n",HAL_RCC_GetPCLK2Freq());
 8000236:	f001 f893 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 800023a:	4602      	mov	r2, r0
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	490d      	ldr	r1, [pc, #52]	; (8000274 <main+0x118>)
 8000240:	4618      	mov	r0, r3
 8000242:	f001 fafb 	bl	800183c <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f7ff ff7f 	bl	800014c <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29a      	uxth	r2, r3
 8000252:	1d39      	adds	r1, r7, #4
 8000254:	f04f 33ff 	mov.w	r3, #4294967295
 8000258:	4802      	ldr	r0, [pc, #8]	; (8000264 <main+0x108>)
 800025a:	f001 f900 	bl	800145e <HAL_UART_Transmit>

  	while(1);
 800025e:	e7fe      	b.n	800025e <main+0x102>
 8000260:	20000000 	.word	0x20000000
 8000264:	2000009c 	.word	0x2000009c
 8000268:	08002098 	.word	0x08002098
 800026c:	080020a8 	.word	0x080020a8
 8000270:	080020b8 	.word	0x080020b8
 8000274:	080020c8 	.word	0x080020c8

08000278 <SystemClock_Config>:

  	return 0;
}


void SystemClock_Config(uint8_t clock_freq){
 8000278:	b580      	push	{r7, lr}
 800027a:	b092      	sub	sp, #72	; 0x48
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	647b      	str	r3, [r7, #68]	; 0x44

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2310      	movs	r3, #16
 8000290:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000292:	2302      	movs	r3, #2
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000296:	2300      	movs	r3, #0
 8000298:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq){
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	2b30      	cmp	r3, #48	; 0x30
 800029e:	d016      	beq.n	80002ce <SystemClock_Config+0x56>
 80002a0:	2b40      	cmp	r3, #64	; 0x40
 80002a2:	d026      	beq.n	80002f2 <SystemClock_Config+0x7a>
 80002a4:	2b14      	cmp	r3, #20
 80002a6:	d000      	beq.n	80002aa <SystemClock_Config+0x32>

			break;

		default:

			return;
 80002a8:	e057      	b.n	800035a <SystemClock_Config+0xe2>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL5;
 80002aa:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80002ae:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80002b0:	230f      	movs	r3, #15
 80002b2:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2302      	movs	r3, #2
 80002b6:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80002bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c0:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80002c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c6:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80002cc:	e023      	b.n	8000316 <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL12;
 80002ce:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002d2:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80002d4:	230f      	movs	r3, #15
 80002d6:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	2302      	movs	r3, #2
 80002da:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e4:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80002e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ea:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_1;
 80002ec:	2301      	movs	r3, #1
 80002ee:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80002f0:	e011      	b.n	8000316 <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL16;
 80002f2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002f6:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80002f8:	230f      	movs	r3, #15
 80002fa:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2302      	movs	r3, #2
 80002fe:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000308:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800030a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030e:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_2;
 8000310:	2302      	movs	r3, #2
 8000312:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000314:	bf00      	nop

	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 8000316:	f107 031c 	add.w	r3, r7, #28
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fc36 	bl	8000b8c <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xb2>
		Error_Handler();
 8000326:	f000 f843 	bl	80003b0 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000330:	4618      	mov	r0, r3
 8000332:	f000 feab 	bl	800108c <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0xc8>
		Error_Handler();
 800033c:	f000 f838 	bl	80003b0 <Error_Handler>
	}

	//Systick configuration
  	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000340:	f000 fff0 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 8000344:	4602      	mov	r2, r0
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <SystemClock_Config+0xe8>)
 8000348:	fba3 2302 	umull	r2, r3, r3, r2
 800034c:	099b      	lsrs	r3, r3, #6
 800034e:	4618      	mov	r0, r3
 8000350:	f000 fa95 	bl	800087e <HAL_SYSTICK_Config>
  	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000354:	2004      	movs	r0, #4
 8000356:	f000 fa9f 	bl	8000898 <HAL_SYSTICK_CLKSourceConfig>

}
 800035a:	3748      	adds	r7, #72	; 0x48
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	10624dd3 	.word	0x10624dd3

08000364 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_USART2_UART_Init+0x44>)
 800036a:	4a10      	ldr	r2, [pc, #64]	; (80003ac <MX_USART2_UART_Init+0x48>)
 800036c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_USART2_UART_Init+0x44>)
 8000370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000374:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_USART2_UART_Init+0x44>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <MX_USART2_UART_Init+0x44>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_USART2_UART_Init+0x44>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <MX_USART2_UART_Init+0x44>)
 800038a:	2200      	movs	r2, #0
 800038c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_USART2_UART_Init+0x44>)
 8000390:	2208      	movs	r2, #8
 8000392:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000394:	4804      	ldr	r0, [pc, #16]	; (80003a8 <MX_USART2_UART_Init+0x44>)
 8000396:	f001 f815 	bl	80013c4 <HAL_UART_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_USART2_UART_Init+0x40>
		Error_Handler();
 80003a0:	f000 f806 	bl	80003b0 <Error_Handler>
  	}

}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	2000009c 	.word	0x2000009c
 80003ac:	40004400 	.word	0x40004400

080003b0 <Error_Handler>:

void Error_Handler(void){
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003c0:	2003      	movs	r0, #3
 80003c2:	f000 fa27 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <HAL_MspInit+0x40>)
 80003c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <HAL_MspInit+0x40>)
 80003cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80003d0:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2100      	movs	r1, #0
 80003d6:	f06f 000b 	mvn.w	r0, #11
 80003da:	f000 fa26 	bl	800082a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	2100      	movs	r1, #0
 80003e2:	f06f 000a 	mvn.w	r0, #10
 80003e6:	f000 fa20 	bl	800082a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	f06f 0009 	mvn.w	r0, #9
 80003f2:	f000 fa1a 	bl	800082a <HAL_NVIC_SetPriority>

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <HAL_UART_MspInit>:
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart){
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA and AFIO peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000408:	4b22      	ldr	r3, [pc, #136]	; (8000494 <HAL_UART_MspInit+0x94>)
 800040a:	69db      	ldr	r3, [r3, #28]
 800040c:	4a21      	ldr	r2, [pc, #132]	; (8000494 <HAL_UART_MspInit+0x94>)
 800040e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000412:	61d3      	str	r3, [r2, #28]
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <HAL_UART_MspInit+0x94>)
 8000416:	69db      	ldr	r3, [r3, #28]
 8000418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <HAL_UART_MspInit+0x94>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <HAL_UART_MspInit+0x94>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <HAL_UART_MspInit+0x94>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	613b      	str	r3, [r7, #16]
 8000436:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_AFIO_CLK_ENABLE();
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <HAL_UART_MspInit+0x94>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a15      	ldr	r2, [pc, #84]	; (8000494 <HAL_UART_MspInit+0x94>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <HAL_UART_MspInit+0x94>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 8000450:	2304      	movs	r3, #4
 8000452:	61bb      	str	r3, [r7, #24]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
	gpio_uart.Pull = GPIO_PULLUP;
 8000458:	2301      	movs	r3, #1
 800045a:	623b      	str	r3, [r7, #32]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800045c:	2302      	movs	r3, #2
 800045e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4619      	mov	r1, r3
 8000466:	480c      	ldr	r0, [pc, #48]	; (8000498 <HAL_UART_MspInit+0x98>)
 8000468:	f000 fa3e 	bl	80008e8 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;
 800046c:	2308      	movs	r3, #8
 800046e:	61bb      	str	r3, [r7, #24]
	//gpio_uart.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000470:	f107 0318 	add.w	r3, r7, #24
 8000474:	4619      	mov	r1, r3
 8000476:	4808      	ldr	r0, [pc, #32]	; (8000498 <HAL_UART_MspInit+0x98>)
 8000478:	f000 fa36 	bl	80008e8 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800047c:	2026      	movs	r0, #38	; 0x26
 800047e:	f000 f9f0 	bl	8000862 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	210f      	movs	r1, #15
 8000486:	2026      	movs	r0, #38	; 0x26
 8000488:	f000 f9cf 	bl	800082a <HAL_NVIC_SetPriority>

}
 800048c:	bf00      	nop
 800048e:	3728      	adds	r7, #40	; 0x28
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <SysTick_Handler>:
#include "main.h"
#include "stm32f1xx_it.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80004a0:	f000 f8d0 	bl	8000644 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004a4:	f000 fa14 	bl	80008d0 <HAL_SYSTICK_IRQHandler>

}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <_sbrk+0x50>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <_sbrk+0x16>
		heap_end = &end;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <_sbrk+0x50>)
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <_sbrk+0x54>)
 80004c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <_sbrk+0x50>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <_sbrk+0x50>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4413      	add	r3, r2
 80004d0:	466a      	mov	r2, sp
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d907      	bls.n	80004e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004d6:	f001 f97f 	bl	80017d8 <__errno>
 80004da:	4602      	mov	r2, r0
 80004dc:	230c      	movs	r3, #12
 80004de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004e0:	f04f 33ff 	mov.w	r3, #4294967295
 80004e4:	e006      	b.n	80004f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <_sbrk+0x50>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a03      	ldr	r2, [pc, #12]	; (80004fc <_sbrk+0x50>)
 80004f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000090 	.word	0x20000090
 8000500:	200000e8 	.word	0x200000e8

08000504 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <SystemInit+0x5c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <SystemInit+0x5c>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <SystemInit+0x5c>)
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	4911      	ldr	r1, [pc, #68]	; (8000560 <SystemInit+0x5c>)
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <SystemInit+0x60>)
 800051c:	4013      	ands	r3, r2
 800051e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <SystemInit+0x5c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <SystemInit+0x5c>)
 8000526:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800052a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <SystemInit+0x5c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <SystemInit+0x5c>)
 8000536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <SystemInit+0x5c>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <SystemInit+0x5c>)
 8000542:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000546:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <SystemInit+0x5c>)
 800054a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800054e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <SystemInit+0x64>)
 8000552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000556:	609a      	str	r2, [r3, #8]
#endif 
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000
 8000564:	f8ff0000 	.word	0xf8ff0000
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800056c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800056e:	e003      	b.n	8000578 <LoopCopyDataInit>

08000570 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000572:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000574:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000576:	3104      	adds	r1, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000578:	480a      	ldr	r0, [pc, #40]	; (80005a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800057c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800057e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000580:	d3f6      	bcc.n	8000570 <CopyDataInit>
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000584:	e002      	b.n	800058c <LoopFillZerobss>

08000586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000588:	f842 3b04 	str.w	r3, [r2], #4

0800058c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800058e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000590:	d3f9      	bcc.n	8000586 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000592:	f7ff ffb7 	bl	8000504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000596:	f001 f925 	bl	80017e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff fddf 	bl	800015c <main>
  bx lr
 800059e:	4770      	bx	lr
  ldr r3, =_sidata
 80005a0:	08002140 	.word	0x08002140
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005a8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80005ac:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_2_IRQHandler>
	...

080005b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x28>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_Init+0x28>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f923 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f7ff fef2 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40022000 	.word	0x40022000

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f93b 	bl	800087e <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f903 	bl	800082a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004
 800063c:	2000000c 	.word	0x2000000c
 8000640:	20000008 	.word	0x20000008

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x20>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	2000000c 	.word	0x2000000c
 8000664:	200000dc 	.word	0x200000dc

08000668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	200000dc 	.word	0x200000dc

0800067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <__NVIC_GetPriorityGrouping+0x18>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	f003 0307 	and.w	r3, r3, #7
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db0b      	blt.n	800070a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f003 021f 	and.w	r2, r3, #31
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <__NVIC_EnableIRQ+0x34>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	095b      	lsrs	r3, r3, #5
 8000700:	2001      	movs	r0, #1
 8000702:	fa00 f202 	lsl.w	r2, r0, r2
 8000706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100

08000718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	f04f 32ff 	mov.w	r2, #4294967295
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43d9      	mvns	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f7ff ff90 	bl	8000718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff2d 	bl	800067c <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff42 	bl	80006c4 <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff90 	bl	800076c <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5f 	bl	8000718 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff35 	bl	80006e0 <__NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffa2 	bl	80007d0 <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d106      	bne.n	80008b4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008b2:	e005      	b.n	80008c0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ba:	f023 0304 	bic.w	r3, r3, #4
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008d4:	f000 f802 	bl	80008dc <HAL_SYSTICK_Callback>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b08b      	sub	sp, #44	; 0x2c
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e121      	b.n	8000b40 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008fc:	2201      	movs	r2, #1
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	69fa      	ldr	r2, [r7, #28]
 800090c:	4013      	ands	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	429a      	cmp	r2, r3
 8000916:	f040 8110 	bne.w	8000b3a <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b12      	cmp	r3, #18
 8000920:	d034      	beq.n	800098c <HAL_GPIO_Init+0xa4>
 8000922:	2b12      	cmp	r3, #18
 8000924:	d80d      	bhi.n	8000942 <HAL_GPIO_Init+0x5a>
 8000926:	2b02      	cmp	r3, #2
 8000928:	d02b      	beq.n	8000982 <HAL_GPIO_Init+0x9a>
 800092a:	2b02      	cmp	r3, #2
 800092c:	d804      	bhi.n	8000938 <HAL_GPIO_Init+0x50>
 800092e:	2b00      	cmp	r3, #0
 8000930:	d031      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d01c      	beq.n	8000970 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000936:	e048      	b.n	80009ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000938:	2b03      	cmp	r3, #3
 800093a:	d043      	beq.n	80009c4 <HAL_GPIO_Init+0xdc>
 800093c:	2b11      	cmp	r3, #17
 800093e:	d01b      	beq.n	8000978 <HAL_GPIO_Init+0x90>
          break;
 8000940:	e043      	b.n	80009ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000942:	4a86      	ldr	r2, [pc, #536]	; (8000b5c <HAL_GPIO_Init+0x274>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d026      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000948:	4a84      	ldr	r2, [pc, #528]	; (8000b5c <HAL_GPIO_Init+0x274>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d806      	bhi.n	800095c <HAL_GPIO_Init+0x74>
 800094e:	4a84      	ldr	r2, [pc, #528]	; (8000b60 <HAL_GPIO_Init+0x278>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d020      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000954:	4a83      	ldr	r2, [pc, #524]	; (8000b64 <HAL_GPIO_Init+0x27c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d01d      	beq.n	8000996 <HAL_GPIO_Init+0xae>
          break;
 800095a:	e036      	b.n	80009ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800095c:	4a82      	ldr	r2, [pc, #520]	; (8000b68 <HAL_GPIO_Init+0x280>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d019      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000962:	4a82      	ldr	r2, [pc, #520]	; (8000b6c <HAL_GPIO_Init+0x284>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d016      	beq.n	8000996 <HAL_GPIO_Init+0xae>
 8000968:	4a81      	ldr	r2, [pc, #516]	; (8000b70 <HAL_GPIO_Init+0x288>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <HAL_GPIO_Init+0xae>
          break;
 800096e:	e02c      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	623b      	str	r3, [r7, #32]
          break;
 8000976:	e028      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	3304      	adds	r3, #4
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e023      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	3308      	adds	r3, #8
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e01e      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	330c      	adds	r3, #12
 8000992:	623b      	str	r3, [r7, #32]
          break;
 8000994:	e019      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d102      	bne.n	80009a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800099e:	2304      	movs	r3, #4
 80009a0:	623b      	str	r3, [r7, #32]
          break;
 80009a2:	e012      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d105      	bne.n	80009b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ac:	2308      	movs	r3, #8
 80009ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	611a      	str	r2, [r3, #16]
          break;
 80009b6:	e008      	b.n	80009ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b8:	2308      	movs	r3, #8
 80009ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	615a      	str	r2, [r3, #20]
          break;
 80009c2:	e002      	b.n	80009ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
          break;
 80009c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d801      	bhi.n	80009d4 <HAL_GPIO_Init+0xec>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	e001      	b.n	80009d8 <HAL_GPIO_Init+0xf0>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3304      	adds	r3, #4
 80009d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	2bff      	cmp	r3, #255	; 0xff
 80009de:	d802      	bhi.n	80009e6 <HAL_GPIO_Init+0xfe>
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	e002      	b.n	80009ec <HAL_GPIO_Init+0x104>
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	3b08      	subs	r3, #8
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	210f      	movs	r1, #15
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	401a      	ands	r2, r3
 80009fe:	6a39      	ldr	r1, [r7, #32]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	431a      	orrs	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 8090 	beq.w	8000b3a <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a1a:	4b56      	ldr	r3, [pc, #344]	; (8000b74 <HAL_GPIO_Init+0x28c>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a55      	ldr	r2, [pc, #340]	; (8000b74 <HAL_GPIO_Init+0x28c>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <HAL_GPIO_Init+0x28c>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a32:	4a51      	ldr	r2, [pc, #324]	; (8000b78 <HAL_GPIO_Init+0x290>)
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	3302      	adds	r3, #2
 8000a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	220f      	movs	r2, #15
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4013      	ands	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a48      	ldr	r2, [pc, #288]	; (8000b7c <HAL_GPIO_Init+0x294>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d00d      	beq.n	8000a7a <HAL_GPIO_Init+0x192>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a47      	ldr	r2, [pc, #284]	; (8000b80 <HAL_GPIO_Init+0x298>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d007      	beq.n	8000a76 <HAL_GPIO_Init+0x18e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a46      	ldr	r2, [pc, #280]	; (8000b84 <HAL_GPIO_Init+0x29c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_GPIO_Init+0x18a>
 8000a6e:	2302      	movs	r3, #2
 8000a70:	e004      	b.n	8000a7c <HAL_GPIO_Init+0x194>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e002      	b.n	8000a7c <HAL_GPIO_Init+0x194>
 8000a76:	2301      	movs	r3, #1
 8000a78:	e000      	b.n	8000a7c <HAL_GPIO_Init+0x194>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7e:	f002 0203 	and.w	r2, r2, #3
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4093      	lsls	r3, r2
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a8c:	493a      	ldr	r1, [pc, #232]	; (8000b78 <HAL_GPIO_Init+0x290>)
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3302      	adds	r3, #2
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d006      	beq.n	8000ab4 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aa6:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4937      	ldr	r1, [pc, #220]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	600b      	str	r3, [r1, #0]
 8000ab2:	e006      	b.n	8000ac2 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ab4:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	4932      	ldr	r1, [pc, #200]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d006      	beq.n	8000adc <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ace:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	492d      	ldr	r1, [pc, #180]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	604b      	str	r3, [r1, #4]
 8000ada:	e006      	b.n	8000aea <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	4928      	ldr	r1, [pc, #160]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	4923      	ldr	r1, [pc, #140]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	608b      	str	r3, [r1, #8]
 8000b02:	e006      	b.n	8000b12 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b04:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	491e      	ldr	r1, [pc, #120]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d006      	beq.n	8000b2c <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000b20:	68da      	ldr	r2, [r3, #12]
 8000b22:	4919      	ldr	r1, [pc, #100]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60cb      	str	r3, [r1, #12]
 8000b2a:	e006      	b.n	8000b3a <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4914      	ldr	r1, [pc, #80]	; (8000b88 <HAL_GPIO_Init+0x2a0>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f47f aed6 	bne.w	80008fc <HAL_GPIO_Init+0x14>
  }
}
 8000b50:	bf00      	nop
 8000b52:	372c      	adds	r7, #44	; 0x2c
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	10210000 	.word	0x10210000
 8000b60:	10110000 	.word	0x10110000
 8000b64:	10120000 	.word	0x10120000
 8000b68:	10310000 	.word	0x10310000
 8000b6c:	10320000 	.word	0x10320000
 8000b70:	10220000 	.word	0x10220000
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010000 	.word	0x40010000
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40010c00 	.word	0x40010c00
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d101      	bne.n	8000b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e26c      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8087 	beq.w	8000cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bac:	4b92      	ldr	r3, [pc, #584]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 030c 	and.w	r3, r3, #12
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d00c      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb8:	4b8f      	ldr	r3, [pc, #572]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d112      	bne.n	8000bea <HAL_RCC_OscConfig+0x5e>
 8000bc4:	4b8c      	ldr	r3, [pc, #560]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd0:	d10b      	bne.n	8000bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd2:	4b89      	ldr	r3, [pc, #548]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d06c      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x12c>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d168      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e246      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf2:	d106      	bne.n	8000c02 <HAL_RCC_OscConfig+0x76>
 8000bf4:	4b80      	ldr	r3, [pc, #512]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a7f      	ldr	r2, [pc, #508]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	e02e      	b.n	8000c60 <HAL_RCC_OscConfig+0xd4>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x98>
 8000c0a:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a7a      	ldr	r2, [pc, #488]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b78      	ldr	r3, [pc, #480]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a77      	ldr	r2, [pc, #476]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e01d      	b.n	8000c60 <HAL_RCC_OscConfig+0xd4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c2c:	d10c      	bne.n	8000c48 <HAL_RCC_OscConfig+0xbc>
 8000c2e:	4b72      	ldr	r3, [pc, #456]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a71      	ldr	r2, [pc, #452]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	4b6f      	ldr	r3, [pc, #444]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a6e      	ldr	r2, [pc, #440]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e00b      	b.n	8000c60 <HAL_RCC_OscConfig+0xd4>
 8000c48:	4b6b      	ldr	r3, [pc, #428]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a6a      	ldr	r2, [pc, #424]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4b68      	ldr	r3, [pc, #416]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a67      	ldr	r2, [pc, #412]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d013      	beq.n	8000c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c68:	f7ff fcfe 	bl	8000668 <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fcfa 	bl	8000668 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b64      	cmp	r3, #100	; 0x64
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e1fa      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c82:	4b5d      	ldr	r3, [pc, #372]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0f0      	beq.n	8000c70 <HAL_RCC_OscConfig+0xe4>
 8000c8e:	e014      	b.n	8000cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c90:	f7ff fcea 	bl	8000668 <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c98:	f7ff fce6 	bl	8000668 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b64      	cmp	r3, #100	; 0x64
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e1e6      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000caa:	4b53      	ldr	r3, [pc, #332]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f0      	bne.n	8000c98 <HAL_RCC_OscConfig+0x10c>
 8000cb6:	e000      	b.n	8000cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d063      	beq.n	8000d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cc6:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00b      	beq.n	8000cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cd2:	4b49      	ldr	r3, [pc, #292]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
 8000cda:	2b08      	cmp	r3, #8
 8000cdc:	d11c      	bne.n	8000d18 <HAL_RCC_OscConfig+0x18c>
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d116      	bne.n	8000d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <HAL_RCC_OscConfig+0x176>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d001      	beq.n	8000d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e1ba      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4939      	ldr	r1, [pc, #228]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	e03a      	b.n	8000d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d020      	beq.n	8000d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_RCC_OscConfig+0x270>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d26:	f7ff fc9f 	bl	8000668 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2c:	e008      	b.n	8000d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fc9b 	bl	8000668 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d901      	bls.n	8000d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e19b      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4927      	ldr	r1, [pc, #156]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	600b      	str	r3, [r1, #0]
 8000d60:	e015      	b.n	8000d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_RCC_OscConfig+0x270>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d68:	f7ff fc7e 	bl	8000668 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d70:	f7ff fc7a 	bl	8000668 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e17a      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f0      	bne.n	8000d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d03a      	beq.n	8000e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d019      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da8:	f7ff fc5e 	bl	8000668 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fc5a 	bl	8000668 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e15a      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f0      	beq.n	8000db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f000 fada 	bl	8001388 <RCC_Delay>
 8000dd4:	e01c      	b.n	8000e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc44 	bl	8000668 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de2:	e00f      	b.n	8000e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fc40 	bl	8000668 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d908      	bls.n	8000e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e140      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	42420000 	.word	0x42420000
 8000e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e04:	4b9e      	ldr	r3, [pc, #632]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1e9      	bne.n	8000de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80a6 	beq.w	8000f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e22:	4b97      	ldr	r3, [pc, #604]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10d      	bne.n	8000e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b94      	ldr	r3, [pc, #592]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a93      	ldr	r2, [pc, #588]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b91      	ldr	r3, [pc, #580]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e46:	2301      	movs	r3, #1
 8000e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4a:	4b8e      	ldr	r3, [pc, #568]	; (8001084 <HAL_RCC_OscConfig+0x4f8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d118      	bne.n	8000e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e56:	4b8b      	ldr	r3, [pc, #556]	; (8001084 <HAL_RCC_OscConfig+0x4f8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a8a      	ldr	r2, [pc, #552]	; (8001084 <HAL_RCC_OscConfig+0x4f8>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fc01 	bl	8000668 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6a:	f7ff fbfd 	bl	8000668 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b64      	cmp	r3, #100	; 0x64
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e0fd      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7c:	4b81      	ldr	r3, [pc, #516]	; (8001084 <HAL_RCC_OscConfig+0x4f8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d106      	bne.n	8000e9e <HAL_RCC_OscConfig+0x312>
 8000e90:	4b7b      	ldr	r3, [pc, #492]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4a7a      	ldr	r2, [pc, #488]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6213      	str	r3, [r2, #32]
 8000e9c:	e02d      	b.n	8000efa <HAL_RCC_OscConfig+0x36e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x334>
 8000ea6:	4b76      	ldr	r3, [pc, #472]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a75      	ldr	r2, [pc, #468]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	6213      	str	r3, [r2, #32]
 8000eb2:	4b73      	ldr	r3, [pc, #460]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a72      	ldr	r2, [pc, #456]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	6213      	str	r3, [r2, #32]
 8000ebe:	e01c      	b.n	8000efa <HAL_RCC_OscConfig+0x36e>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x356>
 8000ec8:	4b6d      	ldr	r3, [pc, #436]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a6c      	ldr	r2, [pc, #432]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6213      	str	r3, [r2, #32]
 8000ed4:	4b6a      	ldr	r3, [pc, #424]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a69      	ldr	r2, [pc, #420]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6213      	str	r3, [r2, #32]
 8000ee0:	e00b      	b.n	8000efa <HAL_RCC_OscConfig+0x36e>
 8000ee2:	4b67      	ldr	r3, [pc, #412]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a66      	ldr	r2, [pc, #408]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6213      	str	r3, [r2, #32]
 8000eee:	4b64      	ldr	r3, [pc, #400]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a63      	ldr	r2, [pc, #396]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d015      	beq.n	8000f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fbb1 	bl	8000668 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fbad 	bl	8000668 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e0ab      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f20:	4b57      	ldr	r3, [pc, #348]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0ee      	beq.n	8000f0a <HAL_RCC_OscConfig+0x37e>
 8000f2c:	e014      	b.n	8000f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fb9b 	bl	8000668 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fb97 	bl	8000668 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e095      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4c:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ee      	bne.n	8000f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5e:	4b48      	ldr	r3, [pc, #288]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a47      	ldr	r2, [pc, #284]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8081 	beq.w	8001076 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f74:	4b42      	ldr	r3, [pc, #264]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d061      	beq.n	8001044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d146      	bne.n	8001016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f88:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <HAL_RCC_OscConfig+0x4fc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb6b 	bl	8000668 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb67 	bl	8000668 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e067      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa8:	4b35      	ldr	r3, [pc, #212]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f0      	bne.n	8000f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d108      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fbe:	4b30      	ldr	r3, [pc, #192]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	492d      	ldr	r1, [pc, #180]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a19      	ldr	r1, [r3, #32]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	4927      	ldr	r1, [pc, #156]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_RCC_OscConfig+0x4fc>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff fb3b 	bl	8000668 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff6:	f7ff fb37 	bl	8000668 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e037      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x46a>
 8001014:	e02f      	b.n	8001076 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_RCC_OscConfig+0x4fc>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fb24 	bl	8000668 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001024:	f7ff fb20 	bl	8000668 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e020      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x498>
 8001042:	e018      	b.n	8001076 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e013      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_RCC_OscConfig+0x4f4>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	429a      	cmp	r2, r3
 8001062:	d106      	bne.n	8001072 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106e:	429a      	cmp	r2, r3
 8001070:	d001      	beq.n	8001076 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	40007000 	.word	0x40007000
 8001088:	42420060 	.word	0x42420060

0800108c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0d0      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a0:	4b6a      	ldr	r3, [pc, #424]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d910      	bls.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b67      	ldr	r3, [pc, #412]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 0207 	bic.w	r2, r3, #7
 80010b6:	4965      	ldr	r1, [pc, #404]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	4b63      	ldr	r3, [pc, #396]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0b8      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a58      	ldr	r2, [pc, #352]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001100:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800110a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	494d      	ldr	r1, [pc, #308]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d040      	beq.n	80011ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d107      	bne.n	8001142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d115      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e07f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e073      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e06b      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116a:	4b39      	ldr	r3, [pc, #228]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f023 0203 	bic.w	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4936      	ldr	r1, [pc, #216]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800117c:	f7ff fa74 	bl	8000668 <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001182:	e00a      	b.n	800119a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f7ff fa70 	bl	8000668 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e053      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 020c 	and.w	r2, r3, #12
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d1eb      	bne.n	8001184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d210      	bcs.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4922      	ldr	r1, [pc, #136]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e032      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4916      	ldr	r1, [pc, #88]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	490e      	ldr	r1, [pc, #56]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800121a:	f000 f821 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 800121e:	4601      	mov	r1, r0
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_RCC_ClockConfig+0x1c8>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	fa21 f303 	lsr.w	r3, r1, r3
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1cc>)
 8001234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_RCC_ClockConfig+0x1d0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f9d2 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000
 8001250:	40021000 	.word	0x40021000
 8001254:	080020ec 	.word	0x080020ec
 8001258:	20000004 	.word	0x20000004
 800125c:	20000008 	.word	0x20000008

08001260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001260:	b490      	push	{r4, r7}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001268:	1d3c      	adds	r4, r7, #4
 800126a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_RCC_GetSysClockFreq+0xb8>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b04      	cmp	r3, #4
 8001298:	d002      	beq.n	80012a0 <HAL_RCC_GetSysClockFreq+0x40>
 800129a:	2b08      	cmp	r3, #8
 800129c:	d003      	beq.n	80012a6 <HAL_RCC_GetSysClockFreq+0x46>
 800129e:	e02d      	b.n	80012fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012a2:	623b      	str	r3, [r7, #32]
      break;
 80012a4:	e02d      	b.n	8001302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012b2:	4413      	add	r3, r2
 80012b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	0c5b      	lsrs	r3, r3, #17
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012d2:	4413      	add	r3, r2
 80012d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012de:	fb02 f203 	mul.w	r2, r2, r3
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	e004      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	623b      	str	r3, [r7, #32]
      break;
 80012fa:	e002      	b.n	8001302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012fe:	623b      	str	r3, [r7, #32]
      break;
 8001300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001302:	6a3b      	ldr	r3, [r7, #32]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bc90      	pop	{r4, r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	080020d8 	.word	0x080020d8
 8001314:	080020e8 	.word	0x080020e8
 8001318:	40021000 	.word	0x40021000
 800131c:	007a1200 	.word	0x007a1200
 8001320:	003d0900 	.word	0x003d0900

08001324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <HAL_RCC_GetHCLKFreq+0x10>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20000004 	.word	0x20000004

08001338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800133c:	f7ff fff2 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 8001340:	4601      	mov	r1, r0
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_RCC_GetPCLK1Freq+0x24>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	080020fc 	.word	0x080020fc

08001360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001364:	f7ff ffde 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 8001368:	4601      	mov	r1, r0
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	0adb      	lsrs	r3, r3, #11
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	080020fc 	.word	0x080020fc

08001388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <RCC_Delay+0x34>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <RCC_Delay+0x38>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0a5b      	lsrs	r3, r3, #9
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013a4:	bf00      	nop
  }
  while (Delay --);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	60fa      	str	r2, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f9      	bne.n	80013a4 <RCC_Delay+0x1c>
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000004 	.word	0x20000004
 80013c0:	10624dd3 	.word	0x10624dd3

080013c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e03f      	b.n	8001456 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff f808 	bl	8000400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2224      	movs	r2, #36	; 0x24
 80013f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f90b 	bl	8001624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800141c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800142c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800143c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2220      	movs	r2, #32
 8001450:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b088      	sub	sp, #32
 8001462:	af02      	add	r7, sp, #8
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b20      	cmp	r3, #32
 800147c:	f040 8083 	bne.w	8001586 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <HAL_UART_Transmit+0x2e>
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e07b      	b.n	8001588 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_UART_Transmit+0x40>
 800149a:	2302      	movs	r3, #2
 800149c:	e074      	b.n	8001588 <HAL_UART_Transmit+0x12a>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2221      	movs	r2, #33	; 0x21
 80014b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014b4:	f7ff f8d8 	bl	8000668 <HAL_GetTick>
 80014b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	88fa      	ldrh	r2, [r7, #6]
 80014be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	88fa      	ldrh	r2, [r7, #6]
 80014c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80014c6:	e042      	b.n	800154e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014de:	d122      	bne.n	8001526 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2200      	movs	r2, #0
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f850 	bl	8001590 <UART_WaitOnFlagUntilTimeout>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e046      	b.n	8001588 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800150c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d103      	bne.n	800151e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3302      	adds	r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	e017      	b.n	800154e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3301      	adds	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	e013      	b.n	800154e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2200      	movs	r2, #0
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 f82d 	bl	8001590 <UART_WaitOnFlagUntilTimeout>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e023      	b.n	8001588 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001552:	b29b      	uxth	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1b7      	bne.n	80014c8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2200      	movs	r2, #0
 8001560:	2140      	movs	r1, #64	; 0x40
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 f814 	bl	8001590 <UART_WaitOnFlagUntilTimeout>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e00a      	b.n	8001588 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2220      	movs	r2, #32
 8001576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001586:	2302      	movs	r3, #2
  }
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015a0:	e02c      	b.n	80015fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d028      	beq.n	80015fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80015b0:	f7ff f85a 	bl	8000668 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d21d      	bcs.n	80015fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2220      	movs	r2, #32
 80015e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2220      	movs	r2, #32
 80015ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e00f      	b.n	800161c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	4013      	ands	r3, r2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	429a      	cmp	r2, r3
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	429a      	cmp	r2, r3
 8001618:	d0c3      	beq.n	80015a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	4313      	orrs	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800165e:	f023 030c 	bic.w	r3, r3, #12
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	430b      	orrs	r3, r1
 800166a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <UART_SetConfig+0x1ac>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d14e      	bne.n	800172a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800168c:	f7ff fe68 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 8001690:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	009a      	lsls	r2, r3, #2
 800169c:	441a      	add	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a8:	4a4a      	ldr	r2, [pc, #296]	; (80017d4 <UART_SetConfig+0x1b0>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	0119      	lsls	r1, r3, #4
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009a      	lsls	r2, r3, #2
 80016bc:	441a      	add	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80016c8:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <UART_SetConfig+0x1b0>)
 80016ca:	fba3 0302 	umull	r0, r3, r3, r2
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2064      	movs	r0, #100	; 0x64
 80016d2:	fb00 f303 	mul.w	r3, r0, r3
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	3332      	adds	r3, #50	; 0x32
 80016dc:	4a3d      	ldr	r2, [pc, #244]	; (80017d4 <UART_SetConfig+0x1b0>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e8:	4419      	add	r1, r3
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	009a      	lsls	r2, r3, #2
 80016f4:	441a      	add	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001700:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <UART_SetConfig+0x1b0>)
 8001702:	fba3 0302 	umull	r0, r3, r3, r2
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2064      	movs	r0, #100	; 0x64
 800170a:	fb00 f303 	mul.w	r3, r0, r3
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	3332      	adds	r3, #50	; 0x32
 8001714:	4a2f      	ldr	r2, [pc, #188]	; (80017d4 <UART_SetConfig+0x1b0>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	f003 020f 	and.w	r2, r3, #15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	440a      	add	r2, r1
 8001726:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001728:	e04d      	b.n	80017c6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800172a:	f7ff fe05 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 800172e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	009a      	lsls	r2, r3, #2
 800173a:	441a      	add	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <UART_SetConfig+0x1b0>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	095b      	lsrs	r3, r3, #5
 800174e:	0119      	lsls	r1, r3, #4
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	009a      	lsls	r2, r3, #2
 800175a:	441a      	add	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	fbb2 f2f3 	udiv	r2, r2, r3
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <UART_SetConfig+0x1b0>)
 8001768:	fba3 0302 	umull	r0, r3, r3, r2
 800176c:	095b      	lsrs	r3, r3, #5
 800176e:	2064      	movs	r0, #100	; 0x64
 8001770:	fb00 f303 	mul.w	r3, r0, r3
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	3332      	adds	r3, #50	; 0x32
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <UART_SetConfig+0x1b0>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	095b      	lsrs	r3, r3, #5
 8001782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001786:	4419      	add	r1, r3
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	009a      	lsls	r2, r3, #2
 8001792:	441a      	add	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	fbb2 f2f3 	udiv	r2, r2, r3
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <UART_SetConfig+0x1b0>)
 80017a0:	fba3 0302 	umull	r0, r3, r3, r2
 80017a4:	095b      	lsrs	r3, r3, #5
 80017a6:	2064      	movs	r0, #100	; 0x64
 80017a8:	fb00 f303 	mul.w	r3, r0, r3
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	3332      	adds	r3, #50	; 0x32
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <UART_SetConfig+0x1b0>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	095b      	lsrs	r3, r3, #5
 80017ba:	f003 020f 	and.w	r2, r3, #15
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	440a      	add	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40013800 	.word	0x40013800
 80017d4:	51eb851f 	.word	0x51eb851f

080017d8 <__errno>:
 80017d8:	4b01      	ldr	r3, [pc, #4]	; (80017e0 <__errno+0x8>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000010 	.word	0x20000010

080017e4 <__libc_init_array>:
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	2500      	movs	r5, #0
 80017e8:	4e0c      	ldr	r6, [pc, #48]	; (800181c <__libc_init_array+0x38>)
 80017ea:	4c0d      	ldr	r4, [pc, #52]	; (8001820 <__libc_init_array+0x3c>)
 80017ec:	1ba4      	subs	r4, r4, r6
 80017ee:	10a4      	asrs	r4, r4, #2
 80017f0:	42a5      	cmp	r5, r4
 80017f2:	d109      	bne.n	8001808 <__libc_init_array+0x24>
 80017f4:	f000 fc34 	bl	8002060 <_init>
 80017f8:	2500      	movs	r5, #0
 80017fa:	4e0a      	ldr	r6, [pc, #40]	; (8001824 <__libc_init_array+0x40>)
 80017fc:	4c0a      	ldr	r4, [pc, #40]	; (8001828 <__libc_init_array+0x44>)
 80017fe:	1ba4      	subs	r4, r4, r6
 8001800:	10a4      	asrs	r4, r4, #2
 8001802:	42a5      	cmp	r5, r4
 8001804:	d105      	bne.n	8001812 <__libc_init_array+0x2e>
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800180c:	4798      	blx	r3
 800180e:	3501      	adds	r5, #1
 8001810:	e7ee      	b.n	80017f0 <__libc_init_array+0xc>
 8001812:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001816:	4798      	blx	r3
 8001818:	3501      	adds	r5, #1
 800181a:	e7f2      	b.n	8001802 <__libc_init_array+0x1e>
 800181c:	08002138 	.word	0x08002138
 8001820:	08002138 	.word	0x08002138
 8001824:	08002138 	.word	0x08002138
 8001828:	0800213c 	.word	0x0800213c

0800182c <memset>:
 800182c:	4603      	mov	r3, r0
 800182e:	4402      	add	r2, r0
 8001830:	4293      	cmp	r3, r2
 8001832:	d100      	bne.n	8001836 <memset+0xa>
 8001834:	4770      	bx	lr
 8001836:	f803 1b01 	strb.w	r1, [r3], #1
 800183a:	e7f9      	b.n	8001830 <memset+0x4>

0800183c <siprintf>:
 800183c:	b40e      	push	{r1, r2, r3}
 800183e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001842:	b500      	push	{lr}
 8001844:	b09c      	sub	sp, #112	; 0x70
 8001846:	ab1d      	add	r3, sp, #116	; 0x74
 8001848:	9002      	str	r0, [sp, #8]
 800184a:	9006      	str	r0, [sp, #24]
 800184c:	9107      	str	r1, [sp, #28]
 800184e:	9104      	str	r1, [sp, #16]
 8001850:	4808      	ldr	r0, [pc, #32]	; (8001874 <siprintf+0x38>)
 8001852:	4909      	ldr	r1, [pc, #36]	; (8001878 <siprintf+0x3c>)
 8001854:	f853 2b04 	ldr.w	r2, [r3], #4
 8001858:	9105      	str	r1, [sp, #20]
 800185a:	6800      	ldr	r0, [r0, #0]
 800185c:	a902      	add	r1, sp, #8
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	f000 f866 	bl	8001930 <_svfiprintf_r>
 8001864:	2200      	movs	r2, #0
 8001866:	9b02      	ldr	r3, [sp, #8]
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	b01c      	add	sp, #112	; 0x70
 800186c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001870:	b003      	add	sp, #12
 8001872:	4770      	bx	lr
 8001874:	20000010 	.word	0x20000010
 8001878:	ffff0208 	.word	0xffff0208

0800187c <__ssputs_r>:
 800187c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001880:	688e      	ldr	r6, [r1, #8]
 8001882:	4682      	mov	sl, r0
 8001884:	429e      	cmp	r6, r3
 8001886:	460c      	mov	r4, r1
 8001888:	4690      	mov	r8, r2
 800188a:	4699      	mov	r9, r3
 800188c:	d837      	bhi.n	80018fe <__ssputs_r+0x82>
 800188e:	898a      	ldrh	r2, [r1, #12]
 8001890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001894:	d031      	beq.n	80018fa <__ssputs_r+0x7e>
 8001896:	2302      	movs	r3, #2
 8001898:	6825      	ldr	r5, [r4, #0]
 800189a:	6909      	ldr	r1, [r1, #16]
 800189c:	1a6f      	subs	r7, r5, r1
 800189e:	6965      	ldr	r5, [r4, #20]
 80018a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80018a8:	f109 0301 	add.w	r3, r9, #1
 80018ac:	443b      	add	r3, r7
 80018ae:	429d      	cmp	r5, r3
 80018b0:	bf38      	it	cc
 80018b2:	461d      	movcc	r5, r3
 80018b4:	0553      	lsls	r3, r2, #21
 80018b6:	d530      	bpl.n	800191a <__ssputs_r+0x9e>
 80018b8:	4629      	mov	r1, r5
 80018ba:	f000 fb37 	bl	8001f2c <_malloc_r>
 80018be:	4606      	mov	r6, r0
 80018c0:	b950      	cbnz	r0, 80018d8 <__ssputs_r+0x5c>
 80018c2:	230c      	movs	r3, #12
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f8ca 3000 	str.w	r3, [sl]
 80018cc:	89a3      	ldrh	r3, [r4, #12]
 80018ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d2:	81a3      	strh	r3, [r4, #12]
 80018d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018d8:	463a      	mov	r2, r7
 80018da:	6921      	ldr	r1, [r4, #16]
 80018dc:	f000 fab6 	bl	8001e4c <memcpy>
 80018e0:	89a3      	ldrh	r3, [r4, #12]
 80018e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80018e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ea:	81a3      	strh	r3, [r4, #12]
 80018ec:	6126      	str	r6, [r4, #16]
 80018ee:	443e      	add	r6, r7
 80018f0:	6026      	str	r6, [r4, #0]
 80018f2:	464e      	mov	r6, r9
 80018f4:	6165      	str	r5, [r4, #20]
 80018f6:	1bed      	subs	r5, r5, r7
 80018f8:	60a5      	str	r5, [r4, #8]
 80018fa:	454e      	cmp	r6, r9
 80018fc:	d900      	bls.n	8001900 <__ssputs_r+0x84>
 80018fe:	464e      	mov	r6, r9
 8001900:	4632      	mov	r2, r6
 8001902:	4641      	mov	r1, r8
 8001904:	6820      	ldr	r0, [r4, #0]
 8001906:	f000 faac 	bl	8001e62 <memmove>
 800190a:	68a3      	ldr	r3, [r4, #8]
 800190c:	2000      	movs	r0, #0
 800190e:	1b9b      	subs	r3, r3, r6
 8001910:	60a3      	str	r3, [r4, #8]
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	441e      	add	r6, r3
 8001916:	6026      	str	r6, [r4, #0]
 8001918:	e7dc      	b.n	80018d4 <__ssputs_r+0x58>
 800191a:	462a      	mov	r2, r5
 800191c:	f000 fb60 	bl	8001fe0 <_realloc_r>
 8001920:	4606      	mov	r6, r0
 8001922:	2800      	cmp	r0, #0
 8001924:	d1e2      	bne.n	80018ec <__ssputs_r+0x70>
 8001926:	6921      	ldr	r1, [r4, #16]
 8001928:	4650      	mov	r0, sl
 800192a:	f000 fab3 	bl	8001e94 <_free_r>
 800192e:	e7c8      	b.n	80018c2 <__ssputs_r+0x46>

08001930 <_svfiprintf_r>:
 8001930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001934:	461d      	mov	r5, r3
 8001936:	898b      	ldrh	r3, [r1, #12]
 8001938:	b09d      	sub	sp, #116	; 0x74
 800193a:	061f      	lsls	r7, r3, #24
 800193c:	4680      	mov	r8, r0
 800193e:	460c      	mov	r4, r1
 8001940:	4616      	mov	r6, r2
 8001942:	d50f      	bpl.n	8001964 <_svfiprintf_r+0x34>
 8001944:	690b      	ldr	r3, [r1, #16]
 8001946:	b96b      	cbnz	r3, 8001964 <_svfiprintf_r+0x34>
 8001948:	2140      	movs	r1, #64	; 0x40
 800194a:	f000 faef 	bl	8001f2c <_malloc_r>
 800194e:	6020      	str	r0, [r4, #0]
 8001950:	6120      	str	r0, [r4, #16]
 8001952:	b928      	cbnz	r0, 8001960 <_svfiprintf_r+0x30>
 8001954:	230c      	movs	r3, #12
 8001956:	f8c8 3000 	str.w	r3, [r8]
 800195a:	f04f 30ff 	mov.w	r0, #4294967295
 800195e:	e0c8      	b.n	8001af2 <_svfiprintf_r+0x1c2>
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	6163      	str	r3, [r4, #20]
 8001964:	2300      	movs	r3, #0
 8001966:	9309      	str	r3, [sp, #36]	; 0x24
 8001968:	2320      	movs	r3, #32
 800196a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800196e:	2330      	movs	r3, #48	; 0x30
 8001970:	f04f 0b01 	mov.w	fp, #1
 8001974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001978:	9503      	str	r5, [sp, #12]
 800197a:	4637      	mov	r7, r6
 800197c:	463d      	mov	r5, r7
 800197e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001982:	b10b      	cbz	r3, 8001988 <_svfiprintf_r+0x58>
 8001984:	2b25      	cmp	r3, #37	; 0x25
 8001986:	d13e      	bne.n	8001a06 <_svfiprintf_r+0xd6>
 8001988:	ebb7 0a06 	subs.w	sl, r7, r6
 800198c:	d00b      	beq.n	80019a6 <_svfiprintf_r+0x76>
 800198e:	4653      	mov	r3, sl
 8001990:	4632      	mov	r2, r6
 8001992:	4621      	mov	r1, r4
 8001994:	4640      	mov	r0, r8
 8001996:	f7ff ff71 	bl	800187c <__ssputs_r>
 800199a:	3001      	adds	r0, #1
 800199c:	f000 80a4 	beq.w	8001ae8 <_svfiprintf_r+0x1b8>
 80019a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019a2:	4453      	add	r3, sl
 80019a4:	9309      	str	r3, [sp, #36]	; 0x24
 80019a6:	783b      	ldrb	r3, [r7, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 809d 	beq.w	8001ae8 <_svfiprintf_r+0x1b8>
 80019ae:	2300      	movs	r3, #0
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019b8:	9304      	str	r3, [sp, #16]
 80019ba:	9307      	str	r3, [sp, #28]
 80019bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019c0:	931a      	str	r3, [sp, #104]	; 0x68
 80019c2:	462f      	mov	r7, r5
 80019c4:	2205      	movs	r2, #5
 80019c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80019ca:	4850      	ldr	r0, [pc, #320]	; (8001b0c <_svfiprintf_r+0x1dc>)
 80019cc:	f000 fa30 	bl	8001e30 <memchr>
 80019d0:	9b04      	ldr	r3, [sp, #16]
 80019d2:	b9d0      	cbnz	r0, 8001a0a <_svfiprintf_r+0xda>
 80019d4:	06d9      	lsls	r1, r3, #27
 80019d6:	bf44      	itt	mi
 80019d8:	2220      	movmi	r2, #32
 80019da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80019de:	071a      	lsls	r2, r3, #28
 80019e0:	bf44      	itt	mi
 80019e2:	222b      	movmi	r2, #43	; 0x2b
 80019e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80019e8:	782a      	ldrb	r2, [r5, #0]
 80019ea:	2a2a      	cmp	r2, #42	; 0x2a
 80019ec:	d015      	beq.n	8001a1a <_svfiprintf_r+0xea>
 80019ee:	462f      	mov	r7, r5
 80019f0:	2000      	movs	r0, #0
 80019f2:	250a      	movs	r5, #10
 80019f4:	9a07      	ldr	r2, [sp, #28]
 80019f6:	4639      	mov	r1, r7
 80019f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019fc:	3b30      	subs	r3, #48	; 0x30
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	d94d      	bls.n	8001a9e <_svfiprintf_r+0x16e>
 8001a02:	b1b8      	cbz	r0, 8001a34 <_svfiprintf_r+0x104>
 8001a04:	e00f      	b.n	8001a26 <_svfiprintf_r+0xf6>
 8001a06:	462f      	mov	r7, r5
 8001a08:	e7b8      	b.n	800197c <_svfiprintf_r+0x4c>
 8001a0a:	4a40      	ldr	r2, [pc, #256]	; (8001b0c <_svfiprintf_r+0x1dc>)
 8001a0c:	463d      	mov	r5, r7
 8001a0e:	1a80      	subs	r0, r0, r2
 8001a10:	fa0b f000 	lsl.w	r0, fp, r0
 8001a14:	4318      	orrs	r0, r3
 8001a16:	9004      	str	r0, [sp, #16]
 8001a18:	e7d3      	b.n	80019c2 <_svfiprintf_r+0x92>
 8001a1a:	9a03      	ldr	r2, [sp, #12]
 8001a1c:	1d11      	adds	r1, r2, #4
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	9103      	str	r1, [sp, #12]
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	db01      	blt.n	8001a2a <_svfiprintf_r+0xfa>
 8001a26:	9207      	str	r2, [sp, #28]
 8001a28:	e004      	b.n	8001a34 <_svfiprintf_r+0x104>
 8001a2a:	4252      	negs	r2, r2
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	9207      	str	r2, [sp, #28]
 8001a32:	9304      	str	r3, [sp, #16]
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	2b2e      	cmp	r3, #46	; 0x2e
 8001a38:	d10c      	bne.n	8001a54 <_svfiprintf_r+0x124>
 8001a3a:	787b      	ldrb	r3, [r7, #1]
 8001a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a3e:	d133      	bne.n	8001aa8 <_svfiprintf_r+0x178>
 8001a40:	9b03      	ldr	r3, [sp, #12]
 8001a42:	3702      	adds	r7, #2
 8001a44:	1d1a      	adds	r2, r3, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	9203      	str	r2, [sp, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bfb8      	it	lt
 8001a4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a52:	9305      	str	r3, [sp, #20]
 8001a54:	4d2e      	ldr	r5, [pc, #184]	; (8001b10 <_svfiprintf_r+0x1e0>)
 8001a56:	2203      	movs	r2, #3
 8001a58:	7839      	ldrb	r1, [r7, #0]
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f000 f9e8 	bl	8001e30 <memchr>
 8001a60:	b138      	cbz	r0, 8001a72 <_svfiprintf_r+0x142>
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	1b40      	subs	r0, r0, r5
 8001a66:	fa03 f000 	lsl.w	r0, r3, r0
 8001a6a:	9b04      	ldr	r3, [sp, #16]
 8001a6c:	3701      	adds	r7, #1
 8001a6e:	4303      	orrs	r3, r0
 8001a70:	9304      	str	r3, [sp, #16]
 8001a72:	7839      	ldrb	r1, [r7, #0]
 8001a74:	2206      	movs	r2, #6
 8001a76:	4827      	ldr	r0, [pc, #156]	; (8001b14 <_svfiprintf_r+0x1e4>)
 8001a78:	1c7e      	adds	r6, r7, #1
 8001a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a7e:	f000 f9d7 	bl	8001e30 <memchr>
 8001a82:	2800      	cmp	r0, #0
 8001a84:	d038      	beq.n	8001af8 <_svfiprintf_r+0x1c8>
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <_svfiprintf_r+0x1e8>)
 8001a88:	bb13      	cbnz	r3, 8001ad0 <_svfiprintf_r+0x1a0>
 8001a8a:	9b03      	ldr	r3, [sp, #12]
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	f023 0307 	bic.w	r3, r3, #7
 8001a92:	3308      	adds	r3, #8
 8001a94:	9303      	str	r3, [sp, #12]
 8001a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a98:	444b      	add	r3, r9
 8001a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a9c:	e76d      	b.n	800197a <_svfiprintf_r+0x4a>
 8001a9e:	fb05 3202 	mla	r2, r5, r2, r3
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	460f      	mov	r7, r1
 8001aa6:	e7a6      	b.n	80019f6 <_svfiprintf_r+0xc6>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	250a      	movs	r5, #10
 8001aac:	4619      	mov	r1, r3
 8001aae:	3701      	adds	r7, #1
 8001ab0:	9305      	str	r3, [sp, #20]
 8001ab2:	4638      	mov	r0, r7
 8001ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ab8:	3a30      	subs	r2, #48	; 0x30
 8001aba:	2a09      	cmp	r2, #9
 8001abc:	d903      	bls.n	8001ac6 <_svfiprintf_r+0x196>
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0c8      	beq.n	8001a54 <_svfiprintf_r+0x124>
 8001ac2:	9105      	str	r1, [sp, #20]
 8001ac4:	e7c6      	b.n	8001a54 <_svfiprintf_r+0x124>
 8001ac6:	fb05 2101 	mla	r1, r5, r1, r2
 8001aca:	2301      	movs	r3, #1
 8001acc:	4607      	mov	r7, r0
 8001ace:	e7f0      	b.n	8001ab2 <_svfiprintf_r+0x182>
 8001ad0:	ab03      	add	r3, sp, #12
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <_svfiprintf_r+0x1ec>)
 8001ad8:	a904      	add	r1, sp, #16
 8001ada:	4640      	mov	r0, r8
 8001adc:	f3af 8000 	nop.w
 8001ae0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001ae4:	4681      	mov	r9, r0
 8001ae6:	d1d6      	bne.n	8001a96 <_svfiprintf_r+0x166>
 8001ae8:	89a3      	ldrh	r3, [r4, #12]
 8001aea:	065b      	lsls	r3, r3, #25
 8001aec:	f53f af35 	bmi.w	800195a <_svfiprintf_r+0x2a>
 8001af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001af2:	b01d      	add	sp, #116	; 0x74
 8001af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001af8:	ab03      	add	r3, sp, #12
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	4622      	mov	r2, r4
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <_svfiprintf_r+0x1ec>)
 8001b00:	a904      	add	r1, sp, #16
 8001b02:	4640      	mov	r0, r8
 8001b04:	f000 f882 	bl	8001c0c <_printf_i>
 8001b08:	e7ea      	b.n	8001ae0 <_svfiprintf_r+0x1b0>
 8001b0a:	bf00      	nop
 8001b0c:	08002104 	.word	0x08002104
 8001b10:	0800210a 	.word	0x0800210a
 8001b14:	0800210e 	.word	0x0800210e
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	0800187d 	.word	0x0800187d

08001b20 <_printf_common>:
 8001b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b24:	4691      	mov	r9, r2
 8001b26:	461f      	mov	r7, r3
 8001b28:	688a      	ldr	r2, [r1, #8]
 8001b2a:	690b      	ldr	r3, [r1, #16]
 8001b2c:	4606      	mov	r6, r0
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	bfb8      	it	lt
 8001b32:	4613      	movlt	r3, r2
 8001b34:	f8c9 3000 	str.w	r3, [r9]
 8001b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b42:	b112      	cbz	r2, 8001b4a <_printf_common+0x2a>
 8001b44:	3301      	adds	r3, #1
 8001b46:	f8c9 3000 	str.w	r3, [r9]
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	0699      	lsls	r1, r3, #26
 8001b4e:	bf42      	ittt	mi
 8001b50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001b54:	3302      	addmi	r3, #2
 8001b56:	f8c9 3000 	strmi.w	r3, [r9]
 8001b5a:	6825      	ldr	r5, [r4, #0]
 8001b5c:	f015 0506 	ands.w	r5, r5, #6
 8001b60:	d107      	bne.n	8001b72 <_printf_common+0x52>
 8001b62:	f104 0a19 	add.w	sl, r4, #25
 8001b66:	68e3      	ldr	r3, [r4, #12]
 8001b68:	f8d9 2000 	ldr.w	r2, [r9]
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	42ab      	cmp	r3, r5
 8001b70:	dc29      	bgt.n	8001bc6 <_printf_common+0xa6>
 8001b72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	3300      	adds	r3, #0
 8001b7a:	bf18      	it	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	0692      	lsls	r2, r2, #26
 8001b80:	d42e      	bmi.n	8001be0 <_printf_common+0xc0>
 8001b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b86:	4639      	mov	r1, r7
 8001b88:	4630      	mov	r0, r6
 8001b8a:	47c0      	blx	r8
 8001b8c:	3001      	adds	r0, #1
 8001b8e:	d021      	beq.n	8001bd4 <_printf_common+0xb4>
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	68e5      	ldr	r5, [r4, #12]
 8001b94:	f003 0306 	and.w	r3, r3, #6
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	bf18      	it	ne
 8001b9c:	2500      	movne	r5, #0
 8001b9e:	f8d9 2000 	ldr.w	r2, [r9]
 8001ba2:	f04f 0900 	mov.w	r9, #0
 8001ba6:	bf08      	it	eq
 8001ba8:	1aad      	subeq	r5, r5, r2
 8001baa:	68a3      	ldr	r3, [r4, #8]
 8001bac:	6922      	ldr	r2, [r4, #16]
 8001bae:	bf08      	it	eq
 8001bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	bfc4      	itt	gt
 8001bb8:	1a9b      	subgt	r3, r3, r2
 8001bba:	18ed      	addgt	r5, r5, r3
 8001bbc:	341a      	adds	r4, #26
 8001bbe:	454d      	cmp	r5, r9
 8001bc0:	d11a      	bne.n	8001bf8 <_printf_common+0xd8>
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e008      	b.n	8001bd8 <_printf_common+0xb8>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4652      	mov	r2, sl
 8001bca:	4639      	mov	r1, r7
 8001bcc:	4630      	mov	r0, r6
 8001bce:	47c0      	blx	r8
 8001bd0:	3001      	adds	r0, #1
 8001bd2:	d103      	bne.n	8001bdc <_printf_common+0xbc>
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bdc:	3501      	adds	r5, #1
 8001bde:	e7c2      	b.n	8001b66 <_printf_common+0x46>
 8001be0:	2030      	movs	r0, #48	; 0x30
 8001be2:	18e1      	adds	r1, r4, r3
 8001be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bee:	4422      	add	r2, r4
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bf6:	e7c4      	b.n	8001b82 <_printf_common+0x62>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	4639      	mov	r1, r7
 8001bfe:	4630      	mov	r0, r6
 8001c00:	47c0      	blx	r8
 8001c02:	3001      	adds	r0, #1
 8001c04:	d0e6      	beq.n	8001bd4 <_printf_common+0xb4>
 8001c06:	f109 0901 	add.w	r9, r9, #1
 8001c0a:	e7d8      	b.n	8001bbe <_printf_common+0x9e>

08001c0c <_printf_i>:
 8001c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001c14:	460c      	mov	r4, r1
 8001c16:	7e09      	ldrb	r1, [r1, #24]
 8001c18:	b085      	sub	sp, #20
 8001c1a:	296e      	cmp	r1, #110	; 0x6e
 8001c1c:	4617      	mov	r7, r2
 8001c1e:	4606      	mov	r6, r0
 8001c20:	4698      	mov	r8, r3
 8001c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c24:	f000 80b3 	beq.w	8001d8e <_printf_i+0x182>
 8001c28:	d822      	bhi.n	8001c70 <_printf_i+0x64>
 8001c2a:	2963      	cmp	r1, #99	; 0x63
 8001c2c:	d036      	beq.n	8001c9c <_printf_i+0x90>
 8001c2e:	d80a      	bhi.n	8001c46 <_printf_i+0x3a>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	f000 80b9 	beq.w	8001da8 <_printf_i+0x19c>
 8001c36:	2958      	cmp	r1, #88	; 0x58
 8001c38:	f000 8083 	beq.w	8001d42 <_printf_i+0x136>
 8001c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c44:	e032      	b.n	8001cac <_printf_i+0xa0>
 8001c46:	2964      	cmp	r1, #100	; 0x64
 8001c48:	d001      	beq.n	8001c4e <_printf_i+0x42>
 8001c4a:	2969      	cmp	r1, #105	; 0x69
 8001c4c:	d1f6      	bne.n	8001c3c <_printf_i+0x30>
 8001c4e:	6820      	ldr	r0, [r4, #0]
 8001c50:	6813      	ldr	r3, [r2, #0]
 8001c52:	0605      	lsls	r5, r0, #24
 8001c54:	f103 0104 	add.w	r1, r3, #4
 8001c58:	d52a      	bpl.n	8001cb0 <_printf_i+0xa4>
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6011      	str	r1, [r2, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	da03      	bge.n	8001c6a <_printf_i+0x5e>
 8001c62:	222d      	movs	r2, #45	; 0x2d
 8001c64:	425b      	negs	r3, r3
 8001c66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c6a:	486f      	ldr	r0, [pc, #444]	; (8001e28 <_printf_i+0x21c>)
 8001c6c:	220a      	movs	r2, #10
 8001c6e:	e039      	b.n	8001ce4 <_printf_i+0xd8>
 8001c70:	2973      	cmp	r1, #115	; 0x73
 8001c72:	f000 809d 	beq.w	8001db0 <_printf_i+0x1a4>
 8001c76:	d808      	bhi.n	8001c8a <_printf_i+0x7e>
 8001c78:	296f      	cmp	r1, #111	; 0x6f
 8001c7a:	d020      	beq.n	8001cbe <_printf_i+0xb2>
 8001c7c:	2970      	cmp	r1, #112	; 0x70
 8001c7e:	d1dd      	bne.n	8001c3c <_printf_i+0x30>
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	f043 0320 	orr.w	r3, r3, #32
 8001c86:	6023      	str	r3, [r4, #0]
 8001c88:	e003      	b.n	8001c92 <_printf_i+0x86>
 8001c8a:	2975      	cmp	r1, #117	; 0x75
 8001c8c:	d017      	beq.n	8001cbe <_printf_i+0xb2>
 8001c8e:	2978      	cmp	r1, #120	; 0x78
 8001c90:	d1d4      	bne.n	8001c3c <_printf_i+0x30>
 8001c92:	2378      	movs	r3, #120	; 0x78
 8001c94:	4865      	ldr	r0, [pc, #404]	; (8001e2c <_printf_i+0x220>)
 8001c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c9a:	e055      	b.n	8001d48 <_printf_i+0x13c>
 8001c9c:	6813      	ldr	r3, [r2, #0]
 8001c9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ca2:	1d19      	adds	r1, r3, #4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6011      	str	r1, [r2, #0]
 8001ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cac:	2301      	movs	r3, #1
 8001cae:	e08c      	b.n	8001dca <_printf_i+0x1be>
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cb6:	6011      	str	r1, [r2, #0]
 8001cb8:	bf18      	it	ne
 8001cba:	b21b      	sxthne	r3, r3
 8001cbc:	e7cf      	b.n	8001c5e <_printf_i+0x52>
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	6825      	ldr	r5, [r4, #0]
 8001cc2:	1d18      	adds	r0, r3, #4
 8001cc4:	6010      	str	r0, [r2, #0]
 8001cc6:	0628      	lsls	r0, r5, #24
 8001cc8:	d501      	bpl.n	8001cce <_printf_i+0xc2>
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	e002      	b.n	8001cd4 <_printf_i+0xc8>
 8001cce:	0668      	lsls	r0, r5, #25
 8001cd0:	d5fb      	bpl.n	8001cca <_printf_i+0xbe>
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	296f      	cmp	r1, #111	; 0x6f
 8001cd6:	bf14      	ite	ne
 8001cd8:	220a      	movne	r2, #10
 8001cda:	2208      	moveq	r2, #8
 8001cdc:	4852      	ldr	r0, [pc, #328]	; (8001e28 <_printf_i+0x21c>)
 8001cde:	2100      	movs	r1, #0
 8001ce0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ce4:	6865      	ldr	r5, [r4, #4]
 8001ce6:	2d00      	cmp	r5, #0
 8001ce8:	60a5      	str	r5, [r4, #8]
 8001cea:	f2c0 8095 	blt.w	8001e18 <_printf_i+0x20c>
 8001cee:	6821      	ldr	r1, [r4, #0]
 8001cf0:	f021 0104 	bic.w	r1, r1, #4
 8001cf4:	6021      	str	r1, [r4, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d13d      	bne.n	8001d76 <_printf_i+0x16a>
 8001cfa:	2d00      	cmp	r5, #0
 8001cfc:	f040 808e 	bne.w	8001e1c <_printf_i+0x210>
 8001d00:	4665      	mov	r5, ip
 8001d02:	2a08      	cmp	r2, #8
 8001d04:	d10b      	bne.n	8001d1e <_printf_i+0x112>
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	07db      	lsls	r3, r3, #31
 8001d0a:	d508      	bpl.n	8001d1e <_printf_i+0x112>
 8001d0c:	6923      	ldr	r3, [r4, #16]
 8001d0e:	6862      	ldr	r2, [r4, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	bfde      	ittt	le
 8001d14:	2330      	movle	r3, #48	; 0x30
 8001d16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d1e:	ebac 0305 	sub.w	r3, ip, r5
 8001d22:	6123      	str	r3, [r4, #16]
 8001d24:	f8cd 8000 	str.w	r8, [sp]
 8001d28:	463b      	mov	r3, r7
 8001d2a:	aa03      	add	r2, sp, #12
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	4630      	mov	r0, r6
 8001d30:	f7ff fef6 	bl	8001b20 <_printf_common>
 8001d34:	3001      	adds	r0, #1
 8001d36:	d14d      	bne.n	8001dd4 <_printf_i+0x1c8>
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	b005      	add	sp, #20
 8001d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d42:	4839      	ldr	r0, [pc, #228]	; (8001e28 <_printf_i+0x21c>)
 8001d44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	6821      	ldr	r1, [r4, #0]
 8001d4c:	1d1d      	adds	r5, r3, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6015      	str	r5, [r2, #0]
 8001d52:	060a      	lsls	r2, r1, #24
 8001d54:	d50b      	bpl.n	8001d6e <_printf_i+0x162>
 8001d56:	07ca      	lsls	r2, r1, #31
 8001d58:	bf44      	itt	mi
 8001d5a:	f041 0120 	orrmi.w	r1, r1, #32
 8001d5e:	6021      	strmi	r1, [r4, #0]
 8001d60:	b91b      	cbnz	r3, 8001d6a <_printf_i+0x15e>
 8001d62:	6822      	ldr	r2, [r4, #0]
 8001d64:	f022 0220 	bic.w	r2, r2, #32
 8001d68:	6022      	str	r2, [r4, #0]
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	e7b7      	b.n	8001cde <_printf_i+0xd2>
 8001d6e:	064d      	lsls	r5, r1, #25
 8001d70:	bf48      	it	mi
 8001d72:	b29b      	uxthmi	r3, r3
 8001d74:	e7ef      	b.n	8001d56 <_printf_i+0x14a>
 8001d76:	4665      	mov	r5, ip
 8001d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d7c:	fb02 3311 	mls	r3, r2, r1, r3
 8001d80:	5cc3      	ldrb	r3, [r0, r3]
 8001d82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d86:	460b      	mov	r3, r1
 8001d88:	2900      	cmp	r1, #0
 8001d8a:	d1f5      	bne.n	8001d78 <_printf_i+0x16c>
 8001d8c:	e7b9      	b.n	8001d02 <_printf_i+0xf6>
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	6825      	ldr	r5, [r4, #0]
 8001d92:	1d18      	adds	r0, r3, #4
 8001d94:	6961      	ldr	r1, [r4, #20]
 8001d96:	6010      	str	r0, [r2, #0]
 8001d98:	0628      	lsls	r0, r5, #24
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	d501      	bpl.n	8001da2 <_printf_i+0x196>
 8001d9e:	6019      	str	r1, [r3, #0]
 8001da0:	e002      	b.n	8001da8 <_printf_i+0x19c>
 8001da2:	066a      	lsls	r2, r5, #25
 8001da4:	d5fb      	bpl.n	8001d9e <_printf_i+0x192>
 8001da6:	8019      	strh	r1, [r3, #0]
 8001da8:	2300      	movs	r3, #0
 8001daa:	4665      	mov	r5, ip
 8001dac:	6123      	str	r3, [r4, #16]
 8001dae:	e7b9      	b.n	8001d24 <_printf_i+0x118>
 8001db0:	6813      	ldr	r3, [r2, #0]
 8001db2:	1d19      	adds	r1, r3, #4
 8001db4:	6011      	str	r1, [r2, #0]
 8001db6:	681d      	ldr	r5, [r3, #0]
 8001db8:	6862      	ldr	r2, [r4, #4]
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f000 f837 	bl	8001e30 <memchr>
 8001dc2:	b108      	cbz	r0, 8001dc8 <_printf_i+0x1bc>
 8001dc4:	1b40      	subs	r0, r0, r5
 8001dc6:	6060      	str	r0, [r4, #4]
 8001dc8:	6863      	ldr	r3, [r4, #4]
 8001dca:	6123      	str	r3, [r4, #16]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dd2:	e7a7      	b.n	8001d24 <_printf_i+0x118>
 8001dd4:	6923      	ldr	r3, [r4, #16]
 8001dd6:	462a      	mov	r2, r5
 8001dd8:	4639      	mov	r1, r7
 8001dda:	4630      	mov	r0, r6
 8001ddc:	47c0      	blx	r8
 8001dde:	3001      	adds	r0, #1
 8001de0:	d0aa      	beq.n	8001d38 <_printf_i+0x12c>
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	079b      	lsls	r3, r3, #30
 8001de6:	d413      	bmi.n	8001e10 <_printf_i+0x204>
 8001de8:	68e0      	ldr	r0, [r4, #12]
 8001dea:	9b03      	ldr	r3, [sp, #12]
 8001dec:	4298      	cmp	r0, r3
 8001dee:	bfb8      	it	lt
 8001df0:	4618      	movlt	r0, r3
 8001df2:	e7a3      	b.n	8001d3c <_printf_i+0x130>
 8001df4:	2301      	movs	r3, #1
 8001df6:	464a      	mov	r2, r9
 8001df8:	4639      	mov	r1, r7
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	47c0      	blx	r8
 8001dfe:	3001      	adds	r0, #1
 8001e00:	d09a      	beq.n	8001d38 <_printf_i+0x12c>
 8001e02:	3501      	adds	r5, #1
 8001e04:	68e3      	ldr	r3, [r4, #12]
 8001e06:	9a03      	ldr	r2, [sp, #12]
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	42ab      	cmp	r3, r5
 8001e0c:	dcf2      	bgt.n	8001df4 <_printf_i+0x1e8>
 8001e0e:	e7eb      	b.n	8001de8 <_printf_i+0x1dc>
 8001e10:	2500      	movs	r5, #0
 8001e12:	f104 0919 	add.w	r9, r4, #25
 8001e16:	e7f5      	b.n	8001e04 <_printf_i+0x1f8>
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ac      	bne.n	8001d76 <_printf_i+0x16a>
 8001e1c:	7803      	ldrb	r3, [r0, #0]
 8001e1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e26:	e76c      	b.n	8001d02 <_printf_i+0xf6>
 8001e28:	08002115 	.word	0x08002115
 8001e2c:	08002126 	.word	0x08002126

08001e30 <memchr>:
 8001e30:	b510      	push	{r4, lr}
 8001e32:	b2c9      	uxtb	r1, r1
 8001e34:	4402      	add	r2, r0
 8001e36:	4290      	cmp	r0, r2
 8001e38:	4603      	mov	r3, r0
 8001e3a:	d101      	bne.n	8001e40 <memchr+0x10>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e003      	b.n	8001e48 <memchr+0x18>
 8001e40:	781c      	ldrb	r4, [r3, #0]
 8001e42:	3001      	adds	r0, #1
 8001e44:	428c      	cmp	r4, r1
 8001e46:	d1f6      	bne.n	8001e36 <memchr+0x6>
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd10      	pop	{r4, pc}

08001e4c <memcpy>:
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	1e43      	subs	r3, r0, #1
 8001e50:	440a      	add	r2, r1
 8001e52:	4291      	cmp	r1, r2
 8001e54:	d100      	bne.n	8001e58 <memcpy+0xc>
 8001e56:	bd10      	pop	{r4, pc}
 8001e58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e60:	e7f7      	b.n	8001e52 <memcpy+0x6>

08001e62 <memmove>:
 8001e62:	4288      	cmp	r0, r1
 8001e64:	b510      	push	{r4, lr}
 8001e66:	eb01 0302 	add.w	r3, r1, r2
 8001e6a:	d807      	bhi.n	8001e7c <memmove+0x1a>
 8001e6c:	1e42      	subs	r2, r0, #1
 8001e6e:	4299      	cmp	r1, r3
 8001e70:	d00a      	beq.n	8001e88 <memmove+0x26>
 8001e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001e7a:	e7f8      	b.n	8001e6e <memmove+0xc>
 8001e7c:	4283      	cmp	r3, r0
 8001e7e:	d9f5      	bls.n	8001e6c <memmove+0xa>
 8001e80:	1881      	adds	r1, r0, r2
 8001e82:	1ad2      	subs	r2, r2, r3
 8001e84:	42d3      	cmn	r3, r2
 8001e86:	d100      	bne.n	8001e8a <memmove+0x28>
 8001e88:	bd10      	pop	{r4, pc}
 8001e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e8e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001e92:	e7f7      	b.n	8001e84 <memmove+0x22>

08001e94 <_free_r>:
 8001e94:	b538      	push	{r3, r4, r5, lr}
 8001e96:	4605      	mov	r5, r0
 8001e98:	2900      	cmp	r1, #0
 8001e9a:	d043      	beq.n	8001f24 <_free_r+0x90>
 8001e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ea0:	1f0c      	subs	r4, r1, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bfb8      	it	lt
 8001ea6:	18e4      	addlt	r4, r4, r3
 8001ea8:	f000 f8d0 	bl	800204c <__malloc_lock>
 8001eac:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <_free_r+0x94>)
 8001eae:	6813      	ldr	r3, [r2, #0]
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	b933      	cbnz	r3, 8001ec2 <_free_r+0x2e>
 8001eb4:	6063      	str	r3, [r4, #4]
 8001eb6:	6014      	str	r4, [r2, #0]
 8001eb8:	4628      	mov	r0, r5
 8001eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ebe:	f000 b8c6 	b.w	800204e <__malloc_unlock>
 8001ec2:	42a3      	cmp	r3, r4
 8001ec4:	d90b      	bls.n	8001ede <_free_r+0x4a>
 8001ec6:	6821      	ldr	r1, [r4, #0]
 8001ec8:	1862      	adds	r2, r4, r1
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	bf01      	itttt	eq
 8001ece:	681a      	ldreq	r2, [r3, #0]
 8001ed0:	685b      	ldreq	r3, [r3, #4]
 8001ed2:	1852      	addeq	r2, r2, r1
 8001ed4:	6022      	streq	r2, [r4, #0]
 8001ed6:	6063      	str	r3, [r4, #4]
 8001ed8:	6004      	str	r4, [r0, #0]
 8001eda:	e7ed      	b.n	8001eb8 <_free_r+0x24>
 8001edc:	4613      	mov	r3, r2
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	b10a      	cbz	r2, 8001ee6 <_free_r+0x52>
 8001ee2:	42a2      	cmp	r2, r4
 8001ee4:	d9fa      	bls.n	8001edc <_free_r+0x48>
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	1858      	adds	r0, r3, r1
 8001eea:	42a0      	cmp	r0, r4
 8001eec:	d10b      	bne.n	8001f06 <_free_r+0x72>
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	4401      	add	r1, r0
 8001ef2:	1858      	adds	r0, r3, r1
 8001ef4:	4282      	cmp	r2, r0
 8001ef6:	6019      	str	r1, [r3, #0]
 8001ef8:	d1de      	bne.n	8001eb8 <_free_r+0x24>
 8001efa:	6810      	ldr	r0, [r2, #0]
 8001efc:	6852      	ldr	r2, [r2, #4]
 8001efe:	4401      	add	r1, r0
 8001f00:	6019      	str	r1, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	e7d8      	b.n	8001eb8 <_free_r+0x24>
 8001f06:	d902      	bls.n	8001f0e <_free_r+0x7a>
 8001f08:	230c      	movs	r3, #12
 8001f0a:	602b      	str	r3, [r5, #0]
 8001f0c:	e7d4      	b.n	8001eb8 <_free_r+0x24>
 8001f0e:	6820      	ldr	r0, [r4, #0]
 8001f10:	1821      	adds	r1, r4, r0
 8001f12:	428a      	cmp	r2, r1
 8001f14:	bf01      	itttt	eq
 8001f16:	6811      	ldreq	r1, [r2, #0]
 8001f18:	6852      	ldreq	r2, [r2, #4]
 8001f1a:	1809      	addeq	r1, r1, r0
 8001f1c:	6021      	streq	r1, [r4, #0]
 8001f1e:	6062      	str	r2, [r4, #4]
 8001f20:	605c      	str	r4, [r3, #4]
 8001f22:	e7c9      	b.n	8001eb8 <_free_r+0x24>
 8001f24:	bd38      	pop	{r3, r4, r5, pc}
 8001f26:	bf00      	nop
 8001f28:	20000094 	.word	0x20000094

08001f2c <_malloc_r>:
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	1ccd      	adds	r5, r1, #3
 8001f30:	f025 0503 	bic.w	r5, r5, #3
 8001f34:	3508      	adds	r5, #8
 8001f36:	2d0c      	cmp	r5, #12
 8001f38:	bf38      	it	cc
 8001f3a:	250c      	movcc	r5, #12
 8001f3c:	2d00      	cmp	r5, #0
 8001f3e:	4606      	mov	r6, r0
 8001f40:	db01      	blt.n	8001f46 <_malloc_r+0x1a>
 8001f42:	42a9      	cmp	r1, r5
 8001f44:	d903      	bls.n	8001f4e <_malloc_r+0x22>
 8001f46:	230c      	movs	r3, #12
 8001f48:	6033      	str	r3, [r6, #0]
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	f000 f87d 	bl	800204c <__malloc_lock>
 8001f52:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <_malloc_r+0xac>)
 8001f54:	6814      	ldr	r4, [r2, #0]
 8001f56:	4621      	mov	r1, r4
 8001f58:	b991      	cbnz	r1, 8001f80 <_malloc_r+0x54>
 8001f5a:	4c20      	ldr	r4, [pc, #128]	; (8001fdc <_malloc_r+0xb0>)
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	b91b      	cbnz	r3, 8001f68 <_malloc_r+0x3c>
 8001f60:	4630      	mov	r0, r6
 8001f62:	f000 f863 	bl	800202c <_sbrk_r>
 8001f66:	6020      	str	r0, [r4, #0]
 8001f68:	4629      	mov	r1, r5
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f000 f85e 	bl	800202c <_sbrk_r>
 8001f70:	1c43      	adds	r3, r0, #1
 8001f72:	d124      	bne.n	8001fbe <_malloc_r+0x92>
 8001f74:	230c      	movs	r3, #12
 8001f76:	4630      	mov	r0, r6
 8001f78:	6033      	str	r3, [r6, #0]
 8001f7a:	f000 f868 	bl	800204e <__malloc_unlock>
 8001f7e:	e7e4      	b.n	8001f4a <_malloc_r+0x1e>
 8001f80:	680b      	ldr	r3, [r1, #0]
 8001f82:	1b5b      	subs	r3, r3, r5
 8001f84:	d418      	bmi.n	8001fb8 <_malloc_r+0x8c>
 8001f86:	2b0b      	cmp	r3, #11
 8001f88:	d90f      	bls.n	8001faa <_malloc_r+0x7e>
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	18cc      	adds	r4, r1, r3
 8001f8e:	50cd      	str	r5, [r1, r3]
 8001f90:	4630      	mov	r0, r6
 8001f92:	f000 f85c 	bl	800204e <__malloc_unlock>
 8001f96:	f104 000b 	add.w	r0, r4, #11
 8001f9a:	1d23      	adds	r3, r4, #4
 8001f9c:	f020 0007 	bic.w	r0, r0, #7
 8001fa0:	1ac3      	subs	r3, r0, r3
 8001fa2:	d0d3      	beq.n	8001f4c <_malloc_r+0x20>
 8001fa4:	425a      	negs	r2, r3
 8001fa6:	50e2      	str	r2, [r4, r3]
 8001fa8:	e7d0      	b.n	8001f4c <_malloc_r+0x20>
 8001faa:	684b      	ldr	r3, [r1, #4]
 8001fac:	428c      	cmp	r4, r1
 8001fae:	bf16      	itet	ne
 8001fb0:	6063      	strne	r3, [r4, #4]
 8001fb2:	6013      	streq	r3, [r2, #0]
 8001fb4:	460c      	movne	r4, r1
 8001fb6:	e7eb      	b.n	8001f90 <_malloc_r+0x64>
 8001fb8:	460c      	mov	r4, r1
 8001fba:	6849      	ldr	r1, [r1, #4]
 8001fbc:	e7cc      	b.n	8001f58 <_malloc_r+0x2c>
 8001fbe:	1cc4      	adds	r4, r0, #3
 8001fc0:	f024 0403 	bic.w	r4, r4, #3
 8001fc4:	42a0      	cmp	r0, r4
 8001fc6:	d005      	beq.n	8001fd4 <_malloc_r+0xa8>
 8001fc8:	1a21      	subs	r1, r4, r0
 8001fca:	4630      	mov	r0, r6
 8001fcc:	f000 f82e 	bl	800202c <_sbrk_r>
 8001fd0:	3001      	adds	r0, #1
 8001fd2:	d0cf      	beq.n	8001f74 <_malloc_r+0x48>
 8001fd4:	6025      	str	r5, [r4, #0]
 8001fd6:	e7db      	b.n	8001f90 <_malloc_r+0x64>
 8001fd8:	20000094 	.word	0x20000094
 8001fdc:	20000098 	.word	0x20000098

08001fe0 <_realloc_r>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	4607      	mov	r7, r0
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	460e      	mov	r6, r1
 8001fe8:	b921      	cbnz	r1, 8001ff4 <_realloc_r+0x14>
 8001fea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001fee:	4611      	mov	r1, r2
 8001ff0:	f7ff bf9c 	b.w	8001f2c <_malloc_r>
 8001ff4:	b922      	cbnz	r2, 8002000 <_realloc_r+0x20>
 8001ff6:	f7ff ff4d 	bl	8001e94 <_free_r>
 8001ffa:	4625      	mov	r5, r4
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002000:	f000 f826 	bl	8002050 <_malloc_usable_size_r>
 8002004:	42a0      	cmp	r0, r4
 8002006:	d20f      	bcs.n	8002028 <_realloc_r+0x48>
 8002008:	4621      	mov	r1, r4
 800200a:	4638      	mov	r0, r7
 800200c:	f7ff ff8e 	bl	8001f2c <_malloc_r>
 8002010:	4605      	mov	r5, r0
 8002012:	2800      	cmp	r0, #0
 8002014:	d0f2      	beq.n	8001ffc <_realloc_r+0x1c>
 8002016:	4631      	mov	r1, r6
 8002018:	4622      	mov	r2, r4
 800201a:	f7ff ff17 	bl	8001e4c <memcpy>
 800201e:	4631      	mov	r1, r6
 8002020:	4638      	mov	r0, r7
 8002022:	f7ff ff37 	bl	8001e94 <_free_r>
 8002026:	e7e9      	b.n	8001ffc <_realloc_r+0x1c>
 8002028:	4635      	mov	r5, r6
 800202a:	e7e7      	b.n	8001ffc <_realloc_r+0x1c>

0800202c <_sbrk_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	2300      	movs	r3, #0
 8002030:	4c05      	ldr	r4, [pc, #20]	; (8002048 <_sbrk_r+0x1c>)
 8002032:	4605      	mov	r5, r0
 8002034:	4608      	mov	r0, r1
 8002036:	6023      	str	r3, [r4, #0]
 8002038:	f7fe fa38 	bl	80004ac <_sbrk>
 800203c:	1c43      	adds	r3, r0, #1
 800203e:	d102      	bne.n	8002046 <_sbrk_r+0x1a>
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	b103      	cbz	r3, 8002046 <_sbrk_r+0x1a>
 8002044:	602b      	str	r3, [r5, #0]
 8002046:	bd38      	pop	{r3, r4, r5, pc}
 8002048:	200000e0 	.word	0x200000e0

0800204c <__malloc_lock>:
 800204c:	4770      	bx	lr

0800204e <__malloc_unlock>:
 800204e:	4770      	bx	lr

08002050 <_malloc_usable_size_r>:
 8002050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002054:	1f18      	subs	r0, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	bfbc      	itt	lt
 800205a:	580b      	ldrlt	r3, [r1, r0]
 800205c:	18c0      	addlt	r0, r0, r3
 800205e:	4770      	bx	lr

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	bf00      	nop
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr
