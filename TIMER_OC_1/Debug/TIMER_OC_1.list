
TIMER_OC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001dc0  08001dc0  00011dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001de4  08001de4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08001de4  08001de4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001de4  08001de4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001de4  08001de4  00011de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001de8  08001de8  00011de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08001dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000001c  08001e08  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001e08  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000809f  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001354  00000000  00000000  000280e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a8  00000000  00000000  00029438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  00029ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013d49  00000000  00000000  0002a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006124  00000000  00000000  0003e229  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006eecb  00000000  00000000  0004434d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3218  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002384  00000000  00000000  000b3294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001da8 	.word	0x08001da8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08001da8 	.word	0x08001da8

0800014c <main>:
volatile uint32_t pulse3_value = 16000;  // 2kHz
volatile uint32_t pulse4_value = 8000;   // 4kHz

volatile uint32_t ccr_content;

int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000150:	f000 fa7e 	bl	8000650 <HAL_Init>
	SystemClock_Config(SYS_CLOCK_FREQ_64_MHZ);
 8000154:	2040      	movs	r0, #64	; 0x40
 8000156:	f000 f82b 	bl	80001b0 <SystemClock_Config>
	GPIO_Init();
 800015a:	f000 f8a5 	bl	80002a8 <GPIO_Init>
	TIMER3_Init();
 800015e:	f000 f8cd 	bl	80002fc <TIMER3_Init>

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_1) != HAL_OK){
 8000162:	2100      	movs	r1, #0
 8000164:	4811      	ldr	r0, [pc, #68]	; (80001ac <main+0x60>)
 8000166:	f001 f995 	bl	8001494 <HAL_TIM_OC_Start_IT>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d001      	beq.n	8000174 <main+0x28>
		Error_Handler();
 8000170:	f000 f988 	bl	8000484 <Error_Handler>
	}

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_2) != HAL_OK){
 8000174:	2104      	movs	r1, #4
 8000176:	480d      	ldr	r0, [pc, #52]	; (80001ac <main+0x60>)
 8000178:	f001 f98c 	bl	8001494 <HAL_TIM_OC_Start_IT>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d001      	beq.n	8000186 <main+0x3a>
		Error_Handler();
 8000182:	f000 f97f 	bl	8000484 <Error_Handler>
	}

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_3) != HAL_OK){
 8000186:	2108      	movs	r1, #8
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <main+0x60>)
 800018a:	f001 f983 	bl	8001494 <HAL_TIM_OC_Start_IT>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <main+0x4c>
		Error_Handler();
 8000194:	f000 f976 	bl	8000484 <Error_Handler>
	}

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_4) != HAL_OK){
 8000198:	210c      	movs	r1, #12
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <main+0x60>)
 800019c:	f001 f97a 	bl	8001494 <HAL_TIM_OC_Start_IT>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <main+0x5e>
		Error_Handler();
 80001a6:	f000 f96d 	bl	8000484 <Error_Handler>
	}

	while(1);
 80001aa:	e7fe      	b.n	80001aa <main+0x5e>
 80001ac:	2000003c 	.word	0x2000003c

080001b0 <SystemClock_Config>:

  	return 0;
}

void SystemClock_Config(uint8_t clock_freq){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b092      	sub	sp, #72	; 0x48
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	647b      	str	r3, [r7, #68]	; 0x44

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001be:	2302      	movs	r3, #2
 80001c0:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 80001c2:	2301      	movs	r3, #1
 80001c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c6:	2310      	movs	r3, #16
 80001c8:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80001ca:	2302      	movs	r3, #2
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ce:	2300      	movs	r3, #0
 80001d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq){
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b30      	cmp	r3, #48	; 0x30
 80001d6:	d016      	beq.n	8000206 <SystemClock_Config+0x56>
 80001d8:	2b40      	cmp	r3, #64	; 0x40
 80001da:	d026      	beq.n	800022a <SystemClock_Config+0x7a>
 80001dc:	2b14      	cmp	r3, #20
 80001de:	d000      	beq.n	80001e2 <SystemClock_Config+0x32>

			break;

		default:

			return;
 80001e0:	e05d      	b.n	800029e <SystemClock_Config+0xee>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL5;
 80001e2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80001e6:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80001e8:	230f      	movs	r3, #15
 80001ea:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f8:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80001fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fe:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_0;
 8000200:	2300      	movs	r3, #0
 8000202:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000204:	e023      	b.n	800024e <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL12;
 8000206:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800020a:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800020c:	230f      	movs	r3, #15
 800020e:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021c:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800021e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000222:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_1;
 8000224:	2301      	movs	r3, #1
 8000226:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000228:	e011      	b.n	800024e <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL16;
 800022a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800022e:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000230:	230f      	movs	r3, #15
 8000232:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000234:	2302      	movs	r3, #2
 8000236:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800023c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000240:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_2;
 8000248:	2302      	movs	r3, #2
 800024a:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 800024c:	bf00      	nop

	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 800024e:	f107 031c 	add.w	r3, r7, #28
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fcfe 	bl	8000c54 <HAL_RCC_OscConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0xb2>
		Error_Handler();
 800025e:	f000 f911 	bl	8000484 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000268:	4618      	mov	r0, r3
 800026a:	f000 ff73 	bl	8001154 <HAL_RCC_ClockConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0xc8>
		Error_Handler();
 8000274:	f000 f906 	bl	8000484 <Error_Handler>
	}

	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000278:	f001 f8b8 	bl	80013ec <HAL_RCC_GetHCLKFreq>
 800027c:	4602      	mov	r2, r0
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <SystemClock_Config+0xf4>)
 8000280:	fba3 2302 	umull	r2, r3, r3, r2
 8000284:	099b      	lsrs	r3, r3, #6
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fb45 	bl	8000916 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800028c:	2004      	movs	r0, #4
 800028e:	f000 fb4f 	bl	8000930 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2100      	movs	r1, #0
 8000296:	f04f 30ff 	mov.w	r0, #4294967295
 800029a:	f000 fb12 	bl	80008c2 <HAL_NVIC_SetPriority>

}
 800029e:	3748      	adds	r7, #72	; 0x48
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	10624dd3 	.word	0x10624dd3

080002a8 <GPIO_Init>:

void GPIO_Init(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef ledgpio;

	/* GPIOA clock enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <GPIO_Init+0x4c>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <GPIO_Init+0x4c>)
 80002b4:	f043 0304 	orr.w	r3, r3, #4
 80002b8:	6193      	str	r3, [r2, #24]
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <GPIO_Init+0x4c>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	f003 0304 	and.w	r3, r3, #4
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]

    /* High Level GPIO Initialization */
	ledgpio.Pin = GPIO_PIN_5;
 80002c6:	2320      	movs	r3, #32
 80002c8:	60bb      	str	r3, [r7, #8]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
	ledgpio.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
	ledgpio.Speed = GPIO_SPEED_FREQ_LOW;
 80002d2:	2302      	movs	r3, #2
 80002d4:	617b      	str	r3, [r7, #20]

	/* Init GPIO */
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80002d6:	f107 0308 	add.w	r3, r7, #8
 80002da:	4619      	mov	r1, r3
 80002dc:	4806      	ldr	r0, [pc, #24]	; (80002f8 <GPIO_Init+0x50>)
 80002de:	f000 fb4f 	bl	8000980 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2120      	movs	r1, #32
 80002e6:	4804      	ldr	r0, [pc, #16]	; (80002f8 <GPIO_Init+0x50>)
 80002e8:	f000 fc9c 	bl	8000c24 <HAL_GPIO_WritePin>
}
 80002ec:	bf00      	nop
 80002ee:	3718      	adds	r7, #24
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40010800 	.word	0x40010800

080002fc <TIMER3_Init>:

void TIMER3_Init(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0

	TIM_OC_InitTypeDef tim3OC_init;

	htimer2.Instance = TIM2;
 8000302:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <TIMER3_Init+0xb8>)
 8000304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000308:	601a      	str	r2, [r3, #0]
	htimer2.Init.Period = 0xFFFF;
 800030a:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <TIMER3_Init+0xb8>)
 800030c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000310:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 0;
 8000312:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <TIMER3_Init+0xb8>)
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_OC_Init(&htimer2) != HAL_OK){
 8000318:	4826      	ldr	r0, [pc, #152]	; (80003b4 <TIMER3_Init+0xb8>)
 800031a:	f001 f88f 	bl	800143c <HAL_TIM_OC_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <TIMER3_Init+0x2c>
		Error_Handler();
 8000324:	f000 f8ae 	bl	8000484 <Error_Handler>
	}

	memset(&tim3OC_init, 0, sizeof(tim3OC_init));	// Just in case
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	221c      	movs	r2, #28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fd32 	bl	8001d98 <memset>

	tim3OC_init.OCMode = TIM_OCMODE_TOGGLE;
 8000334:	2330      	movs	r3, #48	; 0x30
 8000336:	607b      	str	r3, [r7, #4]
	tim3OC_init.OCNPolarity = TIM_OCPOLARITY_HIGH;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
	tim3OC_init.Pulse = pulse1_value;
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <TIMER3_Init+0xbc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	60bb      	str	r3, [r7, #8]

	if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim3OC_init, TIM_CHANNEL_1) != HAL_OK){
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	4619      	mov	r1, r3
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <TIMER3_Init+0xb8>)
 800034a:	f001 fa23 	bl	8001794 <HAL_TIM_OC_ConfigChannel>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <TIMER3_Init+0x5c>
		Error_Handler();
 8000354:	f000 f896 	bl	8000484 <Error_Handler>
	}

	tim3OC_init.Pulse  = pulse2_value;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <TIMER3_Init+0xc0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim3OC_init, TIM_CHANNEL_2) != HAL_OK){
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2204      	movs	r2, #4
 8000362:	4619      	mov	r1, r3
 8000364:	4813      	ldr	r0, [pc, #76]	; (80003b4 <TIMER3_Init+0xb8>)
 8000366:	f001 fa15 	bl	8001794 <HAL_TIM_OC_ConfigChannel>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <TIMER3_Init+0x78>
		Error_Handler();
 8000370:	f000 f888 	bl	8000484 <Error_Handler>
	}

	tim3OC_init.Pulse  = pulse3_value;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <TIMER3_Init+0xc4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim3OC_init, TIM_CHANNEL_3) != HAL_OK){
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2208      	movs	r2, #8
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <TIMER3_Init+0xb8>)
 8000382:	f001 fa07 	bl	8001794 <HAL_TIM_OC_ConfigChannel>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <TIMER3_Init+0x94>
		Error_Handler();
 800038c:	f000 f87a 	bl	8000484 <Error_Handler>
	}

	tim3OC_init.Pulse  = pulse4_value;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <TIMER3_Init+0xc8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim3OC_init, TIM_CHANNEL_4) != HAL_OK){
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	220c      	movs	r2, #12
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <TIMER3_Init+0xb8>)
 800039e:	f001 f9f9 	bl	8001794 <HAL_TIM_OC_ConfigChannel>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <TIMER3_Init+0xb0>
		Error_Handler();
 80003a8:	f000 f86c 	bl	8000484 <Error_Handler>
	}

}
 80003ac:	bf00      	nop
 80003ae:	3720      	adds	r7, #32
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	2000003c 	.word	0x2000003c
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000004 	.word	0x20000004
 80003c0:	20000008 	.word	0x20000008
 80003c4:	2000000c 	.word	0x2000000c

080003c8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]

	/* TIM3_CH1 toggling with frequency = 500 Hz */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7f1b      	ldrb	r3, [r3, #28]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d10e      	bne.n	80003f6 <HAL_TIM_OC_DelayElapsedCallback+0x2e>
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80003d8:	2100      	movs	r1, #0
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f001 fa3a 	bl	8001854 <HAL_TIM_ReadCapturedValue>
 80003e0:	4602      	mov	r2, r0
 80003e2:	4b23      	ldr	r3, [pc, #140]	; (8000470 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80003e4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content+pulse1_value);	//Adding value to next toggling in CCR1
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80003e8:	6819      	ldr	r1, [r3, #0]
 80003ea:	4b22      	ldr	r3, [pc, #136]	; (8000474 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	440a      	add	r2, r1
 80003f4:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* TIM3_CH2 toggling with frequency = 1000 Hz */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	7f1b      	ldrb	r3, [r3, #28]
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d10e      	bne.n	800041c <HAL_TIM_OC_DelayElapsedCallback+0x54>
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80003fe:	2104      	movs	r1, #4
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f001 fa27 	bl	8001854 <HAL_TIM_ReadCapturedValue>
 8000406:	4602      	mov	r2, r0
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800040a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, ccr_content+pulse2_value);	//Adding value to next toggling in CCR1
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800040e:	6819      	ldr	r1, [r3, #0]
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	440a      	add	r2, r1
 800041a:	639a      	str	r2, [r3, #56]	; 0x38
	}

	/* TIM3_CH3 toggling with frequency = 2000 Hz */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	7f1b      	ldrb	r3, [r3, #28]
 8000420:	2b04      	cmp	r3, #4
 8000422:	d10e      	bne.n	8000442 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000424:	2108      	movs	r1, #8
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f001 fa14 	bl	8001854 <HAL_TIM_ReadCapturedValue>
 800042c:	4602      	mov	r2, r0
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000430:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, ccr_content+pulse3_value);	//Adding value to next toggling in CCR1
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000434:	6819      	ldr	r1, [r3, #0]
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	440a      	add	r2, r1
 8000440:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	/* TIM3_CH4 toggling with frequency = 4000 Hz */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	7f1b      	ldrb	r3, [r3, #28]
 8000446:	2b08      	cmp	r3, #8
 8000448:	d10e      	bne.n	8000468 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800044a:	210c      	movs	r1, #12
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f001 fa01 	bl	8001854 <HAL_TIM_ReadCapturedValue>
 8000452:	4602      	mov	r2, r0
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000456:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, ccr_content+pulse4_value);	//Adding value to next toggling in CCR1
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800045a:	6819      	ldr	r1, [r3, #0]
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	440a      	add	r2, r1
 8000466:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000038 	.word	0x20000038
 8000474:	20000000 	.word	0x20000000
 8000478:	20000004 	.word	0x20000004
 800047c:	20000008 	.word	0x20000008
 8000480:	2000000c 	.word	0x2000000c

08000484 <Error_Handler>:

void Error_Handler(void){
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	while(1);
 8000488:	e7fe      	b.n	8000488 <Error_Handler+0x4>
	...

0800048c <HAL_MspInit>:
 */

#include "main.h"
#include "stm32f1xx_hal_tim.h"

void HAL_MspInit(void){
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0

	__HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <HAL_MspInit+0x5c>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
	/* DISABLE: JTAG-DP Disabled and SW-DP Disabled */
	//__HAL_AFIO_REMAP_SWJ_DISABLE();

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004aa:	2003      	movs	r0, #3
 80004ac:	f000 f9fe 	bl	80008ac <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <HAL_MspInit+0x60>)
 80004b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <HAL_MspInit+0x60>)
 80004b6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80004ba:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	f06f 000b 	mvn.w	r0, #11
 80004c4:	f000 f9fd 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	f06f 000a 	mvn.w	r0, #10
 80004d0:	f000 f9f7 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2100      	movs	r1, #0
 80004d8:	f06f 0009 	mvn.w	r0, #9
 80004dc:	f000 f9f1 	bl	80008c2 <HAL_NVIC_SetPriority>

}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	//1. enable the peripheral clock for the timer2 peripheral
	__HAL_RCC_AFIO_CLK_ENABLE();
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <HAL_TIM_OC_MspInit+0x80>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <HAL_TIM_OC_MspInit+0x80>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <HAL_TIM_OC_MspInit+0x80>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <HAL_TIM_OC_MspInit+0x80>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	4a16      	ldr	r2, [pc, #88]	; (8000570 <HAL_TIM_OC_MspInit+0x80>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	61d3      	str	r3, [r2, #28]
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_TIM_OC_MspInit+0x80>)
 800051e:	69db      	ldr	r3, [r3, #28]
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <HAL_TIM_OC_MspInit+0x80>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <HAL_TIM_OC_MspInit+0x80>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_TIM_OC_MspInit+0x80>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
	   PA0    ------> TIM2_CH1
	   PA1    ------> TIM2_CH2
	   PA2    ------> TIM2_CH3
	   PA3    ------> TIM2_CH4
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000540:	230f      	movs	r3, #15
 8000542:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000544:	2302      	movs	r3, #2
 8000546:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2302      	movs	r3, #2
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	4619      	mov	r1, r3
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <HAL_TIM_OC_MspInit+0x84>)
 8000554:	f000 fa14 	bl	8000980 <HAL_GPIO_Init>

	//3. nvic settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	210f      	movs	r1, #15
 800055c:	201c      	movs	r0, #28
 800055e:	f000 f9b0 	bl	80008c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000562:	201c      	movs	r0, #28
 8000564:	f000 f9c9 	bl	80008fa <HAL_NVIC_EnableIRQ>

}
 8000568:	bf00      	nop
 800056a:	3728      	adds	r7, #40	; 0x28
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800

08000578 <SysTick_Handler>:
#include "main.h"
#include "stm32f1xx_it.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	HAL_IncTick();
 800057c:	f000 f8ae 	bl	80006dc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000580:	f000 f9f2 	bl	8000968 <HAL_SYSTICK_IRQHandler>

}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	HAL_TIM_IRQHandler(&htimer2);
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <TIM2_IRQHandler+0x10>)
 800058e:	f000 fff9 	bl	8001584 <HAL_TIM_IRQHandler>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000003c 	.word	0x2000003c

0800059c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <SystemInit+0x5c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <SystemInit+0x5c>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <SystemInit+0x5c>)
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	4911      	ldr	r1, [pc, #68]	; (80005f8 <SystemInit+0x5c>)
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <SystemInit+0x60>)
 80005b4:	4013      	ands	r3, r2
 80005b6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <SystemInit+0x5c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <SystemInit+0x5c>)
 80005be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <SystemInit+0x5c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <SystemInit+0x5c>)
 80005ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <SystemInit+0x5c>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <SystemInit+0x5c>)
 80005da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005de:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <SystemInit+0x5c>)
 80005e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <SystemInit+0x64>)
 80005ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ee:	609a      	str	r2, [r3, #8]
#endif 
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	40021000 	.word	0x40021000
 80005fc:	f8ff0000 	.word	0xf8ff0000
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000604:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000606:	e003      	b.n	8000610 <LoopCopyDataInit>

08000608 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800060a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800060c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800060e:	3104      	adds	r1, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000614:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000616:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000618:	d3f6      	bcc.n	8000608 <CopyDataInit>
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800061c:	e002      	b.n	8000624 <LoopFillZerobss>

0800061e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000620:	f842 3b04 	str.w	r3, [r2], #4

08000624 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000626:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000628:	d3f9      	bcc.n	800061e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062a:	f7ff ffb7 	bl	800059c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062e:	f001 fb8f 	bl	8001d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff fd8b 	bl	800014c <main>
  bx lr
 8000636:	4770      	bx	lr
  ldr r3, =_sidata
 8000638:	08001dec 	.word	0x08001dec
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000640:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 8000644:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 8000648:	200000c0 	.word	0x200000c0

0800064c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_2_IRQHandler>
	...

08000650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_Init+0x28>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_Init+0x28>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f923 	bl	80008ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f808 	bl	800067c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066c:	f7ff ff0e 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40022000 	.word	0x40022000

0800067c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_InitTick+0x54>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x58>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	fbb3 f3f1 	udiv	r3, r3, r1
 8000696:	fbb2 f3f3 	udiv	r3, r2, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f93b 	bl	8000916 <HAL_SYSTICK_Config>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00e      	b.n	80006c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d80a      	bhi.n	80006c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	2200      	movs	r2, #0
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	f000 f903 	bl	80008c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <HAL_InitTick+0x5c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000010 	.word	0x20000010
 80006d4:	20000018 	.word	0x20000018
 80006d8:	20000014 	.word	0x20000014

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x20>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a03      	ldr	r2, [pc, #12]	; (80006fc <HAL_IncTick+0x20>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	20000018 	.word	0x20000018
 80006fc:	200000bc 	.word	0x200000bc

08000700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <HAL_GetTick+0x10>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	200000bc 	.word	0x200000bc

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	db0b      	blt.n	80007a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 021f 	and.w	r2, r3, #31
 8000790:	4906      	ldr	r1, [pc, #24]	; (80007ac <__NVIC_EnableIRQ+0x34>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	2001      	movs	r0, #1
 800079a:	fa00 f202 	lsl.w	r2, r0, r2
 800079e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100

080007b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db0a      	blt.n	80007da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	490c      	ldr	r1, [pc, #48]	; (80007fc <__NVIC_SetPriority+0x4c>)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	0112      	lsls	r2, r2, #4
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	440b      	add	r3, r1
 80007d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d8:	e00a      	b.n	80007f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <__NVIC_SetPriority+0x50>)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	f003 030f 	and.w	r3, r3, #15
 80007e6:	3b04      	subs	r3, #4
 80007e8:	0112      	lsls	r2, r2, #4
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	440b      	add	r3, r1
 80007ee:	761a      	strb	r2, [r3, #24]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000804:	b480      	push	{r7}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	f1c3 0307 	rsb	r3, r3, #7
 800081e:	2b04      	cmp	r3, #4
 8000820:	bf28      	it	cs
 8000822:	2304      	movcs	r3, #4
 8000824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3304      	adds	r3, #4
 800082a:	2b06      	cmp	r3, #6
 800082c:	d902      	bls.n	8000834 <NVIC_EncodePriority+0x30>
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3b03      	subs	r3, #3
 8000832:	e000      	b.n	8000836 <NVIC_EncodePriority+0x32>
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43da      	mvns	r2, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	401a      	ands	r2, r3
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800084c:	f04f 31ff 	mov.w	r1, #4294967295
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	43d9      	mvns	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	4313      	orrs	r3, r2
         );
}
 800085e:	4618      	mov	r0, r3
 8000860:	3724      	adds	r7, #36	; 0x24
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000878:	d301      	bcc.n	800087e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087a:	2301      	movs	r3, #1
 800087c:	e00f      	b.n	800089e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <SysTick_Config+0x40>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000886:	210f      	movs	r1, #15
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f7ff ff90 	bl	80007b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SysTick_Config+0x40>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SysTick_Config+0x40>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	e000e010 	.word	0xe000e010

080008ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff2d 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d4:	f7ff ff42 	bl	800075c <__NVIC_GetPriorityGrouping>
 80008d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ff90 	bl	8000804 <NVIC_EncodePriority>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff5f 	bl	80007b0 <__NVIC_SetPriority>
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff35 	bl	8000778 <__NVIC_EnableIRQ>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ffa2 	bl	8000868 <SysTick_Config>
 8000924:	4603      	mov	r3, r0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d106      	bne.n	800094c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800094a:	e005      	b.n	8000958 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000952:	f023 0304 	bic.w	r3, r3, #4
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800096c:	f000 f802 	bl	8000974 <HAL_SYSTICK_Callback>
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b480      	push	{r7}
 8000982:	b08b      	sub	sp, #44	; 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000992:	e121      	b.n	8000bd8 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000994:	2201      	movs	r2, #1
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	4013      	ands	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f040 8110 	bne.w	8000bd2 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b12      	cmp	r3, #18
 80009b8:	d034      	beq.n	8000a24 <HAL_GPIO_Init+0xa4>
 80009ba:	2b12      	cmp	r3, #18
 80009bc:	d80d      	bhi.n	80009da <HAL_GPIO_Init+0x5a>
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d02b      	beq.n	8000a1a <HAL_GPIO_Init+0x9a>
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d804      	bhi.n	80009d0 <HAL_GPIO_Init+0x50>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d031      	beq.n	8000a2e <HAL_GPIO_Init+0xae>
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d01c      	beq.n	8000a08 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ce:	e048      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d043      	beq.n	8000a5c <HAL_GPIO_Init+0xdc>
 80009d4:	2b11      	cmp	r3, #17
 80009d6:	d01b      	beq.n	8000a10 <HAL_GPIO_Init+0x90>
          break;
 80009d8:	e043      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009da:	4a86      	ldr	r2, [pc, #536]	; (8000bf4 <HAL_GPIO_Init+0x274>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d026      	beq.n	8000a2e <HAL_GPIO_Init+0xae>
 80009e0:	4a84      	ldr	r2, [pc, #528]	; (8000bf4 <HAL_GPIO_Init+0x274>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d806      	bhi.n	80009f4 <HAL_GPIO_Init+0x74>
 80009e6:	4a84      	ldr	r2, [pc, #528]	; (8000bf8 <HAL_GPIO_Init+0x278>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d020      	beq.n	8000a2e <HAL_GPIO_Init+0xae>
 80009ec:	4a83      	ldr	r2, [pc, #524]	; (8000bfc <HAL_GPIO_Init+0x27c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01d      	beq.n	8000a2e <HAL_GPIO_Init+0xae>
          break;
 80009f2:	e036      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009f4:	4a82      	ldr	r2, [pc, #520]	; (8000c00 <HAL_GPIO_Init+0x280>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0xae>
 80009fa:	4a82      	ldr	r2, [pc, #520]	; (8000c04 <HAL_GPIO_Init+0x284>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d016      	beq.n	8000a2e <HAL_GPIO_Init+0xae>
 8000a00:	4a81      	ldr	r2, [pc, #516]	; (8000c08 <HAL_GPIO_Init+0x288>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d013      	beq.n	8000a2e <HAL_GPIO_Init+0xae>
          break;
 8000a06:	e02c      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	623b      	str	r3, [r7, #32]
          break;
 8000a0e:	e028      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	3304      	adds	r3, #4
 8000a16:	623b      	str	r3, [r7, #32]
          break;
 8000a18:	e023      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	3308      	adds	r3, #8
 8000a20:	623b      	str	r3, [r7, #32]
          break;
 8000a22:	e01e      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	330c      	adds	r3, #12
 8000a2a:	623b      	str	r3, [r7, #32]
          break;
 8000a2c:	e019      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d102      	bne.n	8000a3c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a36:	2304      	movs	r3, #4
 8000a38:	623b      	str	r3, [r7, #32]
          break;
 8000a3a:	e012      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d105      	bne.n	8000a50 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a44:	2308      	movs	r3, #8
 8000a46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	611a      	str	r2, [r3, #16]
          break;
 8000a4e:	e008      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a50:	2308      	movs	r3, #8
 8000a52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	615a      	str	r2, [r3, #20]
          break;
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
          break;
 8000a60:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	2bff      	cmp	r3, #255	; 0xff
 8000a66:	d801      	bhi.n	8000a6c <HAL_GPIO_Init+0xec>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	e001      	b.n	8000a70 <HAL_GPIO_Init+0xf0>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	2bff      	cmp	r3, #255	; 0xff
 8000a76:	d802      	bhi.n	8000a7e <HAL_GPIO_Init+0xfe>
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	e002      	b.n	8000a84 <HAL_GPIO_Init+0x104>
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	3b08      	subs	r3, #8
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	401a      	ands	r2, r3
 8000a96:	6a39      	ldr	r1, [r7, #32]
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f000 8090 	beq.w	8000bd2 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab2:	4b56      	ldr	r3, [pc, #344]	; (8000c0c <HAL_GPIO_Init+0x28c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a55      	ldr	r2, [pc, #340]	; (8000c0c <HAL_GPIO_Init+0x28c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <HAL_GPIO_Init+0x28c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aca:	4a51      	ldr	r2, [pc, #324]	; (8000c10 <HAL_GPIO_Init+0x290>)
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	f003 0303 	and.w	r3, r3, #3
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4013      	ands	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a48      	ldr	r2, [pc, #288]	; (8000c14 <HAL_GPIO_Init+0x294>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d00d      	beq.n	8000b12 <HAL_GPIO_Init+0x192>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a47      	ldr	r2, [pc, #284]	; (8000c18 <HAL_GPIO_Init+0x298>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d007      	beq.n	8000b0e <HAL_GPIO_Init+0x18e>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a46      	ldr	r2, [pc, #280]	; (8000c1c <HAL_GPIO_Init+0x29c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_GPIO_Init+0x18a>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e004      	b.n	8000b14 <HAL_GPIO_Init+0x194>
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e002      	b.n	8000b14 <HAL_GPIO_Init+0x194>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x194>
 8000b12:	2300      	movs	r3, #0
 8000b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b16:	f002 0203 	and.w	r2, r2, #3
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	4093      	lsls	r3, r2
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b24:	493a      	ldr	r1, [pc, #232]	; (8000c10 <HAL_GPIO_Init+0x290>)
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b3e:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4937      	ldr	r1, [pc, #220]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	600b      	str	r3, [r1, #0]
 8000b4a:	e006      	b.n	8000b5a <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b4c:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4932      	ldr	r1, [pc, #200]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d006      	beq.n	8000b74 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	492d      	ldr	r1, [pc, #180]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	604b      	str	r3, [r1, #4]
 8000b72:	e006      	b.n	8000b82 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	4928      	ldr	r1, [pc, #160]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d006      	beq.n	8000b9c <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	4923      	ldr	r1, [pc, #140]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	608b      	str	r3, [r1, #8]
 8000b9a:	e006      	b.n	8000baa <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	491e      	ldr	r1, [pc, #120]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d006      	beq.n	8000bc4 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000bb8:	68da      	ldr	r2, [r3, #12]
 8000bba:	4919      	ldr	r1, [pc, #100]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	60cb      	str	r3, [r1, #12]
 8000bc2:	e006      	b.n	8000bd2 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	4914      	ldr	r1, [pc, #80]	; (8000c20 <HAL_GPIO_Init+0x2a0>)
 8000bce:	4013      	ands	r3, r2
 8000bd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	fa22 f303 	lsr.w	r3, r2, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f47f aed6 	bne.w	8000994 <HAL_GPIO_Init+0x14>
  }
}
 8000be8:	bf00      	nop
 8000bea:	372c      	adds	r7, #44	; 0x2c
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	10210000 	.word	0x10210000
 8000bf8:	10110000 	.word	0x10110000
 8000bfc:	10120000 	.word	0x10120000
 8000c00:	10310000 	.word	0x10310000
 8000c04:	10320000 	.word	0x10320000
 8000c08:	10220000 	.word	0x10220000
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000
 8000c14:	40010800 	.word	0x40010800
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	40011000 	.word	0x40011000
 8000c20:	40010400 	.word	0x40010400

08000c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
 8000c30:	4613      	mov	r3, r2
 8000c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c40:	e003      	b.n	8000c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	041a      	lsls	r2, r3, #16
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	611a      	str	r2, [r3, #16]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e26c      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 8087 	beq.w	8000d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c74:	4b92      	ldr	r3, [pc, #584]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 030c 	and.w	r3, r3, #12
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d00c      	beq.n	8000c9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c80:	4b8f      	ldr	r3, [pc, #572]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 030c 	and.w	r3, r3, #12
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d112      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x5e>
 8000c8c:	4b8c      	ldr	r3, [pc, #560]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c98:	d10b      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9a:	4b89      	ldr	r3, [pc, #548]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d06c      	beq.n	8000d80 <HAL_RCC_OscConfig+0x12c>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d168      	bne.n	8000d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e246      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cba:	d106      	bne.n	8000cca <HAL_RCC_OscConfig+0x76>
 8000cbc:	4b80      	ldr	r3, [pc, #512]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a7f      	ldr	r2, [pc, #508]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	e02e      	b.n	8000d28 <HAL_RCC_OscConfig+0xd4>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10c      	bne.n	8000cec <HAL_RCC_OscConfig+0x98>
 8000cd2:	4b7b      	ldr	r3, [pc, #492]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a7a      	ldr	r2, [pc, #488]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b78      	ldr	r3, [pc, #480]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a77      	ldr	r2, [pc, #476]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e01d      	b.n	8000d28 <HAL_RCC_OscConfig+0xd4>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf4:	d10c      	bne.n	8000d10 <HAL_RCC_OscConfig+0xbc>
 8000cf6:	4b72      	ldr	r3, [pc, #456]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a71      	ldr	r2, [pc, #452]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b6f      	ldr	r3, [pc, #444]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a6e      	ldr	r2, [pc, #440]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e00b      	b.n	8000d28 <HAL_RCC_OscConfig+0xd4>
 8000d10:	4b6b      	ldr	r3, [pc, #428]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a6a      	ldr	r2, [pc, #424]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a67      	ldr	r2, [pc, #412]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d013      	beq.n	8000d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fce6 	bl	8000700 <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fce2 	bl	8000700 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	; 0x64
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e1fa      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4a:	4b5d      	ldr	r3, [pc, #372]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f0      	beq.n	8000d38 <HAL_RCC_OscConfig+0xe4>
 8000d56:	e014      	b.n	8000d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fcd2 	bl	8000700 <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d60:	f7ff fcce 	bl	8000700 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b64      	cmp	r3, #100	; 0x64
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e1e6      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d72:	4b53      	ldr	r3, [pc, #332]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f0      	bne.n	8000d60 <HAL_RCC_OscConfig+0x10c>
 8000d7e:	e000      	b.n	8000d82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d063      	beq.n	8000e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d8e:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 030c 	and.w	r3, r3, #12
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00b      	beq.n	8000db2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d9a:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d11c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x18c>
 8000da6:	4b46      	ldr	r3, [pc, #280]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d116      	bne.n	8000de0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db2:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <HAL_RCC_OscConfig+0x176>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d001      	beq.n	8000dca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e1ba      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dca:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4939      	ldr	r1, [pc, #228]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dde:	e03a      	b.n	8000e56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d020      	beq.n	8000e2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dee:	f7ff fc87 	bl	8000700 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000df6:	f7ff fc83 	bl	8000700 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e19b      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4927      	ldr	r1, [pc, #156]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
 8000e28:	e015      	b.n	8000e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e30:	f7ff fc66 	bl	8000700 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e38:	f7ff fc62 	bl	8000700 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e17a      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f0      	bne.n	8000e38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d03a      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d019      	beq.n	8000e9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_RCC_OscConfig+0x274>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e70:	f7ff fc46 	bl	8000700 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e78:	f7ff fc42 	bl	8000700 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e15a      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 fab2 	bl	8001400 <RCC_Delay>
 8000e9c:	e01c      	b.n	8000ed8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_RCC_OscConfig+0x274>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea4:	f7ff fc2c 	bl	8000700 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eaa:	e00f      	b.n	8000ecc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eac:	f7ff fc28 	bl	8000700 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d908      	bls.n	8000ecc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e140      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	42420000 	.word	0x42420000
 8000ec8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ecc:	4b9e      	ldr	r3, [pc, #632]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1e9      	bne.n	8000eac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 80a6 	beq.w	8001032 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eea:	4b97      	ldr	r3, [pc, #604]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10d      	bne.n	8000f12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b94      	ldr	r3, [pc, #592]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a93      	ldr	r2, [pc, #588]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b91      	ldr	r3, [pc, #580]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f12:	4b8e      	ldr	r3, [pc, #568]	; (800114c <HAL_RCC_OscConfig+0x4f8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d118      	bne.n	8000f50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f1e:	4b8b      	ldr	r3, [pc, #556]	; (800114c <HAL_RCC_OscConfig+0x4f8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a8a      	ldr	r2, [pc, #552]	; (800114c <HAL_RCC_OscConfig+0x4f8>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fbe9 	bl	8000700 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f32:	f7ff fbe5 	bl	8000700 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e0fd      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f44:	4b81      	ldr	r3, [pc, #516]	; (800114c <HAL_RCC_OscConfig+0x4f8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d106      	bne.n	8000f66 <HAL_RCC_OscConfig+0x312>
 8000f58:	4b7b      	ldr	r3, [pc, #492]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	4a7a      	ldr	r2, [pc, #488]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6213      	str	r3, [r2, #32]
 8000f64:	e02d      	b.n	8000fc2 <HAL_RCC_OscConfig+0x36e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x334>
 8000f6e:	4b76      	ldr	r3, [pc, #472]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4a75      	ldr	r2, [pc, #468]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	6213      	str	r3, [r2, #32]
 8000f7a:	4b73      	ldr	r3, [pc, #460]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4a72      	ldr	r2, [pc, #456]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	f023 0304 	bic.w	r3, r3, #4
 8000f84:	6213      	str	r3, [r2, #32]
 8000f86:	e01c      	b.n	8000fc2 <HAL_RCC_OscConfig+0x36e>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d10c      	bne.n	8000faa <HAL_RCC_OscConfig+0x356>
 8000f90:	4b6d      	ldr	r3, [pc, #436]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4a6c      	ldr	r2, [pc, #432]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6213      	str	r3, [r2, #32]
 8000f9c:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4a69      	ldr	r2, [pc, #420]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6213      	str	r3, [r2, #32]
 8000fa8:	e00b      	b.n	8000fc2 <HAL_RCC_OscConfig+0x36e>
 8000faa:	4b67      	ldr	r3, [pc, #412]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	4a66      	ldr	r2, [pc, #408]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	6213      	str	r3, [r2, #32]
 8000fb6:	4b64      	ldr	r3, [pc, #400]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4a63      	ldr	r2, [pc, #396]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000fbc:	f023 0304 	bic.w	r3, r3, #4
 8000fc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d015      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fca:	f7ff fb99 	bl	8000700 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd0:	e00a      	b.n	8000fe8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd2:	f7ff fb95 	bl	8000700 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e0ab      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe8:	4b57      	ldr	r3, [pc, #348]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0ee      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x37e>
 8000ff4:	e014      	b.n	8001020 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fb83 	bl	8000700 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffc:	e00a      	b.n	8001014 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fb7f 	bl	8000700 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	f241 3288 	movw	r2, #5000	; 0x1388
 800100c:	4293      	cmp	r3, r2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e095      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001014:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1ee      	bne.n	8000ffe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d105      	bne.n	8001032 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a47      	ldr	r2, [pc, #284]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001030:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8081 	beq.w	800113e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800103c:	4b42      	ldr	r3, [pc, #264]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b08      	cmp	r3, #8
 8001046:	d061      	beq.n	800110c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d146      	bne.n	80010de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001050:	4b3f      	ldr	r3, [pc, #252]	; (8001150 <HAL_RCC_OscConfig+0x4fc>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fb53 	bl	8000700 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105e:	f7ff fb4f 	bl	8000700 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e067      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001070:	4b35      	ldr	r3, [pc, #212]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001084:	d108      	bne.n	8001098 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	492d      	ldr	r1, [pc, #180]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a19      	ldr	r1, [r3, #32]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	430b      	orrs	r3, r1
 80010aa:	4927      	ldr	r1, [pc, #156]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <HAL_RCC_OscConfig+0x4fc>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fb23 	bl	8000700 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010be:	f7ff fb1f 	bl	8000700 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e037      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x46a>
 80010dc:	e02f      	b.n	800113e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_RCC_OscConfig+0x4fc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fb0c 	bl	8000700 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ec:	f7ff fb08 	bl	8000700 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e020      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x498>
 800110a:	e018      	b.n	800113e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e013      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	429a      	cmp	r2, r3
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001136:	429a      	cmp	r2, r3
 8001138:	d001      	beq.n	800113e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021000 	.word	0x40021000
 800114c:	40007000 	.word	0x40007000
 8001150:	42420060 	.word	0x42420060

08001154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0d0      	b.n	800130a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001168:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d910      	bls.n	8001198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b67      	ldr	r3, [pc, #412]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 0207 	bic.w	r2, r3, #7
 800117e:	4965      	ldr	r1, [pc, #404]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0b8      	b.n	800130a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011b0:	4b59      	ldr	r3, [pc, #356]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a58      	ldr	r2, [pc, #352]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c8:	4b53      	ldr	r3, [pc, #332]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	494d      	ldr	r1, [pc, #308]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d040      	beq.n	8001274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b47      	ldr	r3, [pc, #284]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d115      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e07f      	b.n	800130a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e073      	b.n	800130a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e06b      	b.n	800130a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f023 0203 	bic.w	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4936      	ldr	r1, [pc, #216]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001244:	f7ff fa5c 	bl	8000700 <HAL_GetTick>
 8001248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124a:	e00a      	b.n	8001262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124c:	f7ff fa58 	bl	8000700 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f241 3288 	movw	r2, #5000	; 0x1388
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e053      	b.n	800130a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 020c 	and.w	r2, r3, #12
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	429a      	cmp	r2, r3
 8001272:	d1eb      	bne.n	800124c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001274:	4b27      	ldr	r3, [pc, #156]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d210      	bcs.n	80012a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 0207 	bic.w	r2, r3, #7
 800128a:	4922      	ldr	r1, [pc, #136]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e032      	b.n	800130a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4916      	ldr	r1, [pc, #88]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	490e      	ldr	r1, [pc, #56]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012e2:	f000 f821 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 80012e6:	4601      	mov	r1, r0
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_RCC_ClockConfig+0x1c8>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	fa21 f303 	lsr.w	r3, r1, r3
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_RCC_ClockConfig+0x1cc>)
 80012fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_RCC_ClockConfig+0x1d0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f9ba 	bl	800067c <HAL_InitTick>

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40022000 	.word	0x40022000
 8001318:	40021000 	.word	0x40021000
 800131c:	08001dd4 	.word	0x08001dd4
 8001320:	20000010 	.word	0x20000010
 8001324:	20000014 	.word	0x20000014

08001328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001328:	b490      	push	{r4, r7}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001330:	1d3c      	adds	r4, r7, #4
 8001332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b04      	cmp	r3, #4
 8001360:	d002      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x40>
 8001362:	2b08      	cmp	r3, #8
 8001364:	d003      	beq.n	800136e <HAL_RCC_GetSysClockFreq+0x46>
 8001366:	e02d      	b.n	80013c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800136a:	623b      	str	r3, [r7, #32]
      break;
 800136c:	e02d      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	0c9b      	lsrs	r3, r3, #18
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800137a:	4413      	add	r3, r2
 800137c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001380:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	0c5b      	lsrs	r3, r3, #17
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800139a:	4413      	add	r3, r2
 800139c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013a6:	fb02 f203 	mul.w	r2, r2, r3
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
 80013b2:	e004      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	623b      	str	r3, [r7, #32]
      break;
 80013c2:	e002      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013c6:	623b      	str	r3, [r7, #32]
      break;
 80013c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ca:	6a3b      	ldr	r3, [r7, #32]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc90      	pop	{r4, r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	08001dc0 	.word	0x08001dc0
 80013dc:	08001dd0 	.word	0x08001dd0
 80013e0:	40021000 	.word	0x40021000
 80013e4:	007a1200 	.word	0x007a1200
 80013e8:	003d0900 	.word	0x003d0900

080013ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013f0:	4b02      	ldr	r3, [pc, #8]	; (80013fc <HAL_RCC_GetHCLKFreq+0x10>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000010 	.word	0x20000010

08001400 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <RCC_Delay+0x34>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <RCC_Delay+0x38>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0a5b      	lsrs	r3, r3, #9
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	fb02 f303 	mul.w	r3, r2, r3
 800141a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800141c:	bf00      	nop
  }
  while (Delay --);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	60fa      	str	r2, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f9      	bne.n	800141c <RCC_Delay+0x1c>
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000010 	.word	0x20000010
 8001438:	10624dd3 	.word	0x10624dd3

0800143c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e01d      	b.n	800148a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff f844 	bl	80004f0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2202      	movs	r2, #2
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3304      	adds	r3, #4
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f000 fa52 	bl	8001924 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d841      	bhi.n	8001528 <HAL_TIM_OC_Start_IT+0x94>
 80014a4:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_TIM_OC_Start_IT+0x18>)
 80014a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014aa:	bf00      	nop
 80014ac:	080014e1 	.word	0x080014e1
 80014b0:	08001529 	.word	0x08001529
 80014b4:	08001529 	.word	0x08001529
 80014b8:	08001529 	.word	0x08001529
 80014bc:	080014f3 	.word	0x080014f3
 80014c0:	08001529 	.word	0x08001529
 80014c4:	08001529 	.word	0x08001529
 80014c8:	08001529 	.word	0x08001529
 80014cc:	08001505 	.word	0x08001505
 80014d0:	08001529 	.word	0x08001529
 80014d4:	08001529 	.word	0x08001529
 80014d8:	08001529 	.word	0x08001529
 80014dc:	08001517 	.word	0x08001517
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0202 	orr.w	r2, r2, #2
 80014ee:	60da      	str	r2, [r3, #12]
      break;
 80014f0:	e01b      	b.n	800152a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0204 	orr.w	r2, r2, #4
 8001500:	60da      	str	r2, [r3, #12]
      break;
 8001502:	e012      	b.n	800152a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0208 	orr.w	r2, r2, #8
 8001512:	60da      	str	r2, [r3, #12]
      break;
 8001514:	e009      	b.n	800152a <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 0210 	orr.w	r2, r2, #16
 8001524:	60da      	str	r2, [r3, #12]
      break;
 8001526:	e000      	b.n	800152a <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8001528:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2201      	movs	r2, #1
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fbd6 	bl	8001ce4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a10      	ldr	r2, [pc, #64]	; (8001580 <HAL_TIM_OC_Start_IT+0xec>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d107      	bne.n	8001552 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b06      	cmp	r3, #6
 8001562:	d007      	beq.n	8001574 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40012c00 	.word	0x40012c00

08001584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b02      	cmp	r3, #2
 8001598:	d122      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d11b      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0202 	mvn.w	r2, #2
 80015b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f991 	bl	80018ee <HAL_TIM_IC_CaptureCallback>
 80015cc:	e005      	b.n	80015da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe fefa 	bl	80003c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f993 	bl	8001900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d122      	bne.n	8001634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d11b      	bne.n	8001634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0204 	mvn.w	r2, #4
 8001604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f967 	bl	80018ee <HAL_TIM_IC_CaptureCallback>
 8001620:	e005      	b.n	800162e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe fed0 	bl	80003c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f969 	bl	8001900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b08      	cmp	r3, #8
 8001640:	d122      	bne.n	8001688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b08      	cmp	r3, #8
 800164e:	d11b      	bne.n	8001688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0208 	mvn.w	r2, #8
 8001658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f93d 	bl	80018ee <HAL_TIM_IC_CaptureCallback>
 8001674:	e005      	b.n	8001682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7fe fea6 	bl	80003c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f93f 	bl	8001900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b10      	cmp	r3, #16
 8001694:	d122      	bne.n	80016dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d11b      	bne.n	80016dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0210 	mvn.w	r2, #16
 80016ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2208      	movs	r2, #8
 80016b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f913 	bl	80018ee <HAL_TIM_IC_CaptureCallback>
 80016c8:	e005      	b.n	80016d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7fe fe7c 	bl	80003c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f915 	bl	8001900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10e      	bne.n	8001708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0201 	mvn.w	r2, #1
 8001700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8ea 	bl	80018dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	2b80      	cmp	r3, #128	; 0x80
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001720:	2b80      	cmp	r3, #128	; 0x80
 8001722:	d107      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800172c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fb05 	bl	8001d3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173e:	2b40      	cmp	r3, #64	; 0x40
 8001740:	d10e      	bne.n	8001760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174c:	2b40      	cmp	r3, #64	; 0x40
 800174e:	d107      	bne.n	8001760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f8d9 	bl	8001912 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b20      	cmp	r3, #32
 800176c:	d10e      	bne.n	800178c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b20      	cmp	r3, #32
 800177a:	d107      	bne.n	800178c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0220 	mvn.w	r2, #32
 8001784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fad0 	bl	8001d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_TIM_OC_ConfigChannel+0x1a>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e04e      	b.n	800184c <HAL_TIM_OC_ConfigChannel+0xb8>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2202      	movs	r2, #2
 80017ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d839      	bhi.n	8001838 <HAL_TIM_OC_ConfigChannel+0xa4>
 80017c4:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <HAL_TIM_OC_ConfigChannel+0x38>)
 80017c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ca:	bf00      	nop
 80017cc:	08001801 	.word	0x08001801
 80017d0:	08001839 	.word	0x08001839
 80017d4:	08001839 	.word	0x08001839
 80017d8:	08001839 	.word	0x08001839
 80017dc:	0800180f 	.word	0x0800180f
 80017e0:	08001839 	.word	0x08001839
 80017e4:	08001839 	.word	0x08001839
 80017e8:	08001839 	.word	0x08001839
 80017ec:	0800181d 	.word	0x0800181d
 80017f0:	08001839 	.word	0x08001839
 80017f4:	08001839 	.word	0x08001839
 80017f8:	08001839 	.word	0x08001839
 80017fc:	0800182b 	.word	0x0800182b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f8e4 	bl	80019d4 <TIM_OC1_SetConfig>
      break;
 800180c:	e015      	b.n	800183a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f943 	bl	8001aa0 <TIM_OC2_SetConfig>
      break;
 800181a:	e00e      	b.n	800183a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f9a6 	bl	8001b74 <TIM_OC3_SetConfig>
      break;
 8001828:	e007      	b.n	800183a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fa09 	bl	8001c48 <TIM_OC4_SetConfig>
      break;
 8001836:	e000      	b.n	800183a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8001838:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d831      	bhi.n	80018cc <HAL_TIM_ReadCapturedValue+0x78>
 8001868:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_TIM_ReadCapturedValue+0x1c>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	080018a5 	.word	0x080018a5
 8001874:	080018cd 	.word	0x080018cd
 8001878:	080018cd 	.word	0x080018cd
 800187c:	080018cd 	.word	0x080018cd
 8001880:	080018af 	.word	0x080018af
 8001884:	080018cd 	.word	0x080018cd
 8001888:	080018cd 	.word	0x080018cd
 800188c:	080018cd 	.word	0x080018cd
 8001890:	080018b9 	.word	0x080018b9
 8001894:	080018cd 	.word	0x080018cd
 8001898:	080018cd 	.word	0x080018cd
 800189c:	080018cd 	.word	0x080018cd
 80018a0:	080018c3 	.word	0x080018c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	60fb      	str	r3, [r7, #12]

      break;
 80018ac:	e00f      	b.n	80018ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	60fb      	str	r3, [r7, #12]

      break;
 80018b6:	e00a      	b.n	80018ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018be:	60fb      	str	r3, [r7, #12]

      break;
 80018c0:	e005      	b.n	80018ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	60fb      	str	r3, [r7, #12]

      break;
 80018ca:	e000      	b.n	80018ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80018cc:	bf00      	nop
  }

  return tmpreg;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop

080018dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a25      	ldr	r2, [pc, #148]	; (80019cc <TIM_Base_SetConfig+0xa8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d007      	beq.n	800194c <TIM_Base_SetConfig+0x28>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001942:	d003      	beq.n	800194c <TIM_Base_SetConfig+0x28>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a22      	ldr	r2, [pc, #136]	; (80019d0 <TIM_Base_SetConfig+0xac>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d108      	bne.n	800195e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <TIM_Base_SetConfig+0xa8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d007      	beq.n	8001976 <TIM_Base_SetConfig+0x52>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196c:	d003      	beq.n	8001976 <TIM_Base_SetConfig+0x52>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <TIM_Base_SetConfig+0xac>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d108      	bne.n	8001988 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800197c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <TIM_Base_SetConfig+0xa8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d103      	bne.n	80019bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	615a      	str	r2, [r3, #20]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40000400 	.word	0x40000400

080019d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	f023 0201 	bic.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f023 0302 	bic.w	r3, r3, #2
 8001a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <TIM_OC1_SetConfig+0xc8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d10c      	bne.n	8001a4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f023 0308 	bic.w	r3, r3, #8
 8001a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <TIM_OC1_SetConfig+0xc8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d111      	bne.n	8001a76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	621a      	str	r2, [r3, #32]
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40012c00 	.word	0x40012c00

08001aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	f023 0210 	bic.w	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f023 0320 	bic.w	r3, r3, #32
 8001aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <TIM_OC2_SetConfig+0xd0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d10d      	bne.n	8001b1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <TIM_OC2_SetConfig+0xd0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d113      	bne.n	8001b4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	621a      	str	r2, [r3, #32]
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f023 0303 	bic.w	r3, r3, #3
 8001baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <TIM_OC3_SetConfig+0xd0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10d      	bne.n	8001bee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <TIM_OC3_SetConfig+0xd0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d113      	bne.n	8001c1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	621a      	str	r2, [r3, #32]
}
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40012c00 	.word	0x40012c00

08001c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	031b      	lsls	r3, r3, #12
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <TIM_OC4_SetConfig+0x98>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d109      	bne.n	8001cbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	621a      	str	r2, [r3, #32]
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	40012c00 	.word	0x40012c00

08001ce4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a1a      	ldr	r2, [r3, #32]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	621a      	str	r2, [r3, #32]
}
 8001d22:	bf00      	nop
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <__libc_init_array>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	2500      	movs	r5, #0
 8001d54:	4e0c      	ldr	r6, [pc, #48]	; (8001d88 <__libc_init_array+0x38>)
 8001d56:	4c0d      	ldr	r4, [pc, #52]	; (8001d8c <__libc_init_array+0x3c>)
 8001d58:	1ba4      	subs	r4, r4, r6
 8001d5a:	10a4      	asrs	r4, r4, #2
 8001d5c:	42a5      	cmp	r5, r4
 8001d5e:	d109      	bne.n	8001d74 <__libc_init_array+0x24>
 8001d60:	f000 f822 	bl	8001da8 <_init>
 8001d64:	2500      	movs	r5, #0
 8001d66:	4e0a      	ldr	r6, [pc, #40]	; (8001d90 <__libc_init_array+0x40>)
 8001d68:	4c0a      	ldr	r4, [pc, #40]	; (8001d94 <__libc_init_array+0x44>)
 8001d6a:	1ba4      	subs	r4, r4, r6
 8001d6c:	10a4      	asrs	r4, r4, #2
 8001d6e:	42a5      	cmp	r5, r4
 8001d70:	d105      	bne.n	8001d7e <__libc_init_array+0x2e>
 8001d72:	bd70      	pop	{r4, r5, r6, pc}
 8001d74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d78:	4798      	blx	r3
 8001d7a:	3501      	adds	r5, #1
 8001d7c:	e7ee      	b.n	8001d5c <__libc_init_array+0xc>
 8001d7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d82:	4798      	blx	r3
 8001d84:	3501      	adds	r5, #1
 8001d86:	e7f2      	b.n	8001d6e <__libc_init_array+0x1e>
 8001d88:	08001de4 	.word	0x08001de4
 8001d8c:	08001de4 	.word	0x08001de4
 8001d90:	08001de4 	.word	0x08001de4
 8001d94:	08001de8 	.word	0x08001de8

08001d98 <memset>:
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4402      	add	r2, r0
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d100      	bne.n	8001da2 <memset+0xa>
 8001da0:	4770      	bx	lr
 8001da2:	f803 1b01 	strb.w	r1, [r3], #1
 8001da6:	e7f9      	b.n	8001d9c <memset+0x4>

08001da8 <_init>:
 8001da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001daa:	bf00      	nop
 8001dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dae:	bc08      	pop	{r3}
 8001db0:	469e      	mov	lr, r3
 8001db2:	4770      	bx	lr

08001db4 <_fini>:
 8001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db6:	bf00      	nop
 8001db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dba:	bc08      	pop	{r3}
 8001dbc:	469e      	mov	lr, r3
 8001dbe:	4770      	bx	lr
