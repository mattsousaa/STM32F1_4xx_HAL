
PWM_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003728  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08003838  08003838  00013838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c40  08003c40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c40  08003c40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c40  08003c40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08003c54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08003c54  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008130  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000137f  00000000  00000000  00028165  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  000294e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f8  00000000  00000000  00029d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013f49  00000000  00000000  0002a580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000611e  00000000  00000000  0003e4c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f711  00000000  00000000  000445e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3cf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f4  00000000  00000000  000b3d74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003820 	.word	0x08003820

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003820 	.word	0x08003820

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a88:	f1a2 0201 	sub.w	r2, r2, #1
 8000a8c:	d1ed      	bne.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2iz>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f7c:	d30f      	bcc.n	8000f9e <__aeabi_f2iz+0x2a>
 8000f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d90d      	bls.n	8000fa4 <__aeabi_f2iz+0x30>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f94:	fa23 f002 	lsr.w	r0, r3, r2
 8000f98:	bf18      	it	ne
 8000f9a:	4240      	negne	r0, r0
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr
 8000fa4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa8:	d101      	bne.n	8000fae <__aeabi_f2iz+0x3a>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	d105      	bne.n	8000fba <__aeabi_f2iz+0x46>
 8000fae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fb2:	bf08      	it	eq
 8000fb4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <main>:
void Error_Handler(void);

TIM_HandleTypeDef htimer2;
UART_HandleTypeDef huart2;

int main(void){
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b0e7      	sub	sp, #412	; 0x19c
 8000fc4:	af00      	add	r7, sp, #0
	uint16_t IV[200];
	float angle;

	//uint16_t brightness = 0;

	HAL_Init();
 8000fc6:	f000 fa57 	bl	8001478 <HAL_Init>
	SystemClock_Config(SYS_CLOCK_FREQ_48_MHZ);
 8000fca:	2030      	movs	r0, #48	; 0x30
 8000fcc:	f000 f87e 	bl	80010cc <SystemClock_Config>
	GPIO_Init();
 8000fd0:	f000 f8f8 	bl	80011c4 <GPIO_Init>
	TIMER2_Init();
 8000fd4:	f000 f920 	bl	8001218 <TIMER2_Init>

	if(HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_2) != HAL_OK){
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4839      	ldr	r0, [pc, #228]	; (80010c0 <main+0x100>)
 8000fdc:	f001 f96e 	bl	80022bc <HAL_TIM_PWM_Start>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <main+0x2a>
		Error_Handler();
 8000fe6:	f000 f951 	bl	800128c <Error_Handler>
	}

	while(1){
		for (uint8_t i = 0; i < 200; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8000ff0:	e057      	b.n	80010a2 <main+0xe2>
			angle = ASR * (float) i;
 8000ff2:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fd9e 	bl	8000b38 <__aeabi_ui2f>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa0a 	bl	8000418 <__aeabi_f2d>
 8001004:	a32a      	add	r3, pc, #168	; (adr r3, 80010b0 <main+0xf0>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fa5d 	bl	80004c8 <__aeabi_dmul>
 800100e:	4603      	mov	r3, r0
 8001010:	460c      	mov	r4, r1
 8001012:	4618      	mov	r0, r3
 8001014:	4621      	mov	r1, r4
 8001016:	f7ff fc89 	bl	800092c <__aeabi_d2f>
 800101a:	4603      	mov	r3, r0
 800101c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
			IV[i] = (uint16_t) rint(100 + 99 * sinf(angle * (PI / 180)));
 8001020:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001024:	f7ff f9f8 	bl	8000418 <__aeabi_f2d>
 8001028:	a323      	add	r3, pc, #140	; (adr r3, 80010b8 <main+0xf8>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fa4b 	bl	80004c8 <__aeabi_dmul>
 8001032:	4603      	mov	r3, r0
 8001034:	460c      	mov	r4, r1
 8001036:	4618      	mov	r0, r3
 8001038:	4621      	mov	r1, r4
 800103a:	f7ff fc77 	bl	800092c <__aeabi_d2f>
 800103e:	4603      	mov	r3, r0
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fe35 	bl	8002cb0 <sinf>
 8001046:	4603      	mov	r3, r0
 8001048:	491e      	ldr	r1, [pc, #120]	; (80010c4 <main+0x104>)
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fdcc 	bl	8000be8 <__aeabi_fmul>
 8001050:	4603      	mov	r3, r0
 8001052:	491d      	ldr	r1, [pc, #116]	; (80010c8 <main+0x108>)
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fcbf 	bl	80009d8 <__addsf3>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f9db 	bl	8000418 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	4618      	mov	r0, r3
 8001068:	4621      	mov	r1, r4
 800106a:	f001 fd97 	bl	8002b9c <rint>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	f897 4197 	ldrb.w	r4, [r7, #407]	; 0x197
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fc37 	bl	80008ec <__aeabi_d2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	463b      	mov	r3, r7
 8001084:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			__HAL_TIM_SET_COMPARE(&htimer2, TIM_CHANNEL_2, IV[i]);
 8001088:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 800108c:	463b      	mov	r3, r7
 800108e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <main+0x100>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	639a      	str	r2, [r3, #56]	; 0x38
		for (uint8_t i = 0; i < 200; i++) {
 8001098:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800109c:	3301      	adds	r3, #1
 800109e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 80010a2:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80010a6:	2bc7      	cmp	r3, #199	; 0xc7
 80010a8:	d9a3      	bls.n	8000ff2 <main+0x32>
 80010aa:	e79e      	b.n	8000fea <main+0x2a>
 80010ac:	f3af 8000 	nop.w
 80010b0:	cccccccd 	.word	0xcccccccd
 80010b4:	3ffccccc 	.word	0x3ffccccc
 80010b8:	a50de270 	.word	0xa50de270
 80010bc:	3f91df45 	.word	0x3f91df45
 80010c0:	20000028 	.word	0x20000028
 80010c4:	42c60000 	.word	0x42c60000
 80010c8:	42c80000 	.word	0x42c80000

080010cc <SystemClock_Config>:
	}

  	return 0;
}

void SystemClock_Config(uint8_t clock_freq){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b092      	sub	sp, #72	; 0x48
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010da:	2302      	movs	r3, #2
 80010dc:	61fb      	str	r3, [r7, #28]
	osc_init.HSIState = RCC_HSI_ON;
 80010de:	2301      	movs	r3, #1
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e2:	2310      	movs	r3, #16
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq){
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b30      	cmp	r3, #48	; 0x30
 80010f2:	d016      	beq.n	8001122 <SystemClock_Config+0x56>
 80010f4:	2b40      	cmp	r3, #64	; 0x40
 80010f6:	d026      	beq.n	8001146 <SystemClock_Config+0x7a>
 80010f8:	2b14      	cmp	r3, #20
 80010fa:	d000      	beq.n	80010fe <SystemClock_Config+0x32>

			break;

		default:

			return;
 80010fc:	e05d      	b.n	80011ba <SystemClock_Config+0xee>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL5;
 80010fe:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001104:	230f      	movs	r3, #15
 8001106:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2302      	movs	r3, #2
 800110a:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001114:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111a:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_0;
 800111c:	2300      	movs	r3, #0
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8001120:	e023      	b.n	800116a <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL12;
 8001122:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001128:	230f      	movs	r3, #15
 800112a:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2302      	movs	r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001138:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113e:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_1;
 8001140:	2301      	movs	r3, #1
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8001144:	e011      	b.n	800116a <SystemClock_Config+0x9e>
			osc_init.PLL.PLLMUL = RCC_CFGR_PLLMULL16;
 8001146:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800114c:	230f      	movs	r3, #15
 800114e:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001150:	2302      	movs	r3, #2
 8001152:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115c:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800115e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001162:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_2;
 8001164:	2302      	movs	r3, #2
 8001166:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8001168:	bf00      	nop

	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fc84 	bl	8001a7c <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xb2>
		Error_Handler();
 800117a:	f000 f887 	bl	800128c <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fef9 	bl	8001f7c <HAL_RCC_ClockConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0xc8>
		Error_Handler();
 8001190:	f000 f87c 	bl	800128c <Error_Handler>
	}

	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001194:	f001 f83e 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8001198:	4602      	mov	r2, r0
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <SystemClock_Config+0xf4>)
 800119c:	fba3 2302 	umull	r2, r3, r3, r2
 80011a0:	099b      	lsrs	r3, r3, #6
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 facb 	bl	800173e <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011a8:	2004      	movs	r0, #4
 80011aa:	f000 fad5 	bl	8001758 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
 80011b6:	f000 fa98 	bl	80016ea <HAL_NVIC_SetPriority>

}
 80011ba:	3748      	adds	r7, #72	; 0x48
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	10624dd3 	.word	0x10624dd3

080011c4 <GPIO_Init>:

void GPIO_Init(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef ledgpio;

	/* GPIOA clock enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <GPIO_Init+0x4c>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <GPIO_Init+0x4c>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <GPIO_Init+0x4c>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

    /* High Level GPIO Initialization */
	ledgpio.Pin = GPIO_PIN_5;
 80011e2:	2320      	movs	r3, #32
 80011e4:	60bb      	str	r3, [r7, #8]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
	ledgpio.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
	ledgpio.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2302      	movs	r3, #2
 80011f0:	617b      	str	r3, [r7, #20]

	/* Init GPIO */
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <GPIO_Init+0x50>)
 80011fa:	f000 fad5 	bl	80017a8 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2120      	movs	r1, #32
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <GPIO_Init+0x50>)
 8001204:	f000 fc22 	bl	8001a4c <HAL_GPIO_WritePin>
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	40010800 	.word	0x40010800

08001218 <TIMER2_Init>:

void TIMER2_Init(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
	 * Enter with time clock frequency of microcontroller and time base required;
	 * Adjust the prescaler if you need;
	 * In this example, I decided to make a time period of 1ms as you can se in the configurations below;
	 * I'm using a time clock frequency of 64MHz;
	 * If you want to increase the resolution (time gap) of the counter clock, just decrease the prescaler value */
	htimer2.Instance = TIM2;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <TIMER2_Init+0x70>)
 8001220:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001224:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <TIMER2_Init+0x70>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
	htimer2.Init.Prescaler = 23;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <TIMER2_Init+0x70>)
 800122e:	2217      	movs	r2, #23
 8001230:	605a      	str	r2, [r3, #4]
	htimer2.Init.Period = 200-1;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <TIMER2_Init+0x70>)
 8001234:	22c7      	movs	r2, #199	; 0xc7
 8001236:	60da      	str	r2, [r3, #12]
	htimer2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <TIMER2_Init+0x70>)
 800123a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123e:	611a      	str	r2, [r3, #16]

	if(HAL_TIM_PWM_Init(&htimer2) != HAL_OK){
 8001240:	4811      	ldr	r0, [pc, #68]	; (8001288 <TIMER2_Init+0x70>)
 8001242:	f001 f80f 	bl	8002264 <HAL_TIM_PWM_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <TIMER2_Init+0x38>
		Error_Handler();
 800124c:	f000 f81e 	bl	800128c <Error_Handler>
	}

	memset(&tim2PWM_Config, 0, sizeof(tim2PWM_Config)); // Just in case
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	221c      	movs	r2, #28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fc98 	bl	8002b8c <memset>
	 * What makes the time on or off is the polarity;
	 * In STM32F1xx this is in reverse and I don't know why;
	 * The normal like in STM32F4xx would be with polarity high, we had the active duty cycle within a period of clock;
	 * Here is inverse, but just change the polarity and everthing will looks good;
	 * */
	tim2PWM_Config.OCMode = TIM_OCMODE_PWM1;
 800125c:	2360      	movs	r3, #96	; 0x60
 800125e:	607b      	str	r3, [r7, #4]
	tim2PWM_Config.OCPolarity = TIM_OCPOLARITY_LOW;
 8001260:	2302      	movs	r3, #2
 8001262:	60fb      	str	r3, [r7, #12]
	tim2PWM_Config.Pulse = 0;							// Start with 0% of duty cycle
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]

	if(HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_2) != HAL_OK){
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2204      	movs	r2, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <TIMER2_Init+0x70>)
 8001270:	f001 f95e 	bl	8002530 <HAL_TIM_PWM_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <TIMER2_Init+0x66>
		Error_Handler();
 800127a:	f000 f807 	bl	800128c <Error_Handler>
	}
}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000028 	.word	0x20000028

0800128c <Error_Handler>:

void Error_Handler(void){
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	while(1);
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x4>
	...

08001294 <HAL_MspInit>:
#include "main.h"
#include "stm32f1xx_hal_tim.h"

void HAL_MspInit(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

	__HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_MspInit+0x78>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <HAL_MspInit+0x78>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_MspInit+0x78>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

	/* DISABLE: JTAG-DP Disabled and SW-DP Disabled */
	__HAL_AFIO_REMAP_SWJ_DISABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_MspInit+0x7c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_MspInit+0x7c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6053      	str	r3, [r2, #4]

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ce:	2003      	movs	r0, #3
 80012d0:	f000 fa00 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_MspInit+0x80>)
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_MspInit+0x80>)
 80012da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80012de:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	f06f 000b 	mvn.w	r0, #11
 80012e8:	f000 f9ff 	bl	80016ea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	f06f 000a 	mvn.w	r0, #10
 80012f4:	f000 f9f9 	bl	80016ea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	f06f 0009 	mvn.w	r0, #9
 8001300:	f000 f9f3 	bl	80016ea <HAL_NVIC_SetPriority>

}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim){
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	//1. enable the peripheral clock for the timer2 peripheral
	__HAL_RCC_AFIO_CLK_ENABLE();
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_TIM_PWM_MspInit+0x80>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_TIM_PWM_MspInit+0x80>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_TIM_PWM_MspInit+0x80>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_TIM_PWM_MspInit+0x80>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_TIM_PWM_MspInit+0x80>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	61d3      	str	r3, [r2, #28]
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_TIM_PWM_MspInit+0x80>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_TIM_PWM_MspInit+0x80>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_TIM_PWM_MspInit+0x80>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_TIM_PWM_MspInit+0x80>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
	   PA0-WKUP ------> TIM2_CH1
	   PA1      ------> TIM2_CH2
	   PB10     ------> TIM2_CH3
	   PB11     ------> TIM2_CH4
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001368:	230f      	movs	r3, #15
 800136a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2302      	movs	r3, #2
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4619      	mov	r1, r3
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <HAL_TIM_PWM_MspInit+0x84>)
 800137c:	f000 fa14 	bl	80017a8 <HAL_GPIO_Init>

	//3. nvic settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	210f      	movs	r1, #15
 8001384:	201c      	movs	r0, #28
 8001386:	f000 f9b0 	bl	80016ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800138a:	201c      	movs	r0, #28
 800138c:	f000 f9c9 	bl	8001722 <HAL_NVIC_EnableIRQ>

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	40010800 	.word	0x40010800

080013a0 <SysTick_Handler>:
#include "main.h"
#include "stm32f1xx_it.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80013a4:	f000 f8ae 	bl	8001504 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80013a8:	f000 f9f2 	bl	8001790 <HAL_SYSTICK_IRQHandler>

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0

	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	HAL_TIM_IRQHandler(&htimer2);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM2_IRQHandler+0x10>)
 80013b6:	f000 ffb3 	bl	8002320 <HAL_TIM_IRQHandler>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000028 	.word	0x20000028

080013c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <SystemInit+0x5c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <SystemInit+0x5c>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <SystemInit+0x5c>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4911      	ldr	r1, [pc, #68]	; (8001420 <SystemInit+0x5c>)
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <SystemInit+0x60>)
 80013dc:	4013      	ands	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <SystemInit+0x5c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <SystemInit+0x5c>)
 80013e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <SystemInit+0x5c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SystemInit+0x5c>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <SystemInit+0x5c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <SystemInit+0x5c>)
 8001402:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001406:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SystemInit+0x5c>)
 800140a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800140e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SystemInit+0x64>)
 8001412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001416:	609a      	str	r2, [r3, #8]
#endif 
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	f8ff0000 	.word	0xf8ff0000
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800142c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800142e:	e003      	b.n	8001438 <LoopCopyDataInit>

08001430 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001432:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001434:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001436:	3104      	adds	r1, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800143c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800143e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001440:	d3f6      	bcc.n	8001430 <CopyDataInit>
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001444:	e002      	b.n	800144c <LoopFillZerobss>

08001446 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001448:	f842 3b04 	str.w	r3, [r2], #4

0800144c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001450:	d3f9      	bcc.n	8001446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001452:	f7ff ffb7 	bl	80013c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f001 fb75 	bl	8002b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff fdb1 	bl	8000fc0 <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r3, =_sidata
 8001460:	08003c48 	.word	0x08003c48
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001468:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800146c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001470:	200000ac 	.word	0x200000ac

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f923 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fefe 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f93b 	bl	800173e <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f903 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x1c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x20>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_IncTick+0x20>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000008 	.word	0x20000008
 8001524:	200000a8 	.word	0x200000a8

08001528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	200000a8 	.word	0x200000a8

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4906      	ldr	r1, [pc, #24]	; (80015d4 <__NVIC_EnableIRQ+0x34>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff90 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff2d 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff42 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff90 	bl	800162c <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5f 	bl	80015d8 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff35 	bl	80015a0 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b04      	cmp	r3, #4
 8001764:	d106      	bne.n	8001774 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001772:	e005      	b.n	8001780 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001794:	f000 f802 	bl	800179c <HAL_SYSTICK_Callback>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e121      	b.n	8001a00 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017bc:	2201      	movs	r2, #1
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8110 	bne.w	80019fa <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d034      	beq.n	800184c <HAL_GPIO_Init+0xa4>
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d80d      	bhi.n	8001802 <HAL_GPIO_Init+0x5a>
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d02b      	beq.n	8001842 <HAL_GPIO_Init+0x9a>
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d804      	bhi.n	80017f8 <HAL_GPIO_Init+0x50>
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d031      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d01c      	beq.n	8001830 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017f6:	e048      	b.n	800188a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d043      	beq.n	8001884 <HAL_GPIO_Init+0xdc>
 80017fc:	2b11      	cmp	r3, #17
 80017fe:	d01b      	beq.n	8001838 <HAL_GPIO_Init+0x90>
          break;
 8001800:	e043      	b.n	800188a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001802:	4a86      	ldr	r2, [pc, #536]	; (8001a1c <HAL_GPIO_Init+0x274>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d026      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 8001808:	4a84      	ldr	r2, [pc, #528]	; (8001a1c <HAL_GPIO_Init+0x274>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d806      	bhi.n	800181c <HAL_GPIO_Init+0x74>
 800180e:	4a84      	ldr	r2, [pc, #528]	; (8001a20 <HAL_GPIO_Init+0x278>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d020      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 8001814:	4a83      	ldr	r2, [pc, #524]	; (8001a24 <HAL_GPIO_Init+0x27c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01d      	beq.n	8001856 <HAL_GPIO_Init+0xae>
          break;
 800181a:	e036      	b.n	800188a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800181c:	4a82      	ldr	r2, [pc, #520]	; (8001a28 <HAL_GPIO_Init+0x280>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 8001822:	4a82      	ldr	r2, [pc, #520]	; (8001a2c <HAL_GPIO_Init+0x284>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d016      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 8001828:	4a81      	ldr	r2, [pc, #516]	; (8001a30 <HAL_GPIO_Init+0x288>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0xae>
          break;
 800182e:	e02c      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e028      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	3304      	adds	r3, #4
 800183e:	623b      	str	r3, [r7, #32]
          break;
 8001840:	e023      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	3308      	adds	r3, #8
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e01e      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	330c      	adds	r3, #12
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e019      	b.n	800188a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185e:	2304      	movs	r3, #4
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e012      	b.n	800188a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	611a      	str	r2, [r3, #16]
          break;
 8001876:	e008      	b.n	800188a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	615a      	str	r2, [r3, #20]
          break;
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2bff      	cmp	r3, #255	; 0xff
 800188e:	d801      	bhi.n	8001894 <HAL_GPIO_Init+0xec>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	e001      	b.n	8001898 <HAL_GPIO_Init+0xf0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3304      	adds	r3, #4
 8001898:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2bff      	cmp	r3, #255	; 0xff
 800189e:	d802      	bhi.n	80018a6 <HAL_GPIO_Init+0xfe>
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x104>
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	3b08      	subs	r3, #8
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	210f      	movs	r1, #15
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	401a      	ands	r2, r3
 80018be:	6a39      	ldr	r1, [r7, #32]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	431a      	orrs	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8090 	beq.w	80019fa <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018da:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_GPIO_Init+0x28c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a55      	ldr	r2, [pc, #340]	; (8001a34 <HAL_GPIO_Init+0x28c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_GPIO_Init+0x28c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f2:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_GPIO_Init+0x290>)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a48      	ldr	r2, [pc, #288]	; (8001a3c <HAL_GPIO_Init+0x294>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00d      	beq.n	800193a <HAL_GPIO_Init+0x192>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a47      	ldr	r2, [pc, #284]	; (8001a40 <HAL_GPIO_Init+0x298>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x18e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a46      	ldr	r2, [pc, #280]	; (8001a44 <HAL_GPIO_Init+0x29c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_GPIO_Init+0x18a>
 800192e:	2302      	movs	r3, #2
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x194>
 8001932:	2303      	movs	r3, #3
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x194>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x194>
 800193a:	2300      	movs	r3, #0
 800193c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800194c:	493a      	ldr	r1, [pc, #232]	; (8001a38 <HAL_GPIO_Init+0x290>)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4937      	ldr	r1, [pc, #220]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
 8001972:	e006      	b.n	8001982 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001974:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	43db      	mvns	r3, r3
 800197c:	4932      	ldr	r1, [pc, #200]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 800197e:	4013      	ands	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	492d      	ldr	r1, [pc, #180]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
 800199a:	e006      	b.n	80019aa <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	4928      	ldr	r1, [pc, #160]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4923      	ldr	r1, [pc, #140]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	491e      	ldr	r1, [pc, #120]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	4919      	ldr	r1, [pc, #100]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60cb      	str	r3, [r1, #12]
 80019ea:	e006      	b.n	80019fa <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	4914      	ldr	r1, [pc, #80]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	3301      	adds	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f aed6 	bne.w	80017bc <HAL_GPIO_Init+0x14>
  }
}
 8001a10:	bf00      	nop
 8001a12:	372c      	adds	r7, #44	; 0x2c
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	10210000 	.word	0x10210000
 8001a20:	10110000 	.word	0x10110000
 8001a24:	10120000 	.word	0x10120000
 8001a28:	10310000 	.word	0x10310000
 8001a2c:	10320000 	.word	0x10320000
 8001a30:	10220000 	.word	0x10220000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	611a      	str	r2, [r3, #16]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e26c      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8087 	beq.w	8001baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a9c:	4b92      	ldr	r3, [pc, #584]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d00c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa8:	4b8f      	ldr	r3, [pc, #572]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d112      	bne.n	8001ada <HAL_RCC_OscConfig+0x5e>
 8001ab4:	4b8c      	ldr	r3, [pc, #560]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d10b      	bne.n	8001ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac2:	4b89      	ldr	r3, [pc, #548]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d06c      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x12c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d168      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e246      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x76>
 8001ae4:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a7f      	ldr	r2, [pc, #508]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e02e      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x98>
 8001afa:	4b7b      	ldr	r3, [pc, #492]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7a      	ldr	r2, [pc, #488]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b78      	ldr	r3, [pc, #480]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a77      	ldr	r2, [pc, #476]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0xbc>
 8001b1e:	4b72      	ldr	r3, [pc, #456]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a71      	ldr	r2, [pc, #452]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xd4>
 8001b38:	4b6b      	ldr	r3, [pc, #428]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a67      	ldr	r2, [pc, #412]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fce6 	bl	8001528 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fce2 	bl	8001528 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1fa      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b5d      	ldr	r3, [pc, #372]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe4>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fcd2 	bl	8001528 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff fcce 	bl	8001528 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1e6      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x10c>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb6:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bc2:	4b49      	ldr	r3, [pc, #292]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d11c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x18c>
 8001bce:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x176>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1ba      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4939      	ldr	r1, [pc, #228]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	e03a      	b.n	8001c7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b36      	ldr	r3, [pc, #216]	; (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c16:	f7ff fc87 	bl	8001528 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fc83 	bl	8001528 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e19b      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4927      	ldr	r1, [pc, #156]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x270>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fc66 	bl	8001528 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff fc62 	bl	8001528 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e17a      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d03a      	beq.n	8001d00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d019      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fc46 	bl	8001528 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fc42 	bl	8001528 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e15a      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f000 fab2 	bl	8002228 <RCC_Delay>
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fc2c 	bl	8001528 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd2:	e00f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fc28 	bl	8001528 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d908      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e140      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	42420000 	.word	0x42420000
 8001cf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	4b9e      	ldr	r3, [pc, #632]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e9      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80a6 	beq.w	8001e5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b97      	ldr	r3, [pc, #604]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10d      	bne.n	8001d3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b94      	ldr	r3, [pc, #592]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4a93      	ldr	r2, [pc, #588]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	61d3      	str	r3, [r2, #28]
 8001d2a:	4b91      	ldr	r3, [pc, #580]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3a:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d118      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d46:	4b8b      	ldr	r3, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a8a      	ldr	r2, [pc, #552]	; (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fbe9 	bl	8001528 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5a:	f7ff fbe5 	bl	8001528 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0fd      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	4b81      	ldr	r3, [pc, #516]	; (8001f74 <HAL_RCC_OscConfig+0x4f8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x312>
 8001d80:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a7a      	ldr	r2, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	e02d      	b.n	8001dea <HAL_RCC_OscConfig+0x36e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x334>
 8001d96:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a75      	ldr	r2, [pc, #468]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a72      	ldr	r2, [pc, #456]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	e01c      	b.n	8001dea <HAL_RCC_OscConfig+0x36e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d10c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x356>
 8001db8:	4b6d      	ldr	r3, [pc, #436]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a6c      	ldr	r2, [pc, #432]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a69      	ldr	r2, [pc, #420]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	e00b      	b.n	8001dea <HAL_RCC_OscConfig+0x36e>
 8001dd2:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a66      	ldr	r2, [pc, #408]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a63      	ldr	r2, [pc, #396]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d015      	beq.n	8001e1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fb99 	bl	8001528 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7ff fb95 	bl	8001528 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0ab      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0ee      	beq.n	8001dfa <HAL_RCC_OscConfig+0x37e>
 8001e1c:	e014      	b.n	8001e48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fb83 	bl	8001528 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7ff fb7f 	bl	8001528 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e095      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ee      	bne.n	8001e26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d105      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4e:	4b48      	ldr	r3, [pc, #288]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4a47      	ldr	r2, [pc, #284]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8081 	beq.w	8001f66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e64:	4b42      	ldr	r3, [pc, #264]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d061      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d146      	bne.n	8001f06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0x4fc>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fb53 	bl	8001528 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e86:	f7ff fb4f 	bl	8001528 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e067      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f0      	bne.n	8001e86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d108      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	492d      	ldr	r1, [pc, #180]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a19      	ldr	r1, [r3, #32]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	4927      	ldr	r1, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_OscConfig+0x4fc>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fb23 	bl	8001528 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff fb1f 	bl	8001528 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e037      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x46a>
 8001f04:	e02f      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_RCC_OscConfig+0x4fc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fb0c 	bl	8001528 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff fb08 	bl	8001528 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e020      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x498>
 8001f32:	e018      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e013      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_OscConfig+0x4f4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d001      	beq.n	8001f66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40007000 	.word	0x40007000
 8001f78:	42420060 	.word	0x42420060

08001f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0d0      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b6a      	ldr	r3, [pc, #424]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	4965      	ldr	r1, [pc, #404]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b8      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd8:	4b59      	ldr	r3, [pc, #356]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ffa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	494d      	ldr	r1, [pc, #308]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d040      	beq.n	800209c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d115      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e07f      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e073      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e06b      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f023 0203 	bic.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4936      	ldr	r1, [pc, #216]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800206c:	f7ff fa5c 	bl	8001528 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	e00a      	b.n	800208a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7ff fa58 	bl	8001528 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e053      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 020c 	and.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	429a      	cmp	r2, r3
 800209a:	d1eb      	bne.n	8002074 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d210      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0207 	bic.w	r2, r3, #7
 80020b2:	4922      	ldr	r1, [pc, #136]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e032      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4916      	ldr	r1, [pc, #88]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	490e      	ldr	r1, [pc, #56]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210a:	f000 f821 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 800210e:	4601      	mov	r1, r0
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	5cd3      	ldrb	r3, [r2, r3]
 800211e:	fa21 f303 	lsr.w	r3, r1, r3
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1cc>)
 8002124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1d0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f9ba 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	0800384c 	.word	0x0800384c
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b490      	push	{r4, r7}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002158:	1d3c      	adds	r4, r7, #4
 800215a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800215c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002160:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x40>
 800218a:	2b08      	cmp	r3, #8
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x46>
 800218e:	e02d      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002192:	623b      	str	r3, [r7, #32]
      break;
 8002194:	e02d      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	0c9b      	lsrs	r3, r3, #18
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021a2:	4413      	add	r3, r2
 80021a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	0c5b      	lsrs	r3, r3, #17
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021c2:	4413      	add	r3, r2
 80021c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4a0f      	ldr	r2, [pc, #60]	; (800220c <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ce:	fb02 f203 	mul.w	r2, r2, r3
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	e004      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	623b      	str	r3, [r7, #32]
      break;
 80021ea:	e002      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ee:	623b      	str	r3, [r7, #32]
      break;
 80021f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f2:	6a3b      	ldr	r3, [r7, #32]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3728      	adds	r7, #40	; 0x28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc90      	pop	{r4, r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	08003838 	.word	0x08003838
 8002204:	08003848 	.word	0x08003848
 8002208:	40021000 	.word	0x40021000
 800220c:	007a1200 	.word	0x007a1200
 8002210:	003d0900 	.word	0x003d0900

08002214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b02      	ldr	r3, [pc, #8]	; (8002224 <HAL_RCC_GetHCLKFreq+0x10>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	20000000 	.word	0x20000000

08002228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <RCC_Delay+0x34>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <RCC_Delay+0x38>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0a5b      	lsrs	r3, r3, #9
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002244:	bf00      	nop
  }
  while (Delay --);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	60fa      	str	r2, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <RCC_Delay+0x1c>
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000000 	.word	0x20000000
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e01d      	b.n	80022b2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff f844 	bl	8001318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 fa38 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	6839      	ldr	r1, [r7, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fc02 	bl	8002ad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a10      	ldr	r2, [pc, #64]	; (800231c <HAL_TIM_PWM_Start+0x60>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d107      	bne.n	80022ee <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d007      	beq.n	8002310 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40012c00 	.word	0x40012c00

08002320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b02      	cmp	r3, #2
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0202 	mvn.w	r2, #2
 800234c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f9bc 	bl	80026e0 <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f9af 	bl	80026ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f9be 	bl	80026f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d122      	bne.n	80023d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d11b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0204 	mvn.w	r2, #4
 80023a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2202      	movs	r2, #2
 80023a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f992 	bl	80026e0 <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f985 	bl	80026ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f994 	bl	80026f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d122      	bne.n	8002424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d11b      	bne.n	8002424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0208 	mvn.w	r2, #8
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2204      	movs	r2, #4
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f968 	bl	80026e0 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f95b 	bl	80026ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f96a 	bl	80026f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b10      	cmp	r3, #16
 8002430:	d122      	bne.n	8002478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b10      	cmp	r3, #16
 800243e:	d11b      	bne.n	8002478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0210 	mvn.w	r2, #16
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2208      	movs	r2, #8
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f93e 	bl	80026e0 <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f931 	bl	80026ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f940 	bl	80026f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10e      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0201 	mvn.w	r2, #1
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f90c 	bl	80026bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b80      	cmp	r3, #128	; 0x80
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	2b80      	cmp	r3, #128	; 0x80
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fb31 	bl	8002b32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f904 	bl	8002704 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b20      	cmp	r3, #32
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b20      	cmp	r3, #32
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0220 	mvn.w	r2, #32
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fafc 	bl	8002b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002546:	2302      	movs	r3, #2
 8002548:	e0b4      	b.n	80026b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	f200 809f 	bhi.w	80026a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	0800259d 	.word	0x0800259d
 800256c:	080026a1 	.word	0x080026a1
 8002570:	080026a1 	.word	0x080026a1
 8002574:	080026a1 	.word	0x080026a1
 8002578:	080025dd 	.word	0x080025dd
 800257c:	080026a1 	.word	0x080026a1
 8002580:	080026a1 	.word	0x080026a1
 8002584:	080026a1 	.word	0x080026a1
 8002588:	0800261f 	.word	0x0800261f
 800258c:	080026a1 	.word	0x080026a1
 8002590:	080026a1 	.word	0x080026a1
 8002594:	080026a1 	.word	0x080026a1
 8002598:	0800265f 	.word	0x0800265f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f910 	bl	80027c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0208 	orr.w	r2, r2, #8
 80025b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0204 	bic.w	r2, r2, #4
 80025c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6999      	ldr	r1, [r3, #24]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	619a      	str	r2, [r3, #24]
      break;
 80025da:	e062      	b.n	80026a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f956 	bl	8002894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6999      	ldr	r1, [r3, #24]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	021a      	lsls	r2, r3, #8
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	619a      	str	r2, [r3, #24]
      break;
 800261c:	e041      	b.n	80026a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f99f 	bl	8002968 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0208 	orr.w	r2, r2, #8
 8002638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0204 	bic.w	r2, r2, #4
 8002648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69d9      	ldr	r1, [r3, #28]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	61da      	str	r2, [r3, #28]
      break;
 800265c:	e021      	b.n	80026a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f9e9 	bl	8002a3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69d9      	ldr	r1, [r3, #28]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	61da      	str	r2, [r3, #28]
      break;
 800269e:	e000      	b.n	80026a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80026a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
	...

08002718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <TIM_Base_SetConfig+0xa8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d007      	beq.n	8002740 <TIM_Base_SetConfig+0x28>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0x28>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <TIM_Base_SetConfig+0xac>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d108      	bne.n	8002752 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <TIM_Base_SetConfig+0xa8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <TIM_Base_SetConfig+0x52>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002760:	d003      	beq.n	800276a <TIM_Base_SetConfig+0x52>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <TIM_Base_SetConfig+0xac>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <TIM_Base_SetConfig+0xa8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d103      	bne.n	80027b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	615a      	str	r2, [r3, #20]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40000400 	.word	0x40000400

080027c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f023 0201 	bic.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0303 	bic.w	r3, r3, #3
 80027fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f023 0302 	bic.w	r3, r3, #2
 8002810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <TIM_OC1_SetConfig+0xc8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10c      	bne.n	800283e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0308 	bic.w	r3, r3, #8
 800282a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <TIM_OC1_SetConfig+0xc8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d111      	bne.n	800286a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800284c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	621a      	str	r2, [r3, #32]
}
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40012c00 	.word	0x40012c00

08002894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f023 0210 	bic.w	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f023 0320 	bic.w	r3, r3, #32
 80028de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <TIM_OC2_SetConfig+0xd0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10d      	bne.n	8002910 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800290e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a14      	ldr	r2, [pc, #80]	; (8002964 <TIM_OC2_SetConfig+0xd0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d113      	bne.n	8002940 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800291e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	621a      	str	r2, [r3, #32]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	40012c00 	.word	0x40012c00

08002968 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <TIM_OC3_SetConfig+0xd0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10d      	bne.n	80029e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <TIM_OC3_SetConfig+0xd0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d113      	bne.n	8002a12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	621a      	str	r2, [r3, #32]
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40012c00 	.word	0x40012c00

08002a3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	031b      	lsls	r3, r3, #12
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <TIM_OC4_SetConfig+0x98>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d109      	bne.n	8002ab0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40012c00 	.word	0x40012c00

08002ad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2201      	movs	r2, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1a      	ldr	r2, [r3, #32]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	401a      	ands	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <__libc_init_array>:
 8002b44:	b570      	push	{r4, r5, r6, lr}
 8002b46:	2500      	movs	r5, #0
 8002b48:	4e0c      	ldr	r6, [pc, #48]	; (8002b7c <__libc_init_array+0x38>)
 8002b4a:	4c0d      	ldr	r4, [pc, #52]	; (8002b80 <__libc_init_array+0x3c>)
 8002b4c:	1ba4      	subs	r4, r4, r6
 8002b4e:	10a4      	asrs	r4, r4, #2
 8002b50:	42a5      	cmp	r5, r4
 8002b52:	d109      	bne.n	8002b68 <__libc_init_array+0x24>
 8002b54:	f000 fe64 	bl	8003820 <_init>
 8002b58:	2500      	movs	r5, #0
 8002b5a:	4e0a      	ldr	r6, [pc, #40]	; (8002b84 <__libc_init_array+0x40>)
 8002b5c:	4c0a      	ldr	r4, [pc, #40]	; (8002b88 <__libc_init_array+0x44>)
 8002b5e:	1ba4      	subs	r4, r4, r6
 8002b60:	10a4      	asrs	r4, r4, #2
 8002b62:	42a5      	cmp	r5, r4
 8002b64:	d105      	bne.n	8002b72 <__libc_init_array+0x2e>
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
 8002b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b6c:	4798      	blx	r3
 8002b6e:	3501      	adds	r5, #1
 8002b70:	e7ee      	b.n	8002b50 <__libc_init_array+0xc>
 8002b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b76:	4798      	blx	r3
 8002b78:	3501      	adds	r5, #1
 8002b7a:	e7f2      	b.n	8002b62 <__libc_init_array+0x1e>
 8002b7c:	08003c40 	.word	0x08003c40
 8002b80:	08003c40 	.word	0x08003c40
 8002b84:	08003c40 	.word	0x08003c40
 8002b88:	08003c44 	.word	0x08003c44

08002b8c <memset>:
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4402      	add	r2, r0
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d100      	bne.n	8002b96 <memset+0xa>
 8002b94:	4770      	bx	lr
 8002b96:	f803 1b01 	strb.w	r1, [r3], #1
 8002b9a:	e7f9      	b.n	8002b90 <memset+0x4>

08002b9c <rint>:
 8002b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002ba2:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8002ba6:	f1bc 0f13 	cmp.w	ip, #19
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4606      	mov	r6, r0
 8002bb2:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8002bb6:	dc5a      	bgt.n	8002c6e <rint+0xd2>
 8002bb8:	f1bc 0f00 	cmp.w	ip, #0
 8002bbc:	da2b      	bge.n	8002c16 <rint+0x7a>
 8002bbe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002bc2:	4302      	orrs	r2, r0
 8002bc4:	d023      	beq.n	8002c0e <rint+0x72>
 8002bc6:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8002bca:	4302      	orrs	r2, r0
 8002bcc:	4256      	negs	r6, r2
 8002bce:	4316      	orrs	r6, r2
 8002bd0:	0c4b      	lsrs	r3, r1, #17
 8002bd2:	0b36      	lsrs	r6, r6, #12
 8002bd4:	4934      	ldr	r1, [pc, #208]	; (8002ca8 <rint+0x10c>)
 8002bd6:	045b      	lsls	r3, r3, #17
 8002bd8:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8002bdc:	ea46 0503 	orr.w	r5, r6, r3
 8002be0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8002be4:	4602      	mov	r2, r0
 8002be6:	462b      	mov	r3, r5
 8002be8:	e9d1 4500 	ldrd	r4, r5, [r1]
 8002bec:	4620      	mov	r0, r4
 8002bee:	4629      	mov	r1, r5
 8002bf0:	f7fd fab4 	bl	800015c <__adddf3>
 8002bf4:	e9cd 0100 	strd	r0, r1, [sp]
 8002bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bfc:	462b      	mov	r3, r5
 8002bfe:	4622      	mov	r2, r4
 8002c00:	f7fd faaa 	bl	8000158 <__aeabi_dsub>
 8002c04:	4604      	mov	r4, r0
 8002c06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002c0a:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	b003      	add	sp, #12
 8002c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c16:	4a25      	ldr	r2, [pc, #148]	; (8002cac <rint+0x110>)
 8002c18:	fa42 f20c 	asr.w	r2, r2, ip
 8002c1c:	4011      	ands	r1, r2
 8002c1e:	4301      	orrs	r1, r0
 8002c20:	d0f5      	beq.n	8002c0e <rint+0x72>
 8002c22:	0852      	lsrs	r2, r2, #1
 8002c24:	ea05 0102 	and.w	r1, r5, r2
 8002c28:	ea50 0601 	orrs.w	r6, r0, r1
 8002c2c:	d00c      	beq.n	8002c48 <rint+0xac>
 8002c2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c32:	f1bc 0f13 	cmp.w	ip, #19
 8002c36:	bf0c      	ite	eq
 8002c38:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8002c3c:	2600      	movne	r6, #0
 8002c3e:	ea25 0202 	bic.w	r2, r5, r2
 8002c42:	fa43 f30c 	asr.w	r3, r3, ip
 8002c46:	4313      	orrs	r3, r2
 8002c48:	4917      	ldr	r1, [pc, #92]	; (8002ca8 <rint+0x10c>)
 8002c4a:	4632      	mov	r2, r6
 8002c4c:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8002c50:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c54:	4620      	mov	r0, r4
 8002c56:	4629      	mov	r1, r5
 8002c58:	f7fd fa80 	bl	800015c <__adddf3>
 8002c5c:	e9cd 0100 	strd	r0, r1, [sp]
 8002c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c64:	4622      	mov	r2, r4
 8002c66:	462b      	mov	r3, r5
 8002c68:	f7fd fa76 	bl	8000158 <__aeabi_dsub>
 8002c6c:	e008      	b.n	8002c80 <rint+0xe4>
 8002c6e:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8002c72:	dd08      	ble.n	8002c86 <rint+0xea>
 8002c74:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8002c78:	d1c9      	bne.n	8002c0e <rint+0x72>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	f7fd fa6e 	bl	800015c <__adddf3>
 8002c80:	4604      	mov	r4, r0
 8002c82:	460d      	mov	r5, r1
 8002c84:	e7c3      	b.n	8002c0e <rint+0x72>
 8002c86:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8e:	40ca      	lsrs	r2, r1
 8002c90:	4210      	tst	r0, r2
 8002c92:	d0bc      	beq.n	8002c0e <rint+0x72>
 8002c94:	0852      	lsrs	r2, r2, #1
 8002c96:	4210      	tst	r0, r2
 8002c98:	bf1f      	itttt	ne
 8002c9a:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8002c9e:	ea20 0202 	bicne.w	r2, r0, r2
 8002ca2:	410e      	asrne	r6, r1
 8002ca4:	4316      	orrne	r6, r2
 8002ca6:	e7cf      	b.n	8002c48 <rint+0xac>
 8002ca8:	08003860 	.word	0x08003860
 8002cac:	000fffff 	.word	0x000fffff

08002cb0 <sinf>:
 8002cb0:	b507      	push	{r0, r1, r2, lr}
 8002cb2:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <sinf+0x68>)
 8002cb4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	4601      	mov	r1, r0
 8002cbc:	dc04      	bgt.n	8002cc8 <sinf+0x18>
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f000 fca1 	bl	8003608 <__kernel_sinf>
 8002cc6:	e004      	b.n	8002cd2 <sinf+0x22>
 8002cc8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002ccc:	db04      	blt.n	8002cd8 <sinf+0x28>
 8002cce:	f7fd fe81 	bl	80009d4 <__aeabi_fsub>
 8002cd2:	b003      	add	sp, #12
 8002cd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cd8:	4669      	mov	r1, sp
 8002cda:	f000 f81f 	bl	8002d1c <__ieee754_rem_pio2f>
 8002cde:	f000 0003 	and.w	r0, r0, #3
 8002ce2:	2801      	cmp	r0, #1
 8002ce4:	d006      	beq.n	8002cf4 <sinf+0x44>
 8002ce6:	2802      	cmp	r0, #2
 8002ce8:	d009      	beq.n	8002cfe <sinf+0x4e>
 8002cea:	b980      	cbnz	r0, 8002d0e <sinf+0x5e>
 8002cec:	2201      	movs	r2, #1
 8002cee:	9901      	ldr	r1, [sp, #4]
 8002cf0:	9800      	ldr	r0, [sp, #0]
 8002cf2:	e7e6      	b.n	8002cc2 <sinf+0x12>
 8002cf4:	9901      	ldr	r1, [sp, #4]
 8002cf6:	9800      	ldr	r0, [sp, #0]
 8002cf8:	f000 f968 	bl	8002fcc <__kernel_cosf>
 8002cfc:	e7e9      	b.n	8002cd2 <sinf+0x22>
 8002cfe:	2201      	movs	r2, #1
 8002d00:	9901      	ldr	r1, [sp, #4]
 8002d02:	9800      	ldr	r0, [sp, #0]
 8002d04:	f000 fc80 	bl	8003608 <__kernel_sinf>
 8002d08:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002d0c:	e7e1      	b.n	8002cd2 <sinf+0x22>
 8002d0e:	9901      	ldr	r1, [sp, #4]
 8002d10:	9800      	ldr	r0, [sp, #0]
 8002d12:	f000 f95b 	bl	8002fcc <__kernel_cosf>
 8002d16:	e7f7      	b.n	8002d08 <sinf+0x58>
 8002d18:	3f490fd8 	.word	0x3f490fd8

08002d1c <__ieee754_rem_pio2f>:
 8002d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d20:	4a9d      	ldr	r2, [pc, #628]	; (8002f98 <__ieee754_rem_pio2f+0x27c>)
 8002d22:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8002d26:	4295      	cmp	r5, r2
 8002d28:	b087      	sub	sp, #28
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	4607      	mov	r7, r0
 8002d2e:	dc04      	bgt.n	8002d3a <__ieee754_rem_pio2f+0x1e>
 8002d30:	2300      	movs	r3, #0
 8002d32:	6020      	str	r0, [r4, #0]
 8002d34:	604b      	str	r3, [r1, #4]
 8002d36:	2600      	movs	r6, #0
 8002d38:	e01a      	b.n	8002d70 <__ieee754_rem_pio2f+0x54>
 8002d3a:	4a98      	ldr	r2, [pc, #608]	; (8002f9c <__ieee754_rem_pio2f+0x280>)
 8002d3c:	4295      	cmp	r5, r2
 8002d3e:	dc4b      	bgt.n	8002dd8 <__ieee754_rem_pio2f+0xbc>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	f025 050f 	bic.w	r5, r5, #15
 8002d46:	4996      	ldr	r1, [pc, #600]	; (8002fa0 <__ieee754_rem_pio2f+0x284>)
 8002d48:	4e96      	ldr	r6, [pc, #600]	; (8002fa4 <__ieee754_rem_pio2f+0x288>)
 8002d4a:	dd23      	ble.n	8002d94 <__ieee754_rem_pio2f+0x78>
 8002d4c:	f7fd fe42 	bl	80009d4 <__aeabi_fsub>
 8002d50:	42b5      	cmp	r5, r6
 8002d52:	4607      	mov	r7, r0
 8002d54:	d010      	beq.n	8002d78 <__ieee754_rem_pio2f+0x5c>
 8002d56:	4994      	ldr	r1, [pc, #592]	; (8002fa8 <__ieee754_rem_pio2f+0x28c>)
 8002d58:	f7fd fe3c 	bl	80009d4 <__aeabi_fsub>
 8002d5c:	4601      	mov	r1, r0
 8002d5e:	6020      	str	r0, [r4, #0]
 8002d60:	4638      	mov	r0, r7
 8002d62:	f7fd fe37 	bl	80009d4 <__aeabi_fsub>
 8002d66:	4990      	ldr	r1, [pc, #576]	; (8002fa8 <__ieee754_rem_pio2f+0x28c>)
 8002d68:	f7fd fe34 	bl	80009d4 <__aeabi_fsub>
 8002d6c:	2601      	movs	r6, #1
 8002d6e:	6060      	str	r0, [r4, #4]
 8002d70:	4630      	mov	r0, r6
 8002d72:	b007      	add	sp, #28
 8002d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d78:	498c      	ldr	r1, [pc, #560]	; (8002fac <__ieee754_rem_pio2f+0x290>)
 8002d7a:	f7fd fe2b 	bl	80009d4 <__aeabi_fsub>
 8002d7e:	498c      	ldr	r1, [pc, #560]	; (8002fb0 <__ieee754_rem_pio2f+0x294>)
 8002d80:	4605      	mov	r5, r0
 8002d82:	f7fd fe27 	bl	80009d4 <__aeabi_fsub>
 8002d86:	4601      	mov	r1, r0
 8002d88:	6020      	str	r0, [r4, #0]
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f7fd fe22 	bl	80009d4 <__aeabi_fsub>
 8002d90:	4987      	ldr	r1, [pc, #540]	; (8002fb0 <__ieee754_rem_pio2f+0x294>)
 8002d92:	e7e9      	b.n	8002d68 <__ieee754_rem_pio2f+0x4c>
 8002d94:	f7fd fe20 	bl	80009d8 <__addsf3>
 8002d98:	42b5      	cmp	r5, r6
 8002d9a:	4607      	mov	r7, r0
 8002d9c:	d00e      	beq.n	8002dbc <__ieee754_rem_pio2f+0xa0>
 8002d9e:	4982      	ldr	r1, [pc, #520]	; (8002fa8 <__ieee754_rem_pio2f+0x28c>)
 8002da0:	f7fd fe1a 	bl	80009d8 <__addsf3>
 8002da4:	4601      	mov	r1, r0
 8002da6:	6020      	str	r0, [r4, #0]
 8002da8:	4638      	mov	r0, r7
 8002daa:	f7fd fe13 	bl	80009d4 <__aeabi_fsub>
 8002dae:	497e      	ldr	r1, [pc, #504]	; (8002fa8 <__ieee754_rem_pio2f+0x28c>)
 8002db0:	f7fd fe12 	bl	80009d8 <__addsf3>
 8002db4:	f04f 36ff 	mov.w	r6, #4294967295
 8002db8:	6060      	str	r0, [r4, #4]
 8002dba:	e7d9      	b.n	8002d70 <__ieee754_rem_pio2f+0x54>
 8002dbc:	497b      	ldr	r1, [pc, #492]	; (8002fac <__ieee754_rem_pio2f+0x290>)
 8002dbe:	f7fd fe0b 	bl	80009d8 <__addsf3>
 8002dc2:	497b      	ldr	r1, [pc, #492]	; (8002fb0 <__ieee754_rem_pio2f+0x294>)
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	f7fd fe07 	bl	80009d8 <__addsf3>
 8002dca:	4601      	mov	r1, r0
 8002dcc:	6020      	str	r0, [r4, #0]
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f7fd fe00 	bl	80009d4 <__aeabi_fsub>
 8002dd4:	4976      	ldr	r1, [pc, #472]	; (8002fb0 <__ieee754_rem_pio2f+0x294>)
 8002dd6:	e7eb      	b.n	8002db0 <__ieee754_rem_pio2f+0x94>
 8002dd8:	4a76      	ldr	r2, [pc, #472]	; (8002fb4 <__ieee754_rem_pio2f+0x298>)
 8002dda:	4295      	cmp	r5, r2
 8002ddc:	f300 808c 	bgt.w	8002ef8 <__ieee754_rem_pio2f+0x1dc>
 8002de0:	f000 fc88 	bl	80036f4 <fabsf>
 8002de4:	4974      	ldr	r1, [pc, #464]	; (8002fb8 <__ieee754_rem_pio2f+0x29c>)
 8002de6:	4680      	mov	r8, r0
 8002de8:	f7fd fefe 	bl	8000be8 <__aeabi_fmul>
 8002dec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002df0:	f7fd fdf2 	bl	80009d8 <__addsf3>
 8002df4:	f7fe f8be 	bl	8000f74 <__aeabi_f2iz>
 8002df8:	4606      	mov	r6, r0
 8002dfa:	f7fd fea1 	bl	8000b40 <__aeabi_i2f>
 8002dfe:	4968      	ldr	r1, [pc, #416]	; (8002fa0 <__ieee754_rem_pio2f+0x284>)
 8002e00:	4682      	mov	sl, r0
 8002e02:	f7fd fef1 	bl	8000be8 <__aeabi_fmul>
 8002e06:	4601      	mov	r1, r0
 8002e08:	4640      	mov	r0, r8
 8002e0a:	f7fd fde3 	bl	80009d4 <__aeabi_fsub>
 8002e0e:	4966      	ldr	r1, [pc, #408]	; (8002fa8 <__ieee754_rem_pio2f+0x28c>)
 8002e10:	4680      	mov	r8, r0
 8002e12:	4650      	mov	r0, sl
 8002e14:	f7fd fee8 	bl	8000be8 <__aeabi_fmul>
 8002e18:	2e1f      	cmp	r6, #31
 8002e1a:	4681      	mov	r9, r0
 8002e1c:	dc0c      	bgt.n	8002e38 <__ieee754_rem_pio2f+0x11c>
 8002e1e:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <__ieee754_rem_pio2f+0x2a0>)
 8002e20:	1e71      	subs	r1, r6, #1
 8002e22:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002e26:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <__ieee754_rem_pio2f+0x11c>
 8002e2e:	4649      	mov	r1, r9
 8002e30:	4640      	mov	r0, r8
 8002e32:	f7fd fdcf 	bl	80009d4 <__aeabi_fsub>
 8002e36:	e009      	b.n	8002e4c <__ieee754_rem_pio2f+0x130>
 8002e38:	4649      	mov	r1, r9
 8002e3a:	4640      	mov	r0, r8
 8002e3c:	f7fd fdca 	bl	80009d4 <__aeabi_fsub>
 8002e40:	15ed      	asrs	r5, r5, #23
 8002e42:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002e46:	1aeb      	subs	r3, r5, r3
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	dc01      	bgt.n	8002e50 <__ieee754_rem_pio2f+0x134>
 8002e4c:	6020      	str	r0, [r4, #0]
 8002e4e:	e024      	b.n	8002e9a <__ieee754_rem_pio2f+0x17e>
 8002e50:	4956      	ldr	r1, [pc, #344]	; (8002fac <__ieee754_rem_pio2f+0x290>)
 8002e52:	4650      	mov	r0, sl
 8002e54:	f7fd fec8 	bl	8000be8 <__aeabi_fmul>
 8002e58:	4681      	mov	r9, r0
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	4640      	mov	r0, r8
 8002e5e:	f7fd fdb9 	bl	80009d4 <__aeabi_fsub>
 8002e62:	4601      	mov	r1, r0
 8002e64:	4683      	mov	fp, r0
 8002e66:	4640      	mov	r0, r8
 8002e68:	f7fd fdb4 	bl	80009d4 <__aeabi_fsub>
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	f7fd fdb1 	bl	80009d4 <__aeabi_fsub>
 8002e72:	4680      	mov	r8, r0
 8002e74:	494e      	ldr	r1, [pc, #312]	; (8002fb0 <__ieee754_rem_pio2f+0x294>)
 8002e76:	4650      	mov	r0, sl
 8002e78:	f7fd feb6 	bl	8000be8 <__aeabi_fmul>
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	f7fd fda9 	bl	80009d4 <__aeabi_fsub>
 8002e82:	4601      	mov	r1, r0
 8002e84:	4681      	mov	r9, r0
 8002e86:	4658      	mov	r0, fp
 8002e88:	f7fd fda4 	bl	80009d4 <__aeabi_fsub>
 8002e8c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002e90:	1aed      	subs	r5, r5, r3
 8002e92:	2d19      	cmp	r5, #25
 8002e94:	dc15      	bgt.n	8002ec2 <__ieee754_rem_pio2f+0x1a6>
 8002e96:	46d8      	mov	r8, fp
 8002e98:	6020      	str	r0, [r4, #0]
 8002e9a:	6825      	ldr	r5, [r4, #0]
 8002e9c:	4640      	mov	r0, r8
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	f7fd fd98 	bl	80009d4 <__aeabi_fsub>
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	f7fd fd95 	bl	80009d4 <__aeabi_fsub>
 8002eaa:	2f00      	cmp	r7, #0
 8002eac:	6060      	str	r0, [r4, #4]
 8002eae:	f6bf af5f 	bge.w	8002d70 <__ieee754_rem_pio2f+0x54>
 8002eb2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002eb6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002eba:	6025      	str	r5, [r4, #0]
 8002ebc:	6060      	str	r0, [r4, #4]
 8002ebe:	4276      	negs	r6, r6
 8002ec0:	e756      	b.n	8002d70 <__ieee754_rem_pio2f+0x54>
 8002ec2:	493f      	ldr	r1, [pc, #252]	; (8002fc0 <__ieee754_rem_pio2f+0x2a4>)
 8002ec4:	4650      	mov	r0, sl
 8002ec6:	f7fd fe8f 	bl	8000be8 <__aeabi_fmul>
 8002eca:	4605      	mov	r5, r0
 8002ecc:	4601      	mov	r1, r0
 8002ece:	4658      	mov	r0, fp
 8002ed0:	f7fd fd80 	bl	80009d4 <__aeabi_fsub>
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	4680      	mov	r8, r0
 8002ed8:	4658      	mov	r0, fp
 8002eda:	f7fd fd7b 	bl	80009d4 <__aeabi_fsub>
 8002ede:	4629      	mov	r1, r5
 8002ee0:	f7fd fd78 	bl	80009d4 <__aeabi_fsub>
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	4937      	ldr	r1, [pc, #220]	; (8002fc4 <__ieee754_rem_pio2f+0x2a8>)
 8002ee8:	4650      	mov	r0, sl
 8002eea:	f7fd fe7d 	bl	8000be8 <__aeabi_fmul>
 8002eee:	4629      	mov	r1, r5
 8002ef0:	f7fd fd70 	bl	80009d4 <__aeabi_fsub>
 8002ef4:	4681      	mov	r9, r0
 8002ef6:	e79a      	b.n	8002e2e <__ieee754_rem_pio2f+0x112>
 8002ef8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8002efc:	db05      	blt.n	8002f0a <__ieee754_rem_pio2f+0x1ee>
 8002efe:	4601      	mov	r1, r0
 8002f00:	f7fd fd68 	bl	80009d4 <__aeabi_fsub>
 8002f04:	6060      	str	r0, [r4, #4]
 8002f06:	6020      	str	r0, [r4, #0]
 8002f08:	e715      	b.n	8002d36 <__ieee754_rem_pio2f+0x1a>
 8002f0a:	15ee      	asrs	r6, r5, #23
 8002f0c:	3e86      	subs	r6, #134	; 0x86
 8002f0e:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8002f12:	4628      	mov	r0, r5
 8002f14:	f7fe f82e 	bl	8000f74 <__aeabi_f2iz>
 8002f18:	f7fd fe12 	bl	8000b40 <__aeabi_i2f>
 8002f1c:	4601      	mov	r1, r0
 8002f1e:	9003      	str	r0, [sp, #12]
 8002f20:	4628      	mov	r0, r5
 8002f22:	f7fd fd57 	bl	80009d4 <__aeabi_fsub>
 8002f26:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8002f2a:	f7fd fe5d 	bl	8000be8 <__aeabi_fmul>
 8002f2e:	4680      	mov	r8, r0
 8002f30:	f7fe f820 	bl	8000f74 <__aeabi_f2iz>
 8002f34:	f7fd fe04 	bl	8000b40 <__aeabi_i2f>
 8002f38:	4601      	mov	r1, r0
 8002f3a:	9004      	str	r0, [sp, #16]
 8002f3c:	4605      	mov	r5, r0
 8002f3e:	4640      	mov	r0, r8
 8002f40:	f7fd fd48 	bl	80009d4 <__aeabi_fsub>
 8002f44:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8002f48:	f7fd fe4e 	bl	8000be8 <__aeabi_fmul>
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	9005      	str	r0, [sp, #20]
 8002f50:	f7fd ffde 	bl	8000f10 <__aeabi_fcmpeq>
 8002f54:	b1e8      	cbz	r0, 8002f92 <__ieee754_rem_pio2f+0x276>
 8002f56:	2100      	movs	r1, #0
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f7fd ffd9 	bl	8000f10 <__aeabi_fcmpeq>
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2302      	moveq	r3, #2
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <__ieee754_rem_pio2f+0x2ac>)
 8002f68:	4621      	mov	r1, r4
 8002f6a:	9201      	str	r2, [sp, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	a803      	add	r0, sp, #12
 8002f70:	9200      	str	r2, [sp, #0]
 8002f72:	4632      	mov	r2, r6
 8002f74:	f000 f8aa 	bl	80030cc <__kernel_rem_pio2f>
 8002f78:	2f00      	cmp	r7, #0
 8002f7a:	4606      	mov	r6, r0
 8002f7c:	f6bf aef8 	bge.w	8002d70 <__ieee754_rem_pio2f+0x54>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	6863      	ldr	r3, [r4, #4]
 8002f8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002f8e:	6063      	str	r3, [r4, #4]
 8002f90:	e795      	b.n	8002ebe <__ieee754_rem_pio2f+0x1a2>
 8002f92:	2303      	movs	r3, #3
 8002f94:	e7e7      	b.n	8002f66 <__ieee754_rem_pio2f+0x24a>
 8002f96:	bf00      	nop
 8002f98:	3f490fd8 	.word	0x3f490fd8
 8002f9c:	4016cbe3 	.word	0x4016cbe3
 8002fa0:	3fc90f80 	.word	0x3fc90f80
 8002fa4:	3fc90fd0 	.word	0x3fc90fd0
 8002fa8:	37354443 	.word	0x37354443
 8002fac:	37354400 	.word	0x37354400
 8002fb0:	2e85a308 	.word	0x2e85a308
 8002fb4:	43490f80 	.word	0x43490f80
 8002fb8:	3f22f984 	.word	0x3f22f984
 8002fbc:	08003870 	.word	0x08003870
 8002fc0:	2e85a300 	.word	0x2e85a300
 8002fc4:	248d3132 	.word	0x248d3132
 8002fc8:	080038f0 	.word	0x080038f0

08002fcc <__kernel_cosf>:
 8002fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8002fd4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8002fd8:	4606      	mov	r6, r0
 8002fda:	4688      	mov	r8, r1
 8002fdc:	da03      	bge.n	8002fe6 <__kernel_cosf+0x1a>
 8002fde:	f7fd ffc9 	bl	8000f74 <__aeabi_f2iz>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d05c      	beq.n	80030a0 <__kernel_cosf+0xd4>
 8002fe6:	4631      	mov	r1, r6
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f7fd fdfd 	bl	8000be8 <__aeabi_fmul>
 8002fee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	f7fd fdf8 	bl	8000be8 <__aeabi_fmul>
 8002ff8:	492b      	ldr	r1, [pc, #172]	; (80030a8 <__kernel_cosf+0xdc>)
 8002ffa:	4607      	mov	r7, r0
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f7fd fdf3 	bl	8000be8 <__aeabi_fmul>
 8003002:	492a      	ldr	r1, [pc, #168]	; (80030ac <__kernel_cosf+0xe0>)
 8003004:	f7fd fce8 	bl	80009d8 <__addsf3>
 8003008:	4629      	mov	r1, r5
 800300a:	f7fd fded 	bl	8000be8 <__aeabi_fmul>
 800300e:	4928      	ldr	r1, [pc, #160]	; (80030b0 <__kernel_cosf+0xe4>)
 8003010:	f7fd fce0 	bl	80009d4 <__aeabi_fsub>
 8003014:	4629      	mov	r1, r5
 8003016:	f7fd fde7 	bl	8000be8 <__aeabi_fmul>
 800301a:	4926      	ldr	r1, [pc, #152]	; (80030b4 <__kernel_cosf+0xe8>)
 800301c:	f7fd fcdc 	bl	80009d8 <__addsf3>
 8003020:	4629      	mov	r1, r5
 8003022:	f7fd fde1 	bl	8000be8 <__aeabi_fmul>
 8003026:	4924      	ldr	r1, [pc, #144]	; (80030b8 <__kernel_cosf+0xec>)
 8003028:	f7fd fcd4 	bl	80009d4 <__aeabi_fsub>
 800302c:	4629      	mov	r1, r5
 800302e:	f7fd fddb 	bl	8000be8 <__aeabi_fmul>
 8003032:	4922      	ldr	r1, [pc, #136]	; (80030bc <__kernel_cosf+0xf0>)
 8003034:	f7fd fcd0 	bl	80009d8 <__addsf3>
 8003038:	4629      	mov	r1, r5
 800303a:	f7fd fdd5 	bl	8000be8 <__aeabi_fmul>
 800303e:	4629      	mov	r1, r5
 8003040:	f7fd fdd2 	bl	8000be8 <__aeabi_fmul>
 8003044:	4641      	mov	r1, r8
 8003046:	4605      	mov	r5, r0
 8003048:	4630      	mov	r0, r6
 800304a:	f7fd fdcd 	bl	8000be8 <__aeabi_fmul>
 800304e:	4601      	mov	r1, r0
 8003050:	4628      	mov	r0, r5
 8003052:	f7fd fcbf 	bl	80009d4 <__aeabi_fsub>
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <__kernel_cosf+0xf4>)
 8003058:	4605      	mov	r5, r0
 800305a:	429c      	cmp	r4, r3
 800305c:	dc0a      	bgt.n	8003074 <__kernel_cosf+0xa8>
 800305e:	4601      	mov	r1, r0
 8003060:	4638      	mov	r0, r7
 8003062:	f7fd fcb7 	bl	80009d4 <__aeabi_fsub>
 8003066:	4601      	mov	r1, r0
 8003068:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800306c:	f7fd fcb2 	bl	80009d4 <__aeabi_fsub>
 8003070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <__kernel_cosf+0xf8>)
 8003076:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800307a:	429c      	cmp	r4, r3
 800307c:	bfcc      	ite	gt
 800307e:	4c12      	ldrgt	r4, [pc, #72]	; (80030c8 <__kernel_cosf+0xfc>)
 8003080:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8003084:	4621      	mov	r1, r4
 8003086:	f7fd fca5 	bl	80009d4 <__aeabi_fsub>
 800308a:	4621      	mov	r1, r4
 800308c:	4606      	mov	r6, r0
 800308e:	4638      	mov	r0, r7
 8003090:	f7fd fca0 	bl	80009d4 <__aeabi_fsub>
 8003094:	4629      	mov	r1, r5
 8003096:	f7fd fc9d 	bl	80009d4 <__aeabi_fsub>
 800309a:	4601      	mov	r1, r0
 800309c:	4630      	mov	r0, r6
 800309e:	e7e5      	b.n	800306c <__kernel_cosf+0xa0>
 80030a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80030a4:	e7e4      	b.n	8003070 <__kernel_cosf+0xa4>
 80030a6:	bf00      	nop
 80030a8:	ad47d74e 	.word	0xad47d74e
 80030ac:	310f74f6 	.word	0x310f74f6
 80030b0:	3493f27c 	.word	0x3493f27c
 80030b4:	37d00d01 	.word	0x37d00d01
 80030b8:	3ab60b61 	.word	0x3ab60b61
 80030bc:	3d2aaaab 	.word	0x3d2aaaab
 80030c0:	3e999999 	.word	0x3e999999
 80030c4:	3f480000 	.word	0x3f480000
 80030c8:	3e900000 	.word	0x3e900000

080030cc <__kernel_rem_pio2f>:
 80030cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d0:	b0d9      	sub	sp, #356	; 0x164
 80030d2:	9304      	str	r3, [sp, #16]
 80030d4:	9101      	str	r1, [sp, #4]
 80030d6:	4bc3      	ldr	r3, [pc, #780]	; (80033e4 <__kernel_rem_pio2f+0x318>)
 80030d8:	9962      	ldr	r1, [sp, #392]	; 0x188
 80030da:	1ed4      	subs	r4, r2, #3
 80030dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030e0:	2500      	movs	r5, #0
 80030e2:	9302      	str	r3, [sp, #8]
 80030e4:	9b04      	ldr	r3, [sp, #16]
 80030e6:	f04f 0a00 	mov.w	sl, #0
 80030ea:	3b01      	subs	r3, #1
 80030ec:	9303      	str	r3, [sp, #12]
 80030ee:	2308      	movs	r3, #8
 80030f0:	fb94 f4f3 	sdiv	r4, r4, r3
 80030f4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80030f8:	1c66      	adds	r6, r4, #1
 80030fa:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 80030fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003102:	eb03 0802 	add.w	r8, r3, r2
 8003106:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8003108:	1aa7      	subs	r7, r4, r2
 800310a:	9005      	str	r0, [sp, #20]
 800310c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003110:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8003114:	4545      	cmp	r5, r8
 8003116:	dd7f      	ble.n	8003218 <__kernel_rem_pio2f+0x14c>
 8003118:	f04f 0800 	mov.w	r8, #0
 800311c:	f04f 0a00 	mov.w	sl, #0
 8003120:	f06f 0b03 	mvn.w	fp, #3
 8003124:	9b04      	ldr	r3, [sp, #16]
 8003126:	aa1c      	add	r2, sp, #112	; 0x70
 8003128:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800312c:	ab44      	add	r3, sp, #272	; 0x110
 800312e:	9a02      	ldr	r2, [sp, #8]
 8003130:	4590      	cmp	r8, r2
 8003132:	f340 8097 	ble.w	8003264 <__kernel_rem_pio2f+0x198>
 8003136:	4613      	mov	r3, r2
 8003138:	aa08      	add	r2, sp, #32
 800313a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800313e:	9307      	str	r3, [sp, #28]
 8003140:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8003142:	9f02      	ldr	r7, [sp, #8]
 8003144:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003148:	9306      	str	r3, [sp, #24]
 800314a:	46ba      	mov	sl, r7
 800314c:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8003150:	ab58      	add	r3, sp, #352	; 0x160
 8003152:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8003156:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800315a:	ad07      	add	r5, sp, #28
 800315c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8003160:	f1ba 0f00 	cmp.w	sl, #0
 8003164:	f300 8081 	bgt.w	800326a <__kernel_rem_pio2f+0x19e>
 8003168:	4631      	mov	r1, r6
 800316a:	4620      	mov	r0, r4
 800316c:	f000 fb06 	bl	800377c <scalbnf>
 8003170:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8003174:	4604      	mov	r4, r0
 8003176:	f7fd fd37 	bl	8000be8 <__aeabi_fmul>
 800317a:	f000 fabf 	bl	80036fc <floorf>
 800317e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003182:	f7fd fd31 	bl	8000be8 <__aeabi_fmul>
 8003186:	4601      	mov	r1, r0
 8003188:	4620      	mov	r0, r4
 800318a:	f7fd fc23 	bl	80009d4 <__aeabi_fsub>
 800318e:	4604      	mov	r4, r0
 8003190:	f7fd fef0 	bl	8000f74 <__aeabi_f2iz>
 8003194:	4681      	mov	r9, r0
 8003196:	f7fd fcd3 	bl	8000b40 <__aeabi_i2f>
 800319a:	4601      	mov	r1, r0
 800319c:	4620      	mov	r0, r4
 800319e:	f7fd fc19 	bl	80009d4 <__aeabi_fsub>
 80031a2:	2e00      	cmp	r6, #0
 80031a4:	4604      	mov	r4, r0
 80031a6:	dd7e      	ble.n	80032a6 <__kernel_rem_pio2f+0x1da>
 80031a8:	1e7b      	subs	r3, r7, #1
 80031aa:	aa08      	add	r2, sp, #32
 80031ac:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80031b0:	f1c6 0208 	rsb	r2, r6, #8
 80031b4:	fa45 f002 	asr.w	r0, r5, r2
 80031b8:	4481      	add	r9, r0
 80031ba:	4090      	lsls	r0, r2
 80031bc:	1a2d      	subs	r5, r5, r0
 80031be:	aa08      	add	r2, sp, #32
 80031c0:	f1c6 0007 	rsb	r0, r6, #7
 80031c4:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 80031c8:	4105      	asrs	r5, r0
 80031ca:	2d00      	cmp	r5, #0
 80031cc:	dd79      	ble.n	80032c2 <__kernel_rem_pio2f+0x1f6>
 80031ce:	2200      	movs	r2, #0
 80031d0:	4690      	mov	r8, r2
 80031d2:	f109 0901 	add.w	r9, r9, #1
 80031d6:	4297      	cmp	r7, r2
 80031d8:	f300 80ae 	bgt.w	8003338 <__kernel_rem_pio2f+0x26c>
 80031dc:	2e00      	cmp	r6, #0
 80031de:	dd05      	ble.n	80031ec <__kernel_rem_pio2f+0x120>
 80031e0:	2e01      	cmp	r6, #1
 80031e2:	f000 80c0 	beq.w	8003366 <__kernel_rem_pio2f+0x29a>
 80031e6:	2e02      	cmp	r6, #2
 80031e8:	f000 80c7 	beq.w	800337a <__kernel_rem_pio2f+0x2ae>
 80031ec:	2d02      	cmp	r5, #2
 80031ee:	d168      	bne.n	80032c2 <__kernel_rem_pio2f+0x1f6>
 80031f0:	4621      	mov	r1, r4
 80031f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80031f6:	f7fd fbed 	bl	80009d4 <__aeabi_fsub>
 80031fa:	4604      	mov	r4, r0
 80031fc:	f1b8 0f00 	cmp.w	r8, #0
 8003200:	d05f      	beq.n	80032c2 <__kernel_rem_pio2f+0x1f6>
 8003202:	4631      	mov	r1, r6
 8003204:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003208:	f000 fab8 	bl	800377c <scalbnf>
 800320c:	4601      	mov	r1, r0
 800320e:	4620      	mov	r0, r4
 8003210:	f7fd fbe0 	bl	80009d4 <__aeabi_fsub>
 8003214:	4604      	mov	r4, r0
 8003216:	e054      	b.n	80032c2 <__kernel_rem_pio2f+0x1f6>
 8003218:	42ef      	cmn	r7, r5
 800321a:	d407      	bmi.n	800322c <__kernel_rem_pio2f+0x160>
 800321c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003220:	f7fd fc8e 	bl	8000b40 <__aeabi_i2f>
 8003224:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8003228:	3501      	adds	r5, #1
 800322a:	e773      	b.n	8003114 <__kernel_rem_pio2f+0x48>
 800322c:	4650      	mov	r0, sl
 800322e:	e7f9      	b.n	8003224 <__kernel_rem_pio2f+0x158>
 8003230:	fb0b 5207 	mla	r2, fp, r7, r5
 8003234:	9306      	str	r3, [sp, #24]
 8003236:	9b05      	ldr	r3, [sp, #20]
 8003238:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800323c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8003240:	f7fd fcd2 	bl	8000be8 <__aeabi_fmul>
 8003244:	4601      	mov	r1, r0
 8003246:	4648      	mov	r0, r9
 8003248:	f7fd fbc6 	bl	80009d8 <__addsf3>
 800324c:	4681      	mov	r9, r0
 800324e:	9b06      	ldr	r3, [sp, #24]
 8003250:	3701      	adds	r7, #1
 8003252:	9a03      	ldr	r2, [sp, #12]
 8003254:	4297      	cmp	r7, r2
 8003256:	ddeb      	ble.n	8003230 <__kernel_rem_pio2f+0x164>
 8003258:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800325c:	3504      	adds	r5, #4
 800325e:	f108 0801 	add.w	r8, r8, #1
 8003262:	e764      	b.n	800312e <__kernel_rem_pio2f+0x62>
 8003264:	46d1      	mov	r9, sl
 8003266:	2700      	movs	r7, #0
 8003268:	e7f3      	b.n	8003252 <__kernel_rem_pio2f+0x186>
 800326a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800326e:	4620      	mov	r0, r4
 8003270:	f7fd fcba 	bl	8000be8 <__aeabi_fmul>
 8003274:	f7fd fe7e 	bl	8000f74 <__aeabi_f2iz>
 8003278:	f7fd fc62 	bl	8000b40 <__aeabi_i2f>
 800327c:	4641      	mov	r1, r8
 800327e:	4683      	mov	fp, r0
 8003280:	f7fd fcb2 	bl	8000be8 <__aeabi_fmul>
 8003284:	4601      	mov	r1, r0
 8003286:	4620      	mov	r0, r4
 8003288:	f7fd fba4 	bl	80009d4 <__aeabi_fsub>
 800328c:	f7fd fe72 	bl	8000f74 <__aeabi_f2iz>
 8003290:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003294:	f845 0f04 	str.w	r0, [r5, #4]!
 8003298:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800329c:	4658      	mov	r0, fp
 800329e:	f7fd fb9b 	bl	80009d8 <__addsf3>
 80032a2:	4604      	mov	r4, r0
 80032a4:	e75c      	b.n	8003160 <__kernel_rem_pio2f+0x94>
 80032a6:	d105      	bne.n	80032b4 <__kernel_rem_pio2f+0x1e8>
 80032a8:	1e7b      	subs	r3, r7, #1
 80032aa:	aa08      	add	r2, sp, #32
 80032ac:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80032b0:	122d      	asrs	r5, r5, #8
 80032b2:	e78a      	b.n	80031ca <__kernel_rem_pio2f+0xfe>
 80032b4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80032b8:	f7fd fe48 	bl	8000f4c <__aeabi_fcmpge>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d139      	bne.n	8003334 <__kernel_rem_pio2f+0x268>
 80032c0:	4605      	mov	r5, r0
 80032c2:	2100      	movs	r1, #0
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7fd fe23 	bl	8000f10 <__aeabi_fcmpeq>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	f000 80a0 	beq.w	8003410 <__kernel_rem_pio2f+0x344>
 80032d0:	1e7c      	subs	r4, r7, #1
 80032d2:	4623      	mov	r3, r4
 80032d4:	2200      	movs	r2, #0
 80032d6:	9902      	ldr	r1, [sp, #8]
 80032d8:	428b      	cmp	r3, r1
 80032da:	da55      	bge.n	8003388 <__kernel_rem_pio2f+0x2bc>
 80032dc:	2a00      	cmp	r2, #0
 80032de:	d07e      	beq.n	80033de <__kernel_rem_pio2f+0x312>
 80032e0:	ab08      	add	r3, sp, #32
 80032e2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80032e6:	3e08      	subs	r6, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 808f 	beq.w	800340c <__kernel_rem_pio2f+0x340>
 80032ee:	4631      	mov	r1, r6
 80032f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80032f4:	f000 fa42 	bl	800377c <scalbnf>
 80032f8:	46a0      	mov	r8, r4
 80032fa:	4682      	mov	sl, r0
 80032fc:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8003300:	af44      	add	r7, sp, #272	; 0x110
 8003302:	f1b8 0f00 	cmp.w	r8, #0
 8003306:	f280 80b5 	bge.w	8003474 <__kernel_rem_pio2f+0x3a8>
 800330a:	f04f 0a00 	mov.w	sl, #0
 800330e:	2300      	movs	r3, #0
 8003310:	00a6      	lsls	r6, r4, #2
 8003312:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <__kernel_rem_pio2f+0x31c>)
 8003314:	4437      	add	r7, r6
 8003316:	eba4 010a 	sub.w	r1, r4, sl
 800331a:	2900      	cmp	r1, #0
 800331c:	f280 80db 	bge.w	80034d6 <__kernel_rem_pio2f+0x40a>
 8003320:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8003322:	2b03      	cmp	r3, #3
 8003324:	f200 80ff 	bhi.w	8003526 <__kernel_rem_pio2f+0x45a>
 8003328:	e8df f013 	tbh	[pc, r3, lsl #1]
 800332c:	01200102 	.word	0x01200102
 8003330:	00d90120 	.word	0x00d90120
 8003334:	2502      	movs	r5, #2
 8003336:	e74a      	b.n	80031ce <__kernel_rem_pio2f+0x102>
 8003338:	ab08      	add	r3, sp, #32
 800333a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800333e:	f1b8 0f00 	cmp.w	r8, #0
 8003342:	d109      	bne.n	8003358 <__kernel_rem_pio2f+0x28c>
 8003344:	b12b      	cbz	r3, 8003352 <__kernel_rem_pio2f+0x286>
 8003346:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800334a:	a908      	add	r1, sp, #32
 800334c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003350:	2301      	movs	r3, #1
 8003352:	3201      	adds	r2, #1
 8003354:	4698      	mov	r8, r3
 8003356:	e73e      	b.n	80031d6 <__kernel_rem_pio2f+0x10a>
 8003358:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800335c:	a908      	add	r1, sp, #32
 800335e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003362:	4643      	mov	r3, r8
 8003364:	e7f5      	b.n	8003352 <__kernel_rem_pio2f+0x286>
 8003366:	1e7a      	subs	r2, r7, #1
 8003368:	ab08      	add	r3, sp, #32
 800336a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003372:	a908      	add	r1, sp, #32
 8003374:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003378:	e738      	b.n	80031ec <__kernel_rem_pio2f+0x120>
 800337a:	1e7a      	subs	r2, r7, #1
 800337c:	ab08      	add	r3, sp, #32
 800337e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003386:	e7f4      	b.n	8003372 <__kernel_rem_pio2f+0x2a6>
 8003388:	a908      	add	r1, sp, #32
 800338a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800338e:	3b01      	subs	r3, #1
 8003390:	430a      	orrs	r2, r1
 8003392:	e7a0      	b.n	80032d6 <__kernel_rem_pio2f+0x20a>
 8003394:	3301      	adds	r3, #1
 8003396:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800339a:	2900      	cmp	r1, #0
 800339c:	d0fa      	beq.n	8003394 <__kernel_rem_pio2f+0x2c8>
 800339e:	f06f 0803 	mvn.w	r8, #3
 80033a2:	9a04      	ldr	r2, [sp, #16]
 80033a4:	1c7d      	adds	r5, r7, #1
 80033a6:	18bc      	adds	r4, r7, r2
 80033a8:	aa1c      	add	r2, sp, #112	; 0x70
 80033aa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80033ae:	441f      	add	r7, r3
 80033b0:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80033b4:	42af      	cmp	r7, r5
 80033b6:	f6ff aec8 	blt.w	800314a <__kernel_rem_pio2f+0x7e>
 80033ba:	9b06      	ldr	r3, [sp, #24]
 80033bc:	f04f 0a00 	mov.w	sl, #0
 80033c0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80033c4:	f7fd fbbc 	bl	8000b40 <__aeabi_i2f>
 80033c8:	f04f 0b00 	mov.w	fp, #0
 80033cc:	6020      	str	r0, [r4, #0]
 80033ce:	9b03      	ldr	r3, [sp, #12]
 80033d0:	459a      	cmp	sl, r3
 80033d2:	dd0b      	ble.n	80033ec <__kernel_rem_pio2f+0x320>
 80033d4:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 80033d8:	3404      	adds	r4, #4
 80033da:	3501      	adds	r5, #1
 80033dc:	e7ea      	b.n	80033b4 <__kernel_rem_pio2f+0x2e8>
 80033de:	9a07      	ldr	r2, [sp, #28]
 80033e0:	2301      	movs	r3, #1
 80033e2:	e7d8      	b.n	8003396 <__kernel_rem_pio2f+0x2ca>
 80033e4:	08003c34 	.word	0x08003c34
 80033e8:	08003c08 	.word	0x08003c08
 80033ec:	fb08 f30a 	mul.w	r3, r8, sl
 80033f0:	9a05      	ldr	r2, [sp, #20]
 80033f2:	58e0      	ldr	r0, [r4, r3]
 80033f4:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 80033f8:	f7fd fbf6 	bl	8000be8 <__aeabi_fmul>
 80033fc:	4601      	mov	r1, r0
 80033fe:	4658      	mov	r0, fp
 8003400:	f7fd faea 	bl	80009d8 <__addsf3>
 8003404:	f10a 0a01 	add.w	sl, sl, #1
 8003408:	4683      	mov	fp, r0
 800340a:	e7e0      	b.n	80033ce <__kernel_rem_pio2f+0x302>
 800340c:	3c01      	subs	r4, #1
 800340e:	e767      	b.n	80032e0 <__kernel_rem_pio2f+0x214>
 8003410:	4271      	negs	r1, r6
 8003412:	4620      	mov	r0, r4
 8003414:	f000 f9b2 	bl	800377c <scalbnf>
 8003418:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800341c:	4604      	mov	r4, r0
 800341e:	f7fd fd95 	bl	8000f4c <__aeabi_fcmpge>
 8003422:	b1f8      	cbz	r0, 8003464 <__kernel_rem_pio2f+0x398>
 8003424:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8003428:	4620      	mov	r0, r4
 800342a:	f7fd fbdd 	bl	8000be8 <__aeabi_fmul>
 800342e:	f7fd fda1 	bl	8000f74 <__aeabi_f2iz>
 8003432:	f7fd fb85 	bl	8000b40 <__aeabi_i2f>
 8003436:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800343a:	4680      	mov	r8, r0
 800343c:	f7fd fbd4 	bl	8000be8 <__aeabi_fmul>
 8003440:	4601      	mov	r1, r0
 8003442:	4620      	mov	r0, r4
 8003444:	f7fd fac6 	bl	80009d4 <__aeabi_fsub>
 8003448:	f7fd fd94 	bl	8000f74 <__aeabi_f2iz>
 800344c:	ab08      	add	r3, sp, #32
 800344e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003452:	4640      	mov	r0, r8
 8003454:	f7fd fd8e 	bl	8000f74 <__aeabi_f2iz>
 8003458:	1c7c      	adds	r4, r7, #1
 800345a:	ab08      	add	r3, sp, #32
 800345c:	3608      	adds	r6, #8
 800345e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003462:	e744      	b.n	80032ee <__kernel_rem_pio2f+0x222>
 8003464:	4620      	mov	r0, r4
 8003466:	f7fd fd85 	bl	8000f74 <__aeabi_f2iz>
 800346a:	ab08      	add	r3, sp, #32
 800346c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003470:	463c      	mov	r4, r7
 8003472:	e73c      	b.n	80032ee <__kernel_rem_pio2f+0x222>
 8003474:	ab08      	add	r3, sp, #32
 8003476:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800347a:	f7fd fb61 	bl	8000b40 <__aeabi_i2f>
 800347e:	4651      	mov	r1, sl
 8003480:	f7fd fbb2 	bl	8000be8 <__aeabi_fmul>
 8003484:	4631      	mov	r1, r6
 8003486:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800348a:	4650      	mov	r0, sl
 800348c:	f7fd fbac 	bl	8000be8 <__aeabi_fmul>
 8003490:	f108 38ff 	add.w	r8, r8, #4294967295
 8003494:	4682      	mov	sl, r0
 8003496:	e734      	b.n	8003302 <__kernel_rem_pio2f+0x236>
 8003498:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800349c:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80034a0:	9304      	str	r3, [sp, #16]
 80034a2:	9203      	str	r2, [sp, #12]
 80034a4:	f7fd fba0 	bl	8000be8 <__aeabi_fmul>
 80034a8:	4601      	mov	r1, r0
 80034aa:	4658      	mov	r0, fp
 80034ac:	f7fd fa94 	bl	80009d8 <__addsf3>
 80034b0:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80034b4:	4683      	mov	fp, r0
 80034b6:	f108 0801 	add.w	r8, r8, #1
 80034ba:	9902      	ldr	r1, [sp, #8]
 80034bc:	4588      	cmp	r8, r1
 80034be:	dc01      	bgt.n	80034c4 <__kernel_rem_pio2f+0x3f8>
 80034c0:	45c2      	cmp	sl, r8
 80034c2:	dae9      	bge.n	8003498 <__kernel_rem_pio2f+0x3cc>
 80034c4:	a958      	add	r1, sp, #352	; 0x160
 80034c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80034ca:	f841 bca0 	str.w	fp, [r1, #-160]
 80034ce:	f10a 0a01 	add.w	sl, sl, #1
 80034d2:	3f04      	subs	r7, #4
 80034d4:	e71f      	b.n	8003316 <__kernel_rem_pio2f+0x24a>
 80034d6:	469b      	mov	fp, r3
 80034d8:	f04f 0800 	mov.w	r8, #0
 80034dc:	e7ed      	b.n	80034ba <__kernel_rem_pio2f+0x3ee>
 80034de:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 80034e2:	4456      	add	r6, sl
 80034e4:	4637      	mov	r7, r6
 80034e6:	46a0      	mov	r8, r4
 80034e8:	f1b8 0f00 	cmp.w	r8, #0
 80034ec:	dc4a      	bgt.n	8003584 <__kernel_rem_pio2f+0x4b8>
 80034ee:	4627      	mov	r7, r4
 80034f0:	2f01      	cmp	r7, #1
 80034f2:	dc60      	bgt.n	80035b6 <__kernel_rem_pio2f+0x4ea>
 80034f4:	2000      	movs	r0, #0
 80034f6:	2c01      	cmp	r4, #1
 80034f8:	dc74      	bgt.n	80035e4 <__kernel_rem_pio2f+0x518>
 80034fa:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80034fc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80034fe:	2d00      	cmp	r5, #0
 8003500:	d176      	bne.n	80035f0 <__kernel_rem_pio2f+0x524>
 8003502:	9901      	ldr	r1, [sp, #4]
 8003504:	600a      	str	r2, [r1, #0]
 8003506:	460a      	mov	r2, r1
 8003508:	604b      	str	r3, [r1, #4]
 800350a:	6090      	str	r0, [r2, #8]
 800350c:	e00b      	b.n	8003526 <__kernel_rem_pio2f+0x45a>
 800350e:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8003512:	f7fd fa61 	bl	80009d8 <__addsf3>
 8003516:	3c01      	subs	r4, #1
 8003518:	2c00      	cmp	r4, #0
 800351a:	daf8      	bge.n	800350e <__kernel_rem_pio2f+0x442>
 800351c:	b10d      	cbz	r5, 8003522 <__kernel_rem_pio2f+0x456>
 800351e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003522:	9b01      	ldr	r3, [sp, #4]
 8003524:	6018      	str	r0, [r3, #0]
 8003526:	f009 0007 	and.w	r0, r9, #7
 800352a:	b059      	add	sp, #356	; 0x164
 800352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003530:	2000      	movs	r0, #0
 8003532:	ae30      	add	r6, sp, #192	; 0xc0
 8003534:	e7f0      	b.n	8003518 <__kernel_rem_pio2f+0x44c>
 8003536:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800353a:	f7fd fa4d 	bl	80009d8 <__addsf3>
 800353e:	3e01      	subs	r6, #1
 8003540:	2e00      	cmp	r6, #0
 8003542:	daf8      	bge.n	8003536 <__kernel_rem_pio2f+0x46a>
 8003544:	b1b5      	cbz	r5, 8003574 <__kernel_rem_pio2f+0x4a8>
 8003546:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800354a:	9a01      	ldr	r2, [sp, #4]
 800354c:	af58      	add	r7, sp, #352	; 0x160
 800354e:	4601      	mov	r1, r0
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8003556:	f7fd fa3d 	bl	80009d4 <__aeabi_fsub>
 800355a:	2601      	movs	r6, #1
 800355c:	42b4      	cmp	r4, r6
 800355e:	da0b      	bge.n	8003578 <__kernel_rem_pio2f+0x4ac>
 8003560:	b10d      	cbz	r5, 8003566 <__kernel_rem_pio2f+0x49a>
 8003562:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	6058      	str	r0, [r3, #4]
 800356a:	e7dc      	b.n	8003526 <__kernel_rem_pio2f+0x45a>
 800356c:	4626      	mov	r6, r4
 800356e:	2000      	movs	r0, #0
 8003570:	af30      	add	r7, sp, #192	; 0xc0
 8003572:	e7e5      	b.n	8003540 <__kernel_rem_pio2f+0x474>
 8003574:	4603      	mov	r3, r0
 8003576:	e7e8      	b.n	800354a <__kernel_rem_pio2f+0x47e>
 8003578:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800357c:	f7fd fa2c 	bl	80009d8 <__addsf3>
 8003580:	3601      	adds	r6, #1
 8003582:	e7eb      	b.n	800355c <__kernel_rem_pio2f+0x490>
 8003584:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8003588:	f108 38ff 	add.w	r8, r8, #4294967295
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	9202      	str	r2, [sp, #8]
 8003596:	f7fd fa1f 	bl	80009d8 <__addsf3>
 800359a:	9a02      	ldr	r2, [sp, #8]
 800359c:	4601      	mov	r1, r0
 800359e:	4683      	mov	fp, r0
 80035a0:	4610      	mov	r0, r2
 80035a2:	f7fd fa17 	bl	80009d4 <__aeabi_fsub>
 80035a6:	9b03      	ldr	r3, [sp, #12]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f7fd fa15 	bl	80009d8 <__addsf3>
 80035ae:	f8c7 b000 	str.w	fp, [r7]
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	e798      	b.n	80034e8 <__kernel_rem_pio2f+0x41c>
 80035b6:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 80035ba:	3f01      	subs	r7, #1
 80035bc:	f8d6 b004 	ldr.w	fp, [r6, #4]
 80035c0:	4618      	mov	r0, r3
 80035c2:	4659      	mov	r1, fp
 80035c4:	9302      	str	r3, [sp, #8]
 80035c6:	f7fd fa07 	bl	80009d8 <__addsf3>
 80035ca:	9b02      	ldr	r3, [sp, #8]
 80035cc:	4601      	mov	r1, r0
 80035ce:	4680      	mov	r8, r0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd f9ff 	bl	80009d4 <__aeabi_fsub>
 80035d6:	4659      	mov	r1, fp
 80035d8:	f7fd f9fe 	bl	80009d8 <__addsf3>
 80035dc:	f8c6 8000 	str.w	r8, [r6]
 80035e0:	6070      	str	r0, [r6, #4]
 80035e2:	e785      	b.n	80034f0 <__kernel_rem_pio2f+0x424>
 80035e4:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 80035e8:	f7fd f9f6 	bl	80009d8 <__addsf3>
 80035ec:	3c01      	subs	r4, #1
 80035ee:	e782      	b.n	80034f6 <__kernel_rem_pio2f+0x42a>
 80035f0:	9901      	ldr	r1, [sp, #4]
 80035f2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80035f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80035fa:	600a      	str	r2, [r1, #0]
 80035fc:	604b      	str	r3, [r1, #4]
 80035fe:	460a      	mov	r2, r1
 8003600:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003604:	e781      	b.n	800350a <__kernel_rem_pio2f+0x43e>
 8003606:	bf00      	nop

08003608 <__kernel_sinf>:
 8003608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800360c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003610:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003614:	4604      	mov	r4, r0
 8003616:	460f      	mov	r7, r1
 8003618:	4691      	mov	r9, r2
 800361a:	da03      	bge.n	8003624 <__kernel_sinf+0x1c>
 800361c:	f7fd fcaa 	bl	8000f74 <__aeabi_f2iz>
 8003620:	2800      	cmp	r0, #0
 8003622:	d035      	beq.n	8003690 <__kernel_sinf+0x88>
 8003624:	4621      	mov	r1, r4
 8003626:	4620      	mov	r0, r4
 8003628:	f7fd fade 	bl	8000be8 <__aeabi_fmul>
 800362c:	4605      	mov	r5, r0
 800362e:	4601      	mov	r1, r0
 8003630:	4620      	mov	r0, r4
 8003632:	f7fd fad9 	bl	8000be8 <__aeabi_fmul>
 8003636:	4929      	ldr	r1, [pc, #164]	; (80036dc <__kernel_sinf+0xd4>)
 8003638:	4606      	mov	r6, r0
 800363a:	4628      	mov	r0, r5
 800363c:	f7fd fad4 	bl	8000be8 <__aeabi_fmul>
 8003640:	4927      	ldr	r1, [pc, #156]	; (80036e0 <__kernel_sinf+0xd8>)
 8003642:	f7fd f9c7 	bl	80009d4 <__aeabi_fsub>
 8003646:	4629      	mov	r1, r5
 8003648:	f7fd face 	bl	8000be8 <__aeabi_fmul>
 800364c:	4925      	ldr	r1, [pc, #148]	; (80036e4 <__kernel_sinf+0xdc>)
 800364e:	f7fd f9c3 	bl	80009d8 <__addsf3>
 8003652:	4629      	mov	r1, r5
 8003654:	f7fd fac8 	bl	8000be8 <__aeabi_fmul>
 8003658:	4923      	ldr	r1, [pc, #140]	; (80036e8 <__kernel_sinf+0xe0>)
 800365a:	f7fd f9bb 	bl	80009d4 <__aeabi_fsub>
 800365e:	4629      	mov	r1, r5
 8003660:	f7fd fac2 	bl	8000be8 <__aeabi_fmul>
 8003664:	4921      	ldr	r1, [pc, #132]	; (80036ec <__kernel_sinf+0xe4>)
 8003666:	f7fd f9b7 	bl	80009d8 <__addsf3>
 800366a:	4680      	mov	r8, r0
 800366c:	f1b9 0f00 	cmp.w	r9, #0
 8003670:	d111      	bne.n	8003696 <__kernel_sinf+0x8e>
 8003672:	4601      	mov	r1, r0
 8003674:	4628      	mov	r0, r5
 8003676:	f7fd fab7 	bl	8000be8 <__aeabi_fmul>
 800367a:	491d      	ldr	r1, [pc, #116]	; (80036f0 <__kernel_sinf+0xe8>)
 800367c:	f7fd f9aa 	bl	80009d4 <__aeabi_fsub>
 8003680:	4631      	mov	r1, r6
 8003682:	f7fd fab1 	bl	8000be8 <__aeabi_fmul>
 8003686:	4601      	mov	r1, r0
 8003688:	4620      	mov	r0, r4
 800368a:	f7fd f9a5 	bl	80009d8 <__addsf3>
 800368e:	4604      	mov	r4, r0
 8003690:	4620      	mov	r0, r4
 8003692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003696:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800369a:	4638      	mov	r0, r7
 800369c:	f7fd faa4 	bl	8000be8 <__aeabi_fmul>
 80036a0:	4641      	mov	r1, r8
 80036a2:	4681      	mov	r9, r0
 80036a4:	4630      	mov	r0, r6
 80036a6:	f7fd fa9f 	bl	8000be8 <__aeabi_fmul>
 80036aa:	4601      	mov	r1, r0
 80036ac:	4648      	mov	r0, r9
 80036ae:	f7fd f991 	bl	80009d4 <__aeabi_fsub>
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7fd fa98 	bl	8000be8 <__aeabi_fmul>
 80036b8:	4639      	mov	r1, r7
 80036ba:	f7fd f98b 	bl	80009d4 <__aeabi_fsub>
 80036be:	490c      	ldr	r1, [pc, #48]	; (80036f0 <__kernel_sinf+0xe8>)
 80036c0:	4605      	mov	r5, r0
 80036c2:	4630      	mov	r0, r6
 80036c4:	f7fd fa90 	bl	8000be8 <__aeabi_fmul>
 80036c8:	4601      	mov	r1, r0
 80036ca:	4628      	mov	r0, r5
 80036cc:	f7fd f984 	bl	80009d8 <__addsf3>
 80036d0:	4601      	mov	r1, r0
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7fd f97e 	bl	80009d4 <__aeabi_fsub>
 80036d8:	e7d9      	b.n	800368e <__kernel_sinf+0x86>
 80036da:	bf00      	nop
 80036dc:	2f2ec9d3 	.word	0x2f2ec9d3
 80036e0:	32d72f34 	.word	0x32d72f34
 80036e4:	3638ef1b 	.word	0x3638ef1b
 80036e8:	39500d01 	.word	0x39500d01
 80036ec:	3c088889 	.word	0x3c088889
 80036f0:	3e2aaaab 	.word	0x3e2aaaab

080036f4 <fabsf>:
 80036f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80036f8:	4770      	bx	lr
	...

080036fc <floorf>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003702:	0df5      	lsrs	r5, r6, #23
 8003704:	3d7f      	subs	r5, #127	; 0x7f
 8003706:	2d16      	cmp	r5, #22
 8003708:	4601      	mov	r1, r0
 800370a:	4604      	mov	r4, r0
 800370c:	dc26      	bgt.n	800375c <floorf+0x60>
 800370e:	2d00      	cmp	r5, #0
 8003710:	da0e      	bge.n	8003730 <floorf+0x34>
 8003712:	4917      	ldr	r1, [pc, #92]	; (8003770 <floorf+0x74>)
 8003714:	f7fd f960 	bl	80009d8 <__addsf3>
 8003718:	2100      	movs	r1, #0
 800371a:	f7fd fc21 	bl	8000f60 <__aeabi_fcmpgt>
 800371e:	b128      	cbz	r0, 800372c <floorf+0x30>
 8003720:	2c00      	cmp	r4, #0
 8003722:	da23      	bge.n	800376c <floorf+0x70>
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <floorf+0x78>)
 8003726:	2e00      	cmp	r6, #0
 8003728:	bf18      	it	ne
 800372a:	461c      	movne	r4, r3
 800372c:	4621      	mov	r1, r4
 800372e:	e01b      	b.n	8003768 <floorf+0x6c>
 8003730:	4e11      	ldr	r6, [pc, #68]	; (8003778 <floorf+0x7c>)
 8003732:	412e      	asrs	r6, r5
 8003734:	4230      	tst	r0, r6
 8003736:	d017      	beq.n	8003768 <floorf+0x6c>
 8003738:	490d      	ldr	r1, [pc, #52]	; (8003770 <floorf+0x74>)
 800373a:	f7fd f94d 	bl	80009d8 <__addsf3>
 800373e:	2100      	movs	r1, #0
 8003740:	f7fd fc0e 	bl	8000f60 <__aeabi_fcmpgt>
 8003744:	2800      	cmp	r0, #0
 8003746:	d0f1      	beq.n	800372c <floorf+0x30>
 8003748:	2c00      	cmp	r4, #0
 800374a:	bfbe      	ittt	lt
 800374c:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8003750:	fa43 f505 	asrlt.w	r5, r3, r5
 8003754:	1964      	addlt	r4, r4, r5
 8003756:	ea24 0406 	bic.w	r4, r4, r6
 800375a:	e7e7      	b.n	800372c <floorf+0x30>
 800375c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003760:	d302      	bcc.n	8003768 <floorf+0x6c>
 8003762:	f7fd f939 	bl	80009d8 <__addsf3>
 8003766:	4601      	mov	r1, r0
 8003768:	4608      	mov	r0, r1
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	2400      	movs	r4, #0
 800376e:	e7dd      	b.n	800372c <floorf+0x30>
 8003770:	7149f2ca 	.word	0x7149f2ca
 8003774:	bf800000 	.word	0xbf800000
 8003778:	007fffff 	.word	0x007fffff

0800377c <scalbnf>:
 800377c:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8003780:	b510      	push	{r4, lr}
 8003782:	4602      	mov	r2, r0
 8003784:	460c      	mov	r4, r1
 8003786:	4601      	mov	r1, r0
 8003788:	d027      	beq.n	80037da <scalbnf+0x5e>
 800378a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800378e:	d303      	bcc.n	8003798 <scalbnf+0x1c>
 8003790:	f7fd f922 	bl	80009d8 <__addsf3>
 8003794:	4602      	mov	r2, r0
 8003796:	e020      	b.n	80037da <scalbnf+0x5e>
 8003798:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800379c:	d215      	bcs.n	80037ca <scalbnf+0x4e>
 800379e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80037a2:	f7fd fa21 	bl	8000be8 <__aeabi_fmul>
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <scalbnf+0x8c>)
 80037a8:	4602      	mov	r2, r0
 80037aa:	429c      	cmp	r4, r3
 80037ac:	db22      	blt.n	80037f4 <scalbnf+0x78>
 80037ae:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80037b2:	3b19      	subs	r3, #25
 80037b4:	4423      	add	r3, r4
 80037b6:	2bfe      	cmp	r3, #254	; 0xfe
 80037b8:	dd09      	ble.n	80037ce <scalbnf+0x52>
 80037ba:	4611      	mov	r1, r2
 80037bc:	4813      	ldr	r0, [pc, #76]	; (800380c <scalbnf+0x90>)
 80037be:	f000 f829 	bl	8003814 <copysignf>
 80037c2:	4912      	ldr	r1, [pc, #72]	; (800380c <scalbnf+0x90>)
 80037c4:	f7fd fa10 	bl	8000be8 <__aeabi_fmul>
 80037c8:	e7e4      	b.n	8003794 <scalbnf+0x18>
 80037ca:	0ddb      	lsrs	r3, r3, #23
 80037cc:	e7f2      	b.n	80037b4 <scalbnf+0x38>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dd05      	ble.n	80037de <scalbnf+0x62>
 80037d2:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80037d6:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 80037da:	4610      	mov	r0, r2
 80037dc:	bd10      	pop	{r4, pc}
 80037de:	f113 0f16 	cmn.w	r3, #22
 80037e2:	da09      	bge.n	80037f8 <scalbnf+0x7c>
 80037e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80037e8:	429c      	cmp	r4, r3
 80037ea:	4611      	mov	r1, r2
 80037ec:	dce6      	bgt.n	80037bc <scalbnf+0x40>
 80037ee:	4808      	ldr	r0, [pc, #32]	; (8003810 <scalbnf+0x94>)
 80037f0:	f000 f810 	bl	8003814 <copysignf>
 80037f4:	4906      	ldr	r1, [pc, #24]	; (8003810 <scalbnf+0x94>)
 80037f6:	e7e5      	b.n	80037c4 <scalbnf+0x48>
 80037f8:	3319      	adds	r3, #25
 80037fa:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80037fe:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8003802:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8003806:	e7dd      	b.n	80037c4 <scalbnf+0x48>
 8003808:	ffff3cb0 	.word	0xffff3cb0
 800380c:	7149f2ca 	.word	0x7149f2ca
 8003810:	0da24260 	.word	0x0da24260

08003814 <copysignf>:
 8003814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003818:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800381c:	4308      	orrs	r0, r1
 800381e:	4770      	bx	lr

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
