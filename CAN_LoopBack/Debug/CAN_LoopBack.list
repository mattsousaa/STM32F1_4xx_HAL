
CAN_LoopBack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e00  08002e00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e08  08002e08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e0c  08002e0c  00012e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002e1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002e1c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008828  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000150b  00000000  00000000  00028864  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000768  00000000  00000000  00029d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  0002a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002137f  00000000  00000000  0002ab88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006814  00000000  00000000  0004bf07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9d8c  00000000  00000000  0005271b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c4a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc8  00000000  00000000  0011c524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002d9c 	.word	0x08002d9c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002d9c 	.word	0x08002d9c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
void CAN_Filter_Config(void);

UART_HandleTypeDef huart2;
CAN_HandleTypeDef hcan1;

int main(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

	HAL_Init();
 8000518:	f000 fac2 	bl	8000aa0 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 800051c:	2032      	movs	r0, #50	; 0x32
 800051e:	f000 f817 	bl	8000550 <SystemClock_Config_HSE>

	GPIO_Init();
 8000522:	f000 f8ab 	bl	800067c <GPIO_Init>

	UART2_Init();
 8000526:	f000 f97d 	bl	8000824 <UART2_Init>

	CAN1_Init();
 800052a:	f000 f9a5 	bl	8000878 <CAN1_Init>

	/* In order to config the CAN filter configuration, you need to do the initialization of this function before CAN Start;
	 * That's why because CAN Start actually leaves the initialization mode.  */
	CAN_Filter_Config();
 800052e:	f000 f953 	bl	80007d8 <CAN_Filter_Config>

	/* In order to do the normal operation of Tx and Rx, CAN has to be in normal mode;
	 * This is according to the controller state machine in the reference manual;
	 * This function moves the CAN controller from initialization mode to the normal mode. */
	if(HAL_CAN_Start(&hcan1) != HAL_OK){
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0x38>)
 8000534:	f000 fd02 	bl	8000f3c <HAL_CAN_Start>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <main+0x2e>
		Error_handler();
 800053e:	f000 f997 	bl	8000870 <Error_handler>
	}

	CAN1_Tx();
 8000542:	f000 f8bf 	bl	80006c4 <CAN1_Tx>

	CAN1_Rx();
 8000546:	f000 f90d 	bl	8000764 <CAN1_Rx>

	while(1);
 800054a:	e7fe      	b.n	800054a <main+0x36>
 800054c:	20000068 	.word	0x20000068

08000550 <SystemClock_Config_HSE>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq){
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	; 0x58
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 800055a:	2300      	movs	r3, #0
 800055c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000560:	2301      	movs	r3, #1
 8000562:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	623b      	str	r3, [r7, #32]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq){
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b54      	cmp	r3, #84	; 0x54
 8000578:	d01d      	beq.n	80005b6 <SystemClock_Config_HSE+0x66>
 800057a:	2b78      	cmp	r3, #120	; 0x78
 800057c:	d034      	beq.n	80005e8 <SystemClock_Config_HSE+0x98>
 800057e:	2b32      	cmp	r3, #50	; 0x32
 8000580:	d000      	beq.n	8000584 <SystemClock_Config_HSE+0x34>
          flash_latency = 3;
          break;

	  default:

		  return ;
 8000582:	e076      	b.n	8000672 <SystemClock_Config_HSE+0x122>
		  Osc_Init.PLL.PLLM = 4;
 8000584:	2304      	movs	r3, #4
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 8000588:	2332      	movs	r3, #50	; 0x32
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 8000594:	2302      	movs	r3, #2
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a8:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 80005b4:	e032      	b.n	800061c <SystemClock_Config_HSE+0xcc>
		  Osc_Init.PLL.PLLM = 4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 80005ba:	2354      	movs	r3, #84	; 0x54
 80005bc:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 80005e6:	e019      	b.n	800061c <SystemClock_Config_HSE+0xcc>
		  Osc_Init.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 80005ec:	2378      	movs	r3, #120	; 0x78
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060c:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 8000614:	2303      	movs	r3, #3
 8000616:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 800061a:	bf00      	nop
	 }

	if(HAL_RCC_OscConfig(&Osc_Init) != HAL_OK){
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fc91 	bl	8001f48 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config_HSE+0xe0>
		Error_handler();
 800062c:	f000 f920 	bl	8000870 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK){
 8000630:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f001 f9ca 	bl	80019d4 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config_HSE+0xfa>
		Error_handler();
 8000646:	f000 f913 	bl	8000870 <Error_handler>
	}

	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800064a:	f001 faa9 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 800064e:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000652:	4a09      	ldr	r2, [pc, #36]	; (8000678 <SystemClock_Config_HSE+0x128>)
 8000654:	fba2 2303 	umull	r2, r3, r2, r3
 8000658:	099b      	lsrs	r3, r3, #6
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fff1 	bl	8001642 <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000660:	2004      	movs	r0, #4
 8000662:	f000 fffb 	bl	800165c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	f04f 30ff 	mov.w	r0, #4294967295
 800066e:	f000 ffbe 	bl	80015ee <HAL_NVIC_SetPriority>

}
 8000672:	3758      	adds	r7, #88	; 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	10624dd3 	.word	0x10624dd3

0800067c <GPIO_Init>:

void GPIO_Init(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <GPIO_Init+0x40>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <GPIO_Init+0x40>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <GPIO_Init+0x40>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 800069e:	2320      	movs	r3, #32
 80006a0:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <GPIO_Init+0x44>)
 80006b0:	f000 fffe 	bl	80016b0 <HAL_GPIO_Init>
}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020000 	.word	0x40020000

080006c4 <CAN1_Tx>:

void CAN1_Tx(void){
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b096      	sub	sp, #88	; 0x58
 80006c8:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;
	char msg[50];

	uint8_t our_message[5] = {'H','E','L','L','O'};
 80006ca:	4a22      	ldr	r2, [pc, #136]	; (8000754 <CAN1_Tx+0x90>)
 80006cc:	463b      	mov	r3, r7
 80006ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d2:	6018      	str	r0, [r3, #0]
 80006d4:	3304      	adds	r3, #4
 80006d6:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;				/* Specifies the length of the frame that will be transmitted */
 80006d8:	2305      	movs	r3, #5
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
	TxHeader.StdId = 0x65D;			/* Specifies the standard identifier */
 80006dc:	f240 635d 	movw	r3, #1629	; 0x65d
 80006e0:	643b      	str	r3, [r7, #64]	; 0x40
	TxHeader.IDE = CAN_ID_STD;		/* Specifies the type of identifier for the message that will be transmitted - 11 bits */
 80006e2:	2300      	movs	r3, #0
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
	TxHeader.RTR = CAN_RTR_DATA;	/* Specifies the type of frame for the message that will be transmitted - Data frame*/
 80006e6:	2300      	movs	r3, #0
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, our_message, &TxMailbox) != HAL_OK){
 80006ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006ee:	463a      	mov	r2, r7
 80006f0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80006f4:	4818      	ldr	r0, [pc, #96]	; (8000758 <CAN1_Tx+0x94>)
 80006f6:	f000 fc65 	bl	8000fc4 <HAL_CAN_AddTxMessage>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <CAN1_Tx+0x40>
		Error_handler();
 8000700:	f000 f8b6 	bl	8000870 <Error_handler>
	}

	while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 8000704:	bf00      	nop
 8000706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000708:	4619      	mov	r1, r3
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <CAN1_Tx+0x94>)
 800070c:	f000 fd35 	bl	800117a <HAL_CAN_IsTxMessagePending>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1f7      	bne.n	8000706 <CAN1_Tx+0x42>

	sprintf(msg, "Message Transmitted\r\n");
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <CAN1_Tx+0x98>)
 800071c:	461c      	mov	r4, r3
 800071e:	4615      	mov	r5, r2
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000728:	6020      	str	r0, [r4, #0]
 800072a:	3404      	adds	r4, #4
 800072c:	8021      	strh	r1, [r4, #0]

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd66 	bl	8000204 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	f107 0108 	add.w	r1, r7, #8
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	4806      	ldr	r0, [pc, #24]	; (8000760 <CAN1_Tx+0x9c>)
 8000746:	f001 fea6 	bl	8002496 <HAL_UART_Transmit>

}
 800074a:	bf00      	nop
 800074c:	3758      	adds	r7, #88	; 0x58
 800074e:	46bd      	mov	sp, r7
 8000750:	bdb0      	pop	{r4, r5, r7, pc}
 8000752:	bf00      	nop
 8000754:	08002dcc 	.word	0x08002dcc
 8000758:	20000068 	.word	0x20000068
 800075c:	08002db4 	.word	0x08002db4
 8000760:	20000028 	.word	0x20000028

08000764 <CAN1_Rx>:

void CAN1_Rx(void){
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	b096      	sub	sp, #88	; 0x58
 8000768:	af00      	add	r7, sp, #0
	uint8_t rcvd_msg[5];

	char msg[50];

	//we are waiting for at least one message in to the RX FIFO0
	while(! HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 800076a:	bf00      	nop
 800076c:	2100      	movs	r1, #0
 800076e:	4817      	ldr	r0, [pc, #92]	; (80007cc <CAN1_Rx+0x68>)
 8000770:	f000 fe39 	bl	80013e6 <HAL_CAN_GetRxFifoFillLevel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f8      	beq.n	800076c <CAN1_Rx+0x8>

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK){
 800077a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800077e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000782:	2100      	movs	r1, #0
 8000784:	4811      	ldr	r0, [pc, #68]	; (80007cc <CAN1_Rx+0x68>)
 8000786:	f000 fd1c 	bl	80011c2 <HAL_CAN_GetRxMessage>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <CAN1_Rx+0x30>
		Error_handler();
 8000790:	f000 f86e 	bl	8000870 <Error_handler>
	}

	sprintf(msg, "Message Received\r\n");
 8000794:	463b      	mov	r3, r7
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <CAN1_Rx+0x6c>)
 8000798:	461c      	mov	r4, r3
 800079a:	4615      	mov	r5, r2
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	682b      	ldr	r3, [r5, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	8022      	strh	r2, [r4, #0]
 80007a6:	3402      	adds	r4, #2
 80007a8:	0c1b      	lsrs	r3, r3, #16
 80007aa:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007ac:	463b      	mov	r3, r7
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd28 	bl	8000204 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4639      	mov	r1, r7
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <CAN1_Rx+0x70>)
 80007c0:	f001 fe69 	bl	8002496 <HAL_UART_Transmit>

}
 80007c4:	bf00      	nop
 80007c6:	3758      	adds	r7, #88	; 0x58
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bdb0      	pop	{r4, r5, r7, pc}
 80007cc:	20000068 	.word	0x20000068
 80007d0:	08002dd4 	.word	0x08002dd4
 80007d4:	20000028 	.word	0x20000028

080007d8 <CAN_Filter_Config>:

void CAN_Filter_Config(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
	 * You need not to do the configuration filter at all;
	 * Just make sure to which FIFO the message should go;
	 * Make all as 0, so none of the bits will be compared with the packet frame received.
	 **/

	can1_filter_init.FilterActivation = ENABLE;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK){
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <CAN_Filter_Config+0x48>)
 8000808:	f000 fab8 	bl	8000d7c <HAL_CAN_ConfigFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <CAN_Filter_Config+0x3e>
		Error_handler();
 8000812:	f000 f82d 	bl	8000870 <Error_handler>
	}
}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000068 	.word	0x20000068

08000824 <UART2_Init>:

void UART2_Init(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <UART2_Init+0x44>)
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <UART2_Init+0x48>)
 800082c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <UART2_Init+0x44>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <UART2_Init+0x44>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <UART2_Init+0x44>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <UART2_Init+0x44>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <UART2_Init+0x44>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <UART2_Init+0x44>)
 8000850:	220c      	movs	r2, #12
 8000852:	615a      	str	r2, [r3, #20]

	if (HAL_UART_Init(&huart2) != HAL_OK){
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <UART2_Init+0x44>)
 8000856:	f001 fdd1 	bl	80023fc <HAL_UART_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <UART2_Init+0x40>
		//There is a problem
		Error_handler();
 8000860:	f000 f806 	bl	8000870 <Error_handler>
	}
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000028 	.word	0x20000028
 800086c:	40004400 	.word	0x40004400

08000870 <Error_handler>:

void Error_handler(void){
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	while(1);
 8000874:	e7fe      	b.n	8000874 <Error_handler+0x4>
	...

08000878 <CAN1_Init>:
}

void CAN1_Init(void){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <CAN1_Init+0x64>)
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <CAN1_Init+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <CAN1_Init+0x64>)
 8000884:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000888:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = DISABLE;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <CAN1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;		// No need for CAN loopback
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <CAN1_Init+0x64>)
 8000892:	2201      	movs	r2, #1
 8000894:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <CAN1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;		// See CAN master control register (CAN_MCR) - bit 3
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <CAN1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <CAN1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;	// See CAN master control register (CAN_MCR) - bit 2
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <CAN1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	775a      	strb	r2, [r3, #29]
	// Visit http://www.bittiming.can-wiki.info/
	// Bit Rate (Bits/s) = 500kbps (2us) and number of time quanta = 10;
	// One bit = Sync + (Prop_Seg + Phase_Seg1) + Seg2 = 10;
	// (Prop_Seg + Phase_Seg1) = Seg1;

	hcan1.Init.Prescaler = 5;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <CAN1_Init+0x64>)
 80008b0:	2205      	movs	r2, #5
 80008b2:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;		// 1 time quantum as default (to complete 10 time quanta)
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <CAN1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;			// 8 time quantum
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <CAN1_Init+0x64>)
 80008bc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80008c0:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;			// 1 time quantum
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <CAN1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&hcan1) != HAL_OK){
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <CAN1_Init+0x64>)
 80008ca:	f000 f95b 	bl	8000b84 <HAL_CAN_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <CAN1_Init+0x60>
		Error_handler();
 80008d4:	f7ff ffcc 	bl	8000870 <Error_handler>
	}
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000068 	.word	0x20000068
 80008e0:	40006400 	.word	0x40006400

080008e4 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void HAL_MspInit(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

	//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 fe75 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_MspInit+0x40>)
 80008f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f2:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <HAL_MspInit+0x40>)
 80008f4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80008f8:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	f06f 000b 	mvn.w	r0, #11
 8000902:	f000 fe74 	bl	80015ee <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	f06f 000a 	mvn.w	r0, #10
 800090e:	f000 fe6e 	bl	80015ee <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	f06f 0009 	mvn.w	r0, #9
 800091a:	f000 fe68 	bl	80015ee <HAL_NVIC_SetPriority>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan){
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_CAN1_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_CAN_MspInit+0x50>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_CAN_MspInit+0x50>)
 800093a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_CAN_MspInit+0x50>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
	PA11     ------> CAN1_RX
	PA12     ------> CAN1_TX
	*/

	// CAN transceiver SN65HVD230
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800094c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000950:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800095e:	2309      	movs	r3, #9
 8000960:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <HAL_CAN_MspInit+0x54>)
 800096a:	f000 fea1 	bl	80016b0 <HAL_GPIO_Init>

}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000

08000980 <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <HAL_UART_MspInit+0x88>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <HAL_UART_MspInit+0x88>)
 8000992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000996:	6413      	str	r3, [r2, #64]	; 0x40
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_UART_MspInit+0x88>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80009c0:	2304      	movs	r3, #4
 80009c2:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate = GPIO_AF7_USART2; //UART2_TX
 80009d0:	2307      	movs	r3, #7
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA, &gpio_uart);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <HAL_UART_MspInit+0x8c>)
 80009dc:	f000 fe68 	bl	80016b0 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80009e0:	2308      	movs	r3, #8
 80009e2:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA, &gpio_uart);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4808      	ldr	r0, [pc, #32]	; (8000a0c <HAL_UART_MspInit+0x8c>)
 80009ec:	f000 fe60 	bl	80016b0 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f0:	2026      	movs	r0, #38	; 0x26
 80009f2:	f000 fe18 	bl	8001626 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	2026      	movs	r0, #38	; 0x26
 80009fc:	f000 fdf7 	bl	80015ee <HAL_NVIC_SetPriority>

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <SysTick_Handler>:
 *      Author: Mateus Sousa
 */

#include "main.h"

void SysTick_Handler (void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000a14:	f000 f896 	bl	8000b44 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000a18:	f000 fe3c 	bl	8001694 <HAL_SYSTICK_IRQHandler>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <SystemInit+0x28>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <SystemInit+0x28>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SystemInit+0x28>)
 8000a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a52:	e003      	b.n	8000a5c <LoopCopyDataInit>

08000a54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a5a:	3104      	adds	r1, #4

08000a5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a64:	d3f6      	bcc.n	8000a54 <CopyDataInit>
  ldr  r2, =_sbss
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a68:	e002      	b.n	8000a70 <LoopFillZerobss>

08000a6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a6c:	f842 3b04 	str.w	r3, [r2], #4

08000a70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a74:	d3f9      	bcc.n	8000a6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a76:	f7ff ffd3 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f002 f96b 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7e:	f7ff fd49 	bl	8000514 <main>
  bx  lr    
 8000a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a88:	08002e10 	.word	0x08002e10
  ldr  r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a90:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a94:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a98:	20000094 	.word	0x20000094

08000a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <HAL_Init+0x40>)
 8000aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_Init+0x40>)
 8000ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_Init+0x40>)
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 fd85 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f808 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f7ff ff06 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023c00 	.word	0x40023c00

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fd9d 	bl	8001642 <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 fd65 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000090 	.word	0x20000090

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000090 	.word	0x20000090

08000b84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0ed      	b.n	8000d72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fec0 	bl	8000928 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f022 0202 	bic.w	r2, r2, #2
 8000bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb8:	f7ff ffd8 	bl	8000b6c <HAL_GetTick>
 8000bbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bbe:	e012      	b.n	8000be6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc0:	f7ff ffd4 	bl	8000b6c <HAL_GetTick>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b0a      	cmp	r3, #10
 8000bcc:	d90b      	bls.n	8000be6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2205      	movs	r2, #5
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e0c5      	b.n	8000d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1e5      	bne.n	8000bc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 0201 	orr.w	r2, r2, #1
 8000c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c04:	f7ff ffb2 	bl	8000b6c <HAL_GetTick>
 8000c08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c0a:	e012      	b.n	8000c32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c0c:	f7ff ffae 	bl	8000b6c <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d90b      	bls.n	8000c32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2205      	movs	r2, #5
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e09f      	b.n	8000d72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0e5      	beq.n	8000c0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7e1b      	ldrb	r3, [r3, #24]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d108      	bne.n	8000c5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7e5b      	ldrb	r3, [r3, #25]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d108      	bne.n	8000c84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e007      	b.n	8000c94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7e9b      	ldrb	r3, [r3, #26]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d108      	bne.n	8000cae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 0220 	orr.w	r2, r2, #32
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e007      	b.n	8000cbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0220 	bic.w	r2, r2, #32
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7edb      	ldrb	r3, [r3, #27]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d108      	bne.n	8000cd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f022 0210 	bic.w	r2, r2, #16
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	e007      	b.n	8000ce8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0210 	orr.w	r2, r2, #16
 8000ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7f1b      	ldrb	r3, [r3, #28]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d108      	bne.n	8000d02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0208 	orr.w	r2, r2, #8
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e007      	b.n	8000d12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0208 	bic.w	r2, r2, #8
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7f5b      	ldrb	r3, [r3, #29]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 0204 	orr.w	r2, r2, #4
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e007      	b.n	8000d3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0204 	bic.w	r2, r2, #4
 8000d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	ea42 0103 	orr.w	r1, r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d94:	7cfb      	ldrb	r3, [r7, #19]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d003      	beq.n	8000da2 <HAL_CAN_ConfigFilter+0x26>
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	f040 80be 	bne.w	8000f1e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000da2:	4b65      	ldr	r3, [pc, #404]	; (8000f38 <HAL_CAN_ConfigFilter+0x1bc>)
 8000da4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dac:	f043 0201 	orr.w	r2, r3, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dbc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f003 031f 	and.w	r3, r3, #31
 8000de2:	2201      	movs	r2, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	401a      	ands	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d123      	bne.n	8000e4c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3248      	adds	r2, #72	; 0x48
 8000e2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e42:	6979      	ldr	r1, [r7, #20]
 8000e44:	3348      	adds	r3, #72	; 0x48
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	440b      	add	r3, r1
 8000e4a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d122      	bne.n	8000e9a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3248      	adds	r2, #72	; 0x48
 8000e7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e90:	6979      	ldr	r1, [r7, #20]
 8000e92:	3348      	adds	r3, #72	; 0x48
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d109      	bne.n	8000eb6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	401a      	ands	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000eb4:	e007      	b.n	8000ec6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d109      	bne.n	8000ee2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	401a      	ands	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000ee0:	e007      	b.n	8000ef2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d107      	bne.n	8000f0a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f10:	f023 0201 	bic.w	r2, r3, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e006      	b.n	8000f2c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
  }
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40006400 	.word	0x40006400

08000f3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d12e      	bne.n	8000fae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2202      	movs	r2, #2
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0201 	bic.w	r2, r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f68:	f7ff fe00 	bl	8000b6c <HAL_GetTick>
 8000f6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f6e:	e012      	b.n	8000f96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f70:	f7ff fdfc 	bl	8000b6c <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d90b      	bls.n	8000f96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e012      	b.n	8000fbc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1e5      	bne.n	8000f70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e006      	b.n	8000fbc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
  }
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe2:	7ffb      	ldrb	r3, [r7, #31]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d003      	beq.n	8000ff0 <HAL_CAN_AddTxMessage+0x2c>
 8000fe8:	7ffb      	ldrb	r3, [r7, #31]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	f040 80b8 	bne.w	8001160 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10a      	bne.n	8001010 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80a0 	beq.w	8001150 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	0e1b      	lsrs	r3, r3, #24
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d907      	bls.n	8001030 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e09e      	b.n	800116e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001030:	2201      	movs	r2, #1
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	409a      	lsls	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10d      	bne.n	800105e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800104c:	68f9      	ldr	r1, [r7, #12]
 800104e:	6809      	ldr	r1, [r1, #0]
 8001050:	431a      	orrs	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3318      	adds	r3, #24
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	440b      	add	r3, r1
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e00f      	b.n	800107e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001068:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001072:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3318      	adds	r3, #24
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	440b      	add	r3, r1
 800107c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6819      	ldr	r1, [r3, #0]
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3318      	adds	r3, #24
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	440b      	add	r3, r1
 800108e:	3304      	adds	r3, #4
 8001090:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	7d1b      	ldrb	r3, [r3, #20]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d111      	bne.n	80010be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3318      	adds	r3, #24
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	6811      	ldr	r1, [r2, #0]
 80010ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3318      	adds	r3, #24
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	440b      	add	r3, r1
 80010ba:	3304      	adds	r3, #4
 80010bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3307      	adds	r3, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	061a      	lsls	r2, r3, #24
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3306      	adds	r3, #6
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	041b      	lsls	r3, r3, #16
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3305      	adds	r3, #5
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	4313      	orrs	r3, r2
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	3204      	adds	r2, #4
 80010de:	7812      	ldrb	r2, [r2, #0]
 80010e0:	4610      	mov	r0, r2
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	6811      	ldr	r1, [r2, #0]
 80010e6:	ea43 0200 	orr.w	r2, r3, r0
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	440b      	add	r3, r1
 80010f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80010f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3303      	adds	r3, #3
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	061a      	lsls	r2, r3, #24
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3302      	adds	r3, #2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	041b      	lsls	r3, r3, #16
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3301      	adds	r3, #1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	4313      	orrs	r3, r2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	4610      	mov	r0, r2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	6811      	ldr	r1, [r2, #0]
 800111c:	ea43 0200 	orr.w	r2, r3, r0
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	440b      	add	r3, r1
 8001126:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800112a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3318      	adds	r3, #24
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4413      	add	r3, r2
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	6811      	ldr	r1, [r2, #0]
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3318      	adds	r3, #24
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	440b      	add	r3, r1
 800114a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	e00e      	b.n	800116e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e006      	b.n	800116e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
  }
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800117a:	b480      	push	{r7}
 800117c:	b085      	sub	sp, #20
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800118e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d002      	beq.n	800119c <HAL_CAN_IsTxMessagePending+0x22>
 8001196:	7afb      	ldrb	r3, [r7, #11]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d10b      	bne.n	80011b4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	069b      	lsls	r3, r3, #26
 80011a6:	401a      	ands	r2, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	069b      	lsls	r3, r3, #26
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80011b4:	68fb      	ldr	r3, [r7, #12]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011c2:	b480      	push	{r7}
 80011c4:	b087      	sub	sp, #28
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d003      	beq.n	80011e6 <HAL_CAN_GetRxMessage+0x24>
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	f040 80f3 	bne.w	80013cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10e      	bne.n	800120a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0e7      	b.n	80013da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e0d8      	b.n	80013da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	331b      	adds	r3, #27
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0204 	and.w	r2, r3, #4
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	331b      	adds	r3, #27
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0d5b      	lsrs	r3, r3, #21
 8001256:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e00b      	b.n	8001278 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	331b      	adds	r3, #27
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	4413      	add	r3, r2
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	331b      	adds	r3, #27
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0202 	and.w	r2, r3, #2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	331b      	adds	r3, #27
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	3304      	adds	r3, #4
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 020f 	and.w	r2, r3, #15
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	331b      	adds	r3, #27
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	4413      	add	r3, r2
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	331b      	adds	r3, #27
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	4413      	add	r3, r2
 80012ca:	3304      	adds	r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0c1b      	lsrs	r3, r3, #16
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0a1a      	lsrs	r2, r3, #8
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	0c1a      	lsrs	r2, r3, #16
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	3302      	adds	r3, #2
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0e1a      	lsrs	r2, r3, #24
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	3303      	adds	r3, #3
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3304      	adds	r3, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0a1a      	lsrs	r2, r3, #8
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3305      	adds	r3, #5
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4413      	add	r3, r2
 8001376:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	0c1a      	lsrs	r2, r3, #16
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	3306      	adds	r3, #6
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4413      	add	r3, r2
 8001390:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	0e1a      	lsrs	r2, r3, #24
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	3307      	adds	r3, #7
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d108      	bne.n	80013b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0220 	orr.w	r2, r2, #32
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	e007      	b.n	80013c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0220 	orr.w	r2, r2, #32
 80013c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e006      	b.n	80013da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
  }
}
 80013da:	4618      	mov	r0, r3
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d002      	beq.n	8001408 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d10f      	bne.n	8001428 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e005      	b.n	8001428 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001428:	68fb      	ldr	r3, [r7, #12]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff3e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff31 	bl	800149c <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b04      	cmp	r3, #4
 8001668:	d106      	bne.n	8001678 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001676:	e005      	b.n	8001684 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800167e:	f023 0304 	bic.w	r3, r3, #4
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001698:	f000 f802 	bl	80016a0 <HAL_SYSTICK_Callback>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e165      	b.n	8001998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016cc:	2201      	movs	r2, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 8154 	bne.w	8001992 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d00b      	beq.n	800170a <HAL_GPIO_Init+0x5a>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fe:	2b11      	cmp	r3, #17
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b12      	cmp	r3, #18
 8001708:	d130      	bne.n	800176c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 0201 	and.w	r2, r3, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0xfc>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	d123      	bne.n	80017f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	08da      	lsrs	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3208      	adds	r2, #8
 80017b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	69b9      	ldr	r1, [r7, #24]
 80017f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80ae 	beq.w	8001992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b5c      	ldr	r3, [pc, #368]	; (80019ac <HAL_GPIO_Init+0x2fc>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a5b      	ldr	r2, [pc, #364]	; (80019ac <HAL_GPIO_Init+0x2fc>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_GPIO_Init+0x2fc>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001852:	4a57      	ldr	r2, [pc, #348]	; (80019b0 <HAL_GPIO_Init+0x300>)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4e      	ldr	r2, [pc, #312]	; (80019b4 <HAL_GPIO_Init+0x304>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d025      	beq.n	80018ca <HAL_GPIO_Init+0x21a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <HAL_GPIO_Init+0x308>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01f      	beq.n	80018c6 <HAL_GPIO_Init+0x216>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x30c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d019      	beq.n	80018c2 <HAL_GPIO_Init+0x212>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_GPIO_Init+0x310>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x20e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_GPIO_Init+0x314>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x20a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a49      	ldr	r2, [pc, #292]	; (80019c8 <HAL_GPIO_Init+0x318>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x206>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_GPIO_Init+0x31c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x202>
 80018ae:	2306      	movs	r3, #6
 80018b0:	e00c      	b.n	80018cc <HAL_GPIO_Init+0x21c>
 80018b2:	2307      	movs	r3, #7
 80018b4:	e00a      	b.n	80018cc <HAL_GPIO_Init+0x21c>
 80018b6:	2305      	movs	r3, #5
 80018b8:	e008      	b.n	80018cc <HAL_GPIO_Init+0x21c>
 80018ba:	2304      	movs	r3, #4
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x21c>
 80018be:	2303      	movs	r3, #3
 80018c0:	e004      	b.n	80018cc <HAL_GPIO_Init+0x21c>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_Init+0x21c>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x21c>
 80018ca:	2300      	movs	r3, #0
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f002 0203 	and.w	r2, r2, #3
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4093      	lsls	r3, r2
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018dc:	4934      	ldr	r1, [pc, #208]	; (80019b0 <HAL_GPIO_Init+0x300>)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_GPIO_Init+0x320>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800190e:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_GPIO_Init+0x320>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_GPIO_Init+0x320>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <HAL_GPIO_Init+0x320>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_GPIO_Init+0x320>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001962:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_GPIO_Init+0x320>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_GPIO_Init+0x320>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800198c:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <HAL_GPIO_Init+0x320>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3301      	adds	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b0f      	cmp	r3, #15
 800199c:	f67f ae96 	bls.w	80016cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a0:	bf00      	nop
 80019a2:	3724      	adds	r7, #36	; 0x24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40013800 	.word	0x40013800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40021400 	.word	0x40021400
 80019cc:	40021800 	.word	0x40021800
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0cc      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d90c      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0b8      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a40:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	494d      	ldr	r1, [pc, #308]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d044      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d119      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e07f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e067      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4934      	ldr	r1, [pc, #208]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f852 	bl	8000b6c <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f84e 	bl	8000b6c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e04f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d20c      	bcs.n	8001b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e032      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4916      	ldr	r1, [pc, #88]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	490e      	ldr	r1, [pc, #56]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b5a:	f000 f855 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001b5e:	4601      	mov	r1, r0
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe ffb2 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00
 8001b90:	40023800 	.word	0x40023800
 8001b94:	08002de8 	.word	0x08002de8
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000004 	.word	0x20000004

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bbc:	f7ff fff0 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	08002df8 	.word	0x08002df8

08001be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be4:	f7ff ffdc 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001be8:	4601      	mov	r1, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0b5b      	lsrs	r3, r3, #13
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	08002df8 	.word	0x08002df8

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c22:	4bc6      	ldr	r3, [pc, #792]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	f200 817e 	bhi.w	8001f2c <HAL_RCC_GetSysClockFreq+0x324>
 8001c30:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <HAL_RCC_GetSysClockFreq+0x30>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c6d 	.word	0x08001c6d
 8001c3c:	08001f2d 	.word	0x08001f2d
 8001c40:	08001f2d 	.word	0x08001f2d
 8001c44:	08001f2d 	.word	0x08001f2d
 8001c48:	08001c73 	.word	0x08001c73
 8001c4c:	08001f2d 	.word	0x08001f2d
 8001c50:	08001f2d 	.word	0x08001f2d
 8001c54:	08001f2d 	.word	0x08001f2d
 8001c58:	08001c79 	.word	0x08001c79
 8001c5c:	08001f2d 	.word	0x08001f2d
 8001c60:	08001f2d 	.word	0x08001f2d
 8001c64:	08001f2d 	.word	0x08001f2d
 8001c68:	08001dd5 	.word	0x08001dd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4bb4      	ldr	r3, [pc, #720]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x338>)
 8001c6e:	613b      	str	r3, [r7, #16]
       break;
 8001c70:	e15f      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c72:	4bb4      	ldr	r3, [pc, #720]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001c74:	613b      	str	r3, [r7, #16]
      break;
 8001c76:	e15c      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c78:	4bb0      	ldr	r3, [pc, #704]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c80:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c82:	4bae      	ldr	r3, [pc, #696]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d04a      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4bab      	ldr	r3, [pc, #684]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	f04f 0400 	mov.w	r4, #0
 8001c98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	ea03 0501 	and.w	r5, r3, r1
 8001ca4:	ea04 0602 	and.w	r6, r4, r2
 8001ca8:	4629      	mov	r1, r5
 8001caa:	4632      	mov	r2, r6
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f04f 0400 	mov.w	r4, #0
 8001cb4:	0154      	lsls	r4, r2, #5
 8001cb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cba:	014b      	lsls	r3, r1, #5
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	1b49      	subs	r1, r1, r5
 8001cc2:	eb62 0206 	sbc.w	r2, r2, r6
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	f04f 0400 	mov.w	r4, #0
 8001cce:	0194      	lsls	r4, r2, #6
 8001cd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cd4:	018b      	lsls	r3, r1, #6
 8001cd6:	1a5b      	subs	r3, r3, r1
 8001cd8:	eb64 0402 	sbc.w	r4, r4, r2
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	00e2      	lsls	r2, r4, #3
 8001ce6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cea:	00d9      	lsls	r1, r3, #3
 8001cec:	460b      	mov	r3, r1
 8001cee:	4614      	mov	r4, r2
 8001cf0:	195b      	adds	r3, r3, r5
 8001cf2:	eb44 0406 	adc.w	r4, r4, r6
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	0262      	lsls	r2, r4, #9
 8001d00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d04:	0259      	lsls	r1, r3, #9
 8001d06:	460b      	mov	r3, r1
 8001d08:	4614      	mov	r4, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f04f 0400 	mov.w	r4, #0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4623      	mov	r3, r4
 8001d18:	f7fe fa7c 	bl	8000214 <__aeabi_uldivmod>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	460c      	mov	r4, r1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e049      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d24:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	f04f 0400 	mov.w	r4, #0
 8001d2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	ea03 0501 	and.w	r5, r3, r1
 8001d3a:	ea04 0602 	and.w	r6, r4, r2
 8001d3e:	4629      	mov	r1, r5
 8001d40:	4632      	mov	r2, r6
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	f04f 0400 	mov.w	r4, #0
 8001d4a:	0154      	lsls	r4, r2, #5
 8001d4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d50:	014b      	lsls	r3, r1, #5
 8001d52:	4619      	mov	r1, r3
 8001d54:	4622      	mov	r2, r4
 8001d56:	1b49      	subs	r1, r1, r5
 8001d58:	eb62 0206 	sbc.w	r2, r2, r6
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	f04f 0400 	mov.w	r4, #0
 8001d64:	0194      	lsls	r4, r2, #6
 8001d66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d6a:	018b      	lsls	r3, r1, #6
 8001d6c:	1a5b      	subs	r3, r3, r1
 8001d6e:	eb64 0402 	sbc.w	r4, r4, r2
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	00e2      	lsls	r2, r4, #3
 8001d7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d80:	00d9      	lsls	r1, r3, #3
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	195b      	adds	r3, r3, r5
 8001d88:	eb44 0406 	adc.w	r4, r4, r6
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	02a2      	lsls	r2, r4, #10
 8001d96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d9a:	0299      	lsls	r1, r3, #10
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4614      	mov	r4, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	4621      	mov	r1, r4
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f04f 0400 	mov.w	r4, #0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4623      	mov	r3, r4
 8001dae:	f7fe fa31 	bl	8000214 <__aeabi_uldivmod>
 8001db2:	4603      	mov	r3, r0
 8001db4:	460c      	mov	r4, r1
 8001db6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001db8:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	613b      	str	r3, [r7, #16]
      break;
 8001dd2:	e0ae      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ddc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d04a      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dea:	4b54      	ldr	r3, [pc, #336]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	099b      	lsrs	r3, r3, #6
 8001df0:	f04f 0400 	mov.w	r4, #0
 8001df4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	ea03 0501 	and.w	r5, r3, r1
 8001e00:	ea04 0602 	and.w	r6, r4, r2
 8001e04:	4629      	mov	r1, r5
 8001e06:	4632      	mov	r2, r6
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	f04f 0400 	mov.w	r4, #0
 8001e10:	0154      	lsls	r4, r2, #5
 8001e12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e16:	014b      	lsls	r3, r1, #5
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	1b49      	subs	r1, r1, r5
 8001e1e:	eb62 0206 	sbc.w	r2, r2, r6
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	f04f 0400 	mov.w	r4, #0
 8001e2a:	0194      	lsls	r4, r2, #6
 8001e2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e30:	018b      	lsls	r3, r1, #6
 8001e32:	1a5b      	subs	r3, r3, r1
 8001e34:	eb64 0402 	sbc.w	r4, r4, r2
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	00e2      	lsls	r2, r4, #3
 8001e42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e46:	00d9      	lsls	r1, r3, #3
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	195b      	adds	r3, r3, r5
 8001e4e:	eb44 0406 	adc.w	r4, r4, r6
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	0262      	lsls	r2, r4, #9
 8001e5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e60:	0259      	lsls	r1, r3, #9
 8001e62:	460b      	mov	r3, r1
 8001e64:	4614      	mov	r4, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	4621      	mov	r1, r4
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f04f 0400 	mov.w	r4, #0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	f7fe f9ce 	bl	8000214 <__aeabi_uldivmod>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e049      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e80:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	f04f 0400 	mov.w	r4, #0
 8001e8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	ea03 0501 	and.w	r5, r3, r1
 8001e96:	ea04 0602 	and.w	r6, r4, r2
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	4632      	mov	r2, r6
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	f04f 0400 	mov.w	r4, #0
 8001ea6:	0154      	lsls	r4, r2, #5
 8001ea8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001eac:	014b      	lsls	r3, r1, #5
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4622      	mov	r2, r4
 8001eb2:	1b49      	subs	r1, r1, r5
 8001eb4:	eb62 0206 	sbc.w	r2, r2, r6
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	f04f 0400 	mov.w	r4, #0
 8001ec0:	0194      	lsls	r4, r2, #6
 8001ec2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ec6:	018b      	lsls	r3, r1, #6
 8001ec8:	1a5b      	subs	r3, r3, r1
 8001eca:	eb64 0402 	sbc.w	r4, r4, r2
 8001ece:	f04f 0100 	mov.w	r1, #0
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	00e2      	lsls	r2, r4, #3
 8001ed8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001edc:	00d9      	lsls	r1, r3, #3
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	195b      	adds	r3, r3, r5
 8001ee4:	eb44 0406 	adc.w	r4, r4, r6
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	02a2      	lsls	r2, r4, #10
 8001ef2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ef6:	0299      	lsls	r1, r3, #10
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4614      	mov	r4, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	4621      	mov	r1, r4
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f04f 0400 	mov.w	r4, #0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4623      	mov	r3, r4
 8001f0a:	f7fe f983 	bl	8000214 <__aeabi_uldivmod>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460c      	mov	r4, r1
 8001f12:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x334>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	0f1b      	lsrs	r3, r3, #28
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	613b      	str	r3, [r7, #16]
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x338>)
 8001f2e:	613b      	str	r3, [r7, #16]
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	693b      	ldr	r3, [r7, #16]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	00f42400 	.word	0x00f42400
 8001f44:	007a1200 	.word	0x007a1200

08001f48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 8083 	beq.w	8002068 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f62:	4b95      	ldr	r3, [pc, #596]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d019      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f6e:	4b92      	ldr	r3, [pc, #584]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d106      	bne.n	8001f88 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f7a:	4b8f      	ldr	r3, [pc, #572]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f86:	d00c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f88:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d112      	bne.n	8001fba <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f94:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa2:	4b85      	ldr	r3, [pc, #532]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d05b      	beq.n	8002066 <HAL_RCC_OscConfig+0x11e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d157      	bne.n	8002066 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e216      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x8a>
 8001fc4:	4b7c      	ldr	r3, [pc, #496]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a7b      	ldr	r2, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e01d      	b.n	800200e <HAL_RCC_OscConfig+0xc6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0xae>
 8001fdc:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a72      	ldr	r2, [pc, #456]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0xc6>
 8001ff6:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6f      	ldr	r2, [pc, #444]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a6c      	ldr	r2, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d013      	beq.n	800203e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe fda9 	bl	8000b6c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201e:	f7fe fda5 	bl	8000b6c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	; 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1db      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002030:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0xd6>
 800203c:	e014      	b.n	8002068 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203e:	f7fe fd95 	bl	8000b6c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002046:	f7fe fd91 	bl	8000b6c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b64      	cmp	r3, #100	; 0x64
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e1c7      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002058:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0xfe>
 8002064:	e000      	b.n	8002068 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002066:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d06f      	beq.n	8002154 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b00      	cmp	r3, #0
 800207e:	d017      	beq.n	80020b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002080:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002088:	2b08      	cmp	r3, #8
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800208c:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002098:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d11c      	bne.n	80020de <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a4:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d116      	bne.n	80020de <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b0:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_OscConfig+0x180>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e18f      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b3b      	ldr	r3, [pc, #236]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4938      	ldr	r1, [pc, #224]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020dc:	e03a      	b.n	8002154 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7fe fd3e 	bl	8000b6c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f4:	f7fe fd3a 	bl	8000b6c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e170      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4925      	ldr	r1, [pc, #148]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
 8002126:	e015      	b.n	8002154 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7fe fd1d 	bl	8000b6c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7fe fd19 	bl	8000b6c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e14f      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d037      	beq.n	80021d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d016      	beq.n	8002196 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_RCC_OscConfig+0x278>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7fe fcfd 	bl	8000b6c <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002176:	f7fe fcf9 	bl	8000b6c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e12f      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 800218a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x22e>
 8002194:	e01c      	b.n	80021d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_RCC_OscConfig+0x278>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7fe fce6 	bl	8000b6c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a2:	e00f      	b.n	80021c4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a4:	f7fe fce2 	bl	8000b6c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d908      	bls.n	80021c4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e118      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	42470000 	.word	0x42470000
 80021c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	4b8a      	ldr	r3, [pc, #552]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 80021c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e9      	bne.n	80021a4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8097 	beq.w	800230c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e2:	4b83      	ldr	r3, [pc, #524]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a7e      	ldr	r2, [pc, #504]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a75      	ldr	r2, [pc, #468]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe fca1 	bl	8000b6c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fc9d 	bl	8000b6c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e0d3      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x31a>
 8002254:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a65      	ldr	r2, [pc, #404]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
 8002260:	e01c      	b.n	800229c <HAL_RCC_OscConfig+0x354>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b05      	cmp	r3, #5
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x33c>
 800226a:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a60      	ldr	r2, [pc, #384]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
 8002276:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0x354>
 8002284:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	4a59      	ldr	r2, [pc, #356]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6713      	str	r3, [r2, #112]	; 0x70
 8002290:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002296:	f023 0304 	bic.w	r3, r3, #4
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe fc62 	bl	8000b6c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f7fe fc5e 	bl	8000b6c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e092      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0ee      	beq.n	80022ac <HAL_RCC_OscConfig+0x364>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fc4c 	bl	8000b6c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7fe fc48 	bl	8000b6c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e07c      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ee:	4b40      	ldr	r3, [pc, #256]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1ee      	bne.n	80022d8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002300:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d068      	beq.n	80023e6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d060      	beq.n	80023e2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d145      	bne.n	80023b4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe fc1d 	bl	8000b6c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fc19 	bl	8000b6c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e04f      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002348:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	019b      	lsls	r3, r3, #6
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	3b01      	subs	r3, #1
 800236e:	041b      	lsls	r3, r3, #16
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	061b      	lsls	r3, r3, #24
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	071b      	lsls	r3, r3, #28
 8002380:	491b      	ldr	r1, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fbee 	bl	8000b6c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe fbea 	bl	8000b6c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e020      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x44c>
 80023b2:	e018      	b.n	80023e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7fe fbd7 	bl	8000b6c <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe fbd3 	bl	8000b6c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e009      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_OscConfig+0x4a8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x47a>
 80023e0:	e001      	b.n	80023e6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40007000 	.word	0x40007000
 80023f8:	42470060 	.word	0x42470060

080023fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e03f      	b.n	800248e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe faac 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800243e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f90b 	bl	800265c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b088      	sub	sp, #32
 800249a:	af02      	add	r7, sp, #8
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	f040 8083 	bne.w	80025be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_UART_Transmit+0x2e>
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e07b      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Transmit+0x40>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e074      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2221      	movs	r2, #33	; 0x21
 80024e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024ec:	f7fe fb3e 	bl	8000b6c <HAL_GetTick>
 80024f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002506:	e042      	b.n	800258e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251e:	d122      	bne.n	8002566 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2200      	movs	r2, #0
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f84c 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e042      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800254c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3302      	adds	r3, #2
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	e017      	b.n	800258e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3301      	adds	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	e013      	b.n	800258e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2200      	movs	r2, #0
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f829 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e01f      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	60ba      	str	r2, [r7, #8]
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1b7      	bne.n	8002508 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2200      	movs	r2, #0
 80025a0:	2140      	movs	r1, #64	; 0x40
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f810 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e006      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025be:	2302      	movs	r3, #2
  }
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d8:	e02c      	b.n	8002634 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d028      	beq.n	8002634 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80025e8:	f7fe fac0 	bl	8000b6c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d21d      	bcs.n	8002634 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002606:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e00f      	b.n	8002654 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	4013      	ands	r3, r2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	429a      	cmp	r2, r3
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	429a      	cmp	r2, r3
 8002650:	d0c3      	beq.n	80025da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800265c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800269e:	f023 030c 	bic.w	r3, r3, #12
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ca:	f040 818b 	bne.w	80029e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4ac1      	ldr	r2, [pc, #772]	; (80029d8 <UART_SetConfig+0x37c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d005      	beq.n	80026e4 <UART_SetConfig+0x88>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4abf      	ldr	r2, [pc, #764]	; (80029dc <UART_SetConfig+0x380>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	f040 80bd 	bne.w	800285e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026e4:	f7ff fa7c 	bl	8001be0 <HAL_RCC_GetPCLK2Freq>
 80026e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	461d      	mov	r5, r3
 80026ee:	f04f 0600 	mov.w	r6, #0
 80026f2:	46a8      	mov	r8, r5
 80026f4:	46b1      	mov	r9, r6
 80026f6:	eb18 0308 	adds.w	r3, r8, r8
 80026fa:	eb49 0409 	adc.w	r4, r9, r9
 80026fe:	4698      	mov	r8, r3
 8002700:	46a1      	mov	r9, r4
 8002702:	eb18 0805 	adds.w	r8, r8, r5
 8002706:	eb49 0906 	adc.w	r9, r9, r6
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002716:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800271a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800271e:	4688      	mov	r8, r1
 8002720:	4691      	mov	r9, r2
 8002722:	eb18 0005 	adds.w	r0, r8, r5
 8002726:	eb49 0106 	adc.w	r1, r9, r6
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	461d      	mov	r5, r3
 8002730:	f04f 0600 	mov.w	r6, #0
 8002734:	196b      	adds	r3, r5, r5
 8002736:	eb46 0406 	adc.w	r4, r6, r6
 800273a:	461a      	mov	r2, r3
 800273c:	4623      	mov	r3, r4
 800273e:	f7fd fd69 	bl	8000214 <__aeabi_uldivmod>
 8002742:	4603      	mov	r3, r0
 8002744:	460c      	mov	r4, r1
 8002746:	461a      	mov	r2, r3
 8002748:	4ba5      	ldr	r3, [pc, #660]	; (80029e0 <UART_SetConfig+0x384>)
 800274a:	fba3 2302 	umull	r2, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	461d      	mov	r5, r3
 8002758:	f04f 0600 	mov.w	r6, #0
 800275c:	46a9      	mov	r9, r5
 800275e:	46b2      	mov	sl, r6
 8002760:	eb19 0309 	adds.w	r3, r9, r9
 8002764:	eb4a 040a 	adc.w	r4, sl, sl
 8002768:	4699      	mov	r9, r3
 800276a:	46a2      	mov	sl, r4
 800276c:	eb19 0905 	adds.w	r9, r9, r5
 8002770:	eb4a 0a06 	adc.w	sl, sl, r6
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002780:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002784:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002788:	4689      	mov	r9, r1
 800278a:	4692      	mov	sl, r2
 800278c:	eb19 0005 	adds.w	r0, r9, r5
 8002790:	eb4a 0106 	adc.w	r1, sl, r6
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	461d      	mov	r5, r3
 800279a:	f04f 0600 	mov.w	r6, #0
 800279e:	196b      	adds	r3, r5, r5
 80027a0:	eb46 0406 	adc.w	r4, r6, r6
 80027a4:	461a      	mov	r2, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	f7fd fd34 	bl	8000214 <__aeabi_uldivmod>
 80027ac:	4603      	mov	r3, r0
 80027ae:	460c      	mov	r4, r1
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <UART_SetConfig+0x384>)
 80027b4:	fba3 1302 	umull	r1, r3, r3, r2
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	2164      	movs	r1, #100	; 0x64
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	3332      	adds	r3, #50	; 0x32
 80027c6:	4a86      	ldr	r2, [pc, #536]	; (80029e0 <UART_SetConfig+0x384>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027d4:	4498      	add	r8, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	461d      	mov	r5, r3
 80027da:	f04f 0600 	mov.w	r6, #0
 80027de:	46a9      	mov	r9, r5
 80027e0:	46b2      	mov	sl, r6
 80027e2:	eb19 0309 	adds.w	r3, r9, r9
 80027e6:	eb4a 040a 	adc.w	r4, sl, sl
 80027ea:	4699      	mov	r9, r3
 80027ec:	46a2      	mov	sl, r4
 80027ee:	eb19 0905 	adds.w	r9, r9, r5
 80027f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80027f6:	f04f 0100 	mov.w	r1, #0
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800280a:	4689      	mov	r9, r1
 800280c:	4692      	mov	sl, r2
 800280e:	eb19 0005 	adds.w	r0, r9, r5
 8002812:	eb4a 0106 	adc.w	r1, sl, r6
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	461d      	mov	r5, r3
 800281c:	f04f 0600 	mov.w	r6, #0
 8002820:	196b      	adds	r3, r5, r5
 8002822:	eb46 0406 	adc.w	r4, r6, r6
 8002826:	461a      	mov	r2, r3
 8002828:	4623      	mov	r3, r4
 800282a:	f7fd fcf3 	bl	8000214 <__aeabi_uldivmod>
 800282e:	4603      	mov	r3, r0
 8002830:	460c      	mov	r4, r1
 8002832:	461a      	mov	r2, r3
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <UART_SetConfig+0x384>)
 8002836:	fba3 1302 	umull	r1, r3, r3, r2
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2164      	movs	r1, #100	; 0x64
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	3332      	adds	r3, #50	; 0x32
 8002848:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <UART_SetConfig+0x384>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	f003 0207 	and.w	r2, r3, #7
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4442      	add	r2, r8
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	e26f      	b.n	8002d3e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800285e:	f7ff f9ab 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8002862:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	461d      	mov	r5, r3
 8002868:	f04f 0600 	mov.w	r6, #0
 800286c:	46a8      	mov	r8, r5
 800286e:	46b1      	mov	r9, r6
 8002870:	eb18 0308 	adds.w	r3, r8, r8
 8002874:	eb49 0409 	adc.w	r4, r9, r9
 8002878:	4698      	mov	r8, r3
 800287a:	46a1      	mov	r9, r4
 800287c:	eb18 0805 	adds.w	r8, r8, r5
 8002880:	eb49 0906 	adc.w	r9, r9, r6
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002890:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002894:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002898:	4688      	mov	r8, r1
 800289a:	4691      	mov	r9, r2
 800289c:	eb18 0005 	adds.w	r0, r8, r5
 80028a0:	eb49 0106 	adc.w	r1, r9, r6
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	461d      	mov	r5, r3
 80028aa:	f04f 0600 	mov.w	r6, #0
 80028ae:	196b      	adds	r3, r5, r5
 80028b0:	eb46 0406 	adc.w	r4, r6, r6
 80028b4:	461a      	mov	r2, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	f7fd fcac 	bl	8000214 <__aeabi_uldivmod>
 80028bc:	4603      	mov	r3, r0
 80028be:	460c      	mov	r4, r1
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <UART_SetConfig+0x384>)
 80028c4:	fba3 2302 	umull	r2, r3, r3, r2
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	461d      	mov	r5, r3
 80028d2:	f04f 0600 	mov.w	r6, #0
 80028d6:	46a9      	mov	r9, r5
 80028d8:	46b2      	mov	sl, r6
 80028da:	eb19 0309 	adds.w	r3, r9, r9
 80028de:	eb4a 040a 	adc.w	r4, sl, sl
 80028e2:	4699      	mov	r9, r3
 80028e4:	46a2      	mov	sl, r4
 80028e6:	eb19 0905 	adds.w	r9, r9, r5
 80028ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002902:	4689      	mov	r9, r1
 8002904:	4692      	mov	sl, r2
 8002906:	eb19 0005 	adds.w	r0, r9, r5
 800290a:	eb4a 0106 	adc.w	r1, sl, r6
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	461d      	mov	r5, r3
 8002914:	f04f 0600 	mov.w	r6, #0
 8002918:	196b      	adds	r3, r5, r5
 800291a:	eb46 0406 	adc.w	r4, r6, r6
 800291e:	461a      	mov	r2, r3
 8002920:	4623      	mov	r3, r4
 8002922:	f7fd fc77 	bl	8000214 <__aeabi_uldivmod>
 8002926:	4603      	mov	r3, r0
 8002928:	460c      	mov	r4, r1
 800292a:	461a      	mov	r2, r3
 800292c:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <UART_SetConfig+0x384>)
 800292e:	fba3 1302 	umull	r1, r3, r3, r2
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2164      	movs	r1, #100	; 0x64
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	3332      	adds	r3, #50	; 0x32
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <UART_SetConfig+0x384>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800294e:	4498      	add	r8, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	461d      	mov	r5, r3
 8002954:	f04f 0600 	mov.w	r6, #0
 8002958:	46a9      	mov	r9, r5
 800295a:	46b2      	mov	sl, r6
 800295c:	eb19 0309 	adds.w	r3, r9, r9
 8002960:	eb4a 040a 	adc.w	r4, sl, sl
 8002964:	4699      	mov	r9, r3
 8002966:	46a2      	mov	sl, r4
 8002968:	eb19 0905 	adds.w	r9, r9, r5
 800296c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002970:	f04f 0100 	mov.w	r1, #0
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800297c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002980:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002984:	4689      	mov	r9, r1
 8002986:	4692      	mov	sl, r2
 8002988:	eb19 0005 	adds.w	r0, r9, r5
 800298c:	eb4a 0106 	adc.w	r1, sl, r6
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	461d      	mov	r5, r3
 8002996:	f04f 0600 	mov.w	r6, #0
 800299a:	196b      	adds	r3, r5, r5
 800299c:	eb46 0406 	adc.w	r4, r6, r6
 80029a0:	461a      	mov	r2, r3
 80029a2:	4623      	mov	r3, r4
 80029a4:	f7fd fc36 	bl	8000214 <__aeabi_uldivmod>
 80029a8:	4603      	mov	r3, r0
 80029aa:	460c      	mov	r4, r1
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <UART_SetConfig+0x384>)
 80029b0:	fba3 1302 	umull	r1, r3, r3, r2
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	2164      	movs	r1, #100	; 0x64
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	3332      	adds	r3, #50	; 0x32
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <UART_SetConfig+0x384>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	f003 0207 	and.w	r2, r3, #7
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4442      	add	r2, r8
 80029d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80029d6:	e1b2      	b.n	8002d3e <UART_SetConfig+0x6e2>
 80029d8:	40011000 	.word	0x40011000
 80029dc:	40011400 	.word	0x40011400
 80029e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4ad7      	ldr	r2, [pc, #860]	; (8002d48 <UART_SetConfig+0x6ec>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d005      	beq.n	80029fa <UART_SetConfig+0x39e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4ad6      	ldr	r2, [pc, #856]	; (8002d4c <UART_SetConfig+0x6f0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	f040 80d1 	bne.w	8002b9c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80029fa:	f7ff f8f1 	bl	8001be0 <HAL_RCC_GetPCLK2Freq>
 80029fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	469a      	mov	sl, r3
 8002a04:	f04f 0b00 	mov.w	fp, #0
 8002a08:	46d0      	mov	r8, sl
 8002a0a:	46d9      	mov	r9, fp
 8002a0c:	eb18 0308 	adds.w	r3, r8, r8
 8002a10:	eb49 0409 	adc.w	r4, r9, r9
 8002a14:	4698      	mov	r8, r3
 8002a16:	46a1      	mov	r9, r4
 8002a18:	eb18 080a 	adds.w	r8, r8, sl
 8002a1c:	eb49 090b 	adc.w	r9, r9, fp
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a34:	4688      	mov	r8, r1
 8002a36:	4691      	mov	r9, r2
 8002a38:	eb1a 0508 	adds.w	r5, sl, r8
 8002a3c:	eb4b 0609 	adc.w	r6, fp, r9
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4619      	mov	r1, r3
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	f04f 0400 	mov.w	r4, #0
 8002a52:	0094      	lsls	r4, r2, #2
 8002a54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a58:	008b      	lsls	r3, r1, #2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4623      	mov	r3, r4
 8002a5e:	4628      	mov	r0, r5
 8002a60:	4631      	mov	r1, r6
 8002a62:	f7fd fbd7 	bl	8000214 <__aeabi_uldivmod>
 8002a66:	4603      	mov	r3, r0
 8002a68:	460c      	mov	r4, r1
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4bb8      	ldr	r3, [pc, #736]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	469b      	mov	fp, r3
 8002a7c:	f04f 0c00 	mov.w	ip, #0
 8002a80:	46d9      	mov	r9, fp
 8002a82:	46e2      	mov	sl, ip
 8002a84:	eb19 0309 	adds.w	r3, r9, r9
 8002a88:	eb4a 040a 	adc.w	r4, sl, sl
 8002a8c:	4699      	mov	r9, r3
 8002a8e:	46a2      	mov	sl, r4
 8002a90:	eb19 090b 	adds.w	r9, r9, fp
 8002a94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002aac:	4689      	mov	r9, r1
 8002aae:	4692      	mov	sl, r2
 8002ab0:	eb1b 0509 	adds.w	r5, fp, r9
 8002ab4:	eb4c 060a 	adc.w	r6, ip, sl
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	f04f 0400 	mov.w	r4, #0
 8002aca:	0094      	lsls	r4, r2, #2
 8002acc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ad0:	008b      	lsls	r3, r1, #2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4623      	mov	r3, r4
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	4631      	mov	r1, r6
 8002ada:	f7fd fb9b 	bl	8000214 <__aeabi_uldivmod>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b9a      	ldr	r3, [pc, #616]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2164      	movs	r1, #100	; 0x64
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	3332      	adds	r3, #50	; 0x32
 8002af8:	4a95      	ldr	r2, [pc, #596]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b04:	4498      	add	r8, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	469b      	mov	fp, r3
 8002b0a:	f04f 0c00 	mov.w	ip, #0
 8002b0e:	46d9      	mov	r9, fp
 8002b10:	46e2      	mov	sl, ip
 8002b12:	eb19 0309 	adds.w	r3, r9, r9
 8002b16:	eb4a 040a 	adc.w	r4, sl, sl
 8002b1a:	4699      	mov	r9, r3
 8002b1c:	46a2      	mov	sl, r4
 8002b1e:	eb19 090b 	adds.w	r9, r9, fp
 8002b22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b26:	f04f 0100 	mov.w	r1, #0
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b3a:	4689      	mov	r9, r1
 8002b3c:	4692      	mov	sl, r2
 8002b3e:	eb1b 0509 	adds.w	r5, fp, r9
 8002b42:	eb4c 060a 	adc.w	r6, ip, sl
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	f04f 0400 	mov.w	r4, #0
 8002b58:	0094      	lsls	r4, r2, #2
 8002b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b5e:	008b      	lsls	r3, r1, #2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4623      	mov	r3, r4
 8002b64:	4628      	mov	r0, r5
 8002b66:	4631      	mov	r1, r6
 8002b68:	f7fd fb54 	bl	8000214 <__aeabi_uldivmod>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b77      	ldr	r3, [pc, #476]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002b74:	fba3 1302 	umull	r1, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2164      	movs	r1, #100	; 0x64
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	3332      	adds	r3, #50	; 0x32
 8002b86:	4a72      	ldr	r2, [pc, #456]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4442      	add	r2, r8
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	e0d0      	b.n	8002d3e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b9c:	f7ff f80c 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	469a      	mov	sl, r3
 8002ba6:	f04f 0b00 	mov.w	fp, #0
 8002baa:	46d0      	mov	r8, sl
 8002bac:	46d9      	mov	r9, fp
 8002bae:	eb18 0308 	adds.w	r3, r8, r8
 8002bb2:	eb49 0409 	adc.w	r4, r9, r9
 8002bb6:	4698      	mov	r8, r3
 8002bb8:	46a1      	mov	r9, r4
 8002bba:	eb18 080a 	adds.w	r8, r8, sl
 8002bbe:	eb49 090b 	adc.w	r9, r9, fp
 8002bc2:	f04f 0100 	mov.w	r1, #0
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bd6:	4688      	mov	r8, r1
 8002bd8:	4691      	mov	r9, r2
 8002bda:	eb1a 0508 	adds.w	r5, sl, r8
 8002bde:	eb4b 0609 	adc.w	r6, fp, r9
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4619      	mov	r1, r3
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	f04f 0400 	mov.w	r4, #0
 8002bf4:	0094      	lsls	r4, r2, #2
 8002bf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bfa:	008b      	lsls	r3, r1, #2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	4628      	mov	r0, r5
 8002c02:	4631      	mov	r1, r6
 8002c04:	f7fd fb06 	bl	8000214 <__aeabi_uldivmod>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b50      	ldr	r3, [pc, #320]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002c10:	fba3 2302 	umull	r2, r3, r3, r2
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	469b      	mov	fp, r3
 8002c1e:	f04f 0c00 	mov.w	ip, #0
 8002c22:	46d9      	mov	r9, fp
 8002c24:	46e2      	mov	sl, ip
 8002c26:	eb19 0309 	adds.w	r3, r9, r9
 8002c2a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c2e:	4699      	mov	r9, r3
 8002c30:	46a2      	mov	sl, r4
 8002c32:	eb19 090b 	adds.w	r9, r9, fp
 8002c36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c4e:	4689      	mov	r9, r1
 8002c50:	4692      	mov	sl, r2
 8002c52:	eb1b 0509 	adds.w	r5, fp, r9
 8002c56:	eb4c 060a 	adc.w	r6, ip, sl
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f04f 0400 	mov.w	r4, #0
 8002c6c:	0094      	lsls	r4, r2, #2
 8002c6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c72:	008b      	lsls	r3, r1, #2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4623      	mov	r3, r4
 8002c78:	4628      	mov	r0, r5
 8002c7a:	4631      	mov	r1, r6
 8002c7c:	f7fd faca 	bl	8000214 <__aeabi_uldivmod>
 8002c80:	4603      	mov	r3, r0
 8002c82:	460c      	mov	r4, r1
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b32      	ldr	r3, [pc, #200]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002c88:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	2164      	movs	r1, #100	; 0x64
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	3332      	adds	r3, #50	; 0x32
 8002c9a:	4a2d      	ldr	r2, [pc, #180]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca6:	4498      	add	r8, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	469b      	mov	fp, r3
 8002cac:	f04f 0c00 	mov.w	ip, #0
 8002cb0:	46d9      	mov	r9, fp
 8002cb2:	46e2      	mov	sl, ip
 8002cb4:	eb19 0309 	adds.w	r3, r9, r9
 8002cb8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cbc:	4699      	mov	r9, r3
 8002cbe:	46a2      	mov	sl, r4
 8002cc0:	eb19 090b 	adds.w	r9, r9, fp
 8002cc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cdc:	4689      	mov	r9, r1
 8002cde:	4692      	mov	sl, r2
 8002ce0:	eb1b 0509 	adds.w	r5, fp, r9
 8002ce4:	eb4c 060a 	adc.w	r6, ip, sl
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4619      	mov	r1, r3
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	f04f 0400 	mov.w	r4, #0
 8002cfa:	0094      	lsls	r4, r2, #2
 8002cfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d00:	008b      	lsls	r3, r1, #2
 8002d02:	461a      	mov	r2, r3
 8002d04:	4623      	mov	r3, r4
 8002d06:	4628      	mov	r0, r5
 8002d08:	4631      	mov	r1, r6
 8002d0a:	f7fd fa83 	bl	8000214 <__aeabi_uldivmod>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	460c      	mov	r4, r1
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002d16:	fba3 1302 	umull	r1, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2164      	movs	r1, #100	; 0x64
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <UART_SetConfig+0x6f4>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4442      	add	r2, r8
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	e7ff      	b.n	8002d3e <UART_SetConfig+0x6e2>
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d48:	40011000 	.word	0x40011000
 8002d4c:	40011400 	.word	0x40011400
 8002d50:	51eb851f 	.word	0x51eb851f

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	4e0d      	ldr	r6, [pc, #52]	; (8002d8c <__libc_init_array+0x38>)
 8002d58:	4c0d      	ldr	r4, [pc, #52]	; (8002d90 <__libc_init_array+0x3c>)
 8002d5a:	1ba4      	subs	r4, r4, r6
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	2500      	movs	r5, #0
 8002d60:	42a5      	cmp	r5, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	4e0b      	ldr	r6, [pc, #44]	; (8002d94 <__libc_init_array+0x40>)
 8002d66:	4c0c      	ldr	r4, [pc, #48]	; (8002d98 <__libc_init_array+0x44>)
 8002d68:	f000 f818 	bl	8002d9c <_init>
 8002d6c:	1ba4      	subs	r4, r4, r6
 8002d6e:	10a4      	asrs	r4, r4, #2
 8002d70:	2500      	movs	r5, #0
 8002d72:	42a5      	cmp	r5, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7c:	4798      	blx	r3
 8002d7e:	3501      	adds	r5, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d86:	4798      	blx	r3
 8002d88:	3501      	adds	r5, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08002e08 	.word	0x08002e08
 8002d90:	08002e08 	.word	0x08002e08
 8002d94:	08002e08 	.word	0x08002e08
 8002d98:	08002e0c 	.word	0x08002e0c

08002d9c <_init>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	bf00      	nop
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr

08002da8 <_fini>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr
