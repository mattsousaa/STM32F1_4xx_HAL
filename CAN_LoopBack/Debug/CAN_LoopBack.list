
CAN_LoopBack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028a8  080028a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028b0  080028b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028b4  080028b4  000128b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080028c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080028c4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082d5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014e0  00000000  00000000  00028311  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  000297f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000698  00000000  00000000  00029f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002137f  00000000  00000000  0002a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067bc  00000000  00000000  0004b95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9d4f  00000000  00000000  0005211b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011be6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d58  00000000  00000000  0011bee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002858 	.word	0x08002858

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002858 	.word	0x08002858

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b972 	b.w	8000510 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	4688      	mov	r8, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14b      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000252:	428a      	cmp	r2, r1
 8000254:	4615      	mov	r5, r2
 8000256:	d967      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0720 	rsb	r7, r2, #32
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	fa20 f707 	lsr.w	r7, r0, r7
 800026a:	4095      	lsls	r5, r2
 800026c:	ea47 0803 	orr.w	r8, r7, r3
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbb8 f7fe 	udiv	r7, r8, lr
 800027c:	fa1f fc85 	uxth.w	ip, r5
 8000280:	fb0e 8817 	mls	r8, lr, r7, r8
 8000284:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000288:	fb07 f10c 	mul.w	r1, r7, ip
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18eb      	adds	r3, r5, r3
 8000292:	f107 30ff 	add.w	r0, r7, #4294967295
 8000296:	f080 811b 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8118 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002a0:	3f02      	subs	r7, #2
 80002a2:	442b      	add	r3, r5
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b8:	45a4      	cmp	ip, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	192c      	adds	r4, r5, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x290>
 80002c6:	45a4      	cmp	ip, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002cc:	3802      	subs	r0, #2
 80002ce:	442c      	add	r4, r5
 80002d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d4:	eba4 040c 	sub.w	r4, r4, ip
 80002d8:	2700      	movs	r7, #0
 80002da:	b11e      	cbz	r6, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c6 4300 	strd	r4, r3, [r6]
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xbe>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80eb 	beq.w	80004ca <__udivmoddi4+0x286>
 80002f4:	2700      	movs	r7, #0
 80002f6:	e9c6 0100 	strd	r0, r1, [r6]
 80002fa:	4638      	mov	r0, r7
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f783 	clz	r7, r3
 8000306:	2f00      	cmp	r7, #0
 8000308:	d147      	bne.n	800039a <__udivmoddi4+0x156>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd0>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2c4>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4698      	mov	r8, r3
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000322:	e9c6 4800 	strd	r4, r8, [r6]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xe8>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 808f 	bne.w	8000454 <__udivmoddi4+0x210>
 8000336:	1b49      	subs	r1, r1, r5
 8000338:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033c:	fa1f f885 	uxth.w	r8, r5
 8000340:	2701      	movs	r7, #1
 8000342:	fbb1 fcfe 	udiv	ip, r1, lr
 8000346:	0c23      	lsrs	r3, r4, #16
 8000348:	fb0e 111c 	mls	r1, lr, ip, r1
 800034c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000350:	fb08 f10c 	mul.w	r1, r8, ip
 8000354:	4299      	cmp	r1, r3
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x124>
 8000358:	18eb      	adds	r3, r5, r3
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4299      	cmp	r1, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 8000366:	4684      	mov	ip, r0
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1410 	mls	r4, lr, r0, r1
 8000374:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x14c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x14a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80b6 	bhi.w	80004fa <__udivmoddi4+0x2b6>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e79f      	b.n	80002da <__udivmoddi4+0x96>
 800039a:	f1c7 0c20 	rsb	ip, r7, #32
 800039e:	40bb      	lsls	r3, r7
 80003a0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ac:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b8:	4325      	orrs	r5, r4
 80003ba:	fbb3 f9f8 	udiv	r9, r3, r8
 80003be:	0c2c      	lsrs	r4, r5, #16
 80003c0:	fb08 3319 	mls	r3, r8, r9, r3
 80003c4:	fa1f fa8e 	uxth.w	sl, lr
 80003c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003cc:	fb09 f40a 	mul.w	r4, r9, sl
 80003d0:	429c      	cmp	r4, r3
 80003d2:	fa02 f207 	lsl.w	r2, r2, r7
 80003d6:	fa00 f107 	lsl.w	r1, r0, r7
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1e 0303 	adds.w	r3, lr, r3
 80003e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e4:	f080 8087 	bcs.w	80004f6 <__udivmoddi4+0x2b2>
 80003e8:	429c      	cmp	r4, r3
 80003ea:	f240 8084 	bls.w	80004f6 <__udivmoddi4+0x2b2>
 80003ee:	f1a9 0902 	sub.w	r9, r9, #2
 80003f2:	4473      	add	r3, lr
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000400:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000404:	fb00 fa0a 	mul.w	sl, r0, sl
 8000408:	45a2      	cmp	sl, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1e 0404 	adds.w	r4, lr, r4
 8000410:	f100 33ff 	add.w	r3, r0, #4294967295
 8000414:	d26b      	bcs.n	80004ee <__udivmoddi4+0x2aa>
 8000416:	45a2      	cmp	sl, r4
 8000418:	d969      	bls.n	80004ee <__udivmoddi4+0x2aa>
 800041a:	3802      	subs	r0, #2
 800041c:	4474      	add	r4, lr
 800041e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000422:	fba0 8902 	umull	r8, r9, r0, r2
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	454c      	cmp	r4, r9
 800042c:	46c2      	mov	sl, r8
 800042e:	464b      	mov	r3, r9
 8000430:	d354      	bcc.n	80004dc <__udivmoddi4+0x298>
 8000432:	d051      	beq.n	80004d8 <__udivmoddi4+0x294>
 8000434:	2e00      	cmp	r6, #0
 8000436:	d069      	beq.n	800050c <__udivmoddi4+0x2c8>
 8000438:	ebb1 050a 	subs.w	r5, r1, sl
 800043c:	eb64 0403 	sbc.w	r4, r4, r3
 8000440:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000444:	40fd      	lsrs	r5, r7
 8000446:	40fc      	lsrs	r4, r7
 8000448:	ea4c 0505 	orr.w	r5, ip, r5
 800044c:	e9c6 5400 	strd	r5, r4, [r6]
 8000450:	2700      	movs	r7, #0
 8000452:	e747      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f703 	lsr.w	r7, r0, r3
 800045c:	4095      	lsls	r5, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	fa21 f303 	lsr.w	r3, r1, r3
 8000466:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046a:	4338      	orrs	r0, r7
 800046c:	0c01      	lsrs	r1, r0, #16
 800046e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000472:	fa1f f885 	uxth.w	r8, r5
 8000476:	fb0e 3317 	mls	r3, lr, r7, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb07 f308 	mul.w	r3, r7, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x256>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000490:	d22f      	bcs.n	80004f2 <__udivmoddi4+0x2ae>
 8000492:	428b      	cmp	r3, r1
 8000494:	d92d      	bls.n	80004f2 <__udivmoddi4+0x2ae>
 8000496:	3f02      	subs	r7, #2
 8000498:	4429      	add	r1, r5
 800049a:	1acb      	subs	r3, r1, r3
 800049c:	b281      	uxth	r1, r0
 800049e:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb00 f308 	mul.w	r3, r0, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x27e>
 80004b2:	1869      	adds	r1, r5, r1
 80004b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b8:	d217      	bcs.n	80004ea <__udivmoddi4+0x2a6>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d915      	bls.n	80004ea <__udivmoddi4+0x2a6>
 80004be:	3802      	subs	r0, #2
 80004c0:	4429      	add	r1, r5
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c8:	e73b      	b.n	8000342 <__udivmoddi4+0xfe>
 80004ca:	4637      	mov	r7, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e709      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004d0:	4607      	mov	r7, r0
 80004d2:	e6e7      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d8:	4541      	cmp	r1, r8
 80004da:	d2ab      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004dc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e0:	eb69 020e 	sbc.w	r2, r9, lr
 80004e4:	3801      	subs	r0, #1
 80004e6:	4613      	mov	r3, r2
 80004e8:	e7a4      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ea:	4660      	mov	r0, ip
 80004ec:	e7e9      	b.n	80004c2 <__udivmoddi4+0x27e>
 80004ee:	4618      	mov	r0, r3
 80004f0:	e795      	b.n	800041e <__udivmoddi4+0x1da>
 80004f2:	4667      	mov	r7, ip
 80004f4:	e7d1      	b.n	800049a <__udivmoddi4+0x256>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e77c      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fa:	3802      	subs	r0, #2
 80004fc:	442c      	add	r4, r5
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0x14c>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	442b      	add	r3, r5
 8000506:	e72f      	b.n	8000368 <__udivmoddi4+0x124>
 8000508:	4638      	mov	r0, r7
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xda>
 800050c:	4637      	mov	r7, r6
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0xa0>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
void CAN1_Rx(void);

UART_HandleTypeDef huart2;
CAN_HandleTypeDef hcan1;

int main(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

	HAL_Init();
 8000518:	f000 fa32 	bl	8000980 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 800051c:	2032      	movs	r0, #50	; 0x32
 800051e:	f000 f813 	bl	8000548 <SystemClock_Config_HSE>

	GPIO_Init();
 8000522:	f000 f8a7 	bl	8000674 <GPIO_Init>

	UART2_Init();
 8000526:	f000 f919 	bl	800075c <UART2_Init>

	CAN1_Init();
 800052a:	f000 f941 	bl	80007b0 <CAN1_Init>

	if(HAL_CAN_Start(&hcan1) != HAL_OK){
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x30>)
 8000530:	f000 fb9d 	bl	8000c6e <HAL_CAN_Start>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <main+0x2a>
		Error_handler();
 800053a:	f000 f935 	bl	80007a8 <Error_handler>
	}

	CAN1_Tx();
 800053e:	f000 f8bd 	bl	80006bc <CAN1_Tx>

	while(1);
 8000542:	e7fe      	b.n	8000542 <main+0x2e>
 8000544:	20000068 	.word	0x20000068

08000548 <SystemClock_Config_HSE>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq){
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 8000552:	2300      	movs	r3, #0
 8000554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000558:	2301      	movs	r3, #1
 800055a:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	623b      	str	r3, [r7, #32]
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq){
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	2b54      	cmp	r3, #84	; 0x54
 8000570:	d01d      	beq.n	80005ae <SystemClock_Config_HSE+0x66>
 8000572:	2b78      	cmp	r3, #120	; 0x78
 8000574:	d034      	beq.n	80005e0 <SystemClock_Config_HSE+0x98>
 8000576:	2b32      	cmp	r3, #50	; 0x32
 8000578:	d000      	beq.n	800057c <SystemClock_Config_HSE+0x34>
          flash_latency = 3;
          break;

	  default:

		  return ;
 800057a:	e076      	b.n	800066a <SystemClock_Config_HSE+0x122>
		  Osc_Init.PLL.PLLM = 4;
 800057c:	2304      	movs	r3, #4
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 8000580:	2332      	movs	r3, #50	; 0x32
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000588:	2302      	movs	r3, #2
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 80005ac:	e032      	b.n	8000614 <SystemClock_Config_HSE+0xcc>
		  Osc_Init.PLL.PLLM = 4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 80005b2:	2354      	movs	r3, #84	; 0x54
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 80005de:	e019      	b.n	8000614 <SystemClock_Config_HSE+0xcc>
		  Osc_Init.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 80005e4:	2378      	movs	r3, #120	; 0x78
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 800060c:	2303      	movs	r3, #3
 800060e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 8000612:	bf00      	nop
	 }

	if(HAL_RCC_OscConfig(&Osc_Init) != HAL_OK){
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f001 f9f3 	bl	8001a04 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config_HSE+0xe0>
		Error_handler();
 8000624:	f000 f8c0 	bl	80007a8 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK){
 8000628:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f000 ff2c 	bl	8001490 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config_HSE+0xfa>
		Error_handler();
 800063e:	f000 f8b3 	bl	80007a8 <Error_handler>
	}

	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000642:	f001 f80b 	bl	800165c <HAL_RCC_GetHCLKFreq>
 8000646:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <SystemClock_Config_HSE+0x128>)
 800064c:	fba2 2303 	umull	r2, r3, r2, r3
 8000650:	099b      	lsrs	r3, r3, #6
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fd53 	bl	80010fe <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000658:	2004      	movs	r0, #4
 800065a:	f000 fd5d 	bl	8001118 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	f04f 30ff 	mov.w	r0, #4294967295
 8000666:	f000 fd20 	bl	80010aa <HAL_NVIC_SetPriority>

}
 800066a:	3758      	adds	r7, #88	; 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	10624dd3 	.word	0x10624dd3

08000674 <GPIO_Init>:

void GPIO_Init(void){
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <GPIO_Init+0x40>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <GPIO_Init+0x40>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <GPIO_Init+0x40>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 8000696:	2320      	movs	r3, #32
 8000698:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <GPIO_Init+0x44>)
 80006a8:	f000 fd60 	bl	800116c <HAL_GPIO_Init>
}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020000 	.word	0x40020000

080006bc <CAN1_Tx>:

void CAN1_Tx(void){
 80006bc:	b5b0      	push	{r4, r5, r7, lr}
 80006be:	b096      	sub	sp, #88	; 0x58
 80006c0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;
	char msg[50];

	uint8_t our_message[5] = {'H','E','L','L','O'};
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <CAN1_Tx+0x90>)
 80006c4:	463b      	mov	r3, r7
 80006c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ca:	6018      	str	r0, [r3, #0]
 80006cc:	3304      	adds	r3, #4
 80006ce:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;				/* Specifies the length of the frame that will be transmitted */
 80006d0:	2305      	movs	r3, #5
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
	TxHeader.StdId = 0x65D;			/* Specifies the standard identifier */
 80006d4:	f240 635d 	movw	r3, #1629	; 0x65d
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
	TxHeader.IDE = CAN_ID_STD;		/* Specifies the type of identifier for the message that will be transmitted */
 80006da:	2300      	movs	r3, #0
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
	TxHeader.RTR = CAN_RTR_DATA;	/* Specifies the type of frame for the message that will be transmitted */
 80006de:	2300      	movs	r3, #0
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, our_message, &TxMailbox) != HAL_OK){
 80006e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006e6:	463a      	mov	r2, r7
 80006e8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80006ec:	4818      	ldr	r0, [pc, #96]	; (8000750 <CAN1_Tx+0x94>)
 80006ee:	f000 fb02 	bl	8000cf6 <HAL_CAN_AddTxMessage>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <CAN1_Tx+0x40>
		Error_handler();
 80006f8:	f000 f856 	bl	80007a8 <Error_handler>
	}

	while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 80006fc:	bf00      	nop
 80006fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000700:	4619      	mov	r1, r3
 8000702:	4813      	ldr	r0, [pc, #76]	; (8000750 <CAN1_Tx+0x94>)
 8000704:	f000 fbd2 	bl	8000eac <HAL_CAN_IsTxMessagePending>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f7      	bne.n	80006fe <CAN1_Tx+0x42>

	sprintf(msg,"Message Transmitted\r\n");
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <CAN1_Tx+0x98>)
 8000714:	461c      	mov	r4, r3
 8000716:	4615      	mov	r5, r2
 8000718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000720:	6020      	str	r0, [r4, #0]
 8000722:	3404      	adds	r4, #4
 8000724:	8021      	strh	r1, [r4, #0]

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd6a 	bl	8000204 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	f107 0108 	add.w	r1, r7, #8
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	4806      	ldr	r0, [pc, #24]	; (8000758 <CAN1_Tx+0x9c>)
 800073e:	f001 fc08 	bl	8001f52 <HAL_UART_Transmit>

}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	; 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bdb0      	pop	{r4, r5, r7, pc}
 800074a:	bf00      	nop
 800074c:	08002888 	.word	0x08002888
 8000750:	20000068 	.word	0x20000068
 8000754:	08002870 	.word	0x08002870
 8000758:	20000028 	.word	0x20000028

0800075c <UART2_Init>:

void UART2_Init(void){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <UART2_Init+0x44>)
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <UART2_Init+0x48>)
 8000764:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <UART2_Init+0x44>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <UART2_Init+0x44>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <UART2_Init+0x44>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <UART2_Init+0x44>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <UART2_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <UART2_Init+0x44>)
 8000788:	220c      	movs	r2, #12
 800078a:	615a      	str	r2, [r3, #20]

	if (HAL_UART_Init(&huart2) != HAL_OK){
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <UART2_Init+0x44>)
 800078e:	f001 fb93 	bl	8001eb8 <HAL_UART_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <UART2_Init+0x40>
		//There is a problem
		Error_handler();
 8000798:	f000 f806 	bl	80007a8 <Error_handler>
	}
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000028 	.word	0x20000028
 80007a4:	40004400 	.word	0x40004400

080007a8 <Error_handler>:

void Error_handler(void){
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	while(1);
 80007ac:	e7fe      	b.n	80007ac <Error_handler+0x4>
	...

080007b0 <CAN1_Init>:
}

void CAN1_Init(void){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <CAN1_Init+0x64>)
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <CAN1_Init+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <CAN1_Init+0x64>)
 80007bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c0:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <CAN1_Init+0x64>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <CAN1_Init+0x64>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <CAN1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <CAN1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <CAN1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <CAN1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	775a      	strb	r2, [r3, #29]

	// Settings related to CAN bit timings
	// http://www.bittiming.can-wiki.info/
	hcan1.Init.Prescaler = 5;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <CAN1_Init+0x64>)
 80007e8:	2205      	movs	r2, #5
 80007ea:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;	//1 quantum
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <CAN1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <CAN1_Init+0x64>)
 80007f4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80007f8:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <CAN1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&hcan1) != HAL_OK){
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <CAN1_Init+0x64>)
 8000802:	f000 f92f 	bl	8000a64 <HAL_CAN_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <CAN1_Init+0x60>
		Error_handler();
 800080c:	f7ff ffcc 	bl	80007a8 <Error_handler>
	}
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000068 	.word	0x20000068
 8000818:	40006400 	.word	0x40006400

0800081c <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

	//Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 fc37 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_MspInit+0x40>)
 8000828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <HAL_MspInit+0x40>)
 800082c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000830:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	f06f 000b 	mvn.w	r0, #11
 800083a:	f000 fc36 	bl	80010aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	f06f 000a 	mvn.w	r0, #10
 8000846:	f000 fc30 	bl	80010aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	f06f 0009 	mvn.w	r0, #9
 8000852:	f000 fc2a 	bl	80010aa <HAL_NVIC_SetPriority>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <HAL_UART_MspInit>:

 void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <HAL_UART_MspInit+0x88>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <HAL_UART_MspInit+0x88>)
 8000872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_UART_MspInit+0x88>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_UART_MspInit+0x88>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_UART_MspInit+0x88>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_UART_MspInit+0x88>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80008a0:	2304      	movs	r3, #4
 80008a2:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80008b0:	2307      	movs	r3, #7
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <HAL_UART_MspInit+0x8c>)
 80008bc:	f000 fc56 	bl	800116c <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80008c0:	2308      	movs	r3, #8
 80008c2:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4808      	ldr	r0, [pc, #32]	; (80008ec <HAL_UART_MspInit+0x8c>)
 80008cc:	f000 fc4e 	bl	800116c <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008d0:	2026      	movs	r0, #38	; 0x26
 80008d2:	f000 fc06 	bl	80010e2 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	2026      	movs	r0, #38	; 0x26
 80008dc:	f000 fbe5 	bl	80010aa <HAL_NVIC_SetPriority>

}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000

080008f0 <SysTick_Handler>:
#include "main.h"

void SysTick_Handler (void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80008f4:	f000 f896 	bl	8000a24 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80008f8:	f000 fc2a 	bl	8001150 <HAL_SYSTICK_IRQHandler>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <SystemInit+0x28>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <SystemInit+0x28>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SystemInit+0x28>)
 8000916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800091a:	609a      	str	r2, [r3, #8]
#endif
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000964 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000930:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000932:	e003      	b.n	800093c <LoopCopyDataInit>

08000934 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000936:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000938:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800093a:	3104      	adds	r1, #4

0800093c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000940:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000942:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000944:	d3f6      	bcc.n	8000934 <CopyDataInit>
  ldr  r2, =_sbss
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000948:	e002      	b.n	8000950 <LoopFillZerobss>

0800094a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800094a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800094c:	f842 3b04 	str.w	r3, [r2], #4

08000950 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000952:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000954:	d3f9      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000956:	f7ff ffd3 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f001 ff59 	bl	8002810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fdd9 	bl	8000514 <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000968:	080028b8 	.word	0x080028b8
  ldr  r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000970:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000974:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000978:	20000094 	.word	0x20000094

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <HAL_Init+0x40>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_Init+0x40>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_Init+0x40>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 fb73 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff ff32 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fb8b 	bl	80010fe <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 fb53 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000090 	.word	0x20000090

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000090 	.word	0x20000090

08000a64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0ed      	b.n	8000c52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f8e9 	bl	8000c5a <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f022 0202 	bic.w	r2, r2, #2
 8000a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a98:	f7ff ffd8 	bl	8000a4c <HAL_GetTick>
 8000a9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a9e:	e012      	b.n	8000ac6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aa0:	f7ff ffd4 	bl	8000a4c <HAL_GetTick>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b0a      	cmp	r3, #10
 8000aac:	d90b      	bls.n	8000ac6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2205      	movs	r2, #5
 8000abe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e0c5      	b.n	8000c52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1e5      	bne.n	8000aa0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 0201 	orr.w	r2, r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae4:	f7ff ffb2 	bl	8000a4c <HAL_GetTick>
 8000ae8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aea:	e012      	b.n	8000b12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aec:	f7ff ffae 	bl	8000a4c <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b0a      	cmp	r3, #10
 8000af8:	d90b      	bls.n	8000b12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2205      	movs	r2, #5
 8000b0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e09f      	b.n	8000c52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0e5      	beq.n	8000aec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7e1b      	ldrb	r3, [r3, #24]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d108      	bne.n	8000b3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	e007      	b.n	8000b4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7e5b      	ldrb	r3, [r3, #25]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d108      	bne.n	8000b64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	e007      	b.n	8000b74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7e9b      	ldrb	r3, [r3, #26]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d108      	bne.n	8000b8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 0220 	orr.w	r2, r2, #32
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	e007      	b.n	8000b9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 0220 	bic.w	r2, r2, #32
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7edb      	ldrb	r3, [r3, #27]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d108      	bne.n	8000bb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 0210 	bic.w	r2, r2, #16
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e007      	b.n	8000bc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f042 0210 	orr.w	r2, r2, #16
 8000bc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7f1b      	ldrb	r3, [r3, #28]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d108      	bne.n	8000be2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f042 0208 	orr.w	r2, r2, #8
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	e007      	b.n	8000bf2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 0208 	bic.w	r2, r2, #8
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7f5b      	ldrb	r3, [r3, #29]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d108      	bne.n	8000c0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f042 0204 	orr.w	r2, r2, #4
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e007      	b.n	8000c1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 0204 	bic.w	r2, r2, #4
 8000c1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	431a      	orrs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	ea42 0103 	orr.w	r1, r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	1e5a      	subs	r2, r3, #1
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d12e      	bne.n	8000ce0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2202      	movs	r2, #2
 8000c86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0201 	bic.w	r2, r2, #1
 8000c98:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c9a:	f7ff fed7 	bl	8000a4c <HAL_GetTick>
 8000c9e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ca0:	e012      	b.n	8000cc8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca2:	f7ff fed3 	bl	8000a4c <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b0a      	cmp	r3, #10
 8000cae:	d90b      	bls.n	8000cc8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2205      	movs	r2, #5
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e012      	b.n	8000cee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1e5      	bne.n	8000ca2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e006      	b.n	8000cee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
  }
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b089      	sub	sp, #36	; 0x24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d14:	7ffb      	ldrb	r3, [r7, #31]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d003      	beq.n	8000d22 <HAL_CAN_AddTxMessage+0x2c>
 8000d1a:	7ffb      	ldrb	r3, [r7, #31]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	f040 80b8 	bne.w	8000e92 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10a      	bne.n	8000d42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d105      	bne.n	8000d42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80a0 	beq.w	8000e82 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	0e1b      	lsrs	r3, r3, #24
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d907      	bls.n	8000d62 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e09e      	b.n	8000ea0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d62:	2201      	movs	r2, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10d      	bne.n	8000d90 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d7e:	68f9      	ldr	r1, [r7, #12]
 8000d80:	6809      	ldr	r1, [r1, #0]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	3318      	adds	r3, #24
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	440b      	add	r3, r1
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	e00f      	b.n	8000db0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d9a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000da0:	68f9      	ldr	r1, [r7, #12]
 8000da2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000da4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3318      	adds	r3, #24
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	440b      	add	r3, r1
 8000dae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6819      	ldr	r1, [r3, #0]
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3318      	adds	r3, #24
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	7d1b      	ldrb	r3, [r3, #20]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d111      	bne.n	8000df0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3318      	adds	r3, #24
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	6811      	ldr	r1, [r2, #0]
 8000de0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3318      	adds	r3, #24
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	440b      	add	r3, r1
 8000dec:	3304      	adds	r3, #4
 8000dee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3307      	adds	r3, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	061a      	lsls	r2, r3, #24
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3306      	adds	r3, #6
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	041b      	lsls	r3, r3, #16
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3305      	adds	r3, #5
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	3204      	adds	r2, #4
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	4610      	mov	r0, r2
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	6811      	ldr	r1, [r2, #0]
 8000e18:	ea43 0200 	orr.w	r2, r3, r0
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	440b      	add	r3, r1
 8000e22:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e26:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3303      	adds	r3, #3
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	061a      	lsls	r2, r3, #24
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3302      	adds	r3, #2
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	041b      	lsls	r3, r3, #16
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	4313      	orrs	r3, r2
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	4610      	mov	r0, r2
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	6811      	ldr	r1, [r2, #0]
 8000e4e:	ea43 0200 	orr.w	r2, r3, r0
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	440b      	add	r3, r1
 8000e58:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000e5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3318      	adds	r3, #24
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	4413      	add	r3, r2
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	6811      	ldr	r1, [r2, #0]
 8000e70:	f043 0201 	orr.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3318      	adds	r3, #24
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	440b      	add	r3, r1
 8000e7c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e00e      	b.n	8000ea0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e006      	b.n	8000ea0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
  }
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3724      	adds	r7, #36	; 0x24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec2:	7afb      	ldrb	r3, [r7, #11]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d002      	beq.n	8000ece <HAL_CAN_IsTxMessagePending+0x22>
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	069b      	lsls	r3, r3, #26
 8000ed8:	401a      	ands	r2, r3
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	069b      	lsls	r3, r3, #26
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d001      	beq.n	8000ee6 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff3e 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff31 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffa2 	bl	8001050 <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b04      	cmp	r3, #4
 8001124:	d106      	bne.n	8001134 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001132:	e005      	b.n	8001140 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800113a:	f023 0304 	bic.w	r3, r3, #4
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001154:	f000 f802 	bl	800115c <HAL_SYSTICK_Callback>
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e165      	b.n	8001454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8154 	bne.w	800144e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d00b      	beq.n	80011c6 <HAL_GPIO_Init+0x5a>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ba:	2b11      	cmp	r3, #17
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d130      	bne.n	8001228 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 0201 	and.w	r2, r3, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0xfc>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80ae 	beq.w	800144e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b5c      	ldr	r3, [pc, #368]	; (8001468 <HAL_GPIO_Init+0x2fc>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a5b      	ldr	r2, [pc, #364]	; (8001468 <HAL_GPIO_Init+0x2fc>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <HAL_GPIO_Init+0x2fc>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a57      	ldr	r2, [pc, #348]	; (800146c <HAL_GPIO_Init+0x300>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x21a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <HAL_GPIO_Init+0x308>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x216>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4c      	ldr	r2, [pc, #304]	; (8001478 <HAL_GPIO_Init+0x30c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x212>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4b      	ldr	r2, [pc, #300]	; (800147c <HAL_GPIO_Init+0x310>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x20e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4a      	ldr	r2, [pc, #296]	; (8001480 <HAL_GPIO_Init+0x314>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x20a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a49      	ldr	r2, [pc, #292]	; (8001484 <HAL_GPIO_Init+0x318>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x206>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a48      	ldr	r2, [pc, #288]	; (8001488 <HAL_GPIO_Init+0x31c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x202>
 800136a:	2306      	movs	r3, #6
 800136c:	e00c      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 800136e:	2307      	movs	r3, #7
 8001370:	e00a      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001376:	2304      	movs	r3, #4
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001386:	2300      	movs	r3, #0
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001398:	4934      	ldr	r1, [pc, #208]	; (800146c <HAL_GPIO_Init+0x300>)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <HAL_GPIO_Init+0x320>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ca:	4a30      	ldr	r2, [pc, #192]	; (800148c <HAL_GPIO_Init+0x320>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <HAL_GPIO_Init+0x320>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f4:	4a25      	ldr	r2, [pc, #148]	; (800148c <HAL_GPIO_Init+0x320>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_GPIO_Init+0x320>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141e:	4a1b      	ldr	r2, [pc, #108]	; (800148c <HAL_GPIO_Init+0x320>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_GPIO_Init+0x320>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001448:	4a10      	ldr	r2, [pc, #64]	; (800148c <HAL_GPIO_Init+0x320>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f67f ae96 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800145c:	bf00      	nop
 800145e:	3724      	adds	r7, #36	; 0x24
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40021400 	.word	0x40021400
 8001488:	40021800 	.word	0x40021800
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0cc      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d90c      	bls.n	80014cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b63      	ldr	r3, [pc, #396]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0b8      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e4:	4b59      	ldr	r3, [pc, #356]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a58      	ldr	r2, [pc, #352]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014fc:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a52      	ldr	r2, [pc, #328]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001508:	4b50      	ldr	r3, [pc, #320]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	494d      	ldr	r1, [pc, #308]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d044      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d119      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e07f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d003      	beq.n	800154e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154a:	2b03      	cmp	r3, #3
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e06f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e067      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156e:	4b37      	ldr	r3, [pc, #220]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f023 0203 	bic.w	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4934      	ldr	r1, [pc, #208]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001580:	f7ff fa64 	bl	8000a4c <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	e00a      	b.n	800159e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001588:	f7ff fa60 	bl	8000a4c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e04f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 020c 	and.w	r2, r3, #12
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1eb      	bne.n	8001588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d20c      	bcs.n	80015d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e032      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4916      	ldr	r1, [pc, #88]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	490e      	ldr	r1, [pc, #56]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001616:	f000 f855 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 800161a:	4601      	mov	r1, r0
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	fa21 f303 	lsr.w	r3, r1, r3
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f9c4 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00
 800164c:	40023800 	.word	0x40023800
 8001650:	08002890 	.word	0x08002890
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_RCC_GetHCLKFreq+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001678:	f7ff fff0 	bl	800165c <HAL_RCC_GetHCLKFreq>
 800167c:	4601      	mov	r1, r0
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	0a9b      	lsrs	r3, r3, #10
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	080028a0 	.word	0x080028a0

0800169c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016a0:	f7ff ffdc 	bl	800165c <HAL_RCC_GetHCLKFreq>
 80016a4:	4601      	mov	r1, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	0b5b      	lsrs	r3, r3, #13
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	080028a0 	.word	0x080028a0

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016de:	4bc6      	ldr	r3, [pc, #792]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	f200 817e 	bhi.w	80019e8 <HAL_RCC_GetSysClockFreq+0x324>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001729 	.word	0x08001729
 80016f8:	080019e9 	.word	0x080019e9
 80016fc:	080019e9 	.word	0x080019e9
 8001700:	080019e9 	.word	0x080019e9
 8001704:	0800172f 	.word	0x0800172f
 8001708:	080019e9 	.word	0x080019e9
 800170c:	080019e9 	.word	0x080019e9
 8001710:	080019e9 	.word	0x080019e9
 8001714:	08001735 	.word	0x08001735
 8001718:	080019e9 	.word	0x080019e9
 800171c:	080019e9 	.word	0x080019e9
 8001720:	080019e9 	.word	0x080019e9
 8001724:	08001891 	.word	0x08001891
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4bb4      	ldr	r3, [pc, #720]	; (80019fc <HAL_RCC_GetSysClockFreq+0x338>)
 800172a:	613b      	str	r3, [r7, #16]
       break;
 800172c:	e15f      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800172e:	4bb4      	ldr	r3, [pc, #720]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001730:	613b      	str	r3, [r7, #16]
      break;
 8001732:	e15c      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001734:	4bb0      	ldr	r3, [pc, #704]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800173c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173e:	4bae      	ldr	r3, [pc, #696]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d04a      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174a:	4bab      	ldr	r3, [pc, #684]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	ea03 0501 	and.w	r5, r3, r1
 8001760:	ea04 0602 	and.w	r6, r4, r2
 8001764:	4629      	mov	r1, r5
 8001766:	4632      	mov	r2, r6
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	f04f 0400 	mov.w	r4, #0
 8001770:	0154      	lsls	r4, r2, #5
 8001772:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001776:	014b      	lsls	r3, r1, #5
 8001778:	4619      	mov	r1, r3
 800177a:	4622      	mov	r2, r4
 800177c:	1b49      	subs	r1, r1, r5
 800177e:	eb62 0206 	sbc.w	r2, r2, r6
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	f04f 0400 	mov.w	r4, #0
 800178a:	0194      	lsls	r4, r2, #6
 800178c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001790:	018b      	lsls	r3, r1, #6
 8001792:	1a5b      	subs	r3, r3, r1
 8001794:	eb64 0402 	sbc.w	r4, r4, r2
 8001798:	f04f 0100 	mov.w	r1, #0
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	00e2      	lsls	r2, r4, #3
 80017a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017a6:	00d9      	lsls	r1, r3, #3
 80017a8:	460b      	mov	r3, r1
 80017aa:	4614      	mov	r4, r2
 80017ac:	195b      	adds	r3, r3, r5
 80017ae:	eb44 0406 	adc.w	r4, r4, r6
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	0262      	lsls	r2, r4, #9
 80017bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017c0:	0259      	lsls	r1, r3, #9
 80017c2:	460b      	mov	r3, r1
 80017c4:	4614      	mov	r4, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	4621      	mov	r1, r4
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f04f 0400 	mov.w	r4, #0
 80017d0:	461a      	mov	r2, r3
 80017d2:	4623      	mov	r3, r4
 80017d4:	f7fe fd1e 	bl	8000214 <__aeabi_uldivmod>
 80017d8:	4603      	mov	r3, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e049      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e0:	4b85      	ldr	r3, [pc, #532]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	f04f 0400 	mov.w	r4, #0
 80017ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	ea03 0501 	and.w	r5, r3, r1
 80017f6:	ea04 0602 	and.w	r6, r4, r2
 80017fa:	4629      	mov	r1, r5
 80017fc:	4632      	mov	r2, r6
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	f04f 0400 	mov.w	r4, #0
 8001806:	0154      	lsls	r4, r2, #5
 8001808:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800180c:	014b      	lsls	r3, r1, #5
 800180e:	4619      	mov	r1, r3
 8001810:	4622      	mov	r2, r4
 8001812:	1b49      	subs	r1, r1, r5
 8001814:	eb62 0206 	sbc.w	r2, r2, r6
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	f04f 0400 	mov.w	r4, #0
 8001820:	0194      	lsls	r4, r2, #6
 8001822:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001826:	018b      	lsls	r3, r1, #6
 8001828:	1a5b      	subs	r3, r3, r1
 800182a:	eb64 0402 	sbc.w	r4, r4, r2
 800182e:	f04f 0100 	mov.w	r1, #0
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	00e2      	lsls	r2, r4, #3
 8001838:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800183c:	00d9      	lsls	r1, r3, #3
 800183e:	460b      	mov	r3, r1
 8001840:	4614      	mov	r4, r2
 8001842:	195b      	adds	r3, r3, r5
 8001844:	eb44 0406 	adc.w	r4, r4, r6
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	02a2      	lsls	r2, r4, #10
 8001852:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001856:	0299      	lsls	r1, r3, #10
 8001858:	460b      	mov	r3, r1
 800185a:	4614      	mov	r4, r2
 800185c:	4618      	mov	r0, r3
 800185e:	4621      	mov	r1, r4
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f04f 0400 	mov.w	r4, #0
 8001866:	461a      	mov	r2, r3
 8001868:	4623      	mov	r3, r4
 800186a:	f7fe fcd3 	bl	8000214 <__aeabi_uldivmod>
 800186e:	4603      	mov	r3, r0
 8001870:	460c      	mov	r4, r1
 8001872:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001874:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	3301      	adds	r3, #1
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	613b      	str	r3, [r7, #16]
      break;
 800188e:	e0ae      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001890:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001898:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800189a:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d04a      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a6:	4b54      	ldr	r3, [pc, #336]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	f04f 0400 	mov.w	r4, #0
 80018b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	ea03 0501 	and.w	r5, r3, r1
 80018bc:	ea04 0602 	and.w	r6, r4, r2
 80018c0:	4629      	mov	r1, r5
 80018c2:	4632      	mov	r2, r6
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	f04f 0400 	mov.w	r4, #0
 80018cc:	0154      	lsls	r4, r2, #5
 80018ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018d2:	014b      	lsls	r3, r1, #5
 80018d4:	4619      	mov	r1, r3
 80018d6:	4622      	mov	r2, r4
 80018d8:	1b49      	subs	r1, r1, r5
 80018da:	eb62 0206 	sbc.w	r2, r2, r6
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	f04f 0400 	mov.w	r4, #0
 80018e6:	0194      	lsls	r4, r2, #6
 80018e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018ec:	018b      	lsls	r3, r1, #6
 80018ee:	1a5b      	subs	r3, r3, r1
 80018f0:	eb64 0402 	sbc.w	r4, r4, r2
 80018f4:	f04f 0100 	mov.w	r1, #0
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	00e2      	lsls	r2, r4, #3
 80018fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001902:	00d9      	lsls	r1, r3, #3
 8001904:	460b      	mov	r3, r1
 8001906:	4614      	mov	r4, r2
 8001908:	195b      	adds	r3, r3, r5
 800190a:	eb44 0406 	adc.w	r4, r4, r6
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	0262      	lsls	r2, r4, #9
 8001918:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800191c:	0259      	lsls	r1, r3, #9
 800191e:	460b      	mov	r3, r1
 8001920:	4614      	mov	r4, r2
 8001922:	4618      	mov	r0, r3
 8001924:	4621      	mov	r1, r4
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f04f 0400 	mov.w	r4, #0
 800192c:	461a      	mov	r2, r3
 800192e:	4623      	mov	r3, r4
 8001930:	f7fe fc70 	bl	8000214 <__aeabi_uldivmod>
 8001934:	4603      	mov	r3, r0
 8001936:	460c      	mov	r4, r1
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e049      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	f04f 0400 	mov.w	r4, #0
 8001946:	f240 11ff 	movw	r1, #511	; 0x1ff
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	ea03 0501 	and.w	r5, r3, r1
 8001952:	ea04 0602 	and.w	r6, r4, r2
 8001956:	4629      	mov	r1, r5
 8001958:	4632      	mov	r2, r6
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	f04f 0400 	mov.w	r4, #0
 8001962:	0154      	lsls	r4, r2, #5
 8001964:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001968:	014b      	lsls	r3, r1, #5
 800196a:	4619      	mov	r1, r3
 800196c:	4622      	mov	r2, r4
 800196e:	1b49      	subs	r1, r1, r5
 8001970:	eb62 0206 	sbc.w	r2, r2, r6
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	f04f 0400 	mov.w	r4, #0
 800197c:	0194      	lsls	r4, r2, #6
 800197e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001982:	018b      	lsls	r3, r1, #6
 8001984:	1a5b      	subs	r3, r3, r1
 8001986:	eb64 0402 	sbc.w	r4, r4, r2
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	00e2      	lsls	r2, r4, #3
 8001994:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001998:	00d9      	lsls	r1, r3, #3
 800199a:	460b      	mov	r3, r1
 800199c:	4614      	mov	r4, r2
 800199e:	195b      	adds	r3, r3, r5
 80019a0:	eb44 0406 	adc.w	r4, r4, r6
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	02a2      	lsls	r2, r4, #10
 80019ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019b2:	0299      	lsls	r1, r3, #10
 80019b4:	460b      	mov	r3, r1
 80019b6:	4614      	mov	r4, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	4621      	mov	r1, r4
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f04f 0400 	mov.w	r4, #0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4623      	mov	r3, r4
 80019c6:	f7fe fc25 	bl	8000214 <__aeabi_uldivmod>
 80019ca:	4603      	mov	r3, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	0f1b      	lsrs	r3, r3, #28
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	613b      	str	r3, [r7, #16]
      break;
 80019e6:	e002      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_RCC_GetSysClockFreq+0x338>)
 80019ea:	613b      	str	r3, [r7, #16]
      break;
 80019ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ee:	693b      	ldr	r3, [r7, #16]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	007a1200 	.word	0x007a1200

08001a04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 8083 	beq.w	8001b24 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a1e:	4b95      	ldr	r3, [pc, #596]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d019      	beq.n	8001a5e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a2a:	4b92      	ldr	r3, [pc, #584]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a36:	4b8f      	ldr	r3, [pc, #572]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a42:	d00c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a44:	4b8b      	ldr	r3, [pc, #556]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d112      	bne.n	8001a76 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a50:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a5c:	d10b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5e:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d05b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x11e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d157      	bne.n	8001b22 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e216      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x8a>
 8001a80:	4b7c      	ldr	r3, [pc, #496]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a7b      	ldr	r2, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e01d      	b.n	8001aca <HAL_RCC_OscConfig+0xc6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a96:	d10c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0xae>
 8001a98:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a75      	ldr	r2, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a72      	ldr	r2, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e00b      	b.n	8001aca <HAL_RCC_OscConfig+0xc6>
 8001ab2:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6f      	ldr	r2, [pc, #444]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a6c      	ldr	r2, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d013      	beq.n	8001afa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7fe ffbb 	bl	8000a4c <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ada:	f7fe ffb7 	bl	8000a4c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	; 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e1db      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aec:	4b61      	ldr	r3, [pc, #388]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0xd6>
 8001af8:	e014      	b.n	8001b24 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7fe ffa7 	bl	8000a4c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b02:	f7fe ffa3 	bl	8000a4c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1c7      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b14:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0xfe>
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d06f      	beq.n	8001c10 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d017      	beq.n	8001b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b48:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00b      	beq.n	8001b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b54:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b5c:	2b0c      	cmp	r3, #12
 8001b5e:	d11c      	bne.n	8001b9a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b60:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d116      	bne.n	8001b9a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6c:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_OscConfig+0x180>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e18f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4938      	ldr	r1, [pc, #224]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b98:	e03a      	b.n	8001c10 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba2:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7fe ff50 	bl	8000a4c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7fe ff4c 	bl	8000a4c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e170      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4925      	ldr	r1, [pc, #148]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
 8001be2:	e015      	b.n	8001c10 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7fe ff2f 	bl	8000a4c <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7fe ff2b 	bl	8000a4c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e14f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d037      	beq.n	8001c8c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d016      	beq.n	8001c52 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_RCC_OscConfig+0x278>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7fe ff0f 	bl	8000a4c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c32:	f7fe ff0b 	bl	8000a4c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e12f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x22e>
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_OscConfig+0x278>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7fe fef8 	bl	8000a4c <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5e:	e00f      	b.n	8001c80 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c60:	f7fe fef4 	bl	8000a4c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d908      	bls.n	8001c80 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e118      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	42470000 	.word	0x42470000
 8001c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	4b8a      	ldr	r3, [pc, #552]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e9      	bne.n	8001c60 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 8097 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9e:	4b83      	ldr	r3, [pc, #524]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10f      	bne.n	8001cca <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a7e      	ldr	r2, [pc, #504]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b79      	ldr	r3, [pc, #484]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d118      	bne.n	8001d08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd6:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a75      	ldr	r2, [pc, #468]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce2:	f7fe feb3 	bl	8000a4c <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cea:	f7fe feaf 	bl	8000a4c <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0d3      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <HAL_RCC_OscConfig+0x4ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x31a>
 8001d10:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4a65      	ldr	r2, [pc, #404]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1c:	e01c      	b.n	8001d58 <HAL_RCC_OscConfig+0x354>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x33c>
 8001d26:	4b61      	ldr	r3, [pc, #388]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4a60      	ldr	r2, [pc, #384]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70
 8001d32:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d36:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0x354>
 8001d40:	4b5a      	ldr	r3, [pc, #360]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	4a59      	ldr	r2, [pc, #356]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4c:	4b57      	ldr	r3, [pc, #348]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	4a56      	ldr	r2, [pc, #344]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d52:	f023 0304 	bic.w	r3, r3, #4
 8001d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d015      	beq.n	8001d8c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7fe fe74 	bl	8000a4c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7fe fe70 	bl	8000a4c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e092      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7e:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0ee      	beq.n	8001d68 <HAL_RCC_OscConfig+0x364>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8c:	f7fe fe5e 	bl	8000a4c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7fe fe5a 	bl	8000a4c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e07c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ee      	bne.n	8001d94 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	4a3a      	ldr	r2, [pc, #232]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d068      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d060      	beq.n	8001e9e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d145      	bne.n	8001e70 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7fe fe2f 	bl	8000a4c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe fe2b 	bl	8000a4c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e04f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69da      	ldr	r2, [r3, #28]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	019b      	lsls	r3, r3, #6
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	061b      	lsls	r3, r3, #24
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	071b      	lsls	r3, r3, #28
 8001e3c:	491b      	ldr	r1, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe fe00 	bl	8000a4c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe fdfc 	bl	8000a4c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e020      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44c>
 8001e6e:	e018      	b.n	8001ea2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_RCC_OscConfig+0x4b0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7fe fde9 	bl	8000a4c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7fe fde5 	bl	8000a4c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e009      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x4a8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x47a>
 8001e9c:	e001      	b.n	8001ea2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42470060 	.word	0x42470060

08001eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e03f      	b.n	8001f4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fcbe 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2224      	movs	r2, #36	; 0x24
 8001ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f90b 	bl	8002118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b088      	sub	sp, #32
 8001f56:	af02      	add	r7, sp, #8
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	f040 8083 	bne.w	800207a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_UART_Transmit+0x2e>
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e07b      	b.n	800207c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_Transmit+0x40>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e074      	b.n	800207c <HAL_UART_Transmit+0x12a>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2221      	movs	r2, #33	; 0x21
 8001fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fd50 	bl	8000a4c <HAL_GetTick>
 8001fac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	88fa      	ldrh	r2, [r7, #6]
 8001fb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001fc2:	e042      	b.n	800204a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fda:	d122      	bne.n	8002022 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f84c 	bl	8002084 <UART_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e042      	b.n	800207c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002008:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3302      	adds	r3, #2
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	e017      	b.n	800204a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3301      	adds	r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	e013      	b.n	800204a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2200      	movs	r2, #0
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f829 	bl	8002084 <UART_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e01f      	b.n	800207c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	60ba      	str	r2, [r7, #8]
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1b7      	bne.n	8001fc4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2200      	movs	r2, #0
 800205c:	2140      	movs	r1, #64	; 0x40
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f810 	bl	8002084 <UART_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e006      	b.n	800207c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800207a:	2302      	movs	r3, #2
  }
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002094:	e02c      	b.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d028      	beq.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80020a4:	f7fe fcd2 	bl	8000a4c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d21d      	bcs.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e00f      	b.n	8002110 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	429a      	cmp	r2, r3
 800210c:	d0c3      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800215a:	f023 030c 	bic.w	r3, r3, #12
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	430b      	orrs	r3, r1
 8002166:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002186:	f040 818b 	bne.w	80024a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4ac1      	ldr	r2, [pc, #772]	; (8002494 <UART_SetConfig+0x37c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d005      	beq.n	80021a0 <UART_SetConfig+0x88>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4abf      	ldr	r2, [pc, #764]	; (8002498 <UART_SetConfig+0x380>)
 800219a:	4293      	cmp	r3, r2
 800219c:	f040 80bd 	bne.w	800231a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021a0:	f7ff fa7c 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 80021a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	461d      	mov	r5, r3
 80021aa:	f04f 0600 	mov.w	r6, #0
 80021ae:	46a8      	mov	r8, r5
 80021b0:	46b1      	mov	r9, r6
 80021b2:	eb18 0308 	adds.w	r3, r8, r8
 80021b6:	eb49 0409 	adc.w	r4, r9, r9
 80021ba:	4698      	mov	r8, r3
 80021bc:	46a1      	mov	r9, r4
 80021be:	eb18 0805 	adds.w	r8, r8, r5
 80021c2:	eb49 0906 	adc.w	r9, r9, r6
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021da:	4688      	mov	r8, r1
 80021dc:	4691      	mov	r9, r2
 80021de:	eb18 0005 	adds.w	r0, r8, r5
 80021e2:	eb49 0106 	adc.w	r1, r9, r6
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	461d      	mov	r5, r3
 80021ec:	f04f 0600 	mov.w	r6, #0
 80021f0:	196b      	adds	r3, r5, r5
 80021f2:	eb46 0406 	adc.w	r4, r6, r6
 80021f6:	461a      	mov	r2, r3
 80021f8:	4623      	mov	r3, r4
 80021fa:	f7fe f80b 	bl	8000214 <__aeabi_uldivmod>
 80021fe:	4603      	mov	r3, r0
 8002200:	460c      	mov	r4, r1
 8002202:	461a      	mov	r2, r3
 8002204:	4ba5      	ldr	r3, [pc, #660]	; (800249c <UART_SetConfig+0x384>)
 8002206:	fba3 2302 	umull	r2, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	461d      	mov	r5, r3
 8002214:	f04f 0600 	mov.w	r6, #0
 8002218:	46a9      	mov	r9, r5
 800221a:	46b2      	mov	sl, r6
 800221c:	eb19 0309 	adds.w	r3, r9, r9
 8002220:	eb4a 040a 	adc.w	r4, sl, sl
 8002224:	4699      	mov	r9, r3
 8002226:	46a2      	mov	sl, r4
 8002228:	eb19 0905 	adds.w	r9, r9, r5
 800222c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002230:	f04f 0100 	mov.w	r1, #0
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800223c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002240:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002244:	4689      	mov	r9, r1
 8002246:	4692      	mov	sl, r2
 8002248:	eb19 0005 	adds.w	r0, r9, r5
 800224c:	eb4a 0106 	adc.w	r1, sl, r6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	461d      	mov	r5, r3
 8002256:	f04f 0600 	mov.w	r6, #0
 800225a:	196b      	adds	r3, r5, r5
 800225c:	eb46 0406 	adc.w	r4, r6, r6
 8002260:	461a      	mov	r2, r3
 8002262:	4623      	mov	r3, r4
 8002264:	f7fd ffd6 	bl	8000214 <__aeabi_uldivmod>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	461a      	mov	r2, r3
 800226e:	4b8b      	ldr	r3, [pc, #556]	; (800249c <UART_SetConfig+0x384>)
 8002270:	fba3 1302 	umull	r1, r3, r3, r2
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	2164      	movs	r1, #100	; 0x64
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	3332      	adds	r3, #50	; 0x32
 8002282:	4a86      	ldr	r2, [pc, #536]	; (800249c <UART_SetConfig+0x384>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002290:	4498      	add	r8, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	461d      	mov	r5, r3
 8002296:	f04f 0600 	mov.w	r6, #0
 800229a:	46a9      	mov	r9, r5
 800229c:	46b2      	mov	sl, r6
 800229e:	eb19 0309 	adds.w	r3, r9, r9
 80022a2:	eb4a 040a 	adc.w	r4, sl, sl
 80022a6:	4699      	mov	r9, r3
 80022a8:	46a2      	mov	sl, r4
 80022aa:	eb19 0905 	adds.w	r9, r9, r5
 80022ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022c6:	4689      	mov	r9, r1
 80022c8:	4692      	mov	sl, r2
 80022ca:	eb19 0005 	adds.w	r0, r9, r5
 80022ce:	eb4a 0106 	adc.w	r1, sl, r6
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	461d      	mov	r5, r3
 80022d8:	f04f 0600 	mov.w	r6, #0
 80022dc:	196b      	adds	r3, r5, r5
 80022de:	eb46 0406 	adc.w	r4, r6, r6
 80022e2:	461a      	mov	r2, r3
 80022e4:	4623      	mov	r3, r4
 80022e6:	f7fd ff95 	bl	8000214 <__aeabi_uldivmod>
 80022ea:	4603      	mov	r3, r0
 80022ec:	460c      	mov	r4, r1
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <UART_SetConfig+0x384>)
 80022f2:	fba3 1302 	umull	r1, r3, r3, r2
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2164      	movs	r1, #100	; 0x64
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	3332      	adds	r3, #50	; 0x32
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <UART_SetConfig+0x384>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	f003 0207 	and.w	r2, r3, #7
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4442      	add	r2, r8
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	e26f      	b.n	80027fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800231a:	f7ff f9ab 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 800231e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	461d      	mov	r5, r3
 8002324:	f04f 0600 	mov.w	r6, #0
 8002328:	46a8      	mov	r8, r5
 800232a:	46b1      	mov	r9, r6
 800232c:	eb18 0308 	adds.w	r3, r8, r8
 8002330:	eb49 0409 	adc.w	r4, r9, r9
 8002334:	4698      	mov	r8, r3
 8002336:	46a1      	mov	r9, r4
 8002338:	eb18 0805 	adds.w	r8, r8, r5
 800233c:	eb49 0906 	adc.w	r9, r9, r6
 8002340:	f04f 0100 	mov.w	r1, #0
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800234c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002350:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002354:	4688      	mov	r8, r1
 8002356:	4691      	mov	r9, r2
 8002358:	eb18 0005 	adds.w	r0, r8, r5
 800235c:	eb49 0106 	adc.w	r1, r9, r6
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	461d      	mov	r5, r3
 8002366:	f04f 0600 	mov.w	r6, #0
 800236a:	196b      	adds	r3, r5, r5
 800236c:	eb46 0406 	adc.w	r4, r6, r6
 8002370:	461a      	mov	r2, r3
 8002372:	4623      	mov	r3, r4
 8002374:	f7fd ff4e 	bl	8000214 <__aeabi_uldivmod>
 8002378:	4603      	mov	r3, r0
 800237a:	460c      	mov	r4, r1
 800237c:	461a      	mov	r2, r3
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <UART_SetConfig+0x384>)
 8002380:	fba3 2302 	umull	r2, r3, r3, r2
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	461d      	mov	r5, r3
 800238e:	f04f 0600 	mov.w	r6, #0
 8002392:	46a9      	mov	r9, r5
 8002394:	46b2      	mov	sl, r6
 8002396:	eb19 0309 	adds.w	r3, r9, r9
 800239a:	eb4a 040a 	adc.w	r4, sl, sl
 800239e:	4699      	mov	r9, r3
 80023a0:	46a2      	mov	sl, r4
 80023a2:	eb19 0905 	adds.w	r9, r9, r5
 80023a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80023aa:	f04f 0100 	mov.w	r1, #0
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023be:	4689      	mov	r9, r1
 80023c0:	4692      	mov	sl, r2
 80023c2:	eb19 0005 	adds.w	r0, r9, r5
 80023c6:	eb4a 0106 	adc.w	r1, sl, r6
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	461d      	mov	r5, r3
 80023d0:	f04f 0600 	mov.w	r6, #0
 80023d4:	196b      	adds	r3, r5, r5
 80023d6:	eb46 0406 	adc.w	r4, r6, r6
 80023da:	461a      	mov	r2, r3
 80023dc:	4623      	mov	r3, r4
 80023de:	f7fd ff19 	bl	8000214 <__aeabi_uldivmod>
 80023e2:	4603      	mov	r3, r0
 80023e4:	460c      	mov	r4, r1
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <UART_SetConfig+0x384>)
 80023ea:	fba3 1302 	umull	r1, r3, r3, r2
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2164      	movs	r1, #100	; 0x64
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	3332      	adds	r3, #50	; 0x32
 80023fc:	4a27      	ldr	r2, [pc, #156]	; (800249c <UART_SetConfig+0x384>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800240a:	4498      	add	r8, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	461d      	mov	r5, r3
 8002410:	f04f 0600 	mov.w	r6, #0
 8002414:	46a9      	mov	r9, r5
 8002416:	46b2      	mov	sl, r6
 8002418:	eb19 0309 	adds.w	r3, r9, r9
 800241c:	eb4a 040a 	adc.w	r4, sl, sl
 8002420:	4699      	mov	r9, r3
 8002422:	46a2      	mov	sl, r4
 8002424:	eb19 0905 	adds.w	r9, r9, r5
 8002428:	eb4a 0a06 	adc.w	sl, sl, r6
 800242c:	f04f 0100 	mov.w	r1, #0
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002438:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800243c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002440:	4689      	mov	r9, r1
 8002442:	4692      	mov	sl, r2
 8002444:	eb19 0005 	adds.w	r0, r9, r5
 8002448:	eb4a 0106 	adc.w	r1, sl, r6
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	461d      	mov	r5, r3
 8002452:	f04f 0600 	mov.w	r6, #0
 8002456:	196b      	adds	r3, r5, r5
 8002458:	eb46 0406 	adc.w	r4, r6, r6
 800245c:	461a      	mov	r2, r3
 800245e:	4623      	mov	r3, r4
 8002460:	f7fd fed8 	bl	8000214 <__aeabi_uldivmod>
 8002464:	4603      	mov	r3, r0
 8002466:	460c      	mov	r4, r1
 8002468:	461a      	mov	r2, r3
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <UART_SetConfig+0x384>)
 800246c:	fba3 1302 	umull	r1, r3, r3, r2
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	2164      	movs	r1, #100	; 0x64
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	3332      	adds	r3, #50	; 0x32
 800247e:	4a07      	ldr	r2, [pc, #28]	; (800249c <UART_SetConfig+0x384>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	f003 0207 	and.w	r2, r3, #7
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4442      	add	r2, r8
 8002490:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002492:	e1b2      	b.n	80027fa <UART_SetConfig+0x6e2>
 8002494:	40011000 	.word	0x40011000
 8002498:	40011400 	.word	0x40011400
 800249c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4ad7      	ldr	r2, [pc, #860]	; (8002804 <UART_SetConfig+0x6ec>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d005      	beq.n	80024b6 <UART_SetConfig+0x39e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4ad6      	ldr	r2, [pc, #856]	; (8002808 <UART_SetConfig+0x6f0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	f040 80d1 	bne.w	8002658 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024b6:	f7ff f8f1 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 80024ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	469a      	mov	sl, r3
 80024c0:	f04f 0b00 	mov.w	fp, #0
 80024c4:	46d0      	mov	r8, sl
 80024c6:	46d9      	mov	r9, fp
 80024c8:	eb18 0308 	adds.w	r3, r8, r8
 80024cc:	eb49 0409 	adc.w	r4, r9, r9
 80024d0:	4698      	mov	r8, r3
 80024d2:	46a1      	mov	r9, r4
 80024d4:	eb18 080a 	adds.w	r8, r8, sl
 80024d8:	eb49 090b 	adc.w	r9, r9, fp
 80024dc:	f04f 0100 	mov.w	r1, #0
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024f0:	4688      	mov	r8, r1
 80024f2:	4691      	mov	r9, r2
 80024f4:	eb1a 0508 	adds.w	r5, sl, r8
 80024f8:	eb4b 0609 	adc.w	r6, fp, r9
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4619      	mov	r1, r3
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	f04f 0400 	mov.w	r4, #0
 800250e:	0094      	lsls	r4, r2, #2
 8002510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002514:	008b      	lsls	r3, r1, #2
 8002516:	461a      	mov	r2, r3
 8002518:	4623      	mov	r3, r4
 800251a:	4628      	mov	r0, r5
 800251c:	4631      	mov	r1, r6
 800251e:	f7fd fe79 	bl	8000214 <__aeabi_uldivmod>
 8002522:	4603      	mov	r3, r0
 8002524:	460c      	mov	r4, r1
 8002526:	461a      	mov	r2, r3
 8002528:	4bb8      	ldr	r3, [pc, #736]	; (800280c <UART_SetConfig+0x6f4>)
 800252a:	fba3 2302 	umull	r2, r3, r3, r2
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	469b      	mov	fp, r3
 8002538:	f04f 0c00 	mov.w	ip, #0
 800253c:	46d9      	mov	r9, fp
 800253e:	46e2      	mov	sl, ip
 8002540:	eb19 0309 	adds.w	r3, r9, r9
 8002544:	eb4a 040a 	adc.w	r4, sl, sl
 8002548:	4699      	mov	r9, r3
 800254a:	46a2      	mov	sl, r4
 800254c:	eb19 090b 	adds.w	r9, r9, fp
 8002550:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002560:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002564:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002568:	4689      	mov	r9, r1
 800256a:	4692      	mov	sl, r2
 800256c:	eb1b 0509 	adds.w	r5, fp, r9
 8002570:	eb4c 060a 	adc.w	r6, ip, sl
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4619      	mov	r1, r3
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	f04f 0400 	mov.w	r4, #0
 8002586:	0094      	lsls	r4, r2, #2
 8002588:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800258c:	008b      	lsls	r3, r1, #2
 800258e:	461a      	mov	r2, r3
 8002590:	4623      	mov	r3, r4
 8002592:	4628      	mov	r0, r5
 8002594:	4631      	mov	r1, r6
 8002596:	f7fd fe3d 	bl	8000214 <__aeabi_uldivmod>
 800259a:	4603      	mov	r3, r0
 800259c:	460c      	mov	r4, r1
 800259e:	461a      	mov	r2, r3
 80025a0:	4b9a      	ldr	r3, [pc, #616]	; (800280c <UART_SetConfig+0x6f4>)
 80025a2:	fba3 1302 	umull	r1, r3, r3, r2
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2164      	movs	r1, #100	; 0x64
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	3332      	adds	r3, #50	; 0x32
 80025b4:	4a95      	ldr	r2, [pc, #596]	; (800280c <UART_SetConfig+0x6f4>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c0:	4498      	add	r8, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	469b      	mov	fp, r3
 80025c6:	f04f 0c00 	mov.w	ip, #0
 80025ca:	46d9      	mov	r9, fp
 80025cc:	46e2      	mov	sl, ip
 80025ce:	eb19 0309 	adds.w	r3, r9, r9
 80025d2:	eb4a 040a 	adc.w	r4, sl, sl
 80025d6:	4699      	mov	r9, r3
 80025d8:	46a2      	mov	sl, r4
 80025da:	eb19 090b 	adds.w	r9, r9, fp
 80025de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025f6:	4689      	mov	r9, r1
 80025f8:	4692      	mov	sl, r2
 80025fa:	eb1b 0509 	adds.w	r5, fp, r9
 80025fe:	eb4c 060a 	adc.w	r6, ip, sl
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4619      	mov	r1, r3
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	f04f 0400 	mov.w	r4, #0
 8002614:	0094      	lsls	r4, r2, #2
 8002616:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800261a:	008b      	lsls	r3, r1, #2
 800261c:	461a      	mov	r2, r3
 800261e:	4623      	mov	r3, r4
 8002620:	4628      	mov	r0, r5
 8002622:	4631      	mov	r1, r6
 8002624:	f7fd fdf6 	bl	8000214 <__aeabi_uldivmod>
 8002628:	4603      	mov	r3, r0
 800262a:	460c      	mov	r4, r1
 800262c:	461a      	mov	r2, r3
 800262e:	4b77      	ldr	r3, [pc, #476]	; (800280c <UART_SetConfig+0x6f4>)
 8002630:	fba3 1302 	umull	r1, r3, r3, r2
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	2164      	movs	r1, #100	; 0x64
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	3332      	adds	r3, #50	; 0x32
 8002642:	4a72      	ldr	r2, [pc, #456]	; (800280c <UART_SetConfig+0x6f4>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4442      	add	r2, r8
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	e0d0      	b.n	80027fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002658:	f7ff f80c 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 800265c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	469a      	mov	sl, r3
 8002662:	f04f 0b00 	mov.w	fp, #0
 8002666:	46d0      	mov	r8, sl
 8002668:	46d9      	mov	r9, fp
 800266a:	eb18 0308 	adds.w	r3, r8, r8
 800266e:	eb49 0409 	adc.w	r4, r9, r9
 8002672:	4698      	mov	r8, r3
 8002674:	46a1      	mov	r9, r4
 8002676:	eb18 080a 	adds.w	r8, r8, sl
 800267a:	eb49 090b 	adc.w	r9, r9, fp
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800268a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800268e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002692:	4688      	mov	r8, r1
 8002694:	4691      	mov	r9, r2
 8002696:	eb1a 0508 	adds.w	r5, sl, r8
 800269a:	eb4b 0609 	adc.w	r6, fp, r9
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4619      	mov	r1, r3
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	f04f 0400 	mov.w	r4, #0
 80026b0:	0094      	lsls	r4, r2, #2
 80026b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026b6:	008b      	lsls	r3, r1, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	4623      	mov	r3, r4
 80026bc:	4628      	mov	r0, r5
 80026be:	4631      	mov	r1, r6
 80026c0:	f7fd fda8 	bl	8000214 <__aeabi_uldivmod>
 80026c4:	4603      	mov	r3, r0
 80026c6:	460c      	mov	r4, r1
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b50      	ldr	r3, [pc, #320]	; (800280c <UART_SetConfig+0x6f4>)
 80026cc:	fba3 2302 	umull	r2, r3, r3, r2
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	469b      	mov	fp, r3
 80026da:	f04f 0c00 	mov.w	ip, #0
 80026de:	46d9      	mov	r9, fp
 80026e0:	46e2      	mov	sl, ip
 80026e2:	eb19 0309 	adds.w	r3, r9, r9
 80026e6:	eb4a 040a 	adc.w	r4, sl, sl
 80026ea:	4699      	mov	r9, r3
 80026ec:	46a2      	mov	sl, r4
 80026ee:	eb19 090b 	adds.w	r9, r9, fp
 80026f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002702:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002706:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800270a:	4689      	mov	r9, r1
 800270c:	4692      	mov	sl, r2
 800270e:	eb1b 0509 	adds.w	r5, fp, r9
 8002712:	eb4c 060a 	adc.w	r6, ip, sl
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4619      	mov	r1, r3
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	f04f 0400 	mov.w	r4, #0
 8002728:	0094      	lsls	r4, r2, #2
 800272a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800272e:	008b      	lsls	r3, r1, #2
 8002730:	461a      	mov	r2, r3
 8002732:	4623      	mov	r3, r4
 8002734:	4628      	mov	r0, r5
 8002736:	4631      	mov	r1, r6
 8002738:	f7fd fd6c 	bl	8000214 <__aeabi_uldivmod>
 800273c:	4603      	mov	r3, r0
 800273e:	460c      	mov	r4, r1
 8002740:	461a      	mov	r2, r3
 8002742:	4b32      	ldr	r3, [pc, #200]	; (800280c <UART_SetConfig+0x6f4>)
 8002744:	fba3 1302 	umull	r1, r3, r3, r2
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	2164      	movs	r1, #100	; 0x64
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	3332      	adds	r3, #50	; 0x32
 8002756:	4a2d      	ldr	r2, [pc, #180]	; (800280c <UART_SetConfig+0x6f4>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002762:	4498      	add	r8, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	469b      	mov	fp, r3
 8002768:	f04f 0c00 	mov.w	ip, #0
 800276c:	46d9      	mov	r9, fp
 800276e:	46e2      	mov	sl, ip
 8002770:	eb19 0309 	adds.w	r3, r9, r9
 8002774:	eb4a 040a 	adc.w	r4, sl, sl
 8002778:	4699      	mov	r9, r3
 800277a:	46a2      	mov	sl, r4
 800277c:	eb19 090b 	adds.w	r9, r9, fp
 8002780:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002784:	f04f 0100 	mov.w	r1, #0
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002790:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002794:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002798:	4689      	mov	r9, r1
 800279a:	4692      	mov	sl, r2
 800279c:	eb1b 0509 	adds.w	r5, fp, r9
 80027a0:	eb4c 060a 	adc.w	r6, ip, sl
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	f04f 0400 	mov.w	r4, #0
 80027b6:	0094      	lsls	r4, r2, #2
 80027b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027bc:	008b      	lsls	r3, r1, #2
 80027be:	461a      	mov	r2, r3
 80027c0:	4623      	mov	r3, r4
 80027c2:	4628      	mov	r0, r5
 80027c4:	4631      	mov	r1, r6
 80027c6:	f7fd fd25 	bl	8000214 <__aeabi_uldivmod>
 80027ca:	4603      	mov	r3, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <UART_SetConfig+0x6f4>)
 80027d2:	fba3 1302 	umull	r1, r3, r3, r2
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2164      	movs	r1, #100	; 0x64
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	4a09      	ldr	r2, [pc, #36]	; (800280c <UART_SetConfig+0x6f4>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	f003 020f 	and.w	r2, r3, #15
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4442      	add	r2, r8
 80027f6:	609a      	str	r2, [r3, #8]
}
 80027f8:	e7ff      	b.n	80027fa <UART_SetConfig+0x6e2>
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002804:	40011000 	.word	0x40011000
 8002808:	40011400 	.word	0x40011400
 800280c:	51eb851f 	.word	0x51eb851f

08002810 <__libc_init_array>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	4e0d      	ldr	r6, [pc, #52]	; (8002848 <__libc_init_array+0x38>)
 8002814:	4c0d      	ldr	r4, [pc, #52]	; (800284c <__libc_init_array+0x3c>)
 8002816:	1ba4      	subs	r4, r4, r6
 8002818:	10a4      	asrs	r4, r4, #2
 800281a:	2500      	movs	r5, #0
 800281c:	42a5      	cmp	r5, r4
 800281e:	d109      	bne.n	8002834 <__libc_init_array+0x24>
 8002820:	4e0b      	ldr	r6, [pc, #44]	; (8002850 <__libc_init_array+0x40>)
 8002822:	4c0c      	ldr	r4, [pc, #48]	; (8002854 <__libc_init_array+0x44>)
 8002824:	f000 f818 	bl	8002858 <_init>
 8002828:	1ba4      	subs	r4, r4, r6
 800282a:	10a4      	asrs	r4, r4, #2
 800282c:	2500      	movs	r5, #0
 800282e:	42a5      	cmp	r5, r4
 8002830:	d105      	bne.n	800283e <__libc_init_array+0x2e>
 8002832:	bd70      	pop	{r4, r5, r6, pc}
 8002834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002838:	4798      	blx	r3
 800283a:	3501      	adds	r5, #1
 800283c:	e7ee      	b.n	800281c <__libc_init_array+0xc>
 800283e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002842:	4798      	blx	r3
 8002844:	3501      	adds	r5, #1
 8002846:	e7f2      	b.n	800282e <__libc_init_array+0x1e>
 8002848:	080028b0 	.word	0x080028b0
 800284c:	080028b0 	.word	0x080028b0
 8002850:	080028b0 	.word	0x080028b0
 8002854:	080028b4 	.word	0x080028b4

08002858 <_init>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	bf00      	nop
 800285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285e:	bc08      	pop	{r3}
 8002860:	469e      	mov	lr, r3
 8002862:	4770      	bx	lr

08002864 <_fini>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	bf00      	nop
 8002868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286a:	bc08      	pop	{r3}
 800286c:	469e      	mov	lr, r3
 800286e:	4770      	bx	lr
