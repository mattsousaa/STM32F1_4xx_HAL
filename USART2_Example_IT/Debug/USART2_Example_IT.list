
USART2_Example_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001d54  08001d54  00011d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d7c  08001d7c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001d7c  08001d7c  00011d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d84  08001d84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d84  08001d84  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d88  08001d88  00011d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000010  08001d9c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08001d9c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a01  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001387  00000000  00000000  00026a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000630  00000000  00000000  00027dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000588  00000000  00000000  000283f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014fbd  00000000  00000000  00028980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005921  00000000  00000000  0003d93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082e1f  00000000  00000000  0004325e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c607d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000182c  00000000  00000000  000c60f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001d3c 	.word	0x08001d3c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08001d3c 	.word	0x08001d3c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b972 	b.w	80004e0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	4688      	mov	r8, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14b      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000222:	428a      	cmp	r2, r1
 8000224:	4615      	mov	r5, r2
 8000226:	d967      	bls.n	80002f8 <__udivmoddi4+0xe4>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0720 	rsb	r7, r2, #32
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	fa20 f707 	lsr.w	r7, r0, r7
 800023a:	4095      	lsls	r5, r2
 800023c:	ea47 0803 	orr.w	r8, r7, r3
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbb8 f7fe 	udiv	r7, r8, lr
 800024c:	fa1f fc85 	uxth.w	ip, r5
 8000250:	fb0e 8817 	mls	r8, lr, r7, r8
 8000254:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000258:	fb07 f10c 	mul.w	r1, r7, ip
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18eb      	adds	r3, r5, r3
 8000262:	f107 30ff 	add.w	r0, r7, #4294967295
 8000266:	f080 811b 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8118 	bls.w	80004a0 <__udivmoddi4+0x28c>
 8000270:	3f02      	subs	r7, #2
 8000272:	442b      	add	r3, r5
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0fe 	udiv	r0, r3, lr
 800027c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fc0c 	mul.w	ip, r0, ip
 8000288:	45a4      	cmp	ip, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	192c      	adds	r4, r5, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x290>
 8000296:	45a4      	cmp	ip, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x290>
 800029c:	3802      	subs	r0, #2
 800029e:	442c      	add	r4, r5
 80002a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a4:	eba4 040c 	sub.w	r4, r4, ip
 80002a8:	2700      	movs	r7, #0
 80002aa:	b11e      	cbz	r6, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c6 4300 	strd	r4, r3, [r6]
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xbe>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80eb 	beq.w	800049a <__udivmoddi4+0x286>
 80002c4:	2700      	movs	r7, #0
 80002c6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ca:	4638      	mov	r0, r7
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	2f00      	cmp	r7, #0
 80002d8:	d147      	bne.n	800036a <__udivmoddi4+0x156>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd0>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2c4>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa0>
 80002f2:	e9c6 4800 	strd	r4, r8, [r6]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa0>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xe8>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 808f 	bne.w	8000424 <__udivmoddi4+0x210>
 8000306:	1b49      	subs	r1, r1, r5
 8000308:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030c:	fa1f f885 	uxth.w	r8, r5
 8000310:	2701      	movs	r7, #1
 8000312:	fbb1 fcfe 	udiv	ip, r1, lr
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	fb0e 111c 	mls	r1, lr, ip, r1
 800031c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000320:	fb08 f10c 	mul.w	r1, r8, ip
 8000324:	4299      	cmp	r1, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x124>
 8000328:	18eb      	adds	r3, r5, r3
 800032a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4299      	cmp	r1, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 8000336:	4684      	mov	ip, r0
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000340:	fb0e 1410 	mls	r4, lr, r0, r1
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	45a0      	cmp	r8, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x14c>
 8000350:	192c      	adds	r4, r5, r4
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x14a>
 8000358:	45a0      	cmp	r8, r4
 800035a:	f200 80b6 	bhi.w	80004ca <__udivmoddi4+0x2b6>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 0408 	sub.w	r4, r4, r8
 8000364:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000368:	e79f      	b.n	80002aa <__udivmoddi4+0x96>
 800036a:	f1c7 0c20 	rsb	ip, r7, #32
 800036e:	40bb      	lsls	r3, r7
 8000370:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000374:	ea4e 0e03 	orr.w	lr, lr, r3
 8000378:	fa01 f407 	lsl.w	r4, r1, r7
 800037c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000380:	fa21 f30c 	lsr.w	r3, r1, ip
 8000384:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000388:	4325      	orrs	r5, r4
 800038a:	fbb3 f9f8 	udiv	r9, r3, r8
 800038e:	0c2c      	lsrs	r4, r5, #16
 8000390:	fb08 3319 	mls	r3, r8, r9, r3
 8000394:	fa1f fa8e 	uxth.w	sl, lr
 8000398:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800039c:	fb09 f40a 	mul.w	r4, r9, sl
 80003a0:	429c      	cmp	r4, r3
 80003a2:	fa02 f207 	lsl.w	r2, r2, r7
 80003a6:	fa00 f107 	lsl.w	r1, r0, r7
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1e 0303 	adds.w	r3, lr, r3
 80003b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b4:	f080 8087 	bcs.w	80004c6 <__udivmoddi4+0x2b2>
 80003b8:	429c      	cmp	r4, r3
 80003ba:	f240 8084 	bls.w	80004c6 <__udivmoddi4+0x2b2>
 80003be:	f1a9 0902 	sub.w	r9, r9, #2
 80003c2:	4473      	add	r3, lr
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	b2ad      	uxth	r5, r5
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1e 0404 	adds.w	r4, lr, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	d26b      	bcs.n	80004be <__udivmoddi4+0x2aa>
 80003e6:	45a2      	cmp	sl, r4
 80003e8:	d969      	bls.n	80004be <__udivmoddi4+0x2aa>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4474      	add	r4, lr
 80003ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f2:	fba0 8902 	umull	r8, r9, r0, r2
 80003f6:	eba4 040a 	sub.w	r4, r4, sl
 80003fa:	454c      	cmp	r4, r9
 80003fc:	46c2      	mov	sl, r8
 80003fe:	464b      	mov	r3, r9
 8000400:	d354      	bcc.n	80004ac <__udivmoddi4+0x298>
 8000402:	d051      	beq.n	80004a8 <__udivmoddi4+0x294>
 8000404:	2e00      	cmp	r6, #0
 8000406:	d069      	beq.n	80004dc <__udivmoddi4+0x2c8>
 8000408:	ebb1 050a 	subs.w	r5, r1, sl
 800040c:	eb64 0403 	sbc.w	r4, r4, r3
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40fd      	lsrs	r5, r7
 8000416:	40fc      	lsrs	r4, r7
 8000418:	ea4c 0505 	orr.w	r5, ip, r5
 800041c:	e9c6 5400 	strd	r5, r4, [r6]
 8000420:	2700      	movs	r7, #0
 8000422:	e747      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f703 	lsr.w	r7, r0, r3
 800042c:	4095      	lsls	r5, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	fa21 f303 	lsr.w	r3, r1, r3
 8000436:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043a:	4338      	orrs	r0, r7
 800043c:	0c01      	lsrs	r1, r0, #16
 800043e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000442:	fa1f f885 	uxth.w	r8, r5
 8000446:	fb0e 3317 	mls	r3, lr, r7, r3
 800044a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044e:	fb07 f308 	mul.w	r3, r7, r8
 8000452:	428b      	cmp	r3, r1
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x256>
 800045a:	1869      	adds	r1, r5, r1
 800045c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000460:	d22f      	bcs.n	80004c2 <__udivmoddi4+0x2ae>
 8000462:	428b      	cmp	r3, r1
 8000464:	d92d      	bls.n	80004c2 <__udivmoddi4+0x2ae>
 8000466:	3f02      	subs	r7, #2
 8000468:	4429      	add	r1, r5
 800046a:	1acb      	subs	r3, r1, r3
 800046c:	b281      	uxth	r1, r0
 800046e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000472:	fb0e 3310 	mls	r3, lr, r0, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb00 f308 	mul.w	r3, r0, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x27e>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f100 3cff 	add.w	ip, r0, #4294967295
 8000488:	d217      	bcs.n	80004ba <__udivmoddi4+0x2a6>
 800048a:	428b      	cmp	r3, r1
 800048c:	d915      	bls.n	80004ba <__udivmoddi4+0x2a6>
 800048e:	3802      	subs	r0, #2
 8000490:	4429      	add	r1, r5
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000498:	e73b      	b.n	8000312 <__udivmoddi4+0xfe>
 800049a:	4637      	mov	r7, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e709      	b.n	80002b4 <__udivmoddi4+0xa0>
 80004a0:	4607      	mov	r7, r0
 80004a2:	e6e7      	b.n	8000274 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a8:	4541      	cmp	r1, r8
 80004aa:	d2ab      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004ac:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b0:	eb69 020e 	sbc.w	r2, r9, lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4613      	mov	r3, r2
 80004b8:	e7a4      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004ba:	4660      	mov	r0, ip
 80004bc:	e7e9      	b.n	8000492 <__udivmoddi4+0x27e>
 80004be:	4618      	mov	r0, r3
 80004c0:	e795      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c2:	4667      	mov	r7, ip
 80004c4:	e7d1      	b.n	800046a <__udivmoddi4+0x256>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e77c      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	442c      	add	r4, r5
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0x14c>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	442b      	add	r3, r5
 80004d6:	e72f      	b.n	8000338 <__udivmoddi4+0x124>
 80004d8:	4638      	mov	r0, r7
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xda>
 80004dc:	4637      	mov	r7, r6
 80004de:	e6e9      	b.n	80002b4 <__udivmoddi4+0xa0>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <SysTick_Handler>:

#include "main.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler(void){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80004e8:	f000 f9b6 	bl	8000858 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004ec:	f000 fae5 	bl	8000aba <HAL_SYSTICK_IRQHandler>

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <USART2_IRQHandler+0x10>)
 80004fa:	f000 fdff 	bl	80010fc <HAL_UART_IRQHandler>

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000038 	.word	0x20000038

08000508 <main>:
uint8_t recvd_data;
uint32_t count = 0;
uint8_t reception_complete = FALSE;


int main(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

	HAL_Init();
 800050e:	f000 f951 	bl	80007b4 <HAL_Init>
	SystemClockConfig();
 8000512:	f000 f825 	bl	8000560 <SystemClockConfig>
	UART2_Init();
 8000516:	f000 f82b 	bl	8000570 <UART2_Init>

	uint16_t len_of_data = strlen(user_data);
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <main+0x48>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fe58 	bl	80001d4 <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, (uint8_t*)user_data, len_of_data, HAL_MAX_DELAY);
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <main+0x48>)
 800052a:	6819      	ldr	r1, [r3, #0]
 800052c:	88fa      	ldrh	r2, [r7, #6]
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <main+0x4c>)
 8000534:	f000 fcf3 	bl	8000f1e <HAL_UART_Transmit>

	while(reception_complete != TRUE){
 8000538:	e004      	b.n	8000544 <main+0x3c>
		HAL_UART_Receive_IT(&huart2, &recvd_data, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	4906      	ldr	r1, [pc, #24]	; (8000558 <main+0x50>)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x4c>)
 8000540:	f000 fd86 	bl	8001050 <HAL_UART_Receive_IT>
	while(reception_complete != TRUE){
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <main+0x54>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d1f6      	bne.n	800053a <main+0x32>
	}

	while(1);
 800054c:	e7fe      	b.n	800054c <main+0x44>
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	20000038 	.word	0x20000038
 8000558:	20000034 	.word	0x20000034
 800055c:	20000030 	.word	0x20000030

08000560 <SystemClockConfig>:

	return 0;

}

void SystemClockConfig(void){
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <UART2_Init>:

/* High level initialization */
void UART2_Init(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <UART2_Init+0x44>)
 8000576:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <UART2_Init+0x48>)
 8000578:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <UART2_Init+0x44>)
 800057c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000580:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <UART2_Init+0x44>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <UART2_Init+0x44>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <UART2_Init+0x44>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <UART2_Init+0x44>)
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <UART2_Init+0x44>)
 800059c:	2208      	movs	r2, #8
 800059e:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <UART2_Init+0x44>)
 80005a2:	f000 fc6f 	bl	8000e84 <HAL_UART_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <UART2_Init+0x40>
		//There is a problem
		Error_handler();
 80005ac:	f000 f854 	bl	8000658 <Error_handler>
	}
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000038 	.word	0x20000038
 80005b8:	40004400 	.word	0x40004400

080005bc <convert_to_capital>:

uint8_t convert_to_capital(uint8_t data){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]

	if(data >= 'a' && data <= 'z'){
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b60      	cmp	r3, #96	; 0x60
 80005ca:	d905      	bls.n	80005d8 <convert_to_capital+0x1c>
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b7a      	cmp	r3, #122	; 0x7a
 80005d0:	d802      	bhi.n	80005d8 <convert_to_capital+0x1c>
		data = data - ('a'- 'A');
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	3b20      	subs	r3, #32
 80005d6:	71fb      	strb	r3, [r7, #7]
	}

	return data;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	if(recvd_data == '\r'){
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_UART_RxCpltCallback+0x60>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b0d      	cmp	r3, #13
 80005f6:	d114      	bne.n	8000622 <HAL_UART_RxCpltCallback+0x3a>
		reception_complete = TRUE;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_UART_RxCpltCallback+0x64>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
		data_buffer[count++] = '\r';
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_UART_RxCpltCallback+0x68>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	4912      	ldr	r1, [pc, #72]	; (8000650 <HAL_UART_RxCpltCallback+0x68>)
 8000606:	600a      	str	r2, [r1, #0]
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <HAL_UART_RxCpltCallback+0x6c>)
 800060a:	210d      	movs	r1, #13
 800060c:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(huart, data_buffer, count, HAL_MAX_DELAY);
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HAL_UART_RxCpltCallback+0x68>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	b29a      	uxth	r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	490e      	ldr	r1, [pc, #56]	; (8000654 <HAL_UART_RxCpltCallback+0x6c>)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 fc7f 	bl	8000f1e <HAL_UART_Transmit>

	} else{
		data_buffer[count++] = convert_to_capital(recvd_data);
	}
}
 8000620:	e00d      	b.n	800063e <HAL_UART_RxCpltCallback+0x56>
		data_buffer[count++] = convert_to_capital(recvd_data);
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_UART_RxCpltCallback+0x60>)
 8000624:	7819      	ldrb	r1, [r3, #0]
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_UART_RxCpltCallback+0x68>)
 8000628:	681c      	ldr	r4, [r3, #0]
 800062a:	1c63      	adds	r3, r4, #1
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_UART_RxCpltCallback+0x68>)
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4608      	mov	r0, r1
 8000632:	f7ff ffc3 	bl	80005bc <convert_to_capital>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_UART_RxCpltCallback+0x6c>)
 800063c:	551a      	strb	r2, [r3, r4]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bd90      	pop	{r4, r7, pc}
 8000646:	bf00      	nop
 8000648:	20000034 	.word	0x20000034
 800064c:	20000030 	.word	0x20000030
 8000650:	2000002c 	.word	0x2000002c
 8000654:	20000078 	.word	0x20000078

08000658 <Error_handler>:

void Error_handler(void){
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	while(1);
 800065c:	e7fe      	b.n	800065c <Error_handler+0x4>
	...

08000660 <HAL_MspInit>:
 *      Author: Mateus Sousa
 */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

    //Here will do low level processor specific inits.

	//1. Set up the priority grouping of the arm cortex mx processor
	// This line is not required because priority grouping will be 4 by default
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f9e7 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>
	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_MspInit+0x40>)
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <HAL_MspInit+0x40>)
 8000670:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000674:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	f06f 000b 	mvn.w	r0, #11
 800067e:	f000 f9e6 	bl	8000a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	f06f 000a 	mvn.w	r0, #10
 800068a:	f000 f9e0 	bl	8000a4e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	f06f 0009 	mvn.w	r0, #9
 8000696:	f000 f9da 	bl	8000a4e <HAL_NVIC_SetPriority>

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level inits. of the USART2 peripheral

	//1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <HAL_UART_MspInit+0x88>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a1d      	ldr	r2, [pc, #116]	; (800072c <HAL_UART_MspInit+0x88>)
 80006b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_UART_MspInit+0x88>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <HAL_UART_MspInit+0x88>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <HAL_UART_MspInit+0x88>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6313      	str	r3, [r2, #48]	; 0x30
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_MspInit+0x88>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 80006e4:	2304      	movs	r3, #4
 80006e6:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80006f4:	2307      	movs	r3, #7
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <HAL_UART_MspInit+0x8c>)
 8000700:	f000 fa0a 	bl	8000b18 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000704:	2308      	movs	r3, #8
 8000706:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4808      	ldr	r0, [pc, #32]	; (8000730 <HAL_UART_MspInit+0x8c>)
 8000710:	f000 fa02 	bl	8000b18 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000714:	2026      	movs	r0, #38	; 0x26
 8000716:	f000 f9b6 	bl	8000a86 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	210f      	movs	r1, #15
 800071e:	2026      	movs	r0, #38	; 0x26
 8000720:	f000 f995 	bl	8000a4e <HAL_NVIC_SetPriority>
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40020000 	.word	0x40020000

08000734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <SystemInit+0x28>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <SystemInit+0x28>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <SystemInit+0x28>)
 800074a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800074e:	609a      	str	r2, [r3, #8]
#endif
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000798 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000764:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000766:	e003      	b.n	8000770 <LoopCopyDataInit>

08000768 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800076a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800076c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800076e:	3104      	adds	r1, #4

08000770 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000774:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000776:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000778:	d3f6      	bcc.n	8000768 <CopyDataInit>
  ldr  r2, =_sbss
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800077c:	e002      	b.n	8000784 <LoopFillZerobss>

0800077e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800077e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000780:	f842 3b04 	str.w	r3, [r2], #4

08000784 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000786:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000788:	d3f9      	bcc.n	800077e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800078a:	f7ff ffd3 	bl	8000734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f001 fab1 	bl	8001cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000792:	f7ff feb9 	bl	8000508 <main>
  bx  lr    
 8000796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000798:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800079c:	08001d8c 	.word	0x08001d8c
  ldr  r0, =_sdata
 80007a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007a4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80007a8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80007ac:	200000e0 	.word	0x200000e0

080007b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_Init+0x40>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <HAL_Init+0x40>)
 80007be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <HAL_Init+0x40>)
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_Init+0x40>)
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f92b 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff ff3a 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023c00 	.word	0x40023c00

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f943 	bl	8000aa2 <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f90b 	bl	8000a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000004 	.word	0x20000004
 8000850:	2000000c 	.word	0x2000000c
 8000854:	20000008 	.word	0x20000008

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000000c 	.word	0x2000000c
 800087c:	200000dc 	.word	0x200000dc

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200000dc 	.word	0x200000dc

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4907      	ldr	r1, [pc, #28]	; (8000934 <__NVIC_EnableIRQ+0x38>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000e100 	.word	0xe000e100

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff ff8e 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff29 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff3e 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff8e 	bl	800098c <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5d 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff31 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffa2 	bl	80009f4 <SysTick_Config>
 8000ab0:	4603      	mov	r3, r0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000abe:	f000 f802 	bl	8000ac6 <HAL_SYSTICK_Callback>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d004      	beq.n	8000af2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00c      	b.n	8000b0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2205      	movs	r2, #5
 8000af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 0201 	bic.w	r2, r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	e159      	b.n	8000de8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b34:	2201      	movs	r2, #1
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f040 8148 	bne.w	8000de2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d00b      	beq.n	8000b72 <HAL_GPIO_Init+0x5a>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d007      	beq.n	8000b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b66:	2b11      	cmp	r3, #17
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b12      	cmp	r3, #18
 8000b70:	d130      	bne.n	8000bd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4013      	ands	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	f003 0201 	and.w	r2, r3, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0xfc>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b12      	cmp	r3, #18
 8000c12:	d123      	bne.n	8000c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	69b9      	ldr	r1, [r7, #24]
 8000c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0203 	and.w	r2, r3, #3
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 80a2 	beq.w	8000de2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <HAL_GPIO_Init+0x2e4>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a55      	ldr	r2, [pc, #340]	; (8000dfc <HAL_GPIO_Init+0x2e4>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <HAL_GPIO_Init+0x2e4>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cba:	4a51      	ldr	r2, [pc, #324]	; (8000e00 <HAL_GPIO_Init+0x2e8>)
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a48      	ldr	r2, [pc, #288]	; (8000e04 <HAL_GPIO_Init+0x2ec>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d019      	beq.n	8000d1a <HAL_GPIO_Init+0x202>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a47      	ldr	r2, [pc, #284]	; (8000e08 <HAL_GPIO_Init+0x2f0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d013      	beq.n	8000d16 <HAL_GPIO_Init+0x1fe>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a46      	ldr	r2, [pc, #280]	; (8000e0c <HAL_GPIO_Init+0x2f4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d00d      	beq.n	8000d12 <HAL_GPIO_Init+0x1fa>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a45      	ldr	r2, [pc, #276]	; (8000e10 <HAL_GPIO_Init+0x2f8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d007      	beq.n	8000d0e <HAL_GPIO_Init+0x1f6>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <HAL_GPIO_Init+0x2fc>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d101      	bne.n	8000d0a <HAL_GPIO_Init+0x1f2>
 8000d06:	2304      	movs	r3, #4
 8000d08:	e008      	b.n	8000d1c <HAL_GPIO_Init+0x204>
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x204>
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e004      	b.n	8000d1c <HAL_GPIO_Init+0x204>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e002      	b.n	8000d1c <HAL_GPIO_Init+0x204>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_GPIO_Init+0x204>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	f002 0203 	and.w	r2, r2, #3
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d2c:	4934      	ldr	r1, [pc, #208]	; (8000e00 <HAL_GPIO_Init+0x2e8>)
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d3a:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d5e:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d88:	4a23      	ldr	r2, [pc, #140]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ddc:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3301      	adds	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	f67f aea2 	bls.w	8000b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000df0:	bf00      	nop
 8000df2:	3724      	adds	r7, #36	; 0x24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40013c00 	.word	0x40013c00

08000e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e38:	f7ff fff0 	bl	8000e1c <HAL_RCC_GetHCLKFreq>
 8000e3c:	4601      	mov	r1, r0
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	0a9b      	lsrs	r3, r3, #10
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	08001d74 	.word	0x08001d74

08000e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e60:	f7ff ffdc 	bl	8000e1c <HAL_RCC_GetHCLKFreq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	0b5b      	lsrs	r3, r3, #13
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e72:	5cd3      	ldrb	r3, [r2, r3]
 8000e74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	08001d74 	.word	0x08001d74

08000e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e03f      	b.n	8000f16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d106      	bne.n	8000eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fbfa 	bl	80006a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2224      	movs	r2, #36	; 0x24
 8000eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fb97 	bl	80015fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	695a      	ldr	r2, [r3, #20]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68da      	ldr	r2, [r3, #12]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2220      	movs	r2, #32
 8000f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b088      	sub	sp, #32
 8000f22:	af02      	add	r7, sp, #8
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	f040 8083 	bne.w	8001046 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <HAL_UART_Transmit+0x2e>
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e07b      	b.n	8001048 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_UART_Transmit+0x40>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e074      	b.n	8001048 <HAL_UART_Transmit+0x12a>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2221      	movs	r2, #33	; 0x21
 8000f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000f74:	f7ff fc84 	bl	8000880 <HAL_GetTick>
 8000f78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	88fa      	ldrh	r2, [r7, #6]
 8000f84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8000f8e:	e042      	b.n	8001016 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	3b01      	subs	r3, #1
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fa6:	d122      	bne.n	8000fee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 f9b6 	bl	8001324 <UART_WaitOnFlagUntilTimeout>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e042      	b.n	8001048 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fd4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d103      	bne.n	8000fe6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	e017      	b.n	8001016 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	e013      	b.n	8001016 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 f993 	bl	8001324 <UART_WaitOnFlagUntilTimeout>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e01f      	b.n	8001048 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800101a:	b29b      	uxth	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1b7      	bne.n	8000f90 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2200      	movs	r2, #0
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 f97a 	bl	8001324 <UART_WaitOnFlagUntilTimeout>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e006      	b.n	8001048 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2220      	movs	r2, #32
 800103e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001046:	2302      	movs	r3, #2
  }
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4613      	mov	r3, r2
 800105c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b20      	cmp	r3, #32
 8001068:	d140      	bne.n	80010ec <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_UART_Receive_IT+0x26>
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e039      	b.n	80010ee <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_UART_Receive_IT+0x38>
 8001084:	2302      	movs	r3, #2
 8001086:	e032      	b.n	80010ee <HAL_UART_Receive_IT+0x9e>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2222      	movs	r2, #34	; 0x22
 80010ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010c6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0220 	orr.w	r2, r2, #32
 80010e6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	e000      	b.n	80010ee <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80010ec:	2302      	movs	r3, #2
  }
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10d      	bne.n	800114e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <HAL_UART_IRQHandler+0x52>
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	f003 0320 	and.w	r3, r3, #32
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f9d6 	bl	80014f8 <UART_Receive_IT>
      return;
 800114c:	e0d1      	b.n	80012f2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80b0 	beq.w	80012b6 <HAL_UART_IRQHandler+0x1ba>
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d105      	bne.n	800116c <HAL_UART_IRQHandler+0x70>
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80a5 	beq.w	80012b6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00a      	beq.n	800118c <HAL_UART_IRQHandler+0x90>
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <HAL_UART_IRQHandler+0xb0>
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a4:	f043 0202 	orr.w	r2, r3, #2
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00a      	beq.n	80011cc <HAL_UART_IRQHandler+0xd0>
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c4:	f043 0204 	orr.w	r2, r3, #4
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00f      	beq.n	80011f6 <HAL_UART_IRQHandler+0xfa>
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	f003 0320 	and.w	r3, r3, #32
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d104      	bne.n	80011ea <HAL_UART_IRQHandler+0xee>
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ee:	f043 0208 	orr.w	r2, r3, #8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d078      	beq.n	80012f0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <HAL_UART_IRQHandler+0x11c>
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f970 	bl	80014f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001222:	2b40      	cmp	r3, #64	; 0x40
 8001224:	bf0c      	ite	eq
 8001226:	2301      	moveq	r3, #1
 8001228:	2300      	movne	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_UART_IRQHandler+0x144>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d031      	beq.n	80012a4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f8b9 	bl	80013b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001250:	2b40      	cmp	r3, #64	; 0x40
 8001252:	d123      	bne.n	800129c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001262:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <HAL_UART_IRQHandler+0x1fc>)
 8001272:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fc2b 	bl	8000ad4 <HAL_DMA_Abort_IT>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d016      	beq.n	80012b2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800128e:	4610      	mov	r0, r2
 8001290:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001292:	e00e      	b.n	80012b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f83b 	bl	8001310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800129a:	e00a      	b.n	80012b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f837 	bl	8001310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012a2:	e006      	b.n	80012b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f833 	bl	8001310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80012b0:	e01e      	b.n	80012f0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012b2:	bf00      	nop
    return;
 80012b4:	e01c      	b.n	80012f0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <HAL_UART_IRQHandler+0x1d6>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f8a6 	bl	800141c <UART_Transmit_IT>
    return;
 80012d0:	e00f      	b.n	80012f2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00a      	beq.n	80012f2 <HAL_UART_IRQHandler+0x1f6>
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f8ee 	bl	80014c8 <UART_EndTransmit_IT>
    return;
 80012ec:	bf00      	nop
 80012ee:	e000      	b.n	80012f2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80012f0:	bf00      	nop
  }
}
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	080013f5 	.word	0x080013f5

080012fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	4613      	mov	r3, r2
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001334:	e02c      	b.n	8001390 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d028      	beq.n	8001390 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <UART_WaitOnFlagUntilTimeout+0x30>
 8001344:	f7ff fa9c 	bl	8000880 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	429a      	cmp	r2, r3
 8001352:	d21d      	bcs.n	8001390 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001362:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2220      	movs	r2, #32
 8001378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2220      	movs	r2, #32
 8001380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e00f      	b.n	80013b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4013      	ands	r3, r2
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	429a      	cmp	r2, r3
 800139e:	bf0c      	ite	eq
 80013a0:	2301      	moveq	r3, #1
 80013a2:	2300      	movne	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d0c3      	beq.n	8001336 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80013ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2220      	movs	r2, #32
 80013e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7ff ff7e 	bl	8001310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b21      	cmp	r3, #33	; 0x21
 800142e:	d144      	bne.n	80014ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001438:	d11a      	bne.n	8001470 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800144e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d105      	bne.n	8001464 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	1c9a      	adds	r2, r3, #2
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	621a      	str	r2, [r3, #32]
 8001462:	e00e      	b.n	8001482 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	621a      	str	r2, [r3, #32]
 800146e:	e008      	b.n	8001482 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	1c59      	adds	r1, r3, #1
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6211      	str	r1, [r2, #32]
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b01      	subs	r3, #1
 800148a:	b29b      	uxth	r3, r3
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4619      	mov	r1, r3
 8001490:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80014ba:	2302      	movs	r3, #2
  }
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff07 	bl	80012fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b22      	cmp	r3, #34	; 0x22
 800150a:	d171      	bne.n	80015f0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001514:	d123      	bne.n	800155e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10e      	bne.n	8001542 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	b29b      	uxth	r3, r3
 800152c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001530:	b29a      	uxth	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	1c9a      	adds	r2, r3, #2
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
 8001540:	e029      	b.n	8001596 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	b29b      	uxth	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	b29a      	uxth	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
 800155c:	e01b      	b.n	8001596 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10a      	bne.n	800157c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6858      	ldr	r0, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	1c59      	adds	r1, r3, #1
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6291      	str	r1, [r2, #40]	; 0x28
 8001576:	b2c2      	uxtb	r2, r0
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	e00c      	b.n	8001596 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	1c58      	adds	r0, r3, #1
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	6288      	str	r0, [r1, #40]	; 0x28
 800158e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800159a:	b29b      	uxth	r3, r3
 800159c:	3b01      	subs	r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4619      	mov	r1, r3
 80015a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d120      	bne.n	80015ec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0220 	bic.w	r2, r2, #32
 80015b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68da      	ldr	r2, [r3, #12]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0201 	bic.w	r2, r2, #1
 80015d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff f800 	bl	80005e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e002      	b.n	80015f2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e000      	b.n	80015f2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80015f0:	2302      	movs	r3, #2
  }
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	4313      	orrs	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800163e:	f023 030c 	bic.w	r3, r3, #12
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	68f9      	ldr	r1, [r7, #12]
 8001648:	430b      	orrs	r3, r1
 800164a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800166a:	f040 818b 	bne.w	8001984 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4ac1      	ldr	r2, [pc, #772]	; (8001978 <UART_SetConfig+0x37c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d005      	beq.n	8001684 <UART_SetConfig+0x88>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4abf      	ldr	r2, [pc, #764]	; (800197c <UART_SetConfig+0x380>)
 800167e:	4293      	cmp	r3, r2
 8001680:	f040 80bd 	bne.w	80017fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001684:	f7ff fbea 	bl	8000e5c <HAL_RCC_GetPCLK2Freq>
 8001688:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	461d      	mov	r5, r3
 800168e:	f04f 0600 	mov.w	r6, #0
 8001692:	46a8      	mov	r8, r5
 8001694:	46b1      	mov	r9, r6
 8001696:	eb18 0308 	adds.w	r3, r8, r8
 800169a:	eb49 0409 	adc.w	r4, r9, r9
 800169e:	4698      	mov	r8, r3
 80016a0:	46a1      	mov	r9, r4
 80016a2:	eb18 0805 	adds.w	r8, r8, r5
 80016a6:	eb49 0906 	adc.w	r9, r9, r6
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80016b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80016ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80016be:	4688      	mov	r8, r1
 80016c0:	4691      	mov	r9, r2
 80016c2:	eb18 0005 	adds.w	r0, r8, r5
 80016c6:	eb49 0106 	adc.w	r1, r9, r6
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	461d      	mov	r5, r3
 80016d0:	f04f 0600 	mov.w	r6, #0
 80016d4:	196b      	adds	r3, r5, r5
 80016d6:	eb46 0406 	adc.w	r4, r6, r6
 80016da:	461a      	mov	r2, r3
 80016dc:	4623      	mov	r3, r4
 80016de:	f7fe fd81 	bl	80001e4 <__aeabi_uldivmod>
 80016e2:	4603      	mov	r3, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	461a      	mov	r2, r3
 80016e8:	4ba5      	ldr	r3, [pc, #660]	; (8001980 <UART_SetConfig+0x384>)
 80016ea:	fba3 2302 	umull	r2, r3, r3, r2
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	461d      	mov	r5, r3
 80016f8:	f04f 0600 	mov.w	r6, #0
 80016fc:	46a9      	mov	r9, r5
 80016fe:	46b2      	mov	sl, r6
 8001700:	eb19 0309 	adds.w	r3, r9, r9
 8001704:	eb4a 040a 	adc.w	r4, sl, sl
 8001708:	4699      	mov	r9, r3
 800170a:	46a2      	mov	sl, r4
 800170c:	eb19 0905 	adds.w	r9, r9, r5
 8001710:	eb4a 0a06 	adc.w	sl, sl, r6
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001720:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001724:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001728:	4689      	mov	r9, r1
 800172a:	4692      	mov	sl, r2
 800172c:	eb19 0005 	adds.w	r0, r9, r5
 8001730:	eb4a 0106 	adc.w	r1, sl, r6
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	461d      	mov	r5, r3
 800173a:	f04f 0600 	mov.w	r6, #0
 800173e:	196b      	adds	r3, r5, r5
 8001740:	eb46 0406 	adc.w	r4, r6, r6
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	f7fe fd4c 	bl	80001e4 <__aeabi_uldivmod>
 800174c:	4603      	mov	r3, r0
 800174e:	460c      	mov	r4, r1
 8001750:	461a      	mov	r2, r3
 8001752:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <UART_SetConfig+0x384>)
 8001754:	fba3 1302 	umull	r1, r3, r3, r2
 8001758:	095b      	lsrs	r3, r3, #5
 800175a:	2164      	movs	r1, #100	; 0x64
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	3332      	adds	r3, #50	; 0x32
 8001766:	4a86      	ldr	r2, [pc, #536]	; (8001980 <UART_SetConfig+0x384>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	095b      	lsrs	r3, r3, #5
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001774:	4498      	add	r8, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	461d      	mov	r5, r3
 800177a:	f04f 0600 	mov.w	r6, #0
 800177e:	46a9      	mov	r9, r5
 8001780:	46b2      	mov	sl, r6
 8001782:	eb19 0309 	adds.w	r3, r9, r9
 8001786:	eb4a 040a 	adc.w	r4, sl, sl
 800178a:	4699      	mov	r9, r3
 800178c:	46a2      	mov	sl, r4
 800178e:	eb19 0905 	adds.w	r9, r9, r5
 8001792:	eb4a 0a06 	adc.w	sl, sl, r6
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80017a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80017aa:	4689      	mov	r9, r1
 80017ac:	4692      	mov	sl, r2
 80017ae:	eb19 0005 	adds.w	r0, r9, r5
 80017b2:	eb4a 0106 	adc.w	r1, sl, r6
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	461d      	mov	r5, r3
 80017bc:	f04f 0600 	mov.w	r6, #0
 80017c0:	196b      	adds	r3, r5, r5
 80017c2:	eb46 0406 	adc.w	r4, r6, r6
 80017c6:	461a      	mov	r2, r3
 80017c8:	4623      	mov	r3, r4
 80017ca:	f7fe fd0b 	bl	80001e4 <__aeabi_uldivmod>
 80017ce:	4603      	mov	r3, r0
 80017d0:	460c      	mov	r4, r1
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <UART_SetConfig+0x384>)
 80017d6:	fba3 1302 	umull	r1, r3, r3, r2
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2164      	movs	r1, #100	; 0x64
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	3332      	adds	r3, #50	; 0x32
 80017e8:	4a65      	ldr	r2, [pc, #404]	; (8001980 <UART_SetConfig+0x384>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	f003 0207 	and.w	r2, r3, #7
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4442      	add	r2, r8
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	e26f      	b.n	8001cde <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80017fe:	f7ff fb19 	bl	8000e34 <HAL_RCC_GetPCLK1Freq>
 8001802:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	461d      	mov	r5, r3
 8001808:	f04f 0600 	mov.w	r6, #0
 800180c:	46a8      	mov	r8, r5
 800180e:	46b1      	mov	r9, r6
 8001810:	eb18 0308 	adds.w	r3, r8, r8
 8001814:	eb49 0409 	adc.w	r4, r9, r9
 8001818:	4698      	mov	r8, r3
 800181a:	46a1      	mov	r9, r4
 800181c:	eb18 0805 	adds.w	r8, r8, r5
 8001820:	eb49 0906 	adc.w	r9, r9, r6
 8001824:	f04f 0100 	mov.w	r1, #0
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001830:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001834:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001838:	4688      	mov	r8, r1
 800183a:	4691      	mov	r9, r2
 800183c:	eb18 0005 	adds.w	r0, r8, r5
 8001840:	eb49 0106 	adc.w	r1, r9, r6
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	461d      	mov	r5, r3
 800184a:	f04f 0600 	mov.w	r6, #0
 800184e:	196b      	adds	r3, r5, r5
 8001850:	eb46 0406 	adc.w	r4, r6, r6
 8001854:	461a      	mov	r2, r3
 8001856:	4623      	mov	r3, r4
 8001858:	f7fe fcc4 	bl	80001e4 <__aeabi_uldivmod>
 800185c:	4603      	mov	r3, r0
 800185e:	460c      	mov	r4, r1
 8001860:	461a      	mov	r2, r3
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <UART_SetConfig+0x384>)
 8001864:	fba3 2302 	umull	r2, r3, r3, r2
 8001868:	095b      	lsrs	r3, r3, #5
 800186a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	461d      	mov	r5, r3
 8001872:	f04f 0600 	mov.w	r6, #0
 8001876:	46a9      	mov	r9, r5
 8001878:	46b2      	mov	sl, r6
 800187a:	eb19 0309 	adds.w	r3, r9, r9
 800187e:	eb4a 040a 	adc.w	r4, sl, sl
 8001882:	4699      	mov	r9, r3
 8001884:	46a2      	mov	sl, r4
 8001886:	eb19 0905 	adds.w	r9, r9, r5
 800188a:	eb4a 0a06 	adc.w	sl, sl, r6
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800189a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800189e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80018a2:	4689      	mov	r9, r1
 80018a4:	4692      	mov	sl, r2
 80018a6:	eb19 0005 	adds.w	r0, r9, r5
 80018aa:	eb4a 0106 	adc.w	r1, sl, r6
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	461d      	mov	r5, r3
 80018b4:	f04f 0600 	mov.w	r6, #0
 80018b8:	196b      	adds	r3, r5, r5
 80018ba:	eb46 0406 	adc.w	r4, r6, r6
 80018be:	461a      	mov	r2, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	f7fe fc8f 	bl	80001e4 <__aeabi_uldivmod>
 80018c6:	4603      	mov	r3, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <UART_SetConfig+0x384>)
 80018ce:	fba3 1302 	umull	r1, r3, r3, r2
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2164      	movs	r1, #100	; 0x64
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	3332      	adds	r3, #50	; 0x32
 80018e0:	4a27      	ldr	r2, [pc, #156]	; (8001980 <UART_SetConfig+0x384>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80018ee:	4498      	add	r8, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	461d      	mov	r5, r3
 80018f4:	f04f 0600 	mov.w	r6, #0
 80018f8:	46a9      	mov	r9, r5
 80018fa:	46b2      	mov	sl, r6
 80018fc:	eb19 0309 	adds.w	r3, r9, r9
 8001900:	eb4a 040a 	adc.w	r4, sl, sl
 8001904:	4699      	mov	r9, r3
 8001906:	46a2      	mov	sl, r4
 8001908:	eb19 0905 	adds.w	r9, r9, r5
 800190c:	eb4a 0a06 	adc.w	sl, sl, r6
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800191c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001920:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001924:	4689      	mov	r9, r1
 8001926:	4692      	mov	sl, r2
 8001928:	eb19 0005 	adds.w	r0, r9, r5
 800192c:	eb4a 0106 	adc.w	r1, sl, r6
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	461d      	mov	r5, r3
 8001936:	f04f 0600 	mov.w	r6, #0
 800193a:	196b      	adds	r3, r5, r5
 800193c:	eb46 0406 	adc.w	r4, r6, r6
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	f7fe fc4e 	bl	80001e4 <__aeabi_uldivmod>
 8001948:	4603      	mov	r3, r0
 800194a:	460c      	mov	r4, r1
 800194c:	461a      	mov	r2, r3
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <UART_SetConfig+0x384>)
 8001950:	fba3 1302 	umull	r1, r3, r3, r2
 8001954:	095b      	lsrs	r3, r3, #5
 8001956:	2164      	movs	r1, #100	; 0x64
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	3332      	adds	r3, #50	; 0x32
 8001962:	4a07      	ldr	r2, [pc, #28]	; (8001980 <UART_SetConfig+0x384>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	f003 0207 	and.w	r2, r3, #7
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4442      	add	r2, r8
 8001974:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001976:	e1b2      	b.n	8001cde <UART_SetConfig+0x6e2>
 8001978:	40011000 	.word	0x40011000
 800197c:	40011400 	.word	0x40011400
 8001980:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4ad7      	ldr	r2, [pc, #860]	; (8001ce8 <UART_SetConfig+0x6ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d005      	beq.n	800199a <UART_SetConfig+0x39e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4ad6      	ldr	r2, [pc, #856]	; (8001cec <UART_SetConfig+0x6f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	f040 80d1 	bne.w	8001b3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800199a:	f7ff fa5f 	bl	8000e5c <HAL_RCC_GetPCLK2Freq>
 800199e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	469a      	mov	sl, r3
 80019a4:	f04f 0b00 	mov.w	fp, #0
 80019a8:	46d0      	mov	r8, sl
 80019aa:	46d9      	mov	r9, fp
 80019ac:	eb18 0308 	adds.w	r3, r8, r8
 80019b0:	eb49 0409 	adc.w	r4, r9, r9
 80019b4:	4698      	mov	r8, r3
 80019b6:	46a1      	mov	r9, r4
 80019b8:	eb18 080a 	adds.w	r8, r8, sl
 80019bc:	eb49 090b 	adc.w	r9, r9, fp
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80019cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80019d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80019d4:	4688      	mov	r8, r1
 80019d6:	4691      	mov	r9, r2
 80019d8:	eb1a 0508 	adds.w	r5, sl, r8
 80019dc:	eb4b 0609 	adc.w	r6, fp, r9
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	f04f 0400 	mov.w	r4, #0
 80019f2:	0094      	lsls	r4, r2, #2
 80019f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80019f8:	008b      	lsls	r3, r1, #2
 80019fa:	461a      	mov	r2, r3
 80019fc:	4623      	mov	r3, r4
 80019fe:	4628      	mov	r0, r5
 8001a00:	4631      	mov	r1, r6
 8001a02:	f7fe fbef 	bl	80001e4 <__aeabi_uldivmod>
 8001a06:	4603      	mov	r3, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4bb8      	ldr	r3, [pc, #736]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	469b      	mov	fp, r3
 8001a1c:	f04f 0c00 	mov.w	ip, #0
 8001a20:	46d9      	mov	r9, fp
 8001a22:	46e2      	mov	sl, ip
 8001a24:	eb19 0309 	adds.w	r3, r9, r9
 8001a28:	eb4a 040a 	adc.w	r4, sl, sl
 8001a2c:	4699      	mov	r9, r3
 8001a2e:	46a2      	mov	sl, r4
 8001a30:	eb19 090b 	adds.w	r9, r9, fp
 8001a34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001a48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001a4c:	4689      	mov	r9, r1
 8001a4e:	4692      	mov	sl, r2
 8001a50:	eb1b 0509 	adds.w	r5, fp, r9
 8001a54:	eb4c 060a 	adc.w	r6, ip, sl
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	f04f 0400 	mov.w	r4, #0
 8001a6a:	0094      	lsls	r4, r2, #2
 8001a6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001a70:	008b      	lsls	r3, r1, #2
 8001a72:	461a      	mov	r2, r3
 8001a74:	4623      	mov	r3, r4
 8001a76:	4628      	mov	r0, r5
 8001a78:	4631      	mov	r1, r6
 8001a7a:	f7fe fbb3 	bl	80001e4 <__aeabi_uldivmod>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	460c      	mov	r4, r1
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b9a      	ldr	r3, [pc, #616]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001a86:	fba3 1302 	umull	r1, r3, r3, r2
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2164      	movs	r1, #100	; 0x64
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	3332      	adds	r3, #50	; 0x32
 8001a98:	4a95      	ldr	r2, [pc, #596]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa4:	4498      	add	r8, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	469b      	mov	fp, r3
 8001aaa:	f04f 0c00 	mov.w	ip, #0
 8001aae:	46d9      	mov	r9, fp
 8001ab0:	46e2      	mov	sl, ip
 8001ab2:	eb19 0309 	adds.w	r3, r9, r9
 8001ab6:	eb4a 040a 	adc.w	r4, sl, sl
 8001aba:	4699      	mov	r9, r3
 8001abc:	46a2      	mov	sl, r4
 8001abe:	eb19 090b 	adds.w	r9, r9, fp
 8001ac2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001ac6:	f04f 0100 	mov.w	r1, #0
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ad2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ad6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ada:	4689      	mov	r9, r1
 8001adc:	4692      	mov	sl, r2
 8001ade:	eb1b 0509 	adds.w	r5, fp, r9
 8001ae2:	eb4c 060a 	adc.w	r6, ip, sl
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	f04f 0400 	mov.w	r4, #0
 8001af8:	0094      	lsls	r4, r2, #2
 8001afa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001afe:	008b      	lsls	r3, r1, #2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	4628      	mov	r0, r5
 8001b06:	4631      	mov	r1, r6
 8001b08:	f7fe fb6c 	bl	80001e4 <__aeabi_uldivmod>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b77      	ldr	r3, [pc, #476]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001b14:	fba3 1302 	umull	r1, r3, r3, r2
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	2164      	movs	r1, #100	; 0x64
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	3332      	adds	r3, #50	; 0x32
 8001b26:	4a72      	ldr	r2, [pc, #456]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	f003 020f 	and.w	r2, r3, #15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4442      	add	r2, r8
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	e0d0      	b.n	8001cde <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b3c:	f7ff f97a 	bl	8000e34 <HAL_RCC_GetPCLK1Freq>
 8001b40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	469a      	mov	sl, r3
 8001b46:	f04f 0b00 	mov.w	fp, #0
 8001b4a:	46d0      	mov	r8, sl
 8001b4c:	46d9      	mov	r9, fp
 8001b4e:	eb18 0308 	adds.w	r3, r8, r8
 8001b52:	eb49 0409 	adc.w	r4, r9, r9
 8001b56:	4698      	mov	r8, r3
 8001b58:	46a1      	mov	r9, r4
 8001b5a:	eb18 080a 	adds.w	r8, r8, sl
 8001b5e:	eb49 090b 	adc.w	r9, r9, fp
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001b6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001b72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001b76:	4688      	mov	r8, r1
 8001b78:	4691      	mov	r9, r2
 8001b7a:	eb1a 0508 	adds.w	r5, sl, r8
 8001b7e:	eb4b 0609 	adc.w	r6, fp, r9
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	f04f 0400 	mov.w	r4, #0
 8001b94:	0094      	lsls	r4, r2, #2
 8001b96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001b9a:	008b      	lsls	r3, r1, #2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4623      	mov	r3, r4
 8001ba0:	4628      	mov	r0, r5
 8001ba2:	4631      	mov	r1, r6
 8001ba4:	f7fe fb1e 	bl	80001e4 <__aeabi_uldivmod>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	460c      	mov	r4, r1
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	469b      	mov	fp, r3
 8001bbe:	f04f 0c00 	mov.w	ip, #0
 8001bc2:	46d9      	mov	r9, fp
 8001bc4:	46e2      	mov	sl, ip
 8001bc6:	eb19 0309 	adds.w	r3, r9, r9
 8001bca:	eb4a 040a 	adc.w	r4, sl, sl
 8001bce:	4699      	mov	r9, r3
 8001bd0:	46a2      	mov	sl, r4
 8001bd2:	eb19 090b 	adds.w	r9, r9, fp
 8001bd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001be6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001bea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001bee:	4689      	mov	r9, r1
 8001bf0:	4692      	mov	sl, r2
 8001bf2:	eb1b 0509 	adds.w	r5, fp, r9
 8001bf6:	eb4c 060a 	adc.w	r6, ip, sl
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	f04f 0400 	mov.w	r4, #0
 8001c0c:	0094      	lsls	r4, r2, #2
 8001c0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001c12:	008b      	lsls	r3, r1, #2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	4628      	mov	r0, r5
 8001c1a:	4631      	mov	r1, r6
 8001c1c:	f7fe fae2 	bl	80001e4 <__aeabi_uldivmod>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001c28:	fba3 1302 	umull	r1, r3, r3, r2
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	2164      	movs	r1, #100	; 0x64
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	3332      	adds	r3, #50	; 0x32
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c46:	4498      	add	r8, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	469b      	mov	fp, r3
 8001c4c:	f04f 0c00 	mov.w	ip, #0
 8001c50:	46d9      	mov	r9, fp
 8001c52:	46e2      	mov	sl, ip
 8001c54:	eb19 0309 	adds.w	r3, r9, r9
 8001c58:	eb4a 040a 	adc.w	r4, sl, sl
 8001c5c:	4699      	mov	r9, r3
 8001c5e:	46a2      	mov	sl, r4
 8001c60:	eb19 090b 	adds.w	r9, r9, fp
 8001c64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001c68:	f04f 0100 	mov.w	r1, #0
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001c78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001c7c:	4689      	mov	r9, r1
 8001c7e:	4692      	mov	sl, r2
 8001c80:	eb1b 0509 	adds.w	r5, fp, r9
 8001c84:	eb4c 060a 	adc.w	r6, ip, sl
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	f04f 0400 	mov.w	r4, #0
 8001c9a:	0094      	lsls	r4, r2, #2
 8001c9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001ca0:	008b      	lsls	r3, r1, #2
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	4631      	mov	r1, r6
 8001caa:	f7fe fa9b 	bl	80001e4 <__aeabi_uldivmod>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2164      	movs	r1, #100	; 0x64
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	3332      	adds	r3, #50	; 0x32
 8001cc8:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <UART_SetConfig+0x6f4>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	f003 020f 	and.w	r2, r3, #15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4442      	add	r2, r8
 8001cda:	609a      	str	r2, [r3, #8]
}
 8001cdc:	e7ff      	b.n	8001cde <UART_SetConfig+0x6e2>
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	40011400 	.word	0x40011400
 8001cf0:	51eb851f 	.word	0x51eb851f

08001cf4 <__libc_init_array>:
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	4e0d      	ldr	r6, [pc, #52]	; (8001d2c <__libc_init_array+0x38>)
 8001cf8:	4c0d      	ldr	r4, [pc, #52]	; (8001d30 <__libc_init_array+0x3c>)
 8001cfa:	1ba4      	subs	r4, r4, r6
 8001cfc:	10a4      	asrs	r4, r4, #2
 8001cfe:	2500      	movs	r5, #0
 8001d00:	42a5      	cmp	r5, r4
 8001d02:	d109      	bne.n	8001d18 <__libc_init_array+0x24>
 8001d04:	4e0b      	ldr	r6, [pc, #44]	; (8001d34 <__libc_init_array+0x40>)
 8001d06:	4c0c      	ldr	r4, [pc, #48]	; (8001d38 <__libc_init_array+0x44>)
 8001d08:	f000 f818 	bl	8001d3c <_init>
 8001d0c:	1ba4      	subs	r4, r4, r6
 8001d0e:	10a4      	asrs	r4, r4, #2
 8001d10:	2500      	movs	r5, #0
 8001d12:	42a5      	cmp	r5, r4
 8001d14:	d105      	bne.n	8001d22 <__libc_init_array+0x2e>
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
 8001d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d1c:	4798      	blx	r3
 8001d1e:	3501      	adds	r5, #1
 8001d20:	e7ee      	b.n	8001d00 <__libc_init_array+0xc>
 8001d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d26:	4798      	blx	r3
 8001d28:	3501      	adds	r5, #1
 8001d2a:	e7f2      	b.n	8001d12 <__libc_init_array+0x1e>
 8001d2c:	08001d84 	.word	0x08001d84
 8001d30:	08001d84 	.word	0x08001d84
 8001d34:	08001d84 	.word	0x08001d84
 8001d38:	08001d88 	.word	0x08001d88

08001d3c <_init>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	bf00      	nop
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr

08001d48 <_fini>:
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	bf00      	nop
 8001d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4e:	bc08      	pop	{r3}
 8001d50:	469e      	mov	lr, r3
 8001d52:	4770      	bx	lr
